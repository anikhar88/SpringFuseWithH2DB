commit 911e1541942d1a2a38934e1fa76eca1f3b573108
Author: anikhar88 <anikhar88@gmail.com>
Date:   Sun May 10 22:18:23 2015 +0530

    first commit of SpringFuse project with H2 database

diff --git a/.project b/.project
new file mode 100644
index 0000000..873d2f5
--- /dev/null
+++ b/.project
@@ -0,0 +1,23 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<projectDescription>
+	<name>h2project</name>
+	<comment></comment>
+	<projects>
+	</projects>
+	<buildSpec>
+		<buildCommand>
+			<name>org.eclipse.wst.common.project.facet.core.builder</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
+		<buildCommand>
+			<name>org.eclipse.m2e.core.maven2Builder</name>
+			<arguments>
+			</arguments>
+		</buildCommand>
+	</buildSpec>
+	<natures>
+		<nature>org.eclipse.m2e.core.maven2Nature</nature>
+		<nature>org.eclipse.wst.common.project.facet.core.nature</nature>
+	</natures>
+</projectDescription>
diff --git a/.settings/org.eclipse.core.resources.prefs b/.settings/org.eclipse.core.resources.prefs
new file mode 100644
index 0000000..99f26c0
--- /dev/null
+++ b/.settings/org.eclipse.core.resources.prefs
@@ -0,0 +1,2 @@
+eclipse.preferences.version=1
+encoding/<project>=UTF-8
diff --git a/.settings/org.eclipse.m2e.core.prefs b/.settings/org.eclipse.m2e.core.prefs
new file mode 100644
index 0000000..f897a7f
--- /dev/null
+++ b/.settings/org.eclipse.m2e.core.prefs
@@ -0,0 +1,4 @@
+activeProfiles=
+eclipse.preferences.version=1
+resolveWorkspaceProjects=true
+version=1
diff --git a/pom.xml b/pom.xml
new file mode 100644
index 0000000..2ee3bde
--- /dev/null
+++ b/pom.xml
@@ -0,0 +1,1245 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!--
+ ! (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ ! Source code generated by Celerio, a Jaxio product
+ ! Want to purchase Celerio ? email us at info@jaxio.com
+ ! Follow us on twitter: @springfuse
+ ! Documentation: http://www.jaxio.com/documentation/celerio/
+ ! Template pack-jsf2-spring-conversation:bootstrap/pom.boot.vm.xml
+-->
+<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
+	<modelVersion>4.0.0</modelVersion>
+	<groupId>com.h2.demo</groupId>
+	<artifactId>h2project</artifactId>
+	<packaging>war</packaging>
+	<version>1.0.0-SNAPSHOT</version>
+	<name>h2project</name>
+	<properties>
+		<!-- ~~~~~~~~ -->
+		<!-- Database -->
+		<!-- ~~~~~~~~ -->
+		<!-- Note: during development using the same value for your login, password, database name and project name is really convenient -->
+		<database.name>${project.name}</database.name>
+		<database.host>localhost</database.host>
+		<database.user>${project.name}</database.user>
+		<database.password>${project.name}</database.password>
+		<!-- Default values when no database profile is set -->
+		<!-- jdbc driver dependency -->
+		<jdbc.groupId>com.h2database</jdbc.groupId>
+		<jdbc.artifactId>h2</jdbc.artifactId>
+		<jdbc.version>1.3.172</jdbc.version>
+
+		<!-- jdbc settings -->
+		<jdbc.type>h2</jdbc.type>
+		<jdbc.driver>org.h2.Driver</jdbc.driver>
+		<jdbc.url>jdbc:h2:~/test</jdbc.url>
+		<jdbc.user>sa</jdbc.user>
+		<jdbc.password></jdbc.password>
+		<hibernate.dialect>org.hibernate.dialect.H2Dialect</hibernate.dialect>
+		<sql-maven-plugin.delimiter>;</sql-maven-plugin.delimiter>
+		<!-- ~~~~~~ -->
+		<!-- System -->
+		<!-- ~~~~~~ -->
+		<jdk.version>1.6</jdk.version>
+		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
+		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
+		<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
+		<!-- Version dependencies when used in multiple dependencies -->
+		<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
+		<maven-celerio-plugin.outputDir>${project.basedir}</maven-celerio-plugin.outputDir>
+		<maven-celerio-plugin.version>3.0.109</maven-celerio-plugin.version>
+		<hibernate.version>4.2.6.Final</hibernate.version>
+		<spring.version>3.2.4.RELEASE</spring.version>
+		<spring-security.version>3.1.4.RELEASE</spring-security.version>
+		<jsf-api.version>2.1.24</jsf-api.version>
+		<primefaces.version>4.0</primefaces.version>
+		<primefaces-themes.version>1.0.10</primefaces-themes.version>
+		<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
+		<!-- Variables substituted in resources file at build time -->
+		<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
+		<application.name>${project.name}</application.name>
+		<application.version>${project.version}</application.version>
+		<application.description>${project.description}</application.description>
+		<!-- host port where the application will be deployed -->
+		<application.host>localhost</application.host>
+		<application.port>8080</application.port>
+		<application.contextpath>/h2project</application.contextpath>
+		<!-- logs -->
+		<log.target>${project.build.directory}/logs</log.target>
+		<log.level>DEBUG</log.level>
+		<log.sql.queries.level>DEBUG</log.sql.queries.level>
+		<!-- hibernate, see by src/main/resource/hibernate.properties -->
+		<hibernate.show.sql>true</hibernate.show.sql>
+		<hibernate.format.sql>true</hibernate.format.sql>
+		<hibernate.generate_statistics>true</hibernate.generate_statistics>
+		<hibernate.use_sql_comments>true</hibernate.use_sql_comments>
+		<hibernate.ehcache.configuration.file>ehcache.xml</hibernate.ehcache.configuration.file>
+		<hibernate.use.second.level.cache>true</hibernate.use.second.level.cache>
+		<hibernate.use.query.cache>true</hibernate.use.query.cache>
+		<!-- ~~~~~ -->
+		<!-- Sonar -->
+		<!-- ~~~~~ -->
+		<!-- force sonar to use jacoco -->
+		<sonar.java.coveragePlugin>jacoco</sonar.java.coveragePlugin>
+		<!-- property checked by sonar to locate jacoco UT/IT reports -->
+		<sonar.jacoco.reportPath>${project.build.directory}/jacoco-test.exec</sonar.jacoco.reportPath>
+		<sonar.jacoco.itReportPath>${project.build.directory}/jacoco-it.exec</sonar.jacoco.itReportPath>
+		<!-- tell sonar to reuse existing reports -->
+		<!-- When using multi-modules, move this property to root package -->
+		<sonar.dynamicAnalysis>reuseReports</sonar.dynamicAnalysis>
+	</properties>
+	<developers>
+		<developer>
+			<name>SpringFuse</name>
+			<email>info@springfuse.com</email>
+			<organization>Springfuse</organization>
+			<organizationUrl>http://www.springfuse.com</organizationUrl>
+		</developer>
+	</developers>
+	<profiles>
+		<profile>
+			<id>postgresql</id>
+			<properties>
+				<!-- jdbc driver dependency -->
+				<jdbc.groupId>postgresql</jdbc.groupId>
+				<jdbc.artifactId>postgresql</jdbc.artifactId>
+				<jdbc.version>8.2-504.jdbc3</jdbc.version>
+				<!-- jdbc settings -->
+				<jdbc.type>postgresql</jdbc.type>
+				<jdbc.driver>org.postgresql.Driver</jdbc.driver>
+				<jdbc.url>jdbc:postgresql://${database.host}/${database.name}</jdbc.url>
+				<jdbc.user>${database.user}</jdbc.user>
+				<jdbc.password>${database.password}</jdbc.password>
+				<!-- hibernate -->
+				<hibernate.dialect>org.hibernate.dialect.PostgreSQLDialect</hibernate.dialect>
+			</properties>
+		</profile>
+		<profile>
+			<id>oracle</id>
+			<properties>
+				<!-- jdbc driver dependency -->
+				<!-- Please deploy this driver in your local maven repository -->
+				<jdbc.groupId>com.oracle</jdbc.groupId>
+				<jdbc.artifactId>ojdbc14</jdbc.artifactId>
+				<jdbc.version>10.2.0.3</jdbc.version>
+				<!-- jdbc settings -->
+				<jdbc.type>oracle</jdbc.type>
+				<jdbc.driver>oracle.jdbc.driver.OracleDriver</jdbc.driver>
+				<jdbc.url>jdbc:oracle:thin:@${database.host}:1521:XE</jdbc.url>
+				<jdbc.catalog>${database.name}</jdbc.catalog>
+				<jdbc.user>${database.user}</jdbc.user>
+				<jdbc.password>${database.password}</jdbc.password>
+				<!-- hibernate -->
+				<hibernate.dialect>org.hibernate.dialect.Oracle10gDialect</hibernate.dialect>
+				<!-- misc -->
+				<sql-maven-plugin.delimiter>;</sql-maven-plugin.delimiter>
+			</properties>
+		</profile>
+		<profile>
+			<id>db2</id>
+			<properties>
+				<!-- jdbc driver dependency -->
+				<!-- Please deploy this driver in your local maven repository -->
+				<jdbc.groupId>com.ibm.db2</jdbc.groupId>
+				<jdbc.artifactId>db2jcc4</jdbc.artifactId>
+				<jdbc.version>9.7.0.4</jdbc.version>
+				<!-- jdbc settings -->
+				<jdbc.type>db2</jdbc.type>
+				<jdbc.driver>com.ibm.db2.jcc.DB2Driver</jdbc.driver>
+				<jdbc.url>jdbc:db2://${database.host}:50000/${database.name}</jdbc.url>
+				<jdbc.user>${database.user}</jdbc.user>
+				<jdbc.password>${database.password}</jdbc.password>
+				<!-- hibernate -->
+				<hibernate.dialect>org.hibernate.dialect.DB2Dialect</hibernate.dialect>
+				<!-- misc -->
+				<sql-maven-plugin.delimiter>;</sql-maven-plugin.delimiter>
+			</properties>
+			<dependencies>
+				<!-- db2 License dependency -->
+				<dependency>
+					<groupId>com.ibm.db2</groupId>
+					<artifactId>db2jcc_license_cu</artifactId>
+					<version>9.7.0.4</version>
+				</dependency>
+			</dependencies>
+		</profile>
+		<profile>
+			<id>mysql</id>
+			<properties>
+				<!-- jdbc driver dependency -->
+				<jdbc.groupId>mysql</jdbc.groupId>
+				<jdbc.artifactId>mysql-connector-java</jdbc.artifactId>
+				<jdbc.version>5.1.25</jdbc.version>
+				<!-- jdbc settings -->
+				<jdbc.type>mysql</jdbc.type>
+				<jdbc.driver>com.mysql.jdbc.Driver</jdbc.driver>
+				<!-- see http://dev.mysql.com/doc/refman/5.0/en/connector-j-reference-configuration-properties.html -->
+				<jdbc.url>jdbc:mysql://${database.host}/${database.name}?zeroDateTimeBehavior=convertToNull</jdbc.url>
+				<jdbc.catalog>${database.name}</jdbc.catalog>
+				<jdbc.user>${database.user}</jdbc.user>
+				<jdbc.password>${database.password}</jdbc.password>
+				<!-- hibernate -->
+				<hibernate.dialect>org.hibernate.dialect.MySQLInnoDBDialect</hibernate.dialect>
+			</properties>
+		</profile>
+		<profile>
+			<id>hsql</id>
+			<properties>
+				<!-- jdbc driver dependency -->
+				<jdbc.groupId>org.hsqldb</jdbc.groupId>
+				<jdbc.artifactId>hsqldb</jdbc.artifactId>
+				<jdbc.version>2.2.9</jdbc.version>
+				<!-- jdbc settings -->
+				<jdbc.type>hsqldb</jdbc.type>
+				<jdbc.driver>org.hsqldb.jdbcDriver</jdbc.driver>
+				<jdbc.url>jdbc:hsqldb:file:${database.name}</jdbc.url>
+				<jdbc.user>${database.user}</jdbc.user>
+				<jdbc.password>${database.password}</jdbc.password>
+				<!-- hibernate -->
+				<hibernate.dialect>org.hibernate.dialect.HSQLDialect</hibernate.dialect>
+			</properties>
+		</profile>
+		<profile>
+			<id>h2</id>
+			<properties>
+				<!-- jdbc driver dependency -->
+				<jdbc.groupId>com.h2database</jdbc.groupId>
+				<jdbc.artifactId>h2</jdbc.artifactId>
+				<jdbc.version>1.3.171</jdbc.version>
+				<!-- jdbc settings -->
+				<jdbc.type>h2</jdbc.type>
+				<jdbc.driver>org.h2.Driver</jdbc.driver>
+				<jdbc.url>jdbc:h2:~/.h2/${database.name};MVCC=TRUE;FILE_LOCK=NO</jdbc.url>
+				<jdbc.user>${database.user}</jdbc.user>
+				<jdbc.password>${database.password}</jdbc.password>
+				<!-- hibernate -->
+				<hibernate.dialect>org.hibernate.dialect.H2Dialect</hibernate.dialect>
+			</properties>
+		</profile>
+		<profile>
+			<id>derby</id>
+			<properties>
+				<!-- jdbc driver dependency -->
+				<jdbc.groupId>org.apache.derby</jdbc.groupId>
+				<jdbc.artifactId>derby</jdbc.artifactId>
+				<jdbc.version>10.10.1.1</jdbc.version>
+				<!-- jdbc settings -->
+				<jdbc.type>derby</jdbc.type>
+				<jdbc.driver>org.apache.derby.jdbc.EmbeddedDriver</jdbc.driver>
+				<jdbc.url>jdbc:derby:${database.name};create=true</jdbc.url>
+				<jdbc.user>${database.user}</jdbc.user>
+				<jdbc.password>${database.password}</jdbc.password>
+				<!-- hibernate -->
+				<hibernate.dialect>org.hibernate.dialect.DerbyTenSevenDialect</hibernate.dialect>
+				<!-- misc -->
+				<sql-maven-plugin.delimiter>;</sql-maven-plugin.delimiter>
+			</properties>
+		</profile>
+		<profile>
+			<!-- ~~~~~~~~~~~~~~~~~~~ -->
+			<!-- Disable debug modes -->
+			<!-- ~~~~~~~~~~~~~~~~~~~ -->
+			<id>perf</id>
+			<properties>
+				<hibernate.show.sql>false</hibernate.show.sql>
+				<hibernate.format.sql>false</hibernate.format.sql>
+				<hibernate.use_sql_comments>false</hibernate.use_sql_comments>
+				<hibernate.generate_statistics>false</hibernate.generate_statistics>
+				<log.level>WARN</log.level>
+				<log.sql.queries.level>WARN</log.sql.queries.level>
+			</properties>
+		</profile>
+		<!--  convenient profile to drop/create a db user (e.g. Oracle) -->
+		<profile>
+			<id>create-db-user</id>
+			<build>
+				<plugins>
+					<!-- Execute the scripts -->
+					<plugin>
+						<groupId>org.codehaus.mojo</groupId>
+						<artifactId>sql-maven-plugin</artifactId>
+						<version>1.5</version>
+							<executions>
+								<execution>
+									<id>create-oracle-user</id>
+									<phase>validate</phase>
+									<configuration>
+										<driver>${jdbc.driver}</driver>
+										<url>${jdbc.url}</url>
+										<username>system</username>
+										<password>manager</password>
+										<autocommit>true</autocommit>
+										<sqlCommand><![CDATA[
+DROP USER ${database.user} CASCADE;
+CREATE USER ${database.user} IDENTIFIED BY ${database.password};
+GRANT CONNECT, RESOURCE TO ${database.user};
+ ]]>
+										</sqlCommand>
+										<print>true</print>
+										<printResultSet>true</printResultSet>
+										<onError>continue</onError>
+									</configuration>
+									<goals>
+										<goal>execute</goal>
+									</goals>
+								</execution>
+							</executions>
+							<dependencies>
+								<dependency>
+									<groupId>${jdbc.groupId}</groupId>
+									<artifactId>${jdbc.artifactId}</artifactId>
+									<version>${jdbc.version}</version>
+							</dependency>
+						</dependencies>
+					</plugin>
+				</plugins>
+			</build>
+		</profile>
+		<profile>
+			<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
+			<!-- Drop and recreate the database -->
+			<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
+			<id>db</id>
+			<build>
+				<defaultGoal>initialize</defaultGoal>
+				<plugins>
+					<plugin>
+						<!-- http://mojo.codehaus.org/sql-maven-plugin/ -->
+						<groupId>org.codehaus.mojo</groupId>
+						<artifactId>sql-maven-plugin</artifactId>
+						<version>1.5</version>
+						<executions>
+							<execution>
+								<id>Create and initialize the database</id>
+								<phase>initialize</phase>
+								<configuration>
+									<driver>${jdbc.driver}</driver>
+									<url>${jdbc.url}</url>
+									<username>${jdbc.user}</username>
+									<password>${jdbc.password}</password>
+									<autocommit>true</autocommit>
+									<encoding>UTF-8</encoding>
+									<print>true</print>
+									<printResultSet>true</printResultSet>
+									<onError>continue</onError>
+									<delimiter>${sql-maven-plugin.delimiter}</delimiter>
+									<orderFile>ascending</orderFile>
+									<fileset>
+										<basedir>${project.basedir}</basedir>
+										<includes>
+											<include>src/main/sql/${jdbc.type}/*.sql</include>
+										</includes>
+									</fileset>
+								</configuration>
+								<goals>
+									<goal>execute</goal>
+								</goals>
+							</execution>
+						</executions>
+						<dependencies>
+							<dependency>
+								<groupId>${jdbc.groupId}</groupId>
+								<artifactId>${jdbc.artifactId}</artifactId>
+								<version>${jdbc.version}</version>
+							</dependency>
+						</dependencies>
+					</plugin>
+				</plugins>
+			</build>
+		</profile>
+		<!-- Profiles below are used when Celerio Maven Plugin is present in the build process -->
+		<profile>
+			<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
+			<!-- Extract the database metadata -->
+			<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
+			<id>metadata</id>
+			<build>
+				<defaultGoal>generate-sources</defaultGoal>
+				<plugins>
+					<plugin>
+						<groupId>com.jaxio.celerio</groupId>
+						<artifactId>maven-dbmetadata-plugin</artifactId>
+						<version>${maven-celerio-plugin.version}</version>
+						<executions>
+							<execution>
+								<id>Extract the database schema.</id>
+								<goals>
+									<goal>extract-metadata</goal>
+								</goals>
+							</execution>
+						</executions>
+						<dependencies>
+							<dependency>
+								<groupId>${jdbc.groupId}</groupId>
+								<artifactId>${jdbc.artifactId}</artifactId>
+								<version>${jdbc.version}</version>
+							</dependency>
+						</dependencies>
+					</plugin>
+				</plugins>
+			</build>
+			<repositories>
+				<repository>
+					<id>springfuse-repository</id>
+					<url>http://maven2.springfuse.com/</url>
+				</repository>
+			</repositories>
+			<pluginRepositories>
+				<pluginRepository>
+					<id>springfuse-repository</id>
+					<url>http://maven2.springfuse.com/</url>
+				</pluginRepository>
+			</pluginRepositories>
+		</profile>
+		<profile>
+			<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
+			<!-- Generate the code using Celerio -->
+			<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
+			<id>gen</id>
+			<build>
+				<defaultGoal>generate-sources</defaultGoal>
+				<plugins>
+					<plugin>
+						<groupId>com.jaxio.celerio</groupId>
+						<artifactId>maven-celerio-plugin</artifactId>
+						<version>${maven-celerio-plugin.version}</version>
+						<executions>
+							<execution>
+								<id>Generates files using the extracted database schema.</id>
+								<goals>
+									<goal>generate</goal>
+								</goals>
+							</execution>
+						</executions>
+						<dependencies>
+							<dependency>
+								<groupId>com.jaxio.celerio.packs</groupId>
+								<artifactId>backend-jpa</artifactId>
+								<version>${maven-celerio-plugin.version}</version>
+							</dependency>
+							<dependency>
+								<groupId>com.jaxio.celerio.packs</groupId>
+								<artifactId>jsf2-spring-conversation</artifactId>
+								<version>${maven-celerio-plugin.version}</version>
+							</dependency>
+							<dependency>
+								<groupId>com.jaxio.celerio.packs</groupId>
+								<artifactId>selenium-primefaces</artifactId>
+								<version>${maven-celerio-plugin.version}</version>
+							</dependency>
+						</dependencies>
+					</plugin>
+				</plugins>
+			</build>
+			<repositories>
+				<repository>
+					<id>springfuse-repository</id>
+					<url>http://maven2.springfuse.com/</url>
+				</repository>
+			</repositories>
+			<pluginRepositories>
+				<pluginRepository>
+					<id>springfuse-repository</id>
+					<url>http://maven2.springfuse.com/</url>
+				</pluginRepository>
+			</pluginRepositories>
+		</profile>
+		<profile>
+			<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
+			<!-- Delete code generated by Celerio -->
+			<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
+			<id>cleanGen</id>
+			<build>
+				<plugins>
+					<plugin>
+						<groupId>com.jaxio.celerio</groupId>
+						<artifactId>maven-celerio-plugin</artifactId>
+						<version>${maven-celerio-plugin.version}</version>
+						<executions>
+							<execution>
+								<id>Delete previously generated files (use .celerio/ folder)</id>
+								<goals>
+									<goal>cleanGenerated</goal>
+								</goals>
+							</execution>
+						</executions>
+					</plugin>
+				</plugins>
+			</build>
+			<repositories>
+				<repository>
+					<id>springfuse-repository</id>
+					<url>http://maven2.springfuse.com/</url>
+				</repository>
+			</repositories>
+			<pluginRepositories>
+				<pluginRepository>
+					<id>springfuse-repository</id>
+					<url>http://maven2.springfuse.com/</url>
+				</pluginRepository>
+			</pluginRepositories>
+		</profile>
+	</profiles>
+	<!-- ~~~~~~~~~~~~ -->
+	<!-- DEPENDENCIES -->
+	<!-- ~~~~~~~~~~~~ -->
+	<dependencies>
+		<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
+		<!-- List your specific dependencies below -->
+		<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
+
+		<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
+		<!-- Dependencies needed by the generated project -->
+		<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
+		<!-- START Added By Ankush  -->
+		<dependency>
+			<groupId>javax.transaction</groupId>
+			<artifactId>jta</artifactId>
+			<version>1.1</version>
+		</dependency>
+		<dependency>
+			<groupId>org.javassist</groupId>
+			<artifactId>javassist</artifactId>
+			<version>3.17.1-GA</version>
+		</dependency>
+		<dependency>
+			<groupId>antlr</groupId>
+			<artifactId>antlr</artifactId>
+			<version>2.7.7</version>
+		</dependency>
+		<!-- END -->
+		
+		<dependency>
+			<groupId>joda-time</groupId>
+			<artifactId>joda-time</artifactId>
+			<version>2.3</version>
+		</dependency>
+		<dependency>
+			<groupId>org.jadira.usertype</groupId>
+			<artifactId>usertype.core</artifactId>
+			<version>3.0.0.GA</version>
+		</dependency>
+		<!-- ~~~~~~~~~~~ -->
+		<!-- PERSISTENCE -->
+		<!-- ~~~~~~~~~~~ -->
+		<dependency>
+			<groupId>org.hibernate.javax.persistence</groupId>
+			<artifactId>hibernate-jpa-2.0-api</artifactId>
+			<version>1.0.1.Final</version>
+		</dependency>
+		<dependency>
+			<groupId>org.hibernate</groupId>
+			<artifactId>hibernate-core</artifactId>
+			<version>${hibernate.version}</version>
+		</dependency>
+		<dependency>
+			<groupId>org.hibernate</groupId>
+			<artifactId>hibernate-ehcache</artifactId>
+			<version>${hibernate.version}</version>
+		</dependency>
+		<dependency>
+			<groupId>org.hibernate</groupId>
+			<artifactId>hibernate-entitymanager</artifactId>
+			<version>${hibernate.version}</version>
+		</dependency>
+		<dependency>
+			<groupId>cglib</groupId>
+			<artifactId>cglib</artifactId>
+			<version>2.2.2</version>
+			<scope>runtime</scope>
+		</dependency>
+		<dependency>
+			<groupId>org.apache.tomcat</groupId>
+			<artifactId>tomcat-jdbc</artifactId>
+			<version>7.0.42</version>
+		</dependency>
+		<dependency>
+			<!-- jdbc driver depends on the database profile used -->
+			<groupId>${jdbc.groupId}</groupId>
+			<artifactId>${jdbc.artifactId}</artifactId>
+			<version>${jdbc.version}</version>
+		</dependency>
+		<!-- ~~~~~~~~~~~~~~~~ -->
+		<!-- HIBERNATE SEARCH -->
+		<!-- ~~~~~~~~~~~~~~~~ -->
+		<dependency>
+			<groupId>org.hibernate</groupId>
+			<artifactId>hibernate-search</artifactId>
+			<version>4.3.0.Final</version>
+			<exclusions>
+				<exclusion>
+					<artifactId>lucene-kuromoji</artifactId>
+					<groupId>org.apache.lucene</groupId>
+				</exclusion>
+			</exclusions>
+		</dependency>
+		<dependency>
+			<groupId>org.apache.tika</groupId>
+			<artifactId>tika-parsers</artifactId>
+			<version>1.4</version>
+			<exclusions>
+				<exclusion>
+					<artifactId>commons-logging</artifactId>
+					<groupId>commons-logging</groupId>
+				</exclusion>
+			</exclusions>
+		</dependency>
+		<dependency>
+			<groupId>org.codehaus.jackson</groupId>
+			<artifactId>jackson-mapper-asl</artifactId>
+			<version>1.9.12</version>
+		</dependency>
+		<!-- ~~~~~~~~~~ -->
+		<!-- VALIDATION -->
+		<!-- ~~~~~~~~~~ -->
+		<dependency>
+			<groupId>javax.validation</groupId>
+			<artifactId>validation-api</artifactId>
+			<version>1.0.0.GA</version>
+		</dependency>
+		<dependency>
+			<groupId>org.hibernate</groupId>
+			<artifactId>hibernate-validator</artifactId>
+			<version>4.3.1.Final</version>
+		</dependency>
+		<dependency> <!-- validation html -->
+			<groupId>org.jsoup</groupId>
+			<artifactId>jsoup</artifactId>
+			<version>1.7.2</version>
+		</dependency>
+		<!-- ~~~~~~ -->
+		<!-- LOGGER -->
+		<!-- ~~~~~~ -->
+		<dependency>
+			<groupId>org.slf4j</groupId>
+			<artifactId>slf4j-api</artifactId>
+			<version>1.7.5</version>
+		</dependency>
+		<dependency>
+			<groupId>org.slf4j</groupId>
+			<artifactId>log4j-over-slf4j</artifactId>
+			<version>1.7.5</version>
+		</dependency>
+		<dependency>
+			<groupId>org.slf4j</groupId>
+			<artifactId>jcl-over-slf4j</artifactId>
+			<version>1.7.5</version>
+		</dependency>
+		<dependency>
+			<groupId>ch.qos.logback</groupId>
+			<artifactId>logback-classic</artifactId>
+			<version>1.0.13</version>
+		</dependency>
+		<!-- ~~~~~ -->
+		<!-- UTILS -->
+		<!-- ~~~~~ -->
+		<dependency>
+			<groupId>org.apache.commons</groupId>
+			<artifactId>commons-jexl</artifactId>
+			<version>2.1.1</version>
+			<exclusions>
+				<exclusion>
+					<artifactId>commons-logging</artifactId>
+					<groupId>commons-logging</groupId>
+				</exclusion>
+			</exclusions>
+		</dependency>
+		<dependency>
+			<groupId>com.google.guava</groupId>
+			<artifactId>guava</artifactId>
+			<version>15.0</version>
+		</dependency>
+		<dependency>
+			<groupId>commons-io</groupId>
+			<artifactId>commons-io</artifactId>
+			<version>2.4</version>
+		</dependency>
+		<dependency>
+			<groupId>commons-lang</groupId>
+			<artifactId>commons-lang</artifactId>
+			<version>2.6</version>
+		</dependency>
+		<dependency>
+			<groupId>commons-fileupload</groupId>
+			<artifactId>commons-fileupload</artifactId>
+			<version>1.3</version>
+		</dependency>
+		<dependency>
+			<groupId>commons-codec</groupId>
+			<artifactId>commons-codec</artifactId>
+			<version>1.8</version>
+		</dependency>
+		<dependency>
+			<groupId>commons-beanutils</groupId>
+			<artifactId>commons-beanutils</artifactId>
+			<version>1.8.3</version>
+			<exclusions>
+				<exclusion>
+					<artifactId>commons-logging</artifactId>
+					<groupId>commons-logging</groupId>
+				</exclusion>
+			</exclusions>
+		</dependency>
+		<dependency>
+			<groupId>commons-collections</groupId>
+			<artifactId>commons-collections</artifactId>
+			<version>3.2.1</version>
+		</dependency>
+		<!-- ~~~~~~ -->
+		<!-- SPRING -->
+		<!-- ~~~~~~ -->
+		<dependency>
+			<groupId>javax.inject</groupId>
+			<artifactId>javax.inject</artifactId>
+			<version>1</version>
+		</dependency>
+		<dependency>
+			<groupId>org.springframework</groupId>
+			<artifactId>spring-context</artifactId>
+			<version>${spring.version}</version>
+			<exclusions>
+				<exclusion>
+					<artifactId>commons-logging</artifactId>
+					<groupId>commons-logging</groupId>
+				</exclusion>
+			</exclusions>
+		</dependency>
+		<dependency>
+			<groupId>org.springframework</groupId>
+			<artifactId>spring-expression</artifactId>
+			<version>${spring.version}</version>
+		</dependency>
+		<dependency>
+			<groupId>org.springframework</groupId>
+			<artifactId>spring-jdbc</artifactId>
+			<version>${spring.version}</version>
+		</dependency>
+		<dependency>
+			<groupId>org.springframework</groupId>
+			<artifactId>spring-orm</artifactId>
+			<version>${spring.version}</version>
+		</dependency>
+		<dependency>
+			<groupId>org.springframework</groupId>
+			<artifactId>spring-aspects</artifactId>
+			<version>${spring.version}</version>
+		</dependency>
+		<dependency>
+			<groupId>org.springframework</groupId>
+			<artifactId>spring-aop</artifactId>
+			<version>${spring.version}</version>
+		</dependency>
+		<dependency>
+			<groupId>org.aspectj</groupId>
+			<artifactId>aspectjrt</artifactId>
+			<version>1.7.3</version>
+		</dependency>
+		<dependency>
+			<groupId>org.aspectj</groupId>
+			<artifactId>aspectjweaver</artifactId>
+			<version>1.7.3</version>
+		</dependency>
+		<dependency>
+			<groupId>org.springframework</groupId>
+			<artifactId>spring-web</artifactId>
+			<version>${spring.version}</version>
+		</dependency>
+		<dependency>
+			<groupId>org.springframework</groupId>
+			<artifactId>spring-webmvc</artifactId>
+			<version>${spring.version}</version>
+		</dependency>
+
+		<!-- ~~~~~~~~~~~~~~~ -->
+		<!-- SPRING SECURITY -->
+		<!-- ~~~~~~~~~~~~~~~ -->
+		<dependency>
+			<groupId>javax.annotation</groupId>
+			<artifactId>jsr250-api</artifactId>
+			<version>1.0</version>
+		</dependency>
+		<dependency>
+			<groupId>org.springframework.security</groupId>
+			<artifactId>spring-security-core</artifactId>
+			<version>${spring-security.version}</version>
+		</dependency>
+		<dependency>
+			<groupId>org.springframework.security</groupId>
+			<artifactId>spring-security-web</artifactId>
+			<version>${spring-security.version}</version>
+		</dependency>
+		<dependency>
+			<groupId>org.springframework.security</groupId>
+			<artifactId>spring-security-acl</artifactId>
+			<version>${spring-security.version}</version>
+		</dependency>
+		<dependency>
+			<groupId>org.springframework.security</groupId>
+			<artifactId>spring-security-config</artifactId>
+			<version>${spring-security.version}</version>
+		</dependency>
+
+		<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
+		<!-- JSF						 -->
+		<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
+		<dependency>
+			<groupId>org.jboss.el</groupId>
+			<artifactId>jboss-el</artifactId>
+			<version>2.0.1.GA</version>
+			<exclusions>
+				<exclusion>
+					<groupId>javax.el</groupId>
+					<artifactId>el-api</artifactId>
+				</exclusion>
+			</exclusions>
+		</dependency>
+		<dependency>
+			<groupId>com.sun.faces</groupId>
+			<artifactId>jsf-api</artifactId>
+			<version>${jsf-api.version}</version>
+		</dependency>
+		<dependency>
+			<groupId>com.sun.faces</groupId>
+			<artifactId>jsf-impl</artifactId>
+			<version>${jsf-api.version}</version>
+		</dependency>
+		<!-- to use myfaces, comment the 2 dependencies above and uncomment the 2 below ... 
+			review web.xml as well, you need to comment out something there too.
+		-->
+<!--		 <dependency> -->
+<!--			 <groupId>org.apache.myfaces.core</groupId> -->
+<!--			 <artifactId>myfaces-api</artifactId> -->
+<!--			 <version>2.1.10</version> -->
+<!--		 </dependency> -->
+<!--		 <dependency> -->
+<!--			 <groupId>org.apache.myfaces.core</groupId> -->
+<!--			 <artifactId>myfaces-impl</artifactId> -->
+<!--			 <version>2.1.10</version> -->
+<!--		 </dependency> -->
+		<dependency>
+			<groupId>org.primefaces</groupId>
+			<artifactId>primefaces</artifactId>
+			<version>${primefaces.version}</version>
+		</dependency>
+		<dependency>
+			<groupId>org.omnifaces</groupId>
+			<artifactId>omnifaces</artifactId>
+			<version>1.6</version>
+		</dependency>
+		<dependency>
+			<groupId>net.sf.ehcache</groupId>
+			<artifactId>ehcache-web</artifactId>
+			<version>2.0.4</version>
+		</dependency>
+		<dependency><!-- optional theme (see also web.xml to enable it) -->
+			<groupId>org.primefaces.themes</groupId>
+			<artifactId>bootstrap</artifactId>
+			<version>${primefaces-themes.version}</version>
+		</dependency>
+		<!-- ~~~ -->
+		<!-- WEB -->
+		<!-- ~~~ -->
+		<dependency>
+			<groupId>javax.servlet</groupId>
+			<artifactId>servlet-api</artifactId>
+			<version>2.5</version>
+			<scope>provided</scope>
+		</dependency>
+		<dependency>
+			<groupId>javax.servlet.jsp</groupId>
+			<artifactId>jsp-api</artifactId>
+			<version>2.1</version>
+			<scope>provided</scope>
+		</dependency>
+		<dependency>
+			<groupId>javax.servlet</groupId>
+			<artifactId>jstl</artifactId>
+			<version>1.2</version>
+			<scope>runtime</scope>
+		</dependency>
+		<!-- ~~~~~~~~~~ -->
+		<!-- MONITORING -->
+		<!-- ~~~~~~~~~~ -->
+		<dependency>
+			<groupId>net.bull.javamelody</groupId>
+			<artifactId>javamelody-core</artifactId>
+			<version>1.47.0</version>
+		</dependency>
+		<!-- ~~~~ -->
+		<!-- TEST -->
+		<!-- ~~~~ -->
+		<dependency>
+			<groupId>junit</groupId>
+			<artifactId>junit</artifactId>
+			<version>4.11</version>
+			<scope>test</scope>
+		</dependency>
+		<dependency>
+			<groupId>org.mockito</groupId>
+			<artifactId>mockito-all</artifactId>
+			<version>1.9.5</version>
+			<scope>test</scope>
+		</dependency>
+		<dependency>
+			<groupId>org.easytesting</groupId>
+			<artifactId>fest-assert</artifactId>
+			<version>1.4</version>
+			<scope>test</scope>
+		</dependency>
+		<dependency>
+			<groupId>org.springframework</groupId>
+			<artifactId>spring-test</artifactId>
+			<version>${spring.version}</version>
+			<scope>test</scope>
+		</dependency>
+		<dependency>
+			<groupId>org.seleniumhq.selenium</groupId>
+			<artifactId>selenium-java</artifactId>
+			<version>2.35.0</version>
+			<scope>test</scope>
+			<exclusions>
+				<exclusion>
+					<artifactId>commons-logging</artifactId>
+					<groupId>commons-logging</groupId>
+				</exclusion>
+			</exclusions>
+		</dependency>
+		<dependency>
+			<groupId>com.palominolabs.xpath</groupId>
+			<artifactId>xpath-utils</artifactId>
+			<version>1.0.1</version>
+			<scope>test</scope>
+		</dependency>
+	</dependencies>
+	<!-- ~~~~~~~~~~~~ -->
+	<!-- REPOSITORIES -->
+	<!-- ~~~~~~~~~~~~ -->
+	<repositories>
+		<repository>
+			<id>primefaces</id>
+			<url>http://repository.primefaces.org</url>
+			<layout>default</layout>
+		</repository>
+		<repository>
+			<id>jboss</id>
+			<url>http://repository.jboss.org/nexus/content/groups/public-jboss</url>
+			<snapshots>
+				<enabled>false</enabled>
+			</snapshots>
+		</repository>
+	</repositories>
+	<!-- ~~~~~ -->
+	<!-- BUILD -->
+	<!-- ~~~~~ -->
+	<build>
+		<defaultGoal>jetty:run</defaultGoal>
+		<resources>
+			<resource>
+				<directory>${maven-celerio-plugin.outputDir}/src/main/resources</directory>
+				<filtering>true</filtering>
+			</resource>
+			<resource>
+				<directory>src/main/resources</directory>
+				<filtering>true</filtering>
+			</resource>
+		</resources>
+		<testResources>
+			<testResource>
+				<directory>${maven-celerio-plugin.outputDir}/src/test/resources</directory>
+				<filtering>true</filtering>
+			</testResource>
+			<testResource>
+				<directory>src/test/resources</directory>
+				<filtering>true</filtering>
+			</testResource>
+		</testResources>
+		<plugins>
+			<plugin>
+				<!-- http://maven.apache.org/plugins/maven-resources-plugin/ -->
+				<groupId>org.apache.maven.plugins</groupId>
+				<artifactId>maven-resources-plugin</artifactId>
+				<version>2.6</version>
+				<configuration>
+					<delimiters>
+						<delimiter>@*@</delimiter>
+					</delimiters>
+					<useDefaultDelimiters>false</useDefaultDelimiters>
+					<nonFilteredFileExtensions>
+						<nonFilteredFileExtension>xls</nonFilteredFileExtension>
+						<nonFilteredFileExtension>xlsx</nonFilteredFileExtension>
+						<nonFilteredFileExtension>pdf</nonFilteredFileExtension>
+					</nonFilteredFileExtensions>
+				</configuration>
+			</plugin>
+			<plugin>
+				<!-- http://maven.apache.org/plugins/maven-enforcer-plugin/ -->
+				<groupId>org.apache.maven.plugins</groupId>
+				<artifactId>maven-enforcer-plugin</artifactId>
+				<version>1.1.1</version>
+				<executions>
+					<execution>
+						<id>enforce-java</id>
+						<goals>
+							<goal>enforce</goal>
+						</goals>
+						<configuration>
+							<rules>
+								<requireJavaVersion>
+									<version>[1.6.0-26,)</version>
+								</requireJavaVersion>
+								<requireMavenVersion>
+									<version>3.0.3</version>
+								</requireMavenVersion>
+							</rules>
+						</configuration>
+					</execution>
+				</executions>
+			</plugin>
+			<plugin>
+				<!-- http://maven.apache.org/plugins/maven-compiler-plugin/ -->
+				<groupId>org.apache.maven.plugins</groupId>
+				<artifactId>maven-compiler-plugin</artifactId>
+				<version>2.5.1</version>
+				<configuration>
+					<source>${jdk.version}</source>
+					<target>${jdk.version}</target>
+					<compilerArgument>-Xlint</compilerArgument>
+					<showWarnings>true</showWarnings>
+					<showDeprecation>true</showDeprecation>
+				</configuration>
+			</plugin>
+			<plugin>
+				<!-- http://mojo.codehaus.org/build-helper-maven-plugin/ -->
+				<groupId>org.codehaus.mojo</groupId>
+				<artifactId>build-helper-maven-plugin</artifactId>
+				<version>1.7</version>
+				<executions>
+					<execution>
+						<id>Adding generated java folder to build</id>
+						<phase>generate-sources</phase>
+						<goals>
+							<goal>add-source</goal>
+						</goals>
+						<configuration>
+							<sources>
+								<source>${maven-celerio-plugin.outputDir}/src/main/java</source>
+								<source>${maven-celerio-plugin.outputDir}/src/main/generated-java</source>
+							</sources>
+						</configuration>
+					</execution>
+					<execution>
+						<id>Adding generated java test location to test build</id>
+						<phase>generate-sources</phase>
+						<goals>
+							<goal>add-test-source</goal>
+						</goals>
+						<configuration>
+							<sources>
+								<source>${maven-celerio-plugin.outputDir}/src/test/java</source>
+								<source>${maven-celerio-plugin.outputDir}/src/test/generated-java</source>
+							</sources>
+						</configuration>
+					</execution>
+				</executions>
+			</plugin>
+			<plugin>
+				<artifactId>maven-antrun-plugin</artifactId>
+				<version>1.7</version>
+				<executions>
+					<execution>
+						<id>instrument jpa model to support lazy loading of files</id>
+						<phase>process-classes</phase>
+						<goals>
+							<goal>run</goal>
+						</goals>
+						<configuration>
+							<target>
+								<taskdef name="instrument" classname="org.hibernate.tool.instrument.javassist.InstrumentTask">
+									<classpath>
+										<path refid="maven.dependency.classpath" />
+										<path refid="maven.runtime.classpath" />
+									</classpath>
+								</taskdef>
+								<instrument verbose="true">
+									<fileset dir="${project.build.outputDirectory}">
+										<include name="com/h2/demo/domain/Document.class" />
+									</fileset>
+								</instrument>
+							</target>
+						</configuration>
+					</execution>
+				</executions>
+			</plugin>
+			<plugin>
+				<!-- http://wiki.eclipse.org/Jetty/Feature/Jetty_Maven_Plugin -->
+				<groupId>org.mortbay.jetty</groupId>
+				<artifactId>jetty-maven-plugin</artifactId>
+				<version>8.1.10.v20130312</version>
+				<configuration>
+					<stopKey>foo</stopKey>
+					<stopPort>9999</stopPort>
+					<webAppConfig>
+						<contextPath>${application.contextpath}</contextPath>
+						<overrideDescriptor>${maven-celerio-plugin.outputDir}/src/main/config/maven-jetty-plugin/web-development.xml</overrideDescriptor>
+						<baseResource implementation="org.eclipse.jetty.util.resource.ResourceCollection">
+							<resourcesAsCSV>${project.basedir}/src/main/webapp/,${maven-celerio-plugin.outputDir}/src/main/webapp/</resourcesAsCSV>
+						</baseResource>
+					</webAppConfig>
+					<connectors>
+						<connector implementation="org.eclipse.jetty.server.nio.SelectChannelConnector">
+							<port>${application.port}</port>
+						</connector>
+					</connectors>
+					<requestLog implementation="org.eclipse.jetty.server.NCSARequestLog">
+						<filename>${log.target}/jetty-yyyy_mm_dd-request.log</filename>
+						<retainDays>3</retainDays>
+						<append>true</append>
+						<extended>false</extended>
+						<logTimeZone>GMT</logTimeZone>
+					</requestLog>
+				</configuration>
+				<executions>
+					<execution>
+						<id>start-jetty</id>
+						<phase>pre-integration-test</phase>
+						<goals>
+							<goal>start</goal>
+						</goals>
+						<configuration>
+							<daemon>true</daemon>
+						</configuration>
+					</execution>
+					<execution>
+						<id>stop-jetty</id>
+						<phase>post-integration-test</phase>
+						<goals>
+							<goal>stop</goal>
+						</goals>
+					</execution>
+				</executions>
+			</plugin>
+			<plugin>
+				<!-- http://maven.apache.org/plugins/maven-failsafe-plugin/ -->
+				<groupId>org.apache.maven.plugins</groupId>
+				<artifactId>maven-failsafe-plugin</artifactId>
+				<version>2.12</version>
+				<configuration>
+					<systemPropertyVariables>
+						<selenium.baseurl>http://${application.host}:${application.port}${application.contextpath}</selenium.baseurl>
+					</systemPropertyVariables>
+					<argLine>${jacoco.it.agent.argLine}</argLine>
+				</configuration>
+				<executions>
+					<execution>
+						<id>integration-test</id>
+						<goals>
+							<goal>integration-test</goal>
+						</goals>
+					</execution>
+					<execution>
+						<id>verify</id>
+						<goals>
+							<goal>verify</goal>
+						</goals>
+					</execution>
+				</executions>
+			</plugin>
+			<plugin>
+				<groupId>org.jacoco</groupId>
+				<artifactId>jacoco-maven-plugin</artifactId>
+				<version>0.6.2.201302030002</version>
+				<executions>
+					<execution>
+						<id>prepare-jacoco-test-agent</id>
+						<goals>
+							<goal>prepare-agent</goal>
+						</goals>
+						<phase>process-test-classes</phase>
+						<configuration>
+							<propertyName>jacoco.test.agent.argLine</propertyName>
+							<destFile>${sonar.jacoco.reportPath}</destFile>
+						</configuration>
+					</execution>
+					<execution>
+						<id>prepare-jacoco-integration-agent</id>
+						<goals>
+							<goal>prepare-agent</goal>
+						</goals>
+						<phase>pre-integration-test</phase>
+						<configuration>
+							<propertyName>jacoco.it.agent.argLine</propertyName>
+							<destFile>${sonar.jacoco.itReportPath}</destFile>
+						</configuration>
+					</execution>
+				</executions>
+			</plugin>
+			<plugin>
+				<!-- http://maven.apache.org/plugins/maven-idea-plugin/ -->
+				<groupId>org.apache.maven.plugins</groupId>
+				<artifactId>maven-idea-plugin</artifactId>
+				<version>2.2</version>
+				<configuration>
+					<downloadSources>true</downloadSources>
+					<jdkLevel>${jdk.version}</jdkLevel>
+					<dependenciesAsLibraries>true</dependenciesAsLibraries>
+					<useFullNames>false</useFullNames>
+				</configuration>
+			</plugin>
+			<plugin>
+				<!-- http://maven.apache.org/plugins/maven-eclipse-plugin/ -->
+				<groupId>org.apache.maven.plugins</groupId>
+				<artifactId>maven-eclipse-plugin</artifactId>
+				<version>2.9</version>
+				<configuration>
+					<wtpversion>2.0</wtpversion>
+					<downloadSources>true</downloadSources>
+				</configuration>
+			</plugin>
+			<plugin>
+				<!-- http://maven.apache.org/plugins/maven-war-plugin/ -->
+				<groupId>org.apache.maven.plugins</groupId>
+				<artifactId>maven-war-plugin</artifactId>
+				<version>2.3</version>
+				<configuration>
+					<webResources>
+						<resource>
+							<directory>${maven-celerio-plugin.outputDir}/src/main/webapp</directory>
+						</resource>
+					</webResources>
+				</configuration>
+			</plugin>
+			<plugin>
+				<!-- http://maven.apache.org/plugins/maven-install-plugin/ -->
+				<groupId>org.apache.maven.plugins</groupId>
+				<artifactId>maven-install-plugin</artifactId>
+				<version>2.4</version>
+			</plugin>
+			<plugin>
+				<!-- http://maven.apache.org/plugins/maven-clean-plugin/ -->
+				<groupId>org.apache.maven.plugins</groupId>
+				<artifactId>maven-clean-plugin</artifactId>
+				<version>2.5</version>
+			</plugin>
+			<plugin>
+				<!-- http://maven.apache.org/plugins/maven-surefire-plugin/ -->
+				<groupId>org.apache.maven.plugins</groupId>
+				<artifactId>maven-surefire-plugin</artifactId>
+				<version>2.12.4</version>
+				<configuration>
+					<!-- surefire uses a new jvm, MAVEN_OPTS are ignored, so you better set the memory options here -->
+					<argLine>-Xmx512m -XX:MaxPermSize=256m ${jacoco.test.agent.argLine}</argLine>
+				</configuration>
+			</plugin>
+			<plugin>
+				<!-- http://maven.apache.org/plugins/maven-release-plugin/ -->
+				<groupId>org.apache.maven.plugins</groupId>
+				<artifactId>maven-release-plugin</artifactId>
+				<version>2.2.2</version>
+				<configuration>
+					<arguments>-Pdb,metadata,gen</arguments>
+					<releaseProfiles>db,metadata,gen</releaseProfiles>
+				</configuration>
+			</plugin>
+		</plugins>
+	</build>
+</project>
diff --git a/springfuse.xml b/springfuse.xml
new file mode 100644
index 0000000..dcf0276
--- /dev/null
+++ b/springfuse.xml
@@ -0,0 +1,94 @@
+<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
+	<modelVersion>4.0.0</modelVersion>
+	<groupId>com.h2.demo</groupId>
+	<artifactId>h2project</artifactId>
+	<version>1.0.0</version>
+	<name>h2project</name>
+	<properties>
+		<!-- specify how we can access the database to reverse -->
+		<jdbc.groupId>com.h2database</jdbc.groupId>
+		<jdbc.artifactId>h2</jdbc.artifactId>
+		<jdbc.version>1.3.171</jdbc.version>
+		<jdbc.driver>org.h2.Driver</jdbc.driver>
+		<jdbc.url>jdbc:h2:~/test</jdbc.url>
+		<jdbc.user>sa</jdbc.user>
+		<jdbc.password></jdbc.password>
+		<!-- uncomment and configure if needed -->
+		<!-- <jdbc.catalog></jdbc.catalog> -->
+		<!-- <jdbc.schema></jdbc.schema> -->
+
+
+		<!-- Which kind of front end should springfuse generate ? -->
+		<maven-remote-generation-plugin.frontEnd>jsf2Spring</maven-remote-generation-plugin.frontEnd>
+
+		<!-- Required only if you are behind an http proxy -->
+		<maven-remote-generation-plugin.proxy.enable>false</maven-remote-generation-plugin.proxy.enable>
+		<maven-remote-generation-plugin.proxy.host>yourproxyhost</maven-remote-generation-plugin.proxy.host>
+		<maven-remote-generation-plugin.proxy.port>8080</maven-remote-generation-plugin.proxy.port>
+		<maven-remote-generation-plugin.proxy.username>yourproxyusername</maven-remote-generation-plugin.proxy.username>
+		<maven-remote-generation-plugin.proxy.password>yourproxypassword</maven-remote-generation-plugin.proxy.password>
+
+		<!-- If your proxy is using NTML... -->
+		<maven-remote-generation-plugin.proxy.ntlm.enable>false</maven-remote-generation-plugin.proxy.ntlm.enable>
+		<maven-remote-generation-plugin.proxy.ntlm.domain>yourdomain</maven-remote-generation-plugin.proxy.ntlm.domain>
+		<maven-remote-generation-plugin.proxy.ntlm.workstation>yourcomputername</maven-remote-generation-plugin.proxy.ntlm.workstation>
+
+		<!-- We require you to provide an email and a password -->
+		<maven-remote-generation-plugin.email>anikhar88@gmail.com</maven-remote-generation-plugin.email>
+		<maven-remote-generation-plugin.password>none</maven-remote-generation-plugin.password>
+	</properties>
+	<build>
+		<defaultGoal>generate-sources</defaultGoal>
+		<plugins>
+			<plugin>
+				<groupId>org.apache.maven.plugins</groupId>
+				<artifactId>maven-enforcer-plugin</artifactId>
+				<version>1.0</version>
+				<executions>
+					<execution>
+						<id>enforce-versions</id>
+						<goals>
+							<goal>enforce</goal>
+						</goals>
+						<configuration>
+							<rules>
+								<requireMavenVersion>
+									<version>2.0.6</version>
+								</requireMavenVersion>
+								<requireJavaVersion>
+									<version>1.6</version>
+								</requireJavaVersion>
+							</rules>
+						</configuration>
+					</execution>
+				</executions>
+			</plugin>
+			<plugin>
+				<groupId>com.springfuse</groupId>
+				<artifactId>maven-springfuse-plugin</artifactId>
+				<version>3.0.109</version>
+				<executions>
+					<execution>
+						<id>Extract metadata, and produce application.</id>
+						<goals>
+							<goal>remote-generation</goal>
+						</goals>
+					</execution>
+				</executions>
+				<dependencies>
+					<dependency>
+						<groupId>${jdbc.groupId}</groupId>
+						<artifactId>${jdbc.artifactId}</artifactId>
+						<version>${jdbc.version}</version>
+					</dependency>
+				</dependencies>
+			</plugin>
+		</plugins>
+	</build>
+	<pluginRepositories>
+		<pluginRepository>
+			<id>springfuse-repository</id>
+			<url>http://maven2.springfuse.com</url>
+		</pluginRepository>
+	</pluginRepositories>
+</project>
diff --git a/src/main/config/maven-celerio-plugin/celerio-template-packs.xml b/src/main/config/maven-celerio-plugin/celerio-template-packs.xml
new file mode 100644
index 0000000..ab0f9d9
--- /dev/null
+++ b/src/main/config/maven-celerio-plugin/celerio-template-packs.xml
@@ -0,0 +1,22 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!--
+ ! (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ ! Source code generated by Celerio, a Jaxio product
+ ! Want to purchase Celerio ? email us at info@jaxio.com
+ ! Follow us on twitter: @springfuse
+ ! Documentation: http://www.jaxio.com/documentation/celerio/
+ ! Template pack-jsf2-spring-conversation:bootstrap/celerio-template-packs.boot.vm.xml
+-->
+<celerio xmlns="http://www.jaxio.com/schema/celerio" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.jaxio.com/schema/celerio ./celerio.xsd">
+	<configuration>
+		<!-- These packs are expected to be present in your classpath as jar dependencies -->
+		<packs>
+			<pack name="pack-backend-jpa" enable="true"/>
+			<pack name="pack-jsf2-spring-conversation" enable="true" />
+			<pack name="pack-selenium-primefaces" enable="true" />
+			<!-- The optional 'pack-custom' defined below is the local folder where you can create your own Celerio templates. -->
+			<!-- All templates present in this folder will be executed by Celerio. -->
+			<pack name="pack-custom" path="src/main/celerio" enable="false" />
+		</packs>
+	</configuration>
+</celerio>
diff --git a/src/main/config/maven-celerio-plugin/celerio.xsd b/src/main/config/maven-celerio-plugin/celerio.xsd
new file mode 100644
index 0000000..fa59d3a
--- /dev/null
+++ b/src/main/config/maven-celerio-plugin/celerio.xsd
@@ -0,0 +1,2196 @@
+<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:tns="http://www.jaxio.com/schema/celerio" elementFormDefault="qualified" targetNamespace="http://www.jaxio.com/schema/celerio">
+  <xs:simpleType name="cascadeType">
+    <xs:restriction base="xs:string">
+      <xs:enumeration value="NONE"/>
+      <xs:enumeration value="ALL"/>
+      <xs:enumeration value="PERSIST"/>
+      <xs:enumeration value="MERGE"/>
+      <xs:enumeration value="REMOVE"/>
+      <xs:enumeration value="REFRESH"/>
+    </xs:restriction>
+  </xs:simpleType>
+  <xs:simpleType name="methodConvention">
+    <xs:restriction base="xs:string">
+      <xs:enumeration value="GET"/>
+      <xs:enumeration value="SET"/>
+      <xs:enumeration value="ADD"/>
+      <xs:enumeration value="WITH"/>
+      <xs:enumeration value="EDIT"/>
+      <xs:enumeration value="CONTAINS"/>
+      <xs:enumeration value="GET_BY"/>
+      <xs:enumeration value="DELETE_BY"/>
+      <xs:enumeration value="REMOVE"/>
+      <xs:enumeration value="REMOVE_ALL"/>
+      <xs:enumeration value="HAS"/>
+      <xs:enumeration value="GET_LOCALIZED"/>
+      <xs:enumeration value="RANDOM_GETTER"/>
+    </xs:restriction>
+  </xs:simpleType>
+  <xs:simpleType name="enumType">
+    <xs:restriction base="xs:string">
+      <xs:enumeration value="ORDINAL"/>
+      <xs:enumeration value="STRING"/>
+      <xs:enumeration value="CUSTOM"/>
+    </xs:restriction>
+  </xs:simpleType>
+  <xs:simpleType name="module">
+    <xs:restriction base="xs:string">
+      <xs:enumeration value="SPRING_3"/>
+      <xs:enumeration value="SPRING_MVC_3"/>
+      <xs:enumeration value="SPRING_DATA"/>
+      <xs:enumeration value="COPYABLE"/>
+      <xs:enumeration value="CHAR_PADDING"/>
+      <xs:enumeration value="PRIMEFACES"/>
+      <xs:enumeration value="CONTAINER_SECURITY"/>
+    </xs:restriction>
+  </xs:simpleType>
+  <xs:simpleType name="classType">
+    <xs:restriction base="xs:string">
+      <xs:enumeration value="model"/>
+      <xs:enumeration value="primaryKey"/>
+      <xs:enumeration value="dao"/>
+      <xs:enumeration value="formatter"/>
+      <xs:enumeration value="printer"/>
+      <xs:enumeration value="converter"/>
+      <xs:enumeration value="repository"/>
+      <xs:enumeration value="repositorySupport"/>
+      <xs:enumeration value="service"/>
+      <xs:enumeration value="serviceImpl"/>
+      <xs:enumeration value="serviceSupport"/>
+      <xs:enumeration value="validator"/>
+      <xs:enumeration value="enumModel"/>
+      <xs:enumeration value="enumItems"/>
+      <xs:enumeration value="modelGenerator"/>
+      <xs:enumeration value="controllerWithPathVariable"/>
+      <xs:enumeration value="restController"/>
+      <xs:enumeration value="entityForm"/>
+      <xs:enumeration value="context"/>
+      <xs:enumeration value="formService"/>
+      <xs:enumeration value="formValidator"/>
+      <xs:enumeration value="searchController"/>
+      <xs:enumeration value="webSupport"/>
+      <xs:enumeration value="webModel"/>
+      <xs:enumeration value="webModelConverter"/>
+      <xs:enumeration value="webController"/>
+      <xs:enumeration value="webConverter"/>
+      <xs:enumeration value="webModelItems"/>
+      <xs:enumeration value="webPermission"/>
+      <xs:enumeration value="seleniumEditPage"/>
+      <xs:enumeration value="seleniumSearchPage"/>
+    </xs:restriction>
+  </xs:simpleType>
+  <xs:simpleType name="generationType">
+    <xs:restriction base="xs:string">
+      <xs:enumeration value="TABLE"/>
+      <xs:enumeration value="SEQUENCE"/>
+      <xs:enumeration value="IDENTITY"/>
+      <xs:enumeration value="AUTO"/>
+    </xs:restriction>
+  </xs:simpleType>
+  <xs:simpleType name="cacheConcurrencyStrategy">
+    <xs:restriction base="xs:string">
+      <xs:enumeration value="NONE"/>
+      <xs:enumeration value="READ_ONLY"/>
+      <xs:enumeration value="NONSTRICT_READ_WRITE"/>
+      <xs:enumeration value="READ_WRITE"/>
+      <xs:enumeration value="TRANSACTIONAL"/>
+    </xs:restriction>
+  </xs:simpleType>
+  <xs:simpleType name="tableType">
+    <xs:restriction base="xs:string">
+      <xs:enumeration value="TABLE"/>
+      <xs:enumeration value="VIEW"/>
+      <xs:enumeration value="ALIAS"/>
+      <xs:enumeration value="SYNONYM"/>
+    </xs:restriction>
+  </xs:simpleType>
+  <xs:simpleType name="norms">
+    <xs:restriction base="xs:string">
+      <xs:enumeration value="YES"/>
+      <xs:enumeration value="NO"/>
+    </xs:restriction>
+  </xs:simpleType>
+  <xs:simpleType name="store">
+    <xs:restriction base="xs:string">
+      <xs:enumeration value="NO"/>
+      <xs:enumeration value="YES"/>
+      <xs:enumeration value="COMPRESS"/>
+    </xs:restriction>
+  </xs:simpleType>
+  <xs:simpleType name="wellKnownFolder">
+    <xs:restriction base="xs:string">
+      <xs:enumeration value="JAVA"/>
+      <xs:enumeration value="JAVA_TEST"/>
+      <xs:enumeration value="WEBAPP"/>
+      <xs:enumeration value="WEBINF"/>
+      <xs:enumeration value="VIEWS"/>
+      <xs:enumeration value="FLOWS"/>
+      <xs:enumeration value="RESOURCES"/>
+      <xs:enumeration value="SPRING"/>
+      <xs:enumeration value="LOCALIZATION"/>
+      <xs:enumeration value="DOMAIN_LOCALIZATION"/>
+      <xs:enumeration value="RESOURCES_TEST"/>
+      <xs:enumeration value="SPRING_TEST"/>
+      <xs:enumeration value="CELERIO_LOCAL_TEMPLATE"/>
+      <xs:enumeration value="COLLISION"/>
+      <xs:enumeration value="SQL"/>
+      <xs:enumeration value="CONFIG"/>
+      <xs:enumeration value="SITE"/>
+    </xs:restriction>
+  </xs:simpleType>
+  <xs:simpleType name="trueFalse">
+    <xs:restriction base="xs:string">
+      <xs:enumeration value="TRUE"/>
+      <xs:enumeration value="FALSE"/>
+    </xs:restriction>
+  </xs:simpleType>
+  <xs:simpleType name="analyze">
+    <xs:restriction base="xs:string">
+      <xs:enumeration value="YES"/>
+      <xs:enumeration value="NO"/>
+    </xs:restriction>
+  </xs:simpleType>
+  <xs:simpleType name="fetchType">
+    <xs:restriction base="xs:string">
+      <xs:enumeration value="NONE"/>
+      <xs:enumeration value="LAZY"/>
+      <xs:enumeration value="EAGER"/>
+    </xs:restriction>
+  </xs:simpleType>
+  <xs:simpleType name="safeHtmlWhiteListType">
+    <xs:restriction base="xs:string">
+      <xs:enumeration value="NONE"/>
+      <xs:enumeration value="SIMPLE_TEXT"/>
+      <xs:enumeration value="BASIC"/>
+      <xs:enumeration value="BASIC_WITH_IMAGES"/>
+      <xs:enumeration value="RELAXED"/>
+    </xs:restriction>
+  </xs:simpleType>
+  <xs:simpleType name="inheritanceType">
+    <xs:restriction base="xs:string">
+      <xs:enumeration value="SINGLE_TABLE"/>
+      <xs:enumeration value="TABLE_PER_CLASS"/>
+      <xs:enumeration value="JOINED"/>
+    </xs:restriction>
+  </xs:simpleType>
+  <xs:simpleType name="jdbcType">
+    <xs:restriction base="xs:string">
+      <xs:enumeration value="ARRAY"/>
+      <xs:enumeration value="BIGINT"/>
+      <xs:enumeration value="BINARY"/>
+      <xs:enumeration value="BIT"/>
+      <xs:enumeration value="BLOB"/>
+      <xs:enumeration value="BOOLEAN"/>
+      <xs:enumeration value="CHAR"/>
+      <xs:enumeration value="CLOB"/>
+      <xs:enumeration value="DATALINK"/>
+      <xs:enumeration value="DATE"/>
+      <xs:enumeration value="DECIMAL"/>
+      <xs:enumeration value="DISTINCT"/>
+      <xs:enumeration value="DOUBLE"/>
+      <xs:enumeration value="FLOAT"/>
+      <xs:enumeration value="INTEGER"/>
+      <xs:enumeration value="JAVA_OBJECT"/>
+      <xs:enumeration value="LONGVARBINARY"/>
+      <xs:enumeration value="LONGVARCHAR"/>
+      <xs:enumeration value="NUMERIC"/>
+      <xs:enumeration value="OTHER"/>
+      <xs:enumeration value="REAL"/>
+      <xs:enumeration value="REF"/>
+      <xs:enumeration value="SMALLINT"/>
+      <xs:enumeration value="STRUCT"/>
+      <xs:enumeration value="TIME"/>
+      <xs:enumeration value="TIMESTAMP"/>
+      <xs:enumeration value="TINYINT"/>
+      <xs:enumeration value="VARBINARY"/>
+      <xs:enumeration value="VARCHAR"/>
+      <xs:enumeration value="ROW_ID"/>
+      <xs:enumeration value="LONGNVARCHAR"/>
+      <xs:enumeration value="NCHAR"/>
+      <xs:enumeration value="NCLOB"/>
+      <xs:enumeration value="NVARCHAR"/>
+      <xs:enumeration value="NULL"/>
+      <xs:enumeration value="SQLXML"/>
+    </xs:restriction>
+  </xs:simpleType>
+  <xs:simpleType name="associationDirection">
+    <xs:restriction base="xs:string">
+      <xs:enumeration value="UNIDIRECTIONAL"/>
+      <xs:enumeration value="BIDIRECTIONAL"/>
+    </xs:restriction>
+  </xs:simpleType>
+  <xs:simpleType name="formatterEnum">
+    <xs:restriction base="xs:string">
+      <xs:enumeration value="USE_FORMATTER_FILE"/>
+      <xs:enumeration value="USE_ECLIPSE_DEFAULT"/>
+      <xs:enumeration value="NONE"/>
+    </xs:restriction>
+  </xs:simpleType>
+  <xs:simpleType name="generatedPackage">
+    <xs:annotation>
+      <xs:documentation>Commonly used package names.</xs:documentation>
+    </xs:annotation>
+    <xs:restriction base="xs:string">
+      <xs:enumeration value="Audit"/>
+      <xs:enumeration value="Configuration"/>
+      <xs:enumeration value="Context"/>
+      <xs:enumeration value="Converter"/>
+      <xs:enumeration value="Dao"/>
+      <xs:enumeration value="DaoListener"/>
+      <xs:enumeration value="DaoSupport"/>
+      <xs:enumeration value="EmailService"/>
+      <xs:enumeration value="EnumItems"/>
+      <xs:enumeration value="EnumModel"/>
+      <xs:enumeration value="EnumModelSupport"/>
+      <xs:enumeration value="Formatter"/>
+      <xs:enumeration value="FormatterSupport"/>
+      <xs:enumeration value="Hibernate"/>
+      <xs:enumeration value="HibernateListener"/>
+      <xs:enumeration value="HibernateSupport"/>
+      <xs:enumeration value="Model"/>
+      <xs:enumeration value="ModelSupport"/>
+      <xs:enumeration value="Printer"/>
+      <xs:enumeration value="PrinterSupport"/>
+      <xs:enumeration value="Random"/>
+      <xs:enumeration value="Repository"/>
+      <xs:enumeration value="RepositorySupport"/>
+      <xs:enumeration value="Root"/>
+      <xs:enumeration value="Search"/>
+      <xs:enumeration value="Security"/>
+      <xs:enumeration value="Service"/>
+      <xs:enumeration value="ServiceImpl"/>
+      <xs:enumeration value="ServiceSupport"/>
+      <xs:enumeration value="Util"/>
+      <xs:enumeration value="Validation"/>
+      <xs:enumeration value="ValidationImpl"/>
+      <xs:enumeration value="RestController"/>
+      <xs:enumeration value="Web"/>
+      <xs:enumeration value="WebAction"/>
+      <xs:enumeration value="WebComponent"/>
+      <xs:enumeration value="WebConfiguration"/>
+      <xs:enumeration value="WebContext"/>
+      <xs:enumeration value="WebController"/>
+      <xs:enumeration value="WebConversation"/>
+      <xs:enumeration value="WebConversationComponent"/>
+      <xs:enumeration value="WebConverter"/>
+      <xs:enumeration value="WebConverterSupport"/>
+      <xs:enumeration value="WebEl"/>
+      <xs:enumeration value="WebFaces"/>
+      <xs:enumeration value="WebFilter"/>
+      <xs:enumeration value="WebFlow"/>
+      <xs:enumeration value="WebInterceptor"/>
+      <xs:enumeration value="WebListener"/>
+      <xs:enumeration value="WebModel"/>
+      <xs:enumeration value="WebModelConverter"/>
+      <xs:enumeration value="WebModelEntityForm"/>
+      <xs:enumeration value="WebModelItems"/>
+      <xs:enumeration value="WebModelSearchForm"/>
+      <xs:enumeration value="WebModelSupport"/>
+      <xs:enumeration value="WebModelValidator"/>
+      <xs:enumeration value="WebPermission"/>
+      <xs:enumeration value="WebPermissionSupport"/>
+      <xs:enumeration value="WebSecurity"/>
+      <xs:enumeration value="WebService"/>
+      <xs:enumeration value="WebServlet"/>
+      <xs:enumeration value="WebUi"/>
+      <xs:enumeration value="WebUtil"/>
+      <xs:enumeration value="WebValidation"/>
+      <xs:enumeration value="WebValidator"/>
+      <xs:enumeration value="Selenium"/>
+      <xs:enumeration value="SeleniumPage"/>
+      <xs:enumeration value="SeleniumSupport"/>
+      <xs:enumeration value="SeleniumElement"/>
+    </xs:restriction>
+  </xs:simpleType>
+  <xs:simpleType name="termVector">
+    <xs:restriction base="xs:string">
+      <xs:enumeration value="YES"/>
+      <xs:enumeration value="NO"/>
+      <xs:enumeration value="WITH_OFFSETS"/>
+      <xs:enumeration value="WITH_POSITIONS"/>
+      <xs:enumeration value="WITH_POSITION_OFFSETS"/>
+    </xs:restriction>
+  </xs:simpleType>
+  <xs:simpleType name="mappedType">
+    <xs:restriction base="xs:string">
+      <xs:enumeration value="M_ARRAY"/>
+      <xs:enumeration value="M_BIGDECIMAL"/>
+      <xs:enumeration value="M_BIGINTEGER"/>
+      <xs:enumeration value="M_BOOLEAN"/>
+      <xs:enumeration value="M_BYTES"/>
+      <xs:enumeration value="M_CLOB"/>
+      <xs:enumeration value="M_DOUBLE"/>
+      <xs:enumeration value="M_FLOAT"/>
+      <xs:enumeration value="M_BLOB"/>
+      <xs:enumeration value="M_INTEGER"/>
+      <xs:enumeration value="M_LONG"/>
+      <xs:enumeration value="M_REF"/>
+      <xs:enumeration value="M_STRING"/>
+      <xs:enumeration value="M_CHAR"/>
+      <xs:enumeration value="M_BYTE"/>
+      <xs:enumeration value="M_JODA_LOCALDATE"/>
+      <xs:enumeration value="M_JODA_LOCALDATETIME"/>
+      <xs:enumeration value="M_SQLDATE"/>
+      <xs:enumeration value="M_UTILDATE"/>
+      <xs:enumeration value="M_TIME"/>
+      <xs:enumeration value="M_TIMESTAMP"/>
+      <xs:enumeration value="M_URL"/>
+      <xs:enumeration value="M_OBJECT"/>
+    </xs:restriction>
+  </xs:simpleType>
+  <xs:simpleType name="collectionType">
+    <xs:restriction base="xs:string">
+      <xs:enumeration value="ArrayList"/>
+      <xs:enumeration value="HashSet"/>
+    </xs:restriction>
+  </xs:simpleType>
+  <xs:complexType name="wellKnownFolderOverride">
+    <xs:annotation>
+      <xs:documentation>change the convention for a given well known folder</xs:documentation>
+    </xs:annotation>
+    <xs:sequence/>
+    <xs:attribute type="tns:wellKnownFolder" use="required" name="wellKnownFolder">
+      <xs:annotation>
+        <xs:documentation>WellKnownFolder to override</xs:documentation>
+      </xs:annotation>
+    </xs:attribute>
+    <xs:attribute type="xs:string" name="folder">
+      <xs:annotation>
+        <xs:documentation>Override the folder for this WellKnownFolder</xs:documentation>
+      </xs:annotation>
+    </xs:attribute>
+    <xs:attribute type="xs:string" name="generatedFolder">
+      <xs:annotation>
+        <xs:documentation>Override the generated folder for this WellKnownFolder</xs:documentation>
+      </xs:annotation>
+    </xs:attribute>
+  </xs:complexType>
+  <xs:complexType name="include">
+    <xs:annotation>
+      <xs:documentation>Include a configuration file dedicated to entityConfigs. Use it on large project to split your entityConfigs configuration into smaller pieces.</xs:documentation>
+    </xs:annotation>
+    <xs:sequence/>
+    <xs:attribute type="xs:string" use="required" name="filename">
+      <xs:annotation>
+        <xs:documentation>The path to a configuration file whose entityConfigs tag will be loaded. The path must be relative to the folder containing the main configuration file. Beware, only the entityConfigs tag will be loaded from this file. For example: includes/ref/country.xml</xs:documentation>
+      </xs:annotation>
+    </xs:attribute>
+  </xs:complexType>
+  <xs:complexType name="metadata">
+    <xs:sequence>
+      <xs:element type="tns:jdbcConnectivity" name="jdbcConnectivity" minOccurs="0"/>
+      <xs:element type="tns:databaseInfo" name="databaseInfo" minOccurs="0"/>
+      <xs:element name="tables" minOccurs="0">
+        <xs:complexType>
+          <xs:sequence>
+            <xs:element type="tns:table" name="table" minOccurs="0" maxOccurs="unbounded"/>
+          </xs:sequence>
+        </xs:complexType>
+      </xs:element>
+    </xs:sequence>
+  </xs:complexType>
+  <xs:complexType name="methodConventionOverride">
+    <xs:annotation>
+      <xs:documentation>change the prefix/suffix conventions for a given method</xs:documentation>
+    </xs:annotation>
+    <xs:sequence/>
+    <xs:attribute type="tns:methodConvention" use="required" name="methodConvention">
+      <xs:annotation>
+        <xs:documentation><![CDATA[Method type to override<br> Example: GET_LOCALIZED]]></xs:documentation>
+      </xs:annotation>
+    </xs:attribute>
+    <xs:attribute type="xs:string" name="prefix">
+      <xs:annotation>
+        <xs:documentation><![CDATA[Override the prefix for this methodConvention<br> Example: get]]></xs:documentation>
+      </xs:annotation>
+    </xs:attribute>
+    <xs:attribute type="xs:string" name="suffix">
+      <xs:annotation>
+        <xs:documentation><![CDATA[Override the suffix for this methodConvention<br> Example: Localized]]></xs:documentation>
+      </xs:annotation>
+    </xs:attribute>
+  </xs:complexType>
+  <xs:complexType name="table">
+    <xs:annotation>
+      <xs:documentation>Describes all the metadata for a given table</xs:documentation>
+    </xs:annotation>
+    <xs:sequence>
+      <xs:element name="columns">
+        <xs:annotation>
+          <xs:documentation>Describes all the columns metadata for this table</xs:documentation>
+        </xs:annotation>
+        <xs:complexType>
+          <xs:sequence>
+            <xs:element type="tns:column" name="column" minOccurs="0" maxOccurs="unbounded"/>
+          </xs:sequence>
+        </xs:complexType>
+      </xs:element>
+      <xs:element name="indexes" minOccurs="0">
+        <xs:annotation>
+          <xs:documentation>Describes all the indexes for this table</xs:documentation>
+        </xs:annotation>
+        <xs:complexType>
+          <xs:sequence>
+            <xs:element type="tns:index" name="indexe" minOccurs="0" maxOccurs="unbounded"/>
+          </xs:sequence>
+        </xs:complexType>
+      </xs:element>
+      <xs:element name="importedKeys" minOccurs="0">
+        <xs:annotation>
+          <xs:documentation>Describes all the imported keys for this table</xs:documentation>
+        </xs:annotation>
+        <xs:complexType>
+          <xs:sequence>
+            <xs:element type="tns:importedKey" name="importedKey" minOccurs="0" maxOccurs="unbounded"/>
+          </xs:sequence>
+        </xs:complexType>
+      </xs:element>
+      <xs:element name="primaryKeys" minOccurs="0">
+        <xs:annotation>
+          <xs:documentation>Describes all the primary keys for this table</xs:documentation>
+        </xs:annotation>
+        <xs:complexType>
+          <xs:sequence>
+            <xs:element type="xs:string" name="primaryKey" minOccurs="0" maxOccurs="unbounded"/>
+          </xs:sequence>
+        </xs:complexType>
+      </xs:element>
+    </xs:sequence>
+    <xs:attribute type="xs:string" use="required" name="name">
+      <xs:annotation>
+        <xs:documentation><![CDATA[This table name<br> Example: USER]]></xs:documentation>
+      </xs:annotation>
+    </xs:attribute>
+    <xs:attribute type="tns:tableType" use="required" name="type">
+      <xs:annotation>
+        <xs:documentation>Type of the table</xs:documentation>
+      </xs:annotation>
+    </xs:attribute>
+    <xs:attribute type="xs:string" name="remarks">
+      <xs:annotation>
+        <xs:documentation><![CDATA[Documentation for this table<br> Example: Table containing all the user related information]]></xs:documentation>
+      </xs:annotation>
+    </xs:attribute>
+  </xs:complexType>
+  <xs:complexType name="label">
+    <xs:sequence/>
+    <xs:attribute type="xs:string" name="lang">
+      <xs:annotation>
+        <xs:documentation>The label's language, for example 'fr'. Leave it null for the base.</xs:documentation>
+      </xs:annotation>
+    </xs:attribute>
+    <xs:attribute type="xs:string" name="value">
+      <xs:annotation>
+        <xs:documentation>The label. It is copied in properties file located in the folder 'src/main/resources/localization/domain'.</xs:documentation>
+      </xs:annotation>
+    </xs:attribute>
+  </xs:complexType>
+  <xs:complexType name="generatedPackageOverride">
+    <xs:annotation>
+      <xs:documentation>Override the convention for a given GeneratedPackage</xs:documentation>
+    </xs:annotation>
+    <xs:sequence/>
+    <xs:attribute type="tns:generatedPackage" use="required" name="generatedPackage">
+      <xs:annotation>
+        <xs:documentation>The GeneratedPackage to override</xs:documentation>
+      </xs:annotation>
+    </xs:attribute>
+    <xs:attribute type="xs:string" name="rootPackage">
+      <xs:annotation>
+        <xs:documentation><![CDATA[Override the root package<br> Example: com.yourcompany]]></xs:documentation>
+      </xs:annotation>
+    </xs:attribute>
+    <xs:attribute type="xs:string" name="subPackage">
+      <xs:annotation>
+        <xs:documentation><![CDATA[Override the sub package, if rootPackage is also specified they will be merged.<br> Example: my.subpackage]]></xs:documentation>
+      </xs:annotation>
+    </xs:attribute>
+  </xs:complexType>
+  <xs:complexType name="metaAttribute">
+    <xs:annotation>
+      <xs:documentation>Meta attributes are free form key value pairs</xs:documentation>
+    </xs:annotation>
+    <xs:sequence/>
+    <xs:attribute type="xs:string" use="required" name="name">
+      <xs:annotation>
+        <xs:documentation>name of you meta attribute</xs:documentation>
+      </xs:annotation>
+    </xs:attribute>
+    <xs:attribute type="xs:string" use="required" name="value">
+      <xs:annotation>
+        <xs:documentation>value for this attribute</xs:documentation>
+      </xs:annotation>
+    </xs:attribute>
+  </xs:complexType>
+  <xs:complexType name="jdbcConnectivity">
+    <xs:sequence>
+      <xs:element name="tableTypes" minOccurs="0">
+        <xs:annotation>
+          <xs:documentation>Table types to retrieve</xs:documentation>
+        </xs:annotation>
+        <xs:complexType>
+          <xs:sequence>
+            <xs:element type="tns:tableType" name="tableType" minOccurs="0" maxOccurs="unbounded"/>
+          </xs:sequence>
+        </xs:complexType>
+      </xs:element>
+    </xs:sequence>
+    <xs:attribute type="xs:string" name="driver">
+      <xs:annotation>
+        <xs:documentation><![CDATA[Jdbc driver name<br> Example: org.h2.Driver]]></xs:documentation>
+      </xs:annotation>
+    </xs:attribute>
+    <xs:attribute type="xs:string" name="url">
+      <xs:annotation>
+        <xs:documentation><![CDATA[Jdbc url connection<br> Example: Jdbc:h2:~/mydatabase]]></xs:documentation>
+      </xs:annotation>
+    </xs:attribute>
+    <xs:attribute type="xs:string" name="user">
+      <xs:annotation>
+        <xs:documentation><![CDATA[Jdbc user<br> Example: myuser]]></xs:documentation>
+      </xs:annotation>
+    </xs:attribute>
+    <xs:attribute type="xs:string" name="password">
+      <xs:annotation>
+        <xs:documentation><![CDATA[Jdbc password<br> Example: mypassword]]></xs:documentation>
+      </xs:annotation>
+    </xs:attribute>
+    <xs:attribute type="xs:string" name="schemaName"/>
+    <xs:attribute type="xs:string" name="tableNamePattern">
+      <xs:annotation>
+        <xs:documentation><![CDATA[you can restrict table extraction using a pattern<br> Example: PROJECT_%]]></xs:documentation>
+      </xs:annotation>
+    </xs:attribute>
+    <xs:attribute type="xs:boolean" use="required" name="oracleRetrieveRemarks">
+      <xs:annotation>
+        <xs:documentation>Should Celerio retrieve remarks on oracle, beware this is a very time consuming operation</xs:documentation>
+      </xs:annotation>
+    </xs:attribute>
+    <xs:attribute type="xs:boolean" use="required" name="oracleRetrieveSynonyms">
+      <xs:annotation>
+        <xs:documentation>Should Celerio retrieve synonyms on oracle</xs:documentation>
+      </xs:annotation>
+    </xs:attribute>
+    <xs:attribute type="xs:boolean" name="reverseIndexes">
+      <xs:annotation>
+        <xs:documentation>When false, no indexes is reversed at all.</xs:documentation>
+      </xs:annotation>
+    </xs:attribute>
+    <xs:attribute type="xs:boolean" name="reverseOnlyUniqueIndexes">
+      <xs:annotation>
+        <xs:documentation>when true, reverse only indexes for unique values; when false, reverse indexes regardless of whether unique or not.</xs:documentation>
+      </xs:annotation>
+    </xs:attribute>
+    <xs:attribute type="xs:string" name="catalog">
+      <xs:annotation>
+        <xs:documentation><![CDATA[Catalog name; must match the catalog name as it is stored in the database.<br> "" retrieves those without a catalog<br> empty means that the catalog name should not be used to narrow the search]]></xs:documentation>
+      </xs:annotation>
+    </xs:attribute>
+  </xs:complexType>
+  <xs:complexType name="customAnnotation">
+    <xs:sequence/>
+    <xs:attribute type="xs:string" name="annotation">
+      <xs:annotation>
+        <xs:documentation>The full qualified custom annotation to apply to this property. For example: @com.mycompany.MyAnnotation(debug = true)</xs:documentation>
+      </xs:annotation>
+    </xs:attribute>
+  </xs:complexType>
+  <xs:complexType name="columnConfig">
+    <xs:sequence>
+      <xs:element name="labels" minOccurs="0">
+        <xs:annotation>
+          <xs:documentation>The labels for this attribute. They appear in the entity properties file located under 'src/main/resources/localization/domain'.</xs:documentation>
+        </xs:annotation>
+        <xs:complexType>
+          <xs:sequence>
+            <xs:element type="tns:label" name="label" minOccurs="0" maxOccurs="unbounded"/>
+          </xs:sequence>
+        </xs:complexType>
+      </xs:element>
+      <xs:element name="usages" minOccurs="0">
+        <xs:annotation>
+          <xs:documentation>For future uses</xs:documentation>
+        </xs:annotation>
+        <xs:complexType>
+          <xs:sequence>
+            <xs:element type="xs:string" name="usage" minOccurs="0" maxOccurs="unbounded"/>
+          </xs:sequence>
+        </xs:complexType>
+      </xs:element>
+      <xs:element type="tns:enumConfig" name="enumConfig" minOccurs="0">
+        <xs:annotation>
+          <xs:documentation>Specify the enum config to map this column to a Java enum. If this enum is used by other columns, you must declare instead a shared enum and reference it using the sharedEnumName attribute.</xs:documentation>
+        </xs:annotation>
+      </xs:element>
+      <xs:element type="tns:safeHtml" name="safeHtml" minOccurs="0">
+        <xs:annotation>
+          <xs:documentation>When this element is present, the SafeHtml annotation is added on this field.</xs:documentation>
+        </xs:annotation>
+      </xs:element>
+      <xs:element type="tns:generatedValue" name="generatedValue" minOccurs="0">
+        <xs:annotation>
+          <xs:documentation>When the column represents a single primary key, you can configure the GeneratedValue JPA annotation here.</xs:documentation>
+        </xs:annotation>
+      </xs:element>
+      <xs:element type="tns:genericGenerator" name="genericGenerator" minOccurs="0">
+        <xs:annotation>
+          <xs:documentation>When the column represents a single primary key, you can configure the GenericGenerator JPA annotation here.</xs:documentation>
+        </xs:annotation>
+      </xs:element>
+      <xs:element type="tns:indexedField" name="indexedField" minOccurs="0">
+        <xs:annotation>
+          <xs:documentation>Configure the Hibernate search Field annotation. If present, the field is annotated, if absent it is not.</xs:documentation>
+        </xs:annotation>
+      </xs:element>
+      <xs:element name="customAnnotations" minOccurs="0">
+        <xs:annotation>
+          <xs:documentation>List of custom annotations to apply on this property.</xs:documentation>
+        </xs:annotation>
+        <xs:complexType>
+          <xs:sequence>
+            <xs:element type="tns:customAnnotation" name="customAnnotation" minOccurs="0" maxOccurs="unbounded"/>
+          </xs:sequence>
+        </xs:complexType>
+      </xs:element>
+      <xs:element type="tns:manyToOneConfig" name="manyToOneConfig" minOccurs="0"/>
+      <xs:element type="tns:oneToManyConfig" name="oneToManyConfig" minOccurs="0"/>
+      <xs:element type="tns:oneToOneConfig" name="oneToOneConfig" minOccurs="0"/>
+      <xs:element type="tns:oneToOneConfig" name="inverseOneToOneConfig" minOccurs="0"/>
+      <xs:element type="tns:manyToManyConfig" name="manyToManyConfig" minOccurs="0"/>
+    </xs:sequence>
+    <xs:attribute type="xs:string" name="sharedEnumName">
+      <xs:annotation>
+        <xs:documentation>References a shared enum name by its name. You cannot have both an enum configuration, and a shared enum name.</xs:documentation>
+      </xs:annotation>
+    </xs:attribute>
+    <xs:attribute type="xs:string" name="label">
+      <xs:annotation>
+        <xs:documentation>The base label for this column. You may either set it here or in a nested labels/label.</xs:documentation>
+      </xs:annotation>
+    </xs:attribute>
+    <xs:attribute type="xs:boolean" name="ignore">
+      <xs:annotation>
+        <xs:documentation>If set to true, the column will be ignored. Make sure you do not ignore not null columns.</xs:documentation>
+      </xs:annotation>
+    </xs:attribute>
+    <xs:attribute type="tns:jdbcType" name="type">
+      <xs:annotation>
+        <xs:documentation>Override the default JdbcType.</xs:documentation>
+      </xs:annotation>
+    </xs:attribute>
+    <xs:attribute type="tns:mappedType" name="mappedType">
+      <xs:annotation>
+        <xs:documentation>Force the Java mapped type for this column instead of relying on Celerio's conventions.</xs:documentation>
+      </xs:annotation>
+    </xs:attribute>
+    <xs:attribute type="xs:boolean" name="lazy">
+      <xs:annotation>
+        <xs:documentation><![CDATA[Should the mapped property be lazy loaded ? If yes, the annotation <code>@Basic(fetch = FetchType.LAZY)</code> is used. Defaults to 'true' for CLOB, BLOB or BYTES mapped types.]]></xs:documentation>
+      </xs:annotation>
+    </xs:attribute>
+    <xs:attribute type="xs:string" name="fieldName">
+      <xs:annotation>
+        <xs:documentation><![CDATA[The corresponding variable name in the Java world. By default, the field name is deduced from the column name.<br> For primary key the field name is always forced to Example: 'first_name' will become 'firstName';]]></xs:documentation>
+      </xs:annotation>
+    </xs:attribute>
+    <xs:attribute type="xs:string" name="tableName">
+      <xs:annotation>
+        <xs:documentation>Allows you to use JPA secondary table if you set a table name that is different from the entity table name. Default to the entity table name.</xs:documentation>
+      </xs:annotation>
+    </xs:attribute>
+    <xs:attribute type="xs:string" name="columnName">
+      <xs:annotation>
+        <xs:documentation>The mandatory column name.</xs:documentation>
+      </xs:annotation>
+    </xs:attribute>
+    <xs:attribute type="xs:int" name="size">
+      <xs:annotation>
+        <xs:documentation>Override the column size defined in the Metadata. Defaults to the size found when reversing the database schema.</xs:documentation>
+      </xs:annotation>
+    </xs:attribute>
+    <xs:attribute type="xs:int" name="min">
+      <xs:annotation>
+        <xs:documentation>Minimum length for String. When present it is used in the @Size validation annotation. No default value.</xs:documentation>
+      </xs:annotation>
+    </xs:attribute>
+    <xs:attribute type="xs:int" name="ordinalPosition">
+      <xs:annotation>
+        <xs:documentation>Override the column ordinal position defined in the Metadata. Defaults to the ordinal position found when reversing the database schema.</xs:documentation>
+      </xs:annotation>
+    </xs:attribute>
+    <xs:attribute type="xs:int" name="displayOrder">
+      <xs:annotation>
+        <xs:documentation>The order of appearance of this column in forms, from top to bottom and in search results, from left to right. It defaults to the ordinal position.</xs:documentation>
+      </xs:annotation>
+    </xs:attribute>
+    <xs:attribute type="xs:string" name="typeConverter">
+      <xs:annotation>
+        <xs:documentation>Sets the 'type' attribute passed to the 'org.hibernate.annotations.Type' annotation. By default, no Type annotation is used.</xs:documentation>
+      </xs:annotation>
+    </xs:attribute>
+    <xs:attribute type="xs:boolean" name="businessKey">
+      <xs:annotation>
+        <xs:documentation>Indicates if this property is part of the entity business key. You may set it on several properties at the same time if your business key involves more than one column. If set to true, the property will be used in equals/hashCode methods. As soon as you declare this attribute on a property, convention no longer applies for the entity.</xs:documentation>
+      </xs:annotation>
+    </xs:attribute>
+    <xs:attribute type="xs:boolean" name="asTransient">
+      <xs:annotation>
+        <xs:documentation><![CDATA[Allows you to override the getter in a sub-class that extends the base entity. <br> If set to true, all the annotations for the corresponding getter will be commented and a @Transient annotation will be set.]]></xs:documentation>
+      </xs:annotation>
+    </xs:attribute>
+    <xs:attribute type="xs:string" name="comment">
+      <xs:annotation>
+        <xs:documentation>Override the comment defined in the Metadata. The comment that will be inserted as JavaDoc in the corresponding getter method. Defaults to the comment found when reversing the database schema.</xs:documentation>
+      </xs:annotation>
+    </xs:attribute>
+    <xs:attribute type="xs:int" name="decimalDigits">
+      <xs:annotation>
+        <xs:documentation>Override the column decimal digits defined in the Metadata. Defaults to the decimal digits found when reversing the database schema.</xs:documentation>
+      </xs:annotation>
+    </xs:attribute>
+    <xs:attribute type="xs:string" name="defaultValue">
+      <xs:annotation>
+        <xs:documentation>Override the default value defined in the Metadata. Defaults to the default value found when reversing the database schema.</xs:documentation>
+      </xs:annotation>
+    </xs:attribute>
+    <xs:attribute type="xs:boolean" name="messageKey">
+      <xs:annotation>
+        <xs:documentation>Indicates whether the possible values held by this column are used as keys to resolve the associated localized values.</xs:documentation>
+      </xs:annotation>
+    </xs:attribute>
+    <xs:attribute type="xs:boolean" name="html">
+      <xs:annotation>
+        <xs:documentation>Does this column contain html? When true, some special escaping on the front is performed.</xs:documentation>
+      </xs:annotation>
+    </xs:attribute>
+    <xs:attribute type="xs:boolean" name="inverse">
+      <xs:annotation>
+        <xs:documentation>If this column represents a foreign key that points to the target of a ManyToMany association it can be set to true to change the default inverse side of the ManyToMany association. By convention, the column with the highest ordinal position refers to the inverse side.</xs:documentation>
+      </xs:annotation>
+    </xs:attribute>
+    <xs:attribute type="tns:associationDirection" name="associationDirection">
+      <xs:annotation>
+        <xs:documentation>If this column represents an importedKey, should it be bidirectionnal or unidirectionnal</xs:documentation>
+      </xs:annotation>
+    </xs:attribute>
+    <xs:attribute type="xs:boolean" name="enableOneToVirtualOne">
+      <xs:annotation>
+        <xs:documentation>If this column represents an importedKey, and the column is unique, should the one to one be handled via a collection ?</xs:documentation>
+      </xs:annotation>
+    </xs:attribute>
+    <xs:attribute type="xs:boolean" name="autoIncrement">
+      <xs:annotation>
+        <xs:documentation>Override the autoIncrement value defined in the Metadata. You should use it only in case your driver is unable to determine whether the primary key is auto incremented or not.</xs:documentation>
+      </xs:annotation>
+    </xs:attribute>
+    <xs:attribute type="xs:boolean" name="nullable">
+      <xs:annotation>
+        <xs:documentation>Override the nullable value defined in the Metadata. Defaults to the nullable value found when reversing the database schema.</xs:documentation>
+      </xs:annotation>
+    </xs:attribute>
+    <xs:attribute type="xs:boolean" name="formField">
+      <xs:annotation>
+        <xs:documentation>Should this column appear in edit form? By default, most columns appear in the edit form. Note that this configuration is taken into account only if at least one of the entity's columnConfig formField attribute (could be this one) is set to true.</xs:documentation>
+      </xs:annotation>
+    </xs:attribute>
+    <xs:attribute type="xs:boolean" name="searchField">
+      <xs:annotation>
+        <xs:documentation>Should this column appear in search form?</xs:documentation>
+      </xs:annotation>
+    </xs:attribute>
+    <xs:attribute type="xs:boolean" name="searchResult">
+      <xs:annotation>
+        <xs:documentation>Should this column appear in search results?</xs:documentation>
+      </xs:annotation>
+    </xs:attribute>
+    <xs:attribute type="xs:boolean" name="selectLabel">
+      <xs:annotation>
+        <xs:documentation>Should this column be part of the label representation</xs:documentation>
+      </xs:annotation>
+    </xs:attribute>
+    <xs:attribute type="xs:boolean" name="unique">
+      <xs:annotation>
+        <xs:documentation>Override the uniqueness defined in the indexes from the metadata.</xs:documentation>
+      </xs:annotation>
+    </xs:attribute>
+    <xs:attribute type="xs:boolean" name="visible">
+      <xs:annotation>
+        <xs:documentation>Should this column be visible to the users ?</xs:documentation>
+      </xs:annotation>
+    </xs:attribute>
+    <xs:attribute type="xs:boolean" name="version">
+      <xs:annotation>
+        <xs:documentation>Should this column be used to provide optimistic locking? If true, this column will be mapped with a @Version annotation providing the mapped type is compatible with @Version expected type. Defaults to true if the fieldName is "version" and if the mapped type is compatible with @Version.</xs:documentation>
+      </xs:annotation>
+    </xs:attribute>
+    <xs:attribute type="xs:string" name="targetTableName">
+      <xs:annotation>
+        <xs:documentation>If you use a legacy database schema that does not declare foreign keys, you can manually set the target table name. If you do, you may also need to set the targetColumnName. This attribute is not taken into account if a foreign key is already declared in your schema.</xs:documentation>
+      </xs:annotation>
+    </xs:attribute>
+    <xs:attribute type="xs:string" name="targetColumnName">
+      <xs:annotation>
+        <xs:documentation>Once you have set the targetTableName, you can adjust the targetColumnName if it is different from the primaryKey column. Defaults to the targetTableName's primary key column.</xs:documentation>
+      </xs:annotation>
+    </xs:attribute>
+    <xs:attribute type="xs:boolean" name="password">
+      <xs:annotation>
+        <xs:documentation>Should this column be considered as storing a password ? This will impact input types attribute on the web tier.</xs:documentation>
+      </xs:annotation>
+    </xs:attribute>
+  </xs:complexType>
+  <xs:element type="tns:metadata" name="metadata"/>
+  <xs:complexType name="cascade">
+    <xs:sequence/>
+    <xs:attribute type="tns:cascadeType" name="type">
+      <xs:annotation>
+        <xs:documentation>JPA cascade type. Use NONE if you do not want any CascadeType to be set.</xs:documentation>
+      </xs:annotation>
+    </xs:attribute>
+  </xs:complexType>
+  <xs:complexType name="inheritance">
+    <xs:sequence/>
+    <xs:attribute type="xs:string" name="discriminatorColumn"/>
+    <xs:attribute type="xs:string" name="discriminatorValue"/>
+    <xs:attribute type="xs:string" name="parentEntityName"/>
+    <xs:attribute type="tns:inheritanceType" name="strategy"/>
+  </xs:complexType>
+  <xs:complexType name="renamer">
+    <xs:annotation>
+      <xs:documentation><![CDATA[By default Celerio calculates Java field name based on the underlying column name. <br> This setting allows you to change the column name that is passed to Celerio to calculate the default field name. <br> You can for example remove well known prefix pattern from your column names.]]></xs:documentation>
+    </xs:annotation>
+    <xs:sequence/>
+    <xs:attribute type="xs:string" name="regexp">
+      <xs:annotation>
+        <xs:documentation>The regular expression to apply on the column name. For example, assuming you want to remove from all column names the prefix string that consists of 3 chars and a '_', you can use 'regexp="^.{3}_" replace=""' or 'regexp="^qrtz_" replace="Quartz_"'</xs:documentation>
+      </xs:annotation>
+    </xs:attribute>
+    <xs:attribute type="xs:string" name="replace">
+      <xs:annotation>
+        <xs:documentation>The replacement String. For example, assuming you want to remove from all column names the prefix string that consists of 3 chars and a '_', you can use 'regexp="^.{3}_" replace=""' or 'regexp="^qrtz_" replace="Quartz_"'</xs:documentation>
+      </xs:annotation>
+    </xs:attribute>
+  </xs:complexType>
+  <xs:complexType name="generatedValue">
+    <xs:sequence/>
+    <xs:attribute type="xs:string" name="generator">
+      <xs:annotation>
+        <xs:documentation>The name of the primary key generator to use</xs:documentation>
+      </xs:annotation>
+    </xs:attribute>
+    <xs:attribute type="tns:generationType" name="strategy">
+      <xs:annotation>
+        <xs:documentation>The primary key generation strategy that the persistence provider must use to generate the annotated entity primary key.</xs:documentation>
+      </xs:annotation>
+    </xs:attribute>
+  </xs:complexType>
+  <xs:complexType name="eclipseFormatter">
+    <xs:sequence/>
+    <xs:attribute type="tns:formatterEnum" use="required" name="formatterChoice"/>
+    <xs:attribute type="xs:string" name="formatterFile"/>
+  </xs:complexType>
+  <xs:complexType name="sequencePattern">
+    <xs:annotation>
+      <xs:documentation>A pattern is a structure to help handling inclusion and exclusion of resources</xs:documentation>
+    </xs:annotation>
+    <xs:sequence/>
+    <xs:attribute type="xs:string" name="tableNamePattern">
+      <xs:annotation>
+        <xs:documentation><![CDATA[The table pattern. If the pattern contains '?', '*' the matching will be done using an ant matcher, otherwise it will do a equalsIgnoreCase <ul> <li>? matches one character</li> <li>* matches zero or more characters</li> </ul> Some examples: <ul> <li>US?R - matches USER but also USOR or USAR etc.</li> <li>TBL_* - matches all tables whose name starts with TBL_, for example TBL_USER</li> </ul>]]></xs:documentation>
+      </xs:annotation>
+    </xs:attribute>
+    <xs:attribute type="xs:string" name="sequenceName">
+      <xs:annotation>
+        <xs:documentation>The sequence name to use for the entity that is associated with the matching table. You can use the magic '{TABLE_NAME}' token which is replaced with the corresponding table name. For example: SEQ_{TABLE_NAME}.</xs:documentation>
+      </xs:annotation>
+    </xs:attribute>
+    <xs:attribute type="xs:int" name="initialValue">
+      <xs:annotation>
+        <xs:documentation>(Optional) The value from which the sequence object is to start generating. Defaults to 1.</xs:documentation>
+      </xs:annotation>
+    </xs:attribute>
+    <xs:attribute type="xs:int" name="allocationSize">
+      <xs:annotation>
+        <xs:documentation>(Optional) The amount to increment by when allocating sequence numbers from the sequence. Defaults to 50.</xs:documentation>
+      </xs:annotation>
+    </xs:attribute>
+  </xs:complexType>
+  <xs:complexType name="entityConfig">
+    <xs:annotation>
+      <xs:documentation>Describes an entity config</xs:documentation>
+    </xs:annotation>
+    <xs:sequence>
+      <xs:element type="tns:cacheConfig" name="cacheConfig" minOccurs="0">
+        <xs:annotation>
+          <xs:documentation>The 2d level cache configuration for this entity.</xs:documentation>
+        </xs:annotation>
+      </xs:element>
+      <xs:element name="usages" minOccurs="0">
+        <xs:annotation>
+          <xs:documentation>Free parameters. Not used internally.</xs:documentation>
+        </xs:annotation>
+        <xs:complexType>
+          <xs:sequence>
+            <xs:element type="xs:string" name="usage" minOccurs="0" maxOccurs="unbounded"/>
+          </xs:sequence>
+        </xs:complexType>
+      </xs:element>
+      <xs:element name="labels" minOccurs="0">
+        <xs:annotation>
+          <xs:documentation>The labels for this entity. They appear in the entity properties file located under 'src/main/resources/localization/domain'.</xs:documentation>
+        </xs:annotation>
+        <xs:complexType>
+          <xs:sequence>
+            <xs:element type="tns:label" name="label" minOccurs="0" maxOccurs="unbounded"/>
+          </xs:sequence>
+        </xs:complexType>
+      </xs:element>
+      <xs:element type="tns:inheritance" name="inheritance" minOccurs="0">
+        <xs:annotation>
+          <xs:documentation>Inheritance configuration.</xs:documentation>
+        </xs:annotation>
+      </xs:element>
+      <xs:element type="tns:extendsClass" name="extendsClass" minOccurs="0">
+        <xs:annotation>
+          <xs:documentation>Specify the base class that this entity should extends. Only for root entity.</xs:documentation>
+        </xs:annotation>
+      </xs:element>
+      <xs:element name="implementsInterfaces" minOccurs="0">
+        <xs:annotation>
+          <xs:documentation>Specify the extra interfaces that this entity should implement.</xs:documentation>
+        </xs:annotation>
+        <xs:complexType>
+          <xs:sequence>
+            <xs:element type="tns:implementsInterface" name="implementsInterface" minOccurs="0" maxOccurs="unbounded"/>
+          </xs:sequence>
+        </xs:complexType>
+      </xs:element>
+      <xs:element name="metaAttributes" minOccurs="0">
+        <xs:annotation>
+          <xs:documentation>Meta attributes are free form key value pairs.</xs:documentation>
+        </xs:annotation>
+        <xs:complexType>
+          <xs:sequence>
+            <xs:element type="tns:metaAttribute" name="metaAttribute" minOccurs="0" maxOccurs="unbounded"/>
+          </xs:sequence>
+        </xs:complexType>
+      </xs:element>
+      <xs:element name="columnConfigs" minOccurs="0">
+        <xs:annotation>
+          <xs:documentation>This entity's columnConfigs. Note that for entities without inheritance or for entities with a JOIN inheritance strategy, if a column is present in the table's meta data but has no corresponding entityConfig in this list, then an entityConfig is created by default and added automatically to this list.</xs:documentation>
+        </xs:annotation>
+        <xs:complexType>
+          <xs:sequence>
+            <xs:element type="tns:columnConfig" name="columnConfig" minOccurs="0" maxOccurs="unbounded"/>
+          </xs:sequence>
+        </xs:complexType>
+      </xs:element>
+      <xs:element name="customAnnotations" minOccurs="0">
+        <xs:annotation>
+          <xs:documentation>List of custom annotations to apply on this entity.</xs:documentation>
+        </xs:annotation>
+        <xs:complexType>
+          <xs:sequence>
+            <xs:element type="tns:customAnnotation" name="customAnnotation" minOccurs="0" maxOccurs="unbounded"/>
+          </xs:sequence>
+        </xs:complexType>
+      </xs:element>
+    </xs:sequence>
+    <xs:attribute type="xs:string" name="entityName">
+      <xs:annotation>
+        <xs:documentation><![CDATA[The JPA entity's type. <br> For example, entityName="BankAccount". <br> By default, the entity name is deduced from the table name. <br> For example: 'bank_account' will become 'BankAccount';]]></xs:documentation>
+      </xs:annotation>
+    </xs:attribute>
+    <xs:attribute type="xs:string" name="sequenceName">
+      <xs:annotation>
+        <xs:documentation>Allows you to specify the sequence name to use in order to generate this entity pk value. When a sequence name is provided the corresponding @SequenceGenerator and @GeneratedValue annotations are added to the primary key attribute.</xs:documentation>
+      </xs:annotation>
+    </xs:attribute>
+    <xs:attribute type="xs:string" name="tableName">
+      <xs:annotation>
+        <xs:documentation>The underlying table name for the entity. If not set, inheritance must be configured.</xs:documentation>
+      </xs:annotation>
+    </xs:attribute>
+    <xs:attribute type="xs:boolean" name="indexed">
+      <xs:annotation>
+        <xs:documentation>Should this entity be annotated with hibernate search @Indexed annotation? False by default, unless if one columnConfig is marked as indexed.</xs:documentation>
+      </xs:annotation>
+    </xs:attribute>
+    <xs:attribute type="xs:boolean" name="middleTable">
+      <xs:annotation>
+        <xs:documentation>By convention a table is considered as a many-to-many middle table if it has two foreign keys and no other regular columns. This attribute allows you to consider this table as a middle table, even if it has other regular columns. A regular column is a column that is neither a primary key nor a version (i.e. optimistic lock).</xs:documentation>
+      </xs:annotation>
+    </xs:attribute>
+    <xs:attribute type="xs:string" name="comment">
+      <xs:annotation>
+        <xs:documentation>The comment that will be inserted in this entity's JavaDoc.</xs:documentation>
+      </xs:annotation>
+    </xs:attribute>
+    <xs:attribute type="xs:string" name="rootPackage">
+      <xs:annotation>
+        <xs:documentation><![CDATA[Allows you to override the default root package.<br> Example: com.yourcompany]]></xs:documentation>
+      </xs:annotation>
+    </xs:attribute>
+    <xs:attribute type="xs:string" name="subPackage">
+      <xs:annotation>
+        <xs:documentation><![CDATA[When you define a sub-package, the resulting entity's package becomes "<rootPackage>.domain.<subPackage>" instead of "<rootPackage>.domain". There is no sub-package by default.]]></xs:documentation>
+      </xs:annotation>
+    </xs:attribute>
+    <xs:attribute type="xs:string" name="label">
+      <xs:annotation>
+        <xs:documentation>The base label for this entity. You may either set it here or in a nested labels/label.</xs:documentation>
+      </xs:annotation>
+    </xs:attribute>
+    <xs:attribute type="tns:associationDirection" name="associationDirection">
+      <xs:annotation>
+        <xs:documentation>It is pertinent only if this entity's table plays the role of a middle table in a many-to-many association. In that case you can use this parameter to set the many-to-many association direction.</xs:documentation>
+      </xs:annotation>
+    </xs:attribute>
+    <xs:attribute type="tns:collectionType" name="collectionType">
+      <xs:annotation>
+        <xs:documentation>You can override the default collection type for this entity</xs:documentation>
+      </xs:annotation>
+    </xs:attribute>
+  </xs:complexType>
+  <xs:complexType name="extendsClass">
+    <xs:sequence/>
+    <xs:attribute type="xs:string" use="required" name="fullType">
+      <xs:annotation>
+        <xs:documentation>The full class name that this entity extends. For example 'com.mycompany.MyClass'. This is taken into account only if the entity is a root entity.</xs:documentation>
+      </xs:annotation>
+    </xs:attribute>
+  </xs:complexType>
+  <xs:complexType name="safeHtml">
+    <xs:annotation>
+      <xs:documentation>Add Hibernate SafeHtml annotation on this field.</xs:documentation>
+    </xs:annotation>
+    <xs:sequence/>
+    <xs:attribute type="tns:safeHtmlWhiteListType" name="whitelistType"/>
+  </xs:complexType>
+  <xs:complexType name="implementsInterface">
+    <xs:sequence/>
+    <xs:attribute type="xs:string" use="required" name="fullType">
+      <xs:annotation>
+        <xs:documentation>The full interface name that this entity implements. For example 'com.mycompany.MyInterface'</xs:documentation>
+      </xs:annotation>
+    </xs:attribute>
+  </xs:complexType>
+  <xs:complexType name="xmlFormatter">
+    <xs:sequence/>
+    <xs:attribute type="xs:boolean" use="required" name="enableXmlFormatter">
+      <xs:annotation>
+        <xs:documentation>Enable Formatter for all XML generated file. Default to false. Note: currently formatting sort attributes in alphabetical order. This is not convenient for certain tags.</xs:documentation>
+      </xs:annotation>
+    </xs:attribute>
+    <xs:attribute type="xs:int" name="maximumLineWidth"/>
+    <xs:attribute type="xs:int" name="indent"/>
+  </xs:complexType>
+  <xs:complexType name="conventions">
+    <xs:annotation>
+      <xs:documentation>Change the default Celerio conventions to your own needs.</xs:documentation>
+    </xs:annotation>
+    <xs:sequence>
+      <xs:element type="tns:eclipseFormatter" name="eclipseFormatter" minOccurs="0">
+        <xs:annotation>
+          <xs:documentation>Defines the formatting option of the generated Java files.</xs:documentation>
+        </xs:annotation>
+      </xs:element>
+      <xs:element type="tns:xmlFormatter" name="xmlFormatter" minOccurs="0">
+        <xs:annotation>
+          <xs:documentation>Defines the formatting options of the generated XML/XHTML files.</xs:documentation>
+        </xs:annotation>
+      </xs:element>
+      <xs:element name="classTypes" minOccurs="0">
+        <xs:annotation>
+          <xs:documentation>Override the conventions for classes</xs:documentation>
+        </xs:annotation>
+        <xs:complexType>
+          <xs:sequence>
+            <xs:element type="tns:classTypeOverride" name="classType" minOccurs="0" maxOccurs="unbounded"/>
+          </xs:sequence>
+        </xs:complexType>
+      </xs:element>
+      <xs:element name="generatedPackages" minOccurs="0">
+        <xs:annotation>
+          <xs:documentation>Override the conventions for packages</xs:documentation>
+        </xs:annotation>
+        <xs:complexType>
+          <xs:sequence>
+            <xs:element type="tns:generatedPackageOverride" name="generatedPackage" minOccurs="0" maxOccurs="unbounded"/>
+          </xs:sequence>
+        </xs:complexType>
+      </xs:element>
+      <xs:element name="methodConventions" minOccurs="0">
+        <xs:annotation>
+          <xs:documentation>Override the conventions for methods</xs:documentation>
+        </xs:annotation>
+        <xs:complexType>
+          <xs:sequence>
+            <xs:element type="tns:methodConventionOverride" name="methodConvention" minOccurs="0" maxOccurs="unbounded"/>
+          </xs:sequence>
+        </xs:complexType>
+      </xs:element>
+      <xs:element name="wellKnownFolders" minOccurs="0">
+        <xs:annotation>
+          <xs:documentation>Override the conventions for folders</xs:documentation>
+        </xs:annotation>
+        <xs:complexType>
+          <xs:sequence>
+            <xs:element type="tns:wellKnownFolderOverride" name="wellKnownFolder" minOccurs="0" maxOccurs="unbounded"/>
+          </xs:sequence>
+        </xs:complexType>
+      </xs:element>
+      <xs:element name="tableRenamers" minOccurs="0">
+        <xs:annotation>
+          <xs:documentation>Add renamers for tables</xs:documentation>
+        </xs:annotation>
+        <xs:complexType>
+          <xs:sequence>
+            <xs:element type="tns:renamer" name="tableRenamer" minOccurs="0" maxOccurs="unbounded"/>
+          </xs:sequence>
+        </xs:complexType>
+      </xs:element>
+      <xs:element name="columnRenamers" minOccurs="0">
+        <xs:annotation>
+          <xs:documentation>Add renamers for columns</xs:documentation>
+        </xs:annotation>
+        <xs:complexType>
+          <xs:sequence>
+            <xs:element type="tns:renamer" name="columnRenamer" minOccurs="0" maxOccurs="unbounded"/>
+          </xs:sequence>
+        </xs:complexType>
+      </xs:element>
+    </xs:sequence>
+    <xs:attribute type="tns:collectionType" name="collectionType">
+      <xs:annotation>
+        <xs:documentation>You can override the default collection type for this entity</xs:documentation>
+      </xs:annotation>
+    </xs:attribute>
+    <xs:attribute type="xs:string" name="identifiableProperty">
+      <xs:annotation>
+        <xs:documentation>The property name used in the Identifiable interface. Defaults to 'id'. If all your primary key are mapped to the same property name, you should change the identifiable property here to limit redundancy.</xs:documentation>
+      </xs:annotation>
+    </xs:attribute>
+    <xs:attribute type="tns:trueFalse" name="entitySubPackagePreprended">
+      <xs:annotation>
+        <xs:documentation>When constructing the package name of a class constructed using a GeneratedPackage, tell if the GeneratedPackage subPackage should be appended. For example given the entity 'MyEntity' with subpackage 'mysubpackage', and the generated package ManagerImpl with subpackage 'impl' then the packageName of all classes for MyEntity constructed using ManagerImpl will have the subpackage 'impl.mysubpackage'</xs:documentation>
+      </xs:annotation>
+    </xs:attribute>
+  </xs:complexType>
+  <xs:complexType name="configuration">
+    <xs:sequence>
+      <xs:element type="tns:celerioTemplateContext" name="celerioTemplateContext" minOccurs="0">
+        <xs:annotation>
+          <xs:documentation>Entry point to extend Celerio engine's Velocity context. Only needed if you develop new Celerio templates.</xs:documentation>
+        </xs:annotation>
+      </xs:element>
+      <xs:element name="packs" minOccurs="0">
+        <xs:annotation>
+          <xs:documentation>List of template packs to execute during the generation. Defaults to the template packs found in the classpath.</xs:documentation>
+        </xs:annotation>
+        <xs:complexType>
+          <xs:sequence>
+            <xs:element type="tns:pack" name="pack" minOccurs="0" maxOccurs="unbounded"/>
+          </xs:sequence>
+        </xs:complexType>
+      </xs:element>
+      <xs:element name="modules" minOccurs="0">
+        <xs:annotation>
+          <xs:documentation>List of modules enabled during the generation. Modules are cross cutting functionalities that span across packs.</xs:documentation>
+        </xs:annotation>
+        <xs:complexType>
+          <xs:sequence>
+            <xs:element type="tns:module" name="module" minOccurs="0" maxOccurs="unbounded"/>
+          </xs:sequence>
+        </xs:complexType>
+      </xs:element>
+      <xs:element name="customModules" minOccurs="0">
+        <xs:annotation>
+          <xs:documentation>List of custom modules enabled during the generation. Modules are cross cutting functionalities that span across packs.</xs:documentation>
+        </xs:annotation>
+        <xs:complexType>
+          <xs:sequence>
+            <xs:element type="xs:string" name="customModule" minOccurs="0" maxOccurs="unbounded"/>
+          </xs:sequence>
+        </xs:complexType>
+      </xs:element>
+      <xs:element name="filenames" minOccurs="0">
+        <xs:annotation>
+          <xs:documentation>Control the generation output by filtering the generated files based on their filename.</xs:documentation>
+        </xs:annotation>
+        <xs:complexType>
+          <xs:sequence>
+            <xs:element type="tns:pattern" name="filename" minOccurs="0" maxOccurs="unbounded"/>
+          </xs:sequence>
+        </xs:complexType>
+      </xs:element>
+      <xs:element name="templates" minOccurs="0">
+        <xs:annotation>
+          <xs:documentation>Control the generation output by filtering the execution of the generation templates based on their filename.</xs:documentation>
+        </xs:annotation>
+        <xs:complexType>
+          <xs:sequence>
+            <xs:element type="tns:pattern" name="template" minOccurs="0" maxOccurs="unbounded"/>
+          </xs:sequence>
+        </xs:complexType>
+      </xs:element>
+      <xs:element name="tables" minOccurs="0">
+        <xs:annotation>
+          <xs:documentation>Filter the tables you want to be generated</xs:documentation>
+        </xs:annotation>
+        <xs:complexType>
+          <xs:sequence>
+            <xs:element type="tns:pattern" name="table" minOccurs="0" maxOccurs="unbounded"/>
+          </xs:sequence>
+        </xs:complexType>
+      </xs:element>
+      <xs:element name="sequences" minOccurs="0">
+        <xs:annotation>
+          <xs:documentation>Defines sequence names based on table name</xs:documentation>
+        </xs:annotation>
+        <xs:complexType>
+          <xs:sequence>
+            <xs:element type="tns:sequencePattern" name="sequence" minOccurs="0" maxOccurs="unbounded"/>
+          </xs:sequence>
+        </xs:complexType>
+      </xs:element>
+      <xs:element name="numberMappings" minOccurs="0">
+        <xs:annotation>
+          <xs:documentation>The list of number mappings. The first match is used. If no match is found, convention applies.</xs:documentation>
+        </xs:annotation>
+        <xs:complexType>
+          <xs:sequence>
+            <xs:element type="tns:numberMapping" name="numberMapping" minOccurs="0" maxOccurs="unbounded"/>
+          </xs:sequence>
+        </xs:complexType>
+      </xs:element>
+      <xs:element name="dateMappings" minOccurs="0">
+        <xs:annotation>
+          <xs:documentation>The list of date mappings. The first match is used. If no match is found, convention applies.</xs:documentation>
+        </xs:annotation>
+        <xs:complexType>
+          <xs:sequence>
+            <xs:element type="tns:dateMapping" name="dateMapping" minOccurs="0" maxOccurs="unbounded"/>
+          </xs:sequence>
+        </xs:complexType>
+      </xs:element>
+      <xs:element type="tns:cacheConfig" name="defaultEntityCacheConfig" minOccurs="0">
+        <xs:annotation>
+          <xs:documentation>Default Entity 2d level cache configuration. Uses ehcache. To disable default cache annotation generation for entity having no CacheConfig element, simply remove this element.</xs:documentation>
+        </xs:annotation>
+      </xs:element>
+      <xs:element type="tns:manyToOneConfig" name="defaultManyToOneConfig" minOccurs="0">
+        <xs:annotation>
+          <xs:documentation>Default many-to-one configuration allowing you to configure FetchType, Cascade and Cache globally.</xs:documentation>
+        </xs:annotation>
+      </xs:element>
+      <xs:element type="tns:oneToManyConfig" name="defaultOneToManyConfig" minOccurs="0">
+        <xs:annotation>
+          <xs:documentation>Default one-to-many configuration allowing you to configure FetchType, Cascade and Cache globally.</xs:documentation>
+        </xs:annotation>
+      </xs:element>
+      <xs:element type="tns:oneToOneConfig" name="defaultOneToOneConfig" minOccurs="0">
+        <xs:annotation>
+          <xs:documentation>Default one-to-one configuration allowing you to configure FetchType, Cascade and Cache globally.</xs:documentation>
+        </xs:annotation>
+      </xs:element>
+      <xs:element type="tns:oneToOneConfig" name="defaultInverseOneToOneConfig" minOccurs="0">
+        <xs:annotation>
+          <xs:documentation>Default inverse one-to-one configuration allowing you to configure FetchType, Cascade and Cache globally.</xs:documentation>
+        </xs:annotation>
+      </xs:element>
+      <xs:element type="tns:manyToManyConfig" name="defaultManyToManyConfig" minOccurs="0">
+        <xs:annotation>
+          <xs:documentation>Default many-to-many configuration allowing you to configure FetchType, Cascade and Cache globally.</xs:documentation>
+        </xs:annotation>
+      </xs:element>
+      <xs:element type="tns:manyToManyConfig" name="defaultInverseManyToManyConfig" minOccurs="0">
+        <xs:annotation>
+          <xs:documentation>Default inverse many-to-many configuration allowing you to configure FetchType, Cascade and Cache globally.</xs:documentation>
+        </xs:annotation>
+      </xs:element>
+      <xs:element type="tns:jodaTime" name="jodaTime" minOccurs="0">
+        <xs:annotation>
+          <xs:documentation>Configure the Hibernate type to use when mapping an attribute whose type is LocalDate or LocalDateTime.</xs:documentation>
+        </xs:annotation>
+      </xs:element>
+      <xs:element type="tns:conventions" name="conventions" minOccurs="0">
+        <xs:annotation>
+          <xs:documentation>Configure the java convention such as classnames, packages, methods</xs:documentation>
+        </xs:annotation>
+      </xs:element>
+      <xs:element name="metaAttributes" minOccurs="0">
+        <xs:annotation>
+          <xs:documentation>For future use</xs:documentation>
+        </xs:annotation>
+        <xs:complexType>
+          <xs:sequence>
+            <xs:element type="tns:metaAttribute" name="metaAttribute" minOccurs="0" maxOccurs="unbounded"/>
+          </xs:sequence>
+        </xs:complexType>
+      </xs:element>
+      <xs:element type="tns:generation" name="generation" minOccurs="0">
+        <xs:annotation>
+          <xs:documentation>Miscellaneous generation configuration</xs:documentation>
+        </xs:annotation>
+      </xs:element>
+      <xs:element type="tns:headerComment" name="headerComment" minOccurs="0">
+        <xs:annotation>
+          <xs:documentation>The JDBC settings enabling Celerio to retrieve your database meta data.</xs:documentation>
+        </xs:annotation>
+      </xs:element>
+      <xs:element type="tns:restriction" name="restriction" minOccurs="0">
+        <xs:annotation>
+          <xs:documentation>Restrict the generation to the given elements</xs:documentation>
+        </xs:annotation>
+      </xs:element>
+    </xs:sequence>
+    <xs:attribute type="tns:associationDirection" name="associationDirection">
+      <xs:annotation>
+        <xs:documentation>Choose the default association direction</xs:documentation>
+      </xs:annotation>
+    </xs:attribute>
+    <xs:attribute type="xs:string" name="applicationName">
+      <xs:annotation>
+        <xs:documentation><![CDATA[Specify the default application name that is used in the generated pom.xml. It should be one word, no space.<br> Example: casino]]></xs:documentation>
+      </xs:annotation>
+    </xs:attribute>
+    <xs:attribute type="xs:string" name="rootPackage">
+      <xs:annotation>
+        <xs:documentation><![CDATA[Specify the default root package for all the generated java code<br> Example: com.mycompany]]></xs:documentation>
+      </xs:annotation>
+    </xs:attribute>
+  </xs:complexType>
+  <xs:complexType name="genericGenerator">
+    <xs:sequence>
+      <xs:element name="parameters" minOccurs="0">
+        <xs:complexType>
+          <xs:sequence>
+            <xs:element type="tns:metaAttribute" name="parameter" minOccurs="0" maxOccurs="unbounded"/>
+          </xs:sequence>
+        </xs:complexType>
+      </xs:element>
+    </xs:sequence>
+    <xs:attribute type="xs:string" name="name"/>
+    <xs:attribute type="xs:string" name="strategy"/>
+  </xs:complexType>
+  <xs:complexType name="manyToManyConfig">
+    <xs:annotation>
+      <xs:documentation>The ManyToManyConfig allows you to fine tune your @ManyToMany association. The ManyToManyConfig element must be a child of a columnConfig element referencing (i.e foreignkey) the entity that is the target of this @ManyToMany association. The columnConfig necessarily belongs to a 'join entity'.</xs:documentation>
+    </xs:annotation>
+    <xs:sequence>
+      <xs:element name="labels" minOccurs="0">
+        <xs:annotation>
+          <xs:documentation>The labels for this association.</xs:documentation>
+        </xs:annotation>
+        <xs:complexType>
+          <xs:sequence>
+            <xs:element type="tns:label" name="label" minOccurs="0" maxOccurs="unbounded"/>
+          </xs:sequence>
+        </xs:complexType>
+      </xs:element>
+      <xs:element name="cascades" minOccurs="0">
+        <xs:annotation>
+          <xs:documentation>The list of JPA cascade types for the this association.</xs:documentation>
+        </xs:annotation>
+        <xs:complexType>
+          <xs:sequence>
+            <xs:element type="tns:cascade" name="cascade" minOccurs="0" maxOccurs="unbounded"/>
+          </xs:sequence>
+        </xs:complexType>
+      </xs:element>
+      <xs:element type="tns:cacheConfig" name="cacheConfig" minOccurs="0">
+        <xs:annotation>
+          <xs:documentation>The 2d level cache configuration for this association.</xs:documentation>
+        </xs:annotation>
+      </xs:element>
+      <xs:element type="tns:associationAction" name="associationAction" minOccurs="0">
+        <xs:annotation>
+          <xs:documentation>Configure which actions should or should not be generated for this association in the front end layer.</xs:documentation>
+        </xs:annotation>
+      </xs:element>
+    </xs:sequence>
+    <xs:attribute type="xs:string" name="var">
+      <xs:annotation>
+        <xs:documentation>The variable name for the collection. It should be plural, for example: 'children'. Please configure also the elementVar as the singular of this var.</xs:documentation>
+      </xs:annotation>
+    </xs:attribute>
+    <xs:attribute type="xs:string" name="elementVar">
+      <xs:annotation>
+        <xs:documentation>The variable name for an element of the collection. For example, if the variable name for the collection is 'children', the elementVar should be child. This elementVar will be used to generate convenient methods for the collection, such as an adder method addChild(YourType child).</xs:documentation>
+      </xs:annotation>
+    </xs:attribute>
+    <xs:attribute type="tns:fetchType" name="fetch">
+      <xs:annotation>
+        <xs:documentation>The JPA fetch type for this association. Use NONE if you do not want any fetchType to be set.</xs:documentation>
+      </xs:annotation>
+    </xs:attribute>
+    <xs:attribute type="xs:string" name="orderBy">
+      <xs:annotation>
+        <xs:documentation><![CDATA[Specifies the ordering of the elements. If not null, the JPA <code>@OrderBy</code> annotation is used. Example: orderBy="birthdate DESC" will generate]]></xs:documentation>
+      </xs:annotation>
+    </xs:attribute>
+    <xs:attribute type="xs:string" name="targetEntityName">
+      <xs:annotation>
+        <xs:documentation>If the target entity is part of a SINGLE_TABLE inheritance hierarchy, you must set name of the target entity as Celerio cannot guess it.</xs:documentation>
+      </xs:annotation>
+    </xs:attribute>
+  </xs:complexType>
+  <xs:element type="tns:celerio" name="celerio"/>
+  <xs:complexType name="column">
+    <xs:annotation>
+      <xs:documentation>Configuration of a column, the data reflect the jdbc metadata</xs:documentation>
+    </xs:annotation>
+    <xs:sequence>
+      <xs:element name="enumValues" minOccurs="0">
+        <xs:annotation>
+          <xs:documentation>Enum values if the column represents an enum</xs:documentation>
+        </xs:annotation>
+        <xs:complexType>
+          <xs:sequence>
+            <xs:element type="xs:string" name="enumValue" minOccurs="0" maxOccurs="unbounded"/>
+          </xs:sequence>
+        </xs:complexType>
+      </xs:element>
+      <xs:element name="metaAttributes" minOccurs="0">
+        <xs:annotation>
+          <xs:documentation>Enum values if the column represents an enum</xs:documentation>
+        </xs:annotation>
+        <xs:complexType>
+          <xs:sequence>
+            <xs:element type="tns:metaAttribute" name="metaAttribute" minOccurs="0" maxOccurs="unbounded"/>
+          </xs:sequence>
+        </xs:complexType>
+      </xs:element>
+    </xs:sequence>
+    <xs:attribute type="xs:string" use="required" name="name">
+      <xs:annotation>
+        <xs:documentation>Column name</xs:documentation>
+      </xs:annotation>
+    </xs:attribute>
+    <xs:attribute type="xs:string" name="columnDef">
+      <xs:annotation>
+        <xs:documentation>Default value</xs:documentation>
+      </xs:annotation>
+    </xs:attribute>
+    <xs:attribute type="xs:int" use="required" name="decimalDigits">
+      <xs:annotation>
+        <xs:documentation>The number of fractional digits</xs:documentation>
+      </xs:annotation>
+    </xs:attribute>
+    <xs:attribute type="xs:boolean" name="autoIncrement">
+      <xs:annotation>
+        <xs:documentation>Is Auto Increment?</xs:documentation>
+      </xs:annotation>
+    </xs:attribute>
+    <xs:attribute type="xs:boolean" use="required" name="nullable">
+      <xs:annotation>
+        <xs:documentation>Is NULL allowed ?</xs:documentation>
+      </xs:annotation>
+    </xs:attribute>
+    <xs:attribute type="xs:int" use="required" name="ordinalPosition">
+      <xs:annotation>
+        <xs:documentation>Index of column in table (starting at 1)</xs:documentation>
+      </xs:annotation>
+    </xs:attribute>
+    <xs:attribute type="xs:string" name="remarks">
+      <xs:annotation>
+        <xs:documentation>Comment describing the column</xs:documentation>
+      </xs:annotation>
+    </xs:attribute>
+    <xs:attribute type="xs:int" use="required" name="size">
+      <xs:annotation>
+        <xs:documentation>Column size. For char or date types this is the maximum number of characters, for numeric or decimal types this is precision.</xs:documentation>
+      </xs:annotation>
+    </xs:attribute>
+    <xs:attribute type="tns:jdbcType" name="type">
+      <xs:annotation>
+        <xs:documentation>This column jdbc type</xs:documentation>
+      </xs:annotation>
+    </xs:attribute>
+  </xs:complexType>
+  <xs:complexType name="celerioTemplateContext">
+    <xs:sequence>
+      <xs:element name="entityContextProperties" minOccurs="0">
+        <xs:complexType>
+          <xs:sequence>
+            <xs:element type="tns:entityContextProperty" name="entityContextProperty" minOccurs="0" maxOccurs="unbounded"/>
+          </xs:sequence>
+        </xs:complexType>
+      </xs:element>
+    </xs:sequence>
+  </xs:complexType>
+  <xs:complexType name="numberMapping">
+    <xs:annotation>
+      <xs:documentation>Global rule to map columns whose JDBC TYPE correspond to a number to a Java type.</xs:documentation>
+    </xs:annotation>
+    <xs:sequence/>
+    <xs:attribute type="tns:mappedType" name="mappedType">
+      <xs:annotation>
+        <xs:documentation>The mapped type to use when both the column size and decimal digit value fall into the specified ranges.</xs:documentation>
+      </xs:annotation>
+    </xs:attribute>
+    <xs:attribute type="xs:int" name="columnSizeMin">
+      <xs:annotation>
+        <xs:documentation>The minimum (inclusive) column size to fall into this mapping range.</xs:documentation>
+      </xs:annotation>
+    </xs:attribute>
+    <xs:attribute type="xs:int" name="columnSizeMax">
+      <xs:annotation>
+        <xs:documentation>The maximum (exclusive) column size to fall into this mapping range.</xs:documentation>
+      </xs:annotation>
+    </xs:attribute>
+    <xs:attribute type="xs:int" name="columnDecimalDigitsMin">
+      <xs:annotation>
+        <xs:documentation>The minimum (inclusive) column decimal digit value to fall into this mapping range.</xs:documentation>
+      </xs:annotation>
+    </xs:attribute>
+    <xs:attribute type="xs:int" name="columnDecimalDigitsMax">
+      <xs:annotation>
+        <xs:documentation>The maximum (exclusive) column decimal digit value to fall into this mapping range.</xs:documentation>
+      </xs:annotation>
+    </xs:attribute>
+  </xs:complexType>
+  <xs:complexType name="cacheConfig">
+    <xs:annotation>
+      <xs:documentation>Configuration element for Hibernate/EhCache 2d level cache.</xs:documentation>
+    </xs:annotation>
+    <xs:sequence/>
+    <xs:attribute type="tns:cacheConcurrencyStrategy" name="usage">
+      <xs:annotation>
+        <xs:documentation>Hibernate/EhCache CacheConcurrencyStrategy. Use NONE if you do not want any Cache annotation to be set.</xs:documentation>
+      </xs:annotation>
+    </xs:attribute>
+    <xs:attribute type="xs:string" name="include"/>
+    <xs:attribute type="xs:string" name="region"/>
+  </xs:complexType>
+  <xs:complexType name="oneToOneConfig">
+    <xs:sequence>
+      <xs:element name="labels" minOccurs="0">
+        <xs:annotation>
+          <xs:documentation>The labels for this association.</xs:documentation>
+        </xs:annotation>
+        <xs:complexType>
+          <xs:sequence>
+            <xs:element type="tns:label" name="label" minOccurs="0" maxOccurs="unbounded"/>
+          </xs:sequence>
+        </xs:complexType>
+      </xs:element>
+      <xs:element name="cascades" minOccurs="0">
+        <xs:annotation>
+          <xs:documentation>The list of JPA cascade types for the this association.</xs:documentation>
+        </xs:annotation>
+        <xs:complexType>
+          <xs:sequence>
+            <xs:element type="tns:cascade" name="cascade" minOccurs="0" maxOccurs="unbounded"/>
+          </xs:sequence>
+        </xs:complexType>
+      </xs:element>
+      <xs:element type="tns:cacheConfig" name="cacheConfig" minOccurs="0">
+        <xs:annotation>
+          <xs:documentation>The 2d level cache configuration for this association.</xs:documentation>
+        </xs:annotation>
+      </xs:element>
+      <xs:element type="tns:associationAction" name="associationAction" minOccurs="0">
+        <xs:annotation>
+          <xs:documentation>Configure which actions should or should not be generated for this association in the front end layer.</xs:documentation>
+        </xs:annotation>
+      </xs:element>
+    </xs:sequence>
+    <xs:attribute type="xs:string" name="var">
+      <xs:annotation>
+        <xs:documentation>The variable name for association. It should be singular, for example: 'parent'.</xs:documentation>
+      </xs:annotation>
+    </xs:attribute>
+    <xs:attribute type="xs:boolean" name="orphanRemoval">
+      <xs:annotation>
+        <xs:documentation>The JPA orphanRemoval for this association.</xs:documentation>
+      </xs:annotation>
+    </xs:attribute>
+    <xs:attribute type="tns:fetchType" name="fetch">
+      <xs:annotation>
+        <xs:documentation>The JPA fetch type for this association. Use NONE if you do not want any fetchType to be set.</xs:documentation>
+      </xs:annotation>
+    </xs:attribute>
+    <xs:attribute type="xs:string" name="targetEntityName">
+      <xs:annotation>
+        <xs:documentation>If the target entity is part of a SINGLE_TABLE inheritance hierarchy, you must set name of the target entity as Celerio cannot guess it.</xs:documentation>
+      </xs:annotation>
+    </xs:attribute>
+  </xs:complexType>
+  <xs:complexType name="generation">
+    <xs:sequence/>
+    <xs:attribute type="xs:string" name="modelBasePrefix"/>
+    <xs:attribute type="xs:boolean" use="required" name="useMavenCelerioPlugin"/>
+    <xs:attribute type="xs:string" name="version"/>
+  </xs:complexType>
+  <xs:complexType name="pattern">
+    <xs:annotation>
+      <xs:documentation>A pattern is a structure to help handling inclusion and exclusion of resources</xs:documentation>
+    </xs:annotation>
+    <xs:sequence/>
+    <xs:attribute type="xs:string" use="required" name="pattern">
+      <xs:annotation>
+        <xs:documentation><![CDATA[if the pattern contains '?', '*', '**' the matching will be done using an ant matcher, otherwise it will do a equalsIgnoreCase <ul> <li>? matches one character</li> <li>* matches zero or more characters</li> <li>** matches zero or more 'directories' in a path</li> </ul> Some examples: <ul> <li>com/t?st.jsp - matches com/test.jsp but also com/tast.jsp or com/txst.jsp</li> <li>com/yourcompany/**\/*.jsp - matches all .jsp files in the com/yourcompany directory</li> </ul>]]></xs:documentation>
+      </xs:annotation>
+    </xs:attribute>
+    <xs:attribute type="xs:boolean" use="required" name="include">
+      <xs:annotation>
+        <xs:documentation>True is is an inclusion pattern, false for an exclusion ?</xs:documentation>
+      </xs:annotation>
+    </xs:attribute>
+  </xs:complexType>
+  <xs:complexType name="oneToManyConfig">
+    <xs:sequence>
+      <xs:element name="labels" minOccurs="0">
+        <xs:annotation>
+          <xs:documentation>The labels for this association.</xs:documentation>
+        </xs:annotation>
+        <xs:complexType>
+          <xs:sequence>
+            <xs:element type="tns:label" name="label" minOccurs="0" maxOccurs="unbounded"/>
+          </xs:sequence>
+        </xs:complexType>
+      </xs:element>
+      <xs:element name="cascades" minOccurs="0">
+        <xs:annotation>
+          <xs:documentation>The list of JPA cascade types for the this association.</xs:documentation>
+        </xs:annotation>
+        <xs:complexType>
+          <xs:sequence>
+            <xs:element type="tns:cascade" name="cascade" minOccurs="0" maxOccurs="unbounded"/>
+          </xs:sequence>
+        </xs:complexType>
+      </xs:element>
+      <xs:element type="tns:cacheConfig" name="cacheConfig" minOccurs="0">
+        <xs:annotation>
+          <xs:documentation>The 2d level cache configuration for this association.</xs:documentation>
+        </xs:annotation>
+      </xs:element>
+      <xs:element type="tns:associationAction" name="associationAction" minOccurs="0">
+        <xs:annotation>
+          <xs:documentation>Configure which actions should be generated for this association in the front end layer.</xs:documentation>
+        </xs:annotation>
+      </xs:element>
+    </xs:sequence>
+    <xs:attribute type="xs:string" name="var">
+      <xs:annotation>
+        <xs:documentation>The variable name for the collection. It should be plural, for example: 'children'. Please configure also the elementVar as the singular of this var.</xs:documentation>
+      </xs:annotation>
+    </xs:attribute>
+    <xs:attribute type="xs:string" name="elementVar">
+      <xs:annotation>
+        <xs:documentation>The variable name for an element of the collection. For example, if the variable name for the collection is 'children', the elementVar should be child. This elementVar will be used to generate convenient methods for the collection, such as an adder method addChild(YourType child).</xs:documentation>
+      </xs:annotation>
+    </xs:attribute>
+    <xs:attribute type="xs:boolean" name="orphanRemoval">
+      <xs:annotation>
+        <xs:documentation>The JPA orphanRemoval for this association.</xs:documentation>
+      </xs:annotation>
+    </xs:attribute>
+    <xs:attribute type="tns:fetchType" name="fetch">
+      <xs:annotation>
+        <xs:documentation>The JPA fetch type for this association. Use NONE if you do not want any fetchType to be set.</xs:documentation>
+      </xs:annotation>
+    </xs:attribute>
+    <xs:attribute type="xs:string" name="orderBy">
+      <xs:annotation>
+        <xs:documentation><![CDATA[Specifies the ordering of the elements. If not null, the JPA <code>@OrderBy</code> annotation is used. Example: orderBy="birthdate DESC" will generate]]></xs:documentation>
+      </xs:annotation>
+    </xs:attribute>
+  </xs:complexType>
+  <xs:complexType name="celerio">
+    <xs:sequence>
+      <xs:element name="includes" minOccurs="0">
+        <xs:annotation>
+          <xs:documentation>For large projects, you can split the content of the entityConfigs tag into multiple files and 'include' the files here.</xs:documentation>
+        </xs:annotation>
+        <xs:complexType>
+          <xs:sequence>
+            <xs:element type="tns:include" name="include" minOccurs="0" maxOccurs="unbounded"/>
+          </xs:sequence>
+        </xs:complexType>
+      </xs:element>
+      <xs:element type="tns:configuration" name="configuration" minOccurs="0">
+        <xs:annotation>
+          <xs:documentation>Configure the celerio generator, such as conventions, jdbc connectivity, and other</xs:documentation>
+        </xs:annotation>
+      </xs:element>
+      <xs:element name="entityConfigs" minOccurs="0">
+        <xs:annotation>
+          <xs:documentation>Configure the generated entities.</xs:documentation>
+        </xs:annotation>
+        <xs:complexType>
+          <xs:sequence>
+            <xs:element type="tns:entityConfig" name="entityConfig" minOccurs="0" maxOccurs="unbounded"/>
+          </xs:sequence>
+        </xs:complexType>
+      </xs:element>
+      <xs:element name="sharedEnumConfigs" minOccurs="0">
+        <xs:annotation>
+          <xs:documentation>Configure enums that will be used in multiple entities, and referenced by their name in ColumnConfig</xs:documentation>
+        </xs:annotation>
+        <xs:complexType>
+          <xs:sequence>
+            <xs:element type="tns:enumConfig" name="sharedEnumConfig" minOccurs="0" maxOccurs="unbounded"/>
+          </xs:sequence>
+        </xs:complexType>
+      </xs:element>
+    </xs:sequence>
+  </xs:complexType>
+  <xs:complexType name="dateMapping">
+    <xs:annotation>
+      <xs:documentation>Global rule to map columns whose JDBC TYPE is DATE, TIME or TIMESTAMP to a Java type.</xs:documentation>
+    </xs:annotation>
+    <xs:sequence/>
+    <xs:attribute type="tns:mappedType" name="mappedType">
+      <xs:annotation>
+        <xs:documentation>The mapped type to use when both the jdbcType and the columnNamePattern matches what is expected.</xs:documentation>
+      </xs:annotation>
+    </xs:attribute>
+    <xs:attribute type="tns:jdbcType" name="columnJdbcType">
+      <xs:annotation>
+        <xs:documentation>Only column with this JdbcType are concerned by this mapping. Accepted JdbcType are DATE, TIME, TIMESTAMP. When set to null, we assume the column JdbcType may be DATE, TIME, or TIMESTAMP.</xs:documentation>
+      </xs:annotation>
+    </xs:attribute>
+    <xs:attribute type="xs:string" name="columnNameRegExp">
+      <xs:annotation>
+        <xs:documentation>An optional regular expression to restrict the mapping by column name. The matching is case insensitive.</xs:documentation>
+      </xs:annotation>
+    </xs:attribute>
+  </xs:complexType>
+  <xs:complexType name="classTypeOverride">
+    <xs:annotation>
+      <xs:documentation>Override the class conventions such as GeneratedPackage, suffix and prefixes</xs:documentation>
+    </xs:annotation>
+    <xs:sequence/>
+    <xs:attribute type="tns:classType" use="required" name="classType">
+      <xs:annotation>
+        <xs:documentation>The ClassType to override</xs:documentation>
+      </xs:annotation>
+    </xs:attribute>
+    <xs:attribute type="xs:string" name="prefix">
+      <xs:annotation>
+        <xs:documentation>Override the prefix for this ClassType</xs:documentation>
+      </xs:annotation>
+    </xs:attribute>
+    <xs:attribute type="xs:string" name="suffix">
+      <xs:annotation>
+        <xs:documentation>Override the suffix for this ClassType</xs:documentation>
+      </xs:annotation>
+    </xs:attribute>
+    <xs:attribute type="tns:generatedPackage" name="generatedPackage">
+      <xs:annotation>
+        <xs:documentation>Override the GeneratedPackage for this ClassType</xs:documentation>
+      </xs:annotation>
+    </xs:attribute>
+  </xs:complexType>
+  <xs:complexType name="indexedField">
+    <xs:annotation>
+      <xs:documentation>Allows you to configure Hibernate Search Field annotation.</xs:documentation>
+    </xs:annotation>
+    <xs:sequence/>
+    <xs:attribute type="xs:string" name="bridgeImpl">
+      <xs:annotation>
+        <xs:documentation>The full type of the field bridge implementation to use. When not null it is used by the @FieldBridge annotation.</xs:documentation>
+      </xs:annotation>
+    </xs:attribute>
+    <xs:attribute type="xs:string" name="name"/>
+    <xs:attribute type="tns:store" name="store"/>
+    <xs:attribute type="xs:boolean" name="index"/>
+    <xs:attribute type="tns:analyze" name="analyze"/>
+    <xs:attribute type="xs:string" name="analyzer"/>
+    <xs:attribute type="tns:norms" name="norms"/>
+    <xs:attribute type="tns:termVector" name="termVector"/>
+  </xs:complexType>
+  <xs:complexType name="index">
+    <xs:annotation>
+      <xs:documentation>Description of the given table's indices and statistics</xs:documentation>
+    </xs:annotation>
+    <xs:sequence/>
+    <xs:attribute type="xs:string" use="required" name="columnName">
+      <xs:annotation>
+        <xs:documentation>Column name</xs:documentation>
+      </xs:annotation>
+    </xs:attribute>
+    <xs:attribute type="xs:string" use="required" name="indexName">
+      <xs:annotation>
+        <xs:documentation>Index name</xs:documentation>
+      </xs:annotation>
+    </xs:attribute>
+    <xs:attribute type="xs:boolean" use="required" name="nonUnique">
+      <xs:annotation>
+        <xs:documentation>Can index values be non-unique</xs:documentation>
+      </xs:annotation>
+    </xs:attribute>
+  </xs:complexType>
+  <xs:complexType name="databaseInfo">
+    <xs:annotation>
+      <xs:documentation>Information about the database where celerio extracted the metadata</xs:documentation>
+    </xs:annotation>
+    <xs:sequence/>
+    <xs:attribute type="xs:int" use="required" name="databaseMajorVersion"/>
+    <xs:attribute type="xs:int" use="required" name="databaseMinorVersion"/>
+    <xs:attribute type="xs:string" name="databaseProductName"/>
+    <xs:attribute type="xs:string" name="databaseProductVersion"/>
+    <xs:attribute type="xs:int" use="required" name="driverMajorVersion"/>
+    <xs:attribute type="xs:int" use="required" name="driverMinorVersion"/>
+    <xs:attribute type="xs:string" name="driverName"/>
+    <xs:attribute type="xs:string" name="driverVersion"/>
+    <xs:attribute type="xs:string" name="extraInfo"/>
+  </xs:complexType>
+  <xs:complexType name="jodaTime">
+    <xs:annotation>
+      <xs:documentation>Configure the Hibernate type to use when mapping an attribute whose type is LocalDate or LocalDateTime.</xs:documentation>
+    </xs:annotation>
+    <xs:sequence/>
+    <xs:attribute type="xs:string" name="localDateHibernateType">
+      <xs:annotation>
+        <xs:documentation>The Hibernate type to use for Joda LocalDate. Defaults to "org.jadira.usertype.dateandtime.joda.PersistentLocalDate". You may set it instead to "org.joda.time.contrib.hibernate.PersistentLocalDate" if you use hibernate 3.</xs:documentation>
+      </xs:annotation>
+    </xs:attribute>
+    <xs:attribute type="xs:string" name="localDateTimeHibernateType">
+      <xs:annotation>
+        <xs:documentation>The Hibernate type to use for Joda LocalDateTime. Defaults to "org.jadira.usertype.dateandtime.joda.PersistentLocalDateTime". You may set it instead to "org.joda.time.contrib.hibernate.PersistentLocalDateTime" if you use hibernate 3.</xs:documentation>
+      </xs:annotation>
+    </xs:attribute>
+  </xs:complexType>
+  <xs:complexType name="enumConfig">
+    <xs:annotation>
+      <xs:documentation>Entry point to configure an enum generation.</xs:documentation>
+    </xs:annotation>
+    <xs:sequence>
+      <xs:element name="enumValues" minOccurs="0">
+        <xs:annotation>
+          <xs:documentation>Specify the enum constants.</xs:documentation>
+        </xs:annotation>
+        <xs:complexType>
+          <xs:sequence>
+            <xs:element type="tns:enumValue" name="enumValue" minOccurs="0" maxOccurs="unbounded"/>
+          </xs:sequence>
+        </xs:complexType>
+      </xs:element>
+      <xs:element name="comments" minOccurs="0">
+        <xs:annotation>
+          <xs:documentation>Set comments for this enumeration.</xs:documentation>
+        </xs:annotation>
+        <xs:complexType>
+          <xs:sequence>
+            <xs:element type="xs:string" name="comment" minOccurs="0" maxOccurs="unbounded"/>
+          </xs:sequence>
+        </xs:complexType>
+      </xs:element>
+    </xs:sequence>
+    <xs:attribute type="xs:string" use="required" name="name">
+      <xs:annotation>
+        <xs:documentation><![CDATA[Set the name of the generated enum.<br> Example: name="CreditCardEnum"]]></xs:documentation>
+      </xs:annotation>
+    </xs:attribute>
+    <xs:attribute type="xs:string" name="rootPackage">
+      <xs:annotation>
+        <xs:documentation><![CDATA[Allows you to override the default root package.<br> Example: com.yourcompany]]></xs:documentation>
+      </xs:annotation>
+    </xs:attribute>
+    <xs:attribute type="xs:string" name="subPackage">
+      <xs:annotation>
+        <xs:documentation><![CDATA[When you define a sub-package, the resulting enum's package becomes "<rootPackage>.domain.<subPackage>" instead of "<rootPackage>.domain". Same applies for other enum related classes. There is no sub-package by default.]]></xs:documentation>
+      </xs:annotation>
+    </xs:attribute>
+    <xs:attribute type="tns:enumType" name="type">
+      <xs:annotation>
+        <xs:documentation>The JPA enum type. The CUSTOM type (not a JPA type) allows you to do advanced enum mapping with Jadira or a custom user type.</xs:documentation>
+      </xs:annotation>
+    </xs:attribute>
+    <xs:attribute type="xs:string" name="userType">
+      <xs:annotation>
+        <xs:documentation><![CDATA[Specifiy the user type implementation to use to be given to hibernate <br/> Example: name="com.youcompany.hibernate.support.CustomDateUserType"]]></xs:documentation>
+      </xs:annotation>
+    </xs:attribute>
+  </xs:complexType>
+  <xs:complexType name="entityContextProperty">
+    <xs:annotation>
+      <xs:documentation>Used to introduce a new 'namer' property on each Celerio's entity context instance. Entity namer properties are convenient when writing template for classes that support entities, for example: Controller, Service, Dao, Validator etc... example: var name is obtained with ${entity.property.var} and has the value "prefixEntityNameSuffix".</xs:documentation>
+    </xs:annotation>
+    <xs:sequence/>
+    <xs:attribute type="xs:string" name="property">
+      <xs:annotation>
+        <xs:documentation>The property name.</xs:documentation>
+      </xs:annotation>
+    </xs:attribute>
+    <xs:attribute type="xs:string" name="rootPackage">
+      <xs:annotation>
+        <xs:documentation>The root package. Defaults to the globally defined root package.</xs:documentation>
+      </xs:annotation>
+    </xs:attribute>
+    <xs:attribute type="xs:string" name="subPackage">
+      <xs:annotation>
+        <xs:documentation>The sub package. For example: "security", "web.security". No defaults.</xs:documentation>
+      </xs:annotation>
+    </xs:attribute>
+    <xs:attribute type="xs:string" name="prefix">
+      <xs:annotation>
+        <xs:documentation>Prefix prepended to the entity name.</xs:documentation>
+      </xs:annotation>
+    </xs:attribute>
+    <xs:attribute type="xs:string" name="suffix">
+      <xs:annotation>
+        <xs:documentation>Prefix appended to the entity name.</xs:documentation>
+      </xs:annotation>
+    </xs:attribute>
+  </xs:complexType>
+  <xs:complexType name="manyToOneConfig">
+    <xs:sequence>
+      <xs:element name="labels" minOccurs="0">
+        <xs:annotation>
+          <xs:documentation>The labels for this association.</xs:documentation>
+        </xs:annotation>
+        <xs:complexType>
+          <xs:sequence>
+            <xs:element type="tns:label" name="label" minOccurs="0" maxOccurs="unbounded"/>
+          </xs:sequence>
+        </xs:complexType>
+      </xs:element>
+      <xs:element name="cascades" minOccurs="0">
+        <xs:annotation>
+          <xs:documentation>The list of JPA cascade types for the this association.</xs:documentation>
+        </xs:annotation>
+        <xs:complexType>
+          <xs:sequence>
+            <xs:element type="tns:cascade" name="cascade" minOccurs="0" maxOccurs="unbounded"/>
+          </xs:sequence>
+        </xs:complexType>
+      </xs:element>
+      <xs:element type="tns:cacheConfig" name="cacheConfig" minOccurs="0">
+        <xs:annotation>
+          <xs:documentation>The 2d level cache configuration for this association.</xs:documentation>
+        </xs:annotation>
+      </xs:element>
+      <xs:element type="tns:associationAction" name="associationAction" minOccurs="0">
+        <xs:annotation>
+          <xs:documentation>Configure which actions should or should not be generated for this association in the front end layer.</xs:documentation>
+        </xs:annotation>
+      </xs:element>
+    </xs:sequence>
+    <xs:attribute type="xs:string" name="var">
+      <xs:annotation>
+        <xs:documentation>The variable name for association. It should be singular, for example: 'parent'.</xs:documentation>
+      </xs:annotation>
+    </xs:attribute>
+    <xs:attribute type="tns:fetchType" name="fetch">
+      <xs:annotation>
+        <xs:documentation>The JPA fetch type for this association. Use NONE if you do not want any fetchType to be set.</xs:documentation>
+      </xs:annotation>
+    </xs:attribute>
+    <xs:attribute type="xs:string" name="targetEntityName">
+      <xs:annotation>
+        <xs:documentation>If the target entity is part of a SINGLE_TABLE inheritance hierarchy, you must set name of the target entity as Celerio cannot guess it.</xs:documentation>
+      </xs:annotation>
+    </xs:attribute>
+  </xs:complexType>
+  <xs:complexType name="headerComment">
+    <xs:annotation>
+      <xs:documentation>Specify your own file header comments</xs:documentation>
+    </xs:annotation>
+    <xs:sequence>
+      <xs:element name="lines" minOccurs="0">
+        <xs:annotation>
+          <xs:documentation>Set each line to be added to the header files.</xs:documentation>
+        </xs:annotation>
+        <xs:complexType>
+          <xs:sequence>
+            <xs:element type="xs:string" name="line" minOccurs="0" maxOccurs="unbounded"/>
+          </xs:sequence>
+        </xs:complexType>
+      </xs:element>
+    </xs:sequence>
+    <xs:attribute type="xs:boolean" name="include">
+      <xs:annotation>
+        <xs:documentation>Should the header be present in the generated files ?</xs:documentation>
+      </xs:annotation>
+    </xs:attribute>
+    <xs:attribute type="xs:boolean" name="showTemplateName">
+      <xs:annotation>
+        <xs:documentation>Should the template name be present in the header. This is useful when dealing with large amount of templates and packs for debugging purposes or support information.</xs:documentation>
+      </xs:annotation>
+    </xs:attribute>
+  </xs:complexType>
+  <xs:complexType name="associationAction">
+    <xs:sequence/>
+    <xs:attribute type="xs:boolean" name="create">
+      <xs:annotation>
+        <xs:documentation>Generate code in order to create a new target entity from the source entity main edit page.</xs:documentation>
+      </xs:annotation>
+    </xs:attribute>
+    <xs:attribute type="xs:boolean" name="edit">
+      <xs:annotation>
+        <xs:documentation>Generate code in order to edit a target entity from the source entity main edit page.</xs:documentation>
+      </xs:annotation>
+    </xs:attribute>
+    <xs:attribute type="xs:boolean" name="view">
+      <xs:annotation>
+        <xs:documentation>Generate code in order to view a target entity from the source entity main edit page.</xs:documentation>
+      </xs:annotation>
+    </xs:attribute>
+    <xs:attribute type="xs:boolean" name="select">
+      <xs:annotation>
+        <xs:documentation>Generate code in order to select an existing target entity from the source entity main edit page. Note: it does not apply to one-to-many association.</xs:documentation>
+      </xs:annotation>
+    </xs:attribute>
+    <xs:attribute type="xs:boolean" name="autoComplete">
+      <xs:annotation>
+        <xs:documentation>Generate code in order to select an existing target entity, using an autoComplete component, from the source entity main edit page. Note: it does not apply to one-to-many association.</xs:documentation>
+      </xs:annotation>
+    </xs:attribute>
+    <xs:attribute type="xs:boolean" name="remove">
+      <xs:annotation>
+        <xs:documentation>Generate code in order to remove a target entity from the source entity main edit page.</xs:documentation>
+      </xs:annotation>
+    </xs:attribute>
+  </xs:complexType>
+  <xs:complexType name="pack">
+    <xs:annotation>
+      <xs:documentation>A pack is the aggregation of templates and static files that produces functionalities.</xs:documentation>
+    </xs:annotation>
+    <xs:sequence>
+      <xs:element name="filenames" minOccurs="0">
+        <xs:annotation>
+          <xs:documentation>Control the generation output by filtering the generated files based on their filename.</xs:documentation>
+        </xs:annotation>
+        <xs:complexType>
+          <xs:sequence>
+            <xs:element type="tns:pattern" name="filename" minOccurs="0" maxOccurs="unbounded"/>
+          </xs:sequence>
+        </xs:complexType>
+      </xs:element>
+      <xs:element name="templates" minOccurs="0">
+        <xs:annotation>
+          <xs:documentation>Control the generation output by filtering the execution of the generation templates based on their filename.</xs:documentation>
+        </xs:annotation>
+        <xs:complexType>
+          <xs:sequence>
+            <xs:element type="tns:pattern" name="template" minOccurs="0" maxOccurs="unbounded"/>
+          </xs:sequence>
+        </xs:complexType>
+      </xs:element>
+    </xs:sequence>
+    <xs:attribute type="xs:string" use="required" name="name">
+      <xs:annotation>
+        <xs:documentation>Name of the pack</xs:documentation>
+      </xs:annotation>
+    </xs:attribute>
+    <xs:attribute type="xs:string" name="path">
+      <xs:annotation>
+        <xs:documentation><![CDATA[Path of the pack, it should be relative to the project, or absolute.<br> Example: src/main/packs/my-own-pack/]]></xs:documentation>
+      </xs:annotation>
+    </xs:attribute>
+    <xs:attribute type="xs:boolean" use="required" name="enable">
+      <xs:annotation>
+        <xs:documentation>Should this pack be used ?</xs:documentation>
+      </xs:annotation>
+    </xs:attribute>
+    <xs:attribute type="xs:int" name="order">
+      <xs:annotation>
+        <xs:documentation>Specify the pack order, its main interest is when two packs produce the same artifacts.</xs:documentation>
+      </xs:annotation>
+    </xs:attribute>
+  </xs:complexType>
+  <xs:complexType name="restriction">
+    <xs:sequence>
+      <xs:element name="classTypes" minOccurs="0">
+        <xs:annotation>
+          <xs:documentation>Restrict the generation to the following classTypes</xs:documentation>
+        </xs:annotation>
+        <xs:complexType>
+          <xs:sequence>
+            <xs:element type="tns:classType" name="classType" minOccurs="0" maxOccurs="unbounded"/>
+          </xs:sequence>
+        </xs:complexType>
+      </xs:element>
+      <xs:element name="wellKnownFolders" minOccurs="0">
+        <xs:annotation>
+          <xs:documentation>Restrict the generation to the following wellKnownFolders</xs:documentation>
+        </xs:annotation>
+        <xs:complexType>
+          <xs:sequence>
+            <xs:element type="tns:wellKnownFolder" name="wellKnownFolder" minOccurs="0" maxOccurs="unbounded"/>
+          </xs:sequence>
+        </xs:complexType>
+      </xs:element>
+      <xs:element name="generatedPackages" minOccurs="0">
+        <xs:annotation>
+          <xs:documentation>Restrict the generation to the following generatedPackages</xs:documentation>
+        </xs:annotation>
+        <xs:complexType>
+          <xs:sequence>
+            <xs:element type="tns:generatedPackage" name="generatedPackage" minOccurs="0" maxOccurs="unbounded"/>
+          </xs:sequence>
+        </xs:complexType>
+      </xs:element>
+    </xs:sequence>
+  </xs:complexType>
+  <xs:complexType name="importedKey">
+    <xs:annotation>
+      <xs:documentation>Description of the primary key columns that are referenced by a table's foreign key columns (the primary keys imported by a table).</xs:documentation>
+    </xs:annotation>
+    <xs:sequence/>
+    <xs:attribute type="xs:string" use="required" name="fkColumnName">
+      <xs:annotation>
+        <xs:documentation>Foreign key column name</xs:documentation>
+      </xs:annotation>
+    </xs:attribute>
+    <xs:attribute type="xs:string" use="required" name="fkName">
+      <xs:annotation>
+        <xs:documentation>Foreign key name</xs:documentation>
+      </xs:annotation>
+    </xs:attribute>
+    <xs:attribute type="xs:string" use="required" name="pkColumnName">
+      <xs:annotation>
+        <xs:documentation>Primary key column name being imported</xs:documentation>
+      </xs:annotation>
+    </xs:attribute>
+    <xs:attribute type="xs:string" use="required" name="pkTableName">
+      <xs:annotation>
+        <xs:documentation>Primary key table name being imported</xs:documentation>
+      </xs:annotation>
+    </xs:attribute>
+  </xs:complexType>
+  <xs:complexType name="enumValue">
+    <xs:sequence>
+      <xs:element name="comments" minOccurs="0">
+        <xs:annotation>
+          <xs:documentation>Set comments for this enum value.</xs:documentation>
+        </xs:annotation>
+        <xs:complexType>
+          <xs:sequence>
+            <xs:element type="xs:string" name="comment" minOccurs="0" maxOccurs="unbounded"/>
+          </xs:sequence>
+        </xs:complexType>
+      </xs:element>
+      <xs:element name="labels" minOccurs="0">
+        <xs:annotation>
+          <xs:documentation>The labels for this enum value. They appear in the enum properties file located under 'src/main/resources/localization/domain'.</xs:documentation>
+        </xs:annotation>
+        <xs:complexType>
+          <xs:sequence>
+            <xs:element type="tns:label" name="label" minOccurs="0" maxOccurs="unbounded"/>
+          </xs:sequence>
+        </xs:complexType>
+      </xs:element>
+    </xs:sequence>
+    <xs:attribute type="xs:string" name="name">
+      <xs:annotation>
+        <xs:documentation>The enum constant that defines an instance of the enum type. Example: For a Civility enum, this could be MISS or MISTER.</xs:documentation>
+      </xs:annotation>
+    </xs:attribute>
+    <xs:attribute type="xs:string" name="value">
+      <xs:annotation>
+        <xs:documentation>The value really stored in the database. Only applies if the enumConfig's type is CUSTOM. Note that the mapping leverages Jadira as it is not supported natively by JPA.</xs:documentation>
+      </xs:annotation>
+    </xs:attribute>
+    <xs:attribute type="xs:string" name="label">
+      <xs:annotation>
+        <xs:documentation>The base label for this enum value. You may either set it here or in a nested labels/label.</xs:documentation>
+      </xs:annotation>
+    </xs:attribute>
+  </xs:complexType>
+</xs:schema>
\ No newline at end of file
diff --git a/src/main/config/maven-celerio-plugin/maven-celerio-plugin.xml b/src/main/config/maven-celerio-plugin/maven-celerio-plugin.xml
new file mode 100644
index 0000000..6595500
--- /dev/null
+++ b/src/main/config/maven-celerio-plugin/maven-celerio-plugin.xml
@@ -0,0 +1,217 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<celerio xmlns="http://www.jaxio.com/schema/celerio" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.jaxio.com/schema/celerio ./celerio.xsd">
+	<configuration rootPackage="com.h2.demo" applicationName="h2project">
+		<!-- Which tables are used for generation -->
+		<tables>
+			<!-- <table include="false" pattern="*_AUDIT"/> -->
+			<table include="true" pattern="*" />
+		</tables>
+
+		<!-- global number mapping (optional) -->
+		<numberMappings>
+			<numberMapping mappedType="M_BOOLEAN" columnSizeMin="1" columnSizeMax="2" columnDecimalDigitsMin="0" columnDecimalDigitsMax="0" />
+			<!-- <numberMapping mappedType="M_BIGDECIMAL" columnSizeMin="10" columnDecimalDigitsMin="4"/> -->
+		</numberMappings>
+
+		<!-- global date mapping (optional) -->
+		<dateMappings>
+			<!-- <dateMapping columnNameRegExp="VERSION" mappedType="M_UTILDATE"/> -->
+			<!-- <dateMapping columnJdbcType="TIMESTAMP" mappedType="M_JODA_LOCALDATETIME"/> -->
+			<!-- <dateMapping columnJdbcType="DATE" mappedType="M_JODA_LOCALDATE"/> -->
+		</dateMappings>
+
+		<!-- default configuration for fetch type / cascades / 2d level cache -->
+		<defaultEntityCacheConfig usage="NONE" />
+
+		<defaultManyToOneConfig fetch="LAZY">
+			<cascades>
+				<cascade type="PERSIST" />
+				<cascade type="MERGE" />
+			</cascades>
+			<cacheConfig usage="NONE" />
+			<associationAction create="true" edit="true" view="true" select="true" autoComplete="true" remove="false" />
+		</defaultManyToOneConfig>
+
+		<defaultOneToManyConfig orphanRemoval="true">
+			<cascades>
+				<cascade type="ALL" />
+			</cascades>
+			<cacheConfig usage="NONE" />
+			<associationAction create="true" edit="true" view="true" select="true" autoComplete="true" remove="true" />
+		</defaultOneToManyConfig>
+
+		<defaultOneToOneConfig fetch="LAZY">
+			<cascades>
+				<cascade type="NONE" />
+			</cascades>
+			<cacheConfig usage="NONE" />
+			<associationAction create="true" edit="true" view="true" select="true" autoComplete="true" remove="false" />
+		</defaultOneToOneConfig>
+
+		<defaultInverseOneToOneConfig fetch="LAZY">
+			<cascades>
+				<cascade type="ALL" />
+			</cascades>
+			<cacheConfig usage="NONE" />
+			<associationAction create="false" edit="false" view="true" select="false" autoComplete="false" remove="false" />
+		</defaultInverseOneToOneConfig>
+
+		<defaultManyToManyConfig>
+			<cascades>
+				<cascade type="PERSIST" />
+				<cascade type="MERGE" />
+			</cascades>
+			<cacheConfig usage="NONE" />
+			<associationAction create="true" edit="true" view="true" select="true" autoComplete="false" remove="true" />
+		</defaultManyToManyConfig>
+
+		<defaultInverseManyToManyConfig>
+			<cascades>
+				<cascade type="ALL" />
+			</cascades>
+			<cacheConfig usage="NONE" />
+			<associationAction create="false" edit="true" view="true" select="false" autoComplete="false" remove="false" />
+		</defaultInverseManyToManyConfig>
+
+		<conventions identifiableProperty="id">
+			<!-- <columnRenamers>
+				<columnRenamer regexp="^.{3}_" replace="" />
+			</columnRenamers> -->
+		</conventions>
+	</configuration>
+
+	<entityConfigs>
+		<!-- Account demonstrates misc column configurations 
+		<entityConfig tableName="ACCOUNT">
+			<labels>
+				<label value="User Account" />
+				<label value="Compte Utilisateur" lang="fr" />
+			</labels>
+			<columnConfigs>
+				<columnConfig columnName="login" min="4" fieldName="username" searchResult="true">
+					<labels>
+						<label value="Identifiant" lang="fr" />
+					</labels>
+					<indexedField />
+				</columnConfig>
+				<columnConfig columnName="email" searchResult="true">
+					<indexedField />
+				</columnConfig>
+				<columnConfig columnName="first_name">
+					<labels>
+						<label value="Prénom" lang="fr" />
+					</labels>
+					<indexedField />
+				</columnConfig>
+				<columnConfig columnName="last_name">
+					<labels>
+						<label value="Nom" lang="fr" />
+					</labels>
+					<indexedField />
+				</columnConfig>
+				<columnConfig columnName="is_enabled" searchResult="true" />
+				<columnConfig columnName="civility" sharedEnumName="Civility" />
+				<columnConfig columnName="address_id" searchResult="true">
+					<manyToOneConfig var="homeAddress" />
+				</columnConfig>
+			</columnConfigs>
+		</entityConfig>
+		-->
+		<!-- Book demonstrates one-to-many relation
+		<entityConfig tableName="BOOK">
+			<columnConfigs>
+				<columnConfig columnName="title" fieldName="bookTitle">
+					<indexedField />
+				</columnConfig>
+				<columnConfig columnName="account_id">
+					<manyToOneConfig var="owner" />
+					<oneToManyConfig var="coolBooks" elementVar="book" orderBy="bookTitle" />
+				</columnConfig>
+			</columnConfigs>
+		</entityConfig>
+		 -->
+
+		<!-- Document demonstrates one-to-many relation and upload/download 
+		<entityConfig tableName="DOCUMENT">
+			<columnConfigs>
+				<columnConfig columnName="account_id">
+					<manyToOneConfig var="owner" />
+					<oneToManyConfig var="edocs" elementVar="edoc" />
+				</columnConfig>
+				<columnConfig columnName="document_binary">
+					<indexedField />
+				</columnConfig>
+				<columnConfig columnName="document_file_name">
+					<indexedField />
+				</columnConfig>
+			</columnConfigs>
+		</entityConfig>
+		-->
+
+		<!-- Role demonstrates many-to-many relation and spring-security integration 
+		<entityConfig tableName="ROLE">
+			<columnConfigs>
+				<columnConfig columnName="role_name" messageKey="true">
+					<labels>
+						<label value="Role" />
+						<label value="Droit" lang="fr" />
+					</labels>				
+					<indexedField />
+				</columnConfig>
+			</columnConfigs>
+		</entityConfig>
+		-->
+	<!-- 
+		<entityConfig tableName="ADDRESS">
+			<columnConfigs>
+				<columnConfig columnName="city">
+					<labels>
+						<label value="Ville" lang="fr" />
+					</labels>				
+					<indexedField />
+				</columnConfig>
+			</columnConfigs>
+		</entityConfig>
+		 -->
+
+
+<!-- 		<entityConfig tableName="ACCOUNT_ROLE" associationDirection="UNIDIRECTIONAL"> -->
+<!-- 			<columnConfigs> -->
+<!-- 				<columnConfig columnName="account_id"> -->
+<!-- 					<manyToManyConfig var="accounts" elementVar="account" /> -->
+<!-- 				</columnConfig> -->
+<!-- 				<columnConfig columnName="role_id" inverse="true"> -->
+<!-- 					<manyToManyConfig var="securityRoles" elementVar="securityRole" /> -->
+<!-- 				</columnConfig> -->
+<!-- 			</columnConfigs> -->
+<!-- 		</entityConfig> -->
+
+		<!-- MoreTypesDemo demonstrates sub-packages and various types support such as joda time, BigDecimal etc.
+		<entityConfig tableName="MORE_TYPES_DEMO" subPackage="more">
+			<columnConfigs>
+				<columnConfig columnName="date_joda" mappedType="M_JODA_LOCALDATE" />
+				<columnConfig columnName="date_time_joda" mappedType="M_JODA_LOCALDATETIME" />
+			</columnConfigs>
+		</entityConfig>  -->
+	</entityConfigs>
+
+	<!-- Generate enums used by the entities above
+	<sharedEnumConfigs>
+		<sharedEnumConfig name="Civility" type="STRING">
+			<enumValues>
+				<enumValue value="MR">
+					<labels>
+						<label value="Mister" />
+						<label value="Monsieur" lang="fr" />
+					</labels>
+				</enumValue>
+				<enumValue value="MS">
+					<labels>
+						<label value="Miss" />
+						<label value="Madame" lang="fr" />
+					</labels>
+				</enumValue>				
+			</enumValues>
+		</sharedEnumConfig>
+	</sharedEnumConfigs>  -->
+</celerio>
\ No newline at end of file
diff --git a/src/main/config/maven-celerio-plugin/nonamespace.xsd b/src/main/config/maven-celerio-plugin/nonamespace.xsd
new file mode 100644
index 0000000..cb8ff60
--- /dev/null
+++ b/src/main/config/maven-celerio-plugin/nonamespace.xsd
@@ -0,0 +1,22 @@
+<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema">
+  <xs:complexType name="profiles">
+    <xs:sequence>
+      <xs:element type="profile" name="profile" minOccurs="0" maxOccurs="unbounded"/>
+    </xs:sequence>
+    <xs:attribute type="xs:string" name="version"/>
+  </xs:complexType>
+  <xs:complexType name="profile">
+    <xs:sequence>
+      <xs:element type="setting" name="setting" minOccurs="0" maxOccurs="unbounded"/>
+    </xs:sequence>
+    <xs:attribute type="xs:string" name="kind"/>
+    <xs:attribute type="xs:string" name="name"/>
+    <xs:attribute type="xs:string" name="version"/>
+  </xs:complexType>
+  <xs:complexType name="setting">
+    <xs:sequence/>
+    <xs:attribute type="xs:string" use="required" name="id"/>
+    <xs:attribute type="xs:string" use="required" name="value"/>
+  </xs:complexType>
+  <xs:element type="profiles" name="profiles"/>
+</xs:schema>
\ No newline at end of file
diff --git a/src/main/config/maven-jetty-plugin/web-development.xml b/src/main/config/maven-jetty-plugin/web-development.xml
new file mode 100644
index 0000000..2253204
--- /dev/null
+++ b/src/main/config/maven-jetty-plugin/web-development.xml
@@ -0,0 +1,24 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!--
+ ! (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ ! Source code generated by Celerio, a Jaxio product
+ ! Want to purchase Celerio ? email us at info@jaxio.com
+ ! Follow us on twitter: @springfuse
+ ! Documentation: http://www.jaxio.com/documentation/celerio/
+ ! Template pack-jsf2-spring-conversation:src/main/config/maven-jetty-plugin/web-development.p.vm.xml
+-->
+<web-app version="2.5" xmlns="http://java.sun.com/xml/ns/javaee"
+	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd">
+	<description>Overrides values found in src/main/webapp/WEB-INF/web.xml to enable development mode</description>
+	<context-param>
+		<!-- Enables special Facelets debug output during development -->
+		<param-name>javax.faces.PROJECT_STAGE</param-name>
+		<param-value>Development</param-value>
+	</context-param>
+	<context-param>
+		<!-- Causes Facelets to refresh templates during development (in seconds) -->
+		<param-name>javax.faces.FACELETS_REFRESH_PERIOD</param-name>
+		<param-value>1</param-value>
+	</context-param>
+</web-app>
\ No newline at end of file
diff --git a/src/main/generated-java/com/h2/demo/audit/AuditContextHolder.java b/src/main/generated-java/com/h2/demo/audit/AuditContextHolder.java
new file mode 100644
index 0000000..c1ae0f0
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/audit/AuditContextHolder.java
@@ -0,0 +1,55 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-backend-jpa:src/main/java/audit/AuditContextHolder.p.vm.java
+ */
+package com.h2.demo.audit;
+
+import static org.apache.commons.lang.StringUtils.trimToNull;
+
+import javax.persistence.PrePersist;
+import javax.persistence.PreUpdate;
+
+import com.h2.demo.context.UserContext;
+
+/**
+ * Enable/disable {@link PreUpdate} and {@link PrePersist} actions and/or force the username to be used.
+ * Please note that you are in charge of reseting the context properties if you use them directly.
+ */
+public final class AuditContextHolder {
+    private static final ThreadLocal<Boolean> audit = new ThreadLocal<Boolean>();
+    private static final ThreadLocal<String> username = new ThreadLocal<String>();
+
+    private AuditContextHolder() {
+    }
+
+    public static void setAudit(boolean auditing) {
+        audit.set(auditing);
+    }
+
+    public static void setUsername(String user) {
+        username.set(trimToNull(user));
+    }
+
+    /**
+     * Whether audit is enable ? Defaults to true.
+     */
+    public static boolean audit() {
+        return audit.get() == null ? true : audit.get();
+    }
+
+    /**
+     * The username bound to this thread or if it is null the username returned by the {@link UserContext};
+     */
+    public static String username() {
+        return username.get() == null ? UserContext.getUsername() : username.get();
+    }
+
+    public static void clear() {
+        audit.remove();
+        username.remove();
+    }
+}
\ No newline at end of file
diff --git a/src/main/generated-java/com/h2/demo/audit/AuditLogListener.java b/src/main/generated-java/com/h2/demo/audit/AuditLogListener.java
new file mode 100644
index 0000000..7a90707
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/audit/AuditLogListener.java
@@ -0,0 +1,134 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-backend-jpa:src/main/java/audit/AuditLogListener.p.vm.java
+ */
+package com.h2.demo.audit;
+
+import static com.google.common.collect.Lists.newArrayList;
+import static com.h2.demo.service.AuditEvent.Creation;
+import static com.h2.demo.service.AuditEvent.Deletion;
+import static com.h2.demo.service.AuditEvent.Modification;
+
+import java.util.Date;
+import java.util.List;
+
+import javax.inject.Inject;
+import javax.inject.Named;
+
+import org.hibernate.action.spi.AfterTransactionCompletionProcess;
+import org.hibernate.engine.spi.SessionImplementor;
+import org.hibernate.event.spi.AbstractEvent;
+import org.hibernate.event.spi.PostDeleteEvent;
+import org.hibernate.event.spi.PostDeleteEventListener;
+import org.hibernate.event.spi.PostInsertEvent;
+import org.hibernate.event.spi.PostInsertEventListener;
+import org.hibernate.event.spi.PreUpdateEvent;
+import org.hibernate.event.spi.PreUpdateEventListener;
+
+import com.h2.demo.context.UserContext;
+import com.h2.demo.domain.AuditLog;
+import com.h2.demo.domain.Identifiable;
+import com.h2.demo.service.AuditEvent;
+import com.h2.demo.service.AuditLogService;
+
+@Named
+public class AuditLogListener implements PreUpdateEventListener, PostDeleteEventListener, PostInsertEventListener {
+    private static final long serialVersionUID = 1L;
+    @Inject
+    private AuditLogService auditLogService;
+    protected List<String> skipProperties = newArrayList("version", "lastModificationAuthor", "lastModificationDate", "creationDate", "creationAuthor");
+    protected List<String> skipClasses = newArrayList("AuditLog");
+
+    protected void skipClasses(Class<?>... classesToBeIgnored) {
+        for (Class<?> classToBeIgnored : classesToBeIgnored) {
+            skipClasses.add(classToBeIgnored.getSimpleName());
+        }
+    }
+
+    @Override
+    public void onPostDelete(PostDeleteEvent event) {
+        audit(event, Deletion, event.getEntity());
+    }
+
+    @Override
+    public void onPostInsert(PostInsertEvent event) {
+        audit(event, Creation, event.getEntity());
+    }
+
+    @Override
+    public boolean onPreUpdate(PreUpdateEvent event) {
+        String updateMessage = buildUpdateMessage(event);
+        if (!updateMessage.isEmpty()) {
+            audit(event, Modification, event.getEntity(), updateMessage);
+        }
+        return false;
+    }
+
+    private String buildUpdateMessage(PreUpdateEvent event) {
+        String[] propertyNames = event.getPersister().getEntityMetamodel().getPropertyNames();
+        Object[] oldStates = event.getOldState();
+        Object[] newStates = event.getState();
+        int index = 0;
+        StringBuilder message = new StringBuilder(128);
+        for (String propertyName : propertyNames) {
+            message.append(message(propertyName, oldStates[index], newStates[index]));
+            index++;
+        }
+        return message.toString();
+    }
+
+    private String message(String propertyName, Object oldState, Object newState) {
+        if (newState instanceof Identifiable) {
+            // no need to track objects
+            return "";
+        } else if (skipProperties.contains(propertyName)) {
+            // no need to track version and lastModificationDates as they add no value
+            return "";
+        } else if (oldState == null && newState == null) {
+            return "";
+        } else if (oldState == null && newState != null) {
+            return propertyName + " set to [" + newState + "]\n";
+        } else if (oldState != null && newState == null) {
+            return propertyName + " reseted to null\n";
+        } else if (!oldState.toString().equals(newState.toString())) {
+            return propertyName + " changed from [" + oldState.toString() + "] to [" + newState.toString() + "]\n";
+        } else {
+            return "";
+        }
+    }
+
+    private void audit(AbstractEvent hibernateEvent, AuditEvent auditEvent, Object object) {
+        audit(hibernateEvent, auditEvent, object, null);
+    }
+
+    private void audit(AbstractEvent hibernateEvent, AuditEvent auditEvent, Object object, String attribute) {
+        String className = object.getClass().getSimpleName();
+        if (skipClasses.contains(className)) {
+            return;
+        }
+
+        AuditLog auditLog = new AuditLog();
+        auditLog.setAuthor(UserContext.getUsername());
+        auditLog.setEvent(auditEvent.name());
+        auditLog.setEventDate(new Date());
+        auditLog.setStringAttribute1(className);
+        auditLog.setStringAttribute2(((Identifiable<?>) object).getId().toString());
+        auditLog.setStringAttribute3(attribute);
+        audit(hibernateEvent, auditLog);
+    }
+
+    private void audit(AbstractEvent hibernateEvent, final AuditLog auditLog) {
+        hibernateEvent.getSession().getActionQueue().registerProcess(new AfterTransactionCompletionProcess() {
+            @Override
+            public void doAfterTransactionCompletion(boolean success, SessionImplementor session) {
+                if (success) {
+                    auditLogService.log(auditLog);
+                }
+            }
+        });
+    }
+}
\ No newline at end of file
diff --git a/src/main/generated-java/com/h2/demo/audit/AuditTemplate.java b/src/main/generated-java/com/h2/demo/audit/AuditTemplate.java
new file mode 100644
index 0000000..3288534
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/audit/AuditTemplate.java
@@ -0,0 +1,54 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-backend-jpa:src/main/java/audit/AuditTemplate.p.vm.java
+ */
+package com.h2.demo.audit;
+
+import javax.persistence.PostUpdate;
+import javax.persistence.PreUpdate;
+
+/**
+ * Execute an {@link AuditCallback} to enable/disable audit in {@link PreUpdate} and {@link PostUpdate} actions and/or force username to be used.
+ * The {@link AuditTemplate} will be in charge of cleaning up the {@link AuditContextHolder} state.
+ */
+public class AuditTemplate {
+    public interface AuditCallback<T> {
+        T doInAudit() throws Exception;
+    }
+
+    final boolean auditing;
+    final String username;
+
+    /**
+     * Enable or not audit
+     */
+    public AuditTemplate(boolean auditing) {
+        this(auditing, null);
+    }
+
+    /**
+     * Enable audit, and specify a username to be used
+     */
+    public AuditTemplate(String username) {
+        this(true, username);
+    }
+
+    private AuditTemplate(boolean auditing, String username) {
+        this.auditing = auditing;
+        this.username = username;
+    }
+
+    public <T> T execute(AuditCallback<T> callback) throws Exception {
+        AuditContextHolder.setAudit(auditing);
+        AuditContextHolder.setUsername(username);
+        try {
+            return callback.doInAudit();
+        } finally {
+            AuditContextHolder.clear();
+        }
+    }
+}
\ No newline at end of file
diff --git a/src/main/generated-java/com/h2/demo/audit/HibernateListenerRegistration.java b/src/main/generated-java/com/h2/demo/audit/HibernateListenerRegistration.java
new file mode 100644
index 0000000..62bbdb9
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/audit/HibernateListenerRegistration.java
@@ -0,0 +1,62 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-backend-jpa:src/main/java/audit/HibernateListenerRegistration.p.vm.java
+ */
+package com.h2.demo.audit;
+
+import static com.h2.demo.service.AuditEvent.ApplicationShutdown;
+import static com.h2.demo.service.AuditEvent.ApplicationStartup;
+import static org.hibernate.event.spi.EventType.POST_DELETE;
+import static org.hibernate.event.spi.EventType.POST_INSERT;
+import static org.hibernate.event.spi.EventType.PRE_UPDATE;
+
+import javax.annotation.PostConstruct;
+import javax.annotation.PreDestroy;
+import javax.inject.Inject;
+import javax.inject.Named;
+
+import org.hibernate.SessionFactory;
+import org.hibernate.event.service.spi.EventListenerRegistry;
+import org.hibernate.event.spi.EventType;
+import org.hibernate.internal.SessionFactoryImpl;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+import org.springframework.context.annotation.Lazy;
+
+import com.h2.demo.service.AuditLogService;
+
+@Named
+@Lazy(false)
+public class HibernateListenerRegistration {
+    private static final Logger log = LoggerFactory.getLogger(HibernateListenerRegistration.class);
+
+    @Inject
+    private AuditLogService auditLogService;
+    @Inject
+    private SessionFactory sessionFactory;
+    @Inject
+    private AuditLogListener auditLogListener;
+
+    @PostConstruct
+    public void registerListeners() {
+        register(POST_DELETE, auditLogListener);
+        register(POST_INSERT, auditLogListener);
+        register(PRE_UPDATE, auditLogListener);
+        auditLogService.event(ApplicationStartup);
+    }
+
+    private <T> void register(EventType<T> eventType, T t) {
+        EventListenerRegistry registry = ((SessionFactoryImpl) sessionFactory).getServiceRegistry().getService(EventListenerRegistry.class);
+        log.info("Registering {} listener on {} events", t.getClass(), eventType);
+        registry.getEventListenerGroup(eventType).appendListener(t);
+    }
+
+    @PreDestroy
+    public void destroy() {
+        auditLogService.event(ApplicationShutdown);
+    }
+}
\ No newline at end of file
diff --git a/src/main/generated-java/com/h2/demo/configuration/JpaConfiguration.java b/src/main/generated-java/com/h2/demo/configuration/JpaConfiguration.java
new file mode 100644
index 0000000..dc5c864
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/configuration/JpaConfiguration.java
@@ -0,0 +1,70 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-backend-jpa:src/main/java/configuration/JpaConfiguration.p.vm.java
+ */
+package com.h2.demo.configuration;
+
+import java.util.Properties;
+
+import javax.annotation.Resource;
+import javax.sql.DataSource;
+
+import org.hibernate.SessionFactory;
+import org.hibernate.ejb.HibernateEntityManagerFactory;
+import org.springframework.beans.factory.annotation.Value;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+import org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor;
+import org.springframework.orm.jpa.JpaTransactionManager;
+import org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;
+import org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter;
+
+@Configuration
+public class JpaConfiguration {
+
+    @Value("classpath:hibernate.properties")
+    private Properties jpaProperties;
+
+    @Resource(name = "dataSource")
+    private DataSource dataSource;
+
+    /**
+     * Enable exception translation for beans annotated with @Repository
+     */
+    @Bean
+    public PersistenceExceptionTranslationPostProcessor exceptionTranslation() {
+        return new PersistenceExceptionTranslationPostProcessor();
+    }
+
+    /**
+     * @see read http://www.springframework.org/docs/reference/transaction.html
+     */
+    @Bean
+    public JpaTransactionManager transactionManager() {
+        return new JpaTransactionManager();
+    }
+
+    /**
+     * Build the entity manager with Hibernate as a provider.
+     */
+    @Bean
+    public LocalContainerEntityManagerFactoryBean entityManagerFactory() {
+        LocalContainerEntityManagerFactoryBean emf = new LocalContainerEntityManagerFactoryBean();
+        emf.setDataSource(dataSource);
+        // We set the persistenceXmlLocation to a different name to make it work on JBoss.
+        emf.setPersistenceXmlLocation("classpath:META-INF/spring-persistence.xml");
+        emf.setPersistenceUnitName("h2projectPU");
+        emf.setJpaVendorAdapter(new HibernateJpaVendorAdapter());
+        emf.setJpaProperties(jpaProperties);
+        return emf;
+    }
+
+    @Bean
+    public SessionFactory sessionFactory(HibernateEntityManagerFactory entityManagerFactory) {
+        return entityManagerFactory.getSessionFactory();
+    }
+}
diff --git a/src/main/generated-java/com/h2/demo/configuration/MessageSourceConfiguration.java b/src/main/generated-java/com/h2/demo/configuration/MessageSourceConfiguration.java
new file mode 100644
index 0000000..6ac2487
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/configuration/MessageSourceConfiguration.java
@@ -0,0 +1,56 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-backend-jpa:src/main/java/configuration/MessageSourceConfiguration.p.vm.java
+ */
+package com.h2.demo.configuration;
+
+import org.springframework.context.MessageSource;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+import org.springframework.context.support.ReloadableResourceBundleMessageSource;
+
+@Configuration
+public class MessageSourceConfiguration {
+    /**
+     * Base message source to handle internationalization<p>
+     * Order of basenames matters, the first found property is returned 
+     */
+    @Bean
+    public MessageSource messageSource() {
+        ReloadableResourceBundleMessageSource messageSource = new ReloadableResourceBundleMessageSource();
+        messageSource.setFallbackToSystemLocale(false);
+        messageSource.setUseCodeAsDefaultMessage(true);
+        messageSource.setDefaultEncoding("UTF-8");
+        messageSource.setBasenames( // 
+                // main resources
+                "classpath:/localization/application", "classpath:/localization/messages", //
+                // pages
+                "classpath:/localization/pages/home", //
+                "classpath:/localization/pages/login", //
+                "classpath:/localization/pages/concurrentModificationResolution", //
+                // default spring security messages
+                "classpath:org/springframework/security/messages", //
+                //  our bean validation messages
+                "classpath:ValidationMessages", //
+                // default conversion messages
+                "classpath:javax/faces/Messages", //
+                // generated domain resources
+                "classpath:/localization/domain/Account", //
+                "classpath:/localization/domain/Address", //
+                "classpath:/localization/domain/AuditLog", //
+                "classpath:/localization/domain/Book", //
+                "classpath:/localization/domain/Document", //
+                "classpath:/localization/domain/Legacy", //
+                "classpath:/localization/domain/MoreTypesDemo", //
+                "classpath:/localization/domain/Role", //
+                "classpath:/localization/domain/SavedSearch", //
+                // default bean validation messages 
+                "classpath:org/hibernate/validator/ValidationMessages" //
+        );
+        return messageSource;
+    }
+}
diff --git a/src/main/generated-java/com/h2/demo/configuration/ValidationConfiguration.java b/src/main/generated-java/com/h2/demo/configuration/ValidationConfiguration.java
new file mode 100644
index 0000000..e570f5e
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/configuration/ValidationConfiguration.java
@@ -0,0 +1,27 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-backend-jpa:src/main/java/configuration/ValidationConfiguration.p.vm.java
+ */
+package com.h2.demo.configuration;
+
+import org.springframework.context.MessageSource;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+import org.springframework.validation.beanvalidation.LocalValidatorFactoryBean;
+
+@Configuration
+public class ValidationConfiguration {
+    /**
+     * Enable the bean validation provider, and configure it to use the messageSource when resolving properties
+     */
+    @Bean
+    public LocalValidatorFactoryBean validator(MessageSource messageSource) {
+        LocalValidatorFactoryBean validator = new LocalValidatorFactoryBean();
+        validator.setValidationMessageSource(messageSource);
+        return validator;
+    }
+}
\ No newline at end of file
diff --git a/src/main/generated-java/com/h2/demo/context/LocaleHolder.java b/src/main/generated-java/com/h2/demo/context/LocaleHolder.java
new file mode 100644
index 0000000..b40919d
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/context/LocaleHolder.java
@@ -0,0 +1,31 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-backend-jpa:src/main/java/context/LocaleHolder.p.vm.java
+ */
+package com.h2.demo.context;
+
+import java.util.Locale;
+
+import org.springframework.context.i18n.LocaleContextHolder;
+
+public final class LocaleHolder {
+
+    private LocaleHolder() {
+    }
+
+    public static Locale getLocale() {
+        return LocaleContextHolder.getLocale();
+    }
+
+    public static void setLocale(Locale locale) {
+        LocaleContextHolder.setLocale(locale);
+    }
+
+    public static void resetLocaleContext() {
+        LocaleContextHolder.resetLocaleContext();
+    }
+}
\ No newline at end of file
diff --git a/src/main/generated-java/com/h2/demo/context/LogContext.java b/src/main/generated-java/com/h2/demo/context/LogContext.java
new file mode 100644
index 0000000..1f29a28
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/context/LogContext.java
@@ -0,0 +1,79 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-backend-jpa:src/main/java/context/LogContext.p.vm.java
+ */
+package com.h2.demo.context;
+
+import org.slf4j.MDC;
+
+/**
+ * Used to store to use global info for logging purposes. This method prevents passing all the data you want to see in your logs in all the methods.
+ * <p>
+ * Please configure logback with the data provided by this class where <code>session_id</code> and <code>login</code> are objects stored in the log context.
+ * <p>
+ * Example: <br>
+ * <code>
+ * [%d{ISO8601}] [%-5level] [%X{session_id}] [%X{login}] [%C{3}.%M] %m%n
+ * </code>
+ */
+public final class LogContext {
+
+    private LogContext() {
+    }
+
+    /**
+     * parameter name that holds logins
+     */
+    public static final String LOGIN = "login";
+
+    /**
+     * parameter name that holds web session ids
+     */
+    public static final String SESSION_ID = "session_id";
+
+    /**
+     * set the given login in the map
+     */
+    public static void setLogin(String login) {
+        put(LOGIN, login);
+    }
+
+    /**
+     * set the given web session in the map
+     */
+    public static void setSessionId(String sessionId) {
+        put(SESSION_ID, sessionId);
+    }
+
+    /**
+     * Get the context identified by the key parameter.
+     */
+    public static Object get(String key) {
+        return MDC.get(key);
+    }
+
+    /**
+     * Put a context value (the o parameter) as identified with the key parameter into the current thread's context map.
+     */
+    public static void put(String key, Object o) {
+        MDC.put(key, o.toString());
+    }
+
+    /**
+     * Remove the the context identified by the key parameter.
+     */
+    public static void remove(String key) {
+        MDC.remove(key);
+    }
+
+    /**
+     * Remove all the object put in this thread context.
+     */
+    public static void resetLogContext() {
+        MDC.clear();
+    }
+}
diff --git a/src/main/generated-java/com/h2/demo/context/UserContext.java b/src/main/generated-java/com/h2/demo/context/UserContext.java
new file mode 100644
index 0000000..174ec82
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/context/UserContext.java
@@ -0,0 +1,126 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-backend-jpa:src/main/java/context/UserContext.p.vm.java
+ */
+package com.h2.demo.context;
+
+import static com.google.common.collect.Lists.newArrayList;
+import static java.util.Collections.emptyList;
+
+import java.util.List;
+import java.util.Locale;
+
+import org.springframework.security.core.Authentication;
+import org.springframework.security.core.GrantedAuthority;
+import org.springframework.security.core.context.SecurityContextHolder;
+import org.springframework.security.core.userdetails.UserDetails;
+
+/**
+ * Get Spring security context to access user data security infos
+ */
+public final class UserContext {
+    public static final String ANONYMOUS_USER = "anonymousUser";
+
+    private UserContext() {
+    }
+
+    /**
+     * Get the current username. Note that it may not correspond to a username that
+     * currently exists in your account repository; it could be a spring security
+     * 'anonymous user'.
+     *
+     * @see org.springframework.security.web.authentication.AnonymousAuthenticationFilter
+     * @return the current user's username, or 'anonymousUser'.
+     */
+    public static String getUsername() {
+        Authentication auth = SecurityContextHolder.getContext().getAuthentication();
+
+        if (auth != null) {
+            Object principal = auth.getPrincipal();
+
+            if (principal instanceof UserDetails) {
+                return ((UserDetails) principal).getUsername();
+            }
+
+            return principal.toString();
+        }
+
+        return ANONYMOUS_USER;
+    }
+
+    public static String getId() {
+        Authentication auth = SecurityContextHolder.getContext().getAuthentication();
+
+        if (auth != null) {
+            Object principal = auth.getPrincipal();
+
+            if (principal instanceof UserWithId) {
+                return ((UserWithId) principal).getId();
+            }
+        }
+
+        return null;
+    }
+
+    /**
+     * return the current locale
+     */
+    public static Locale getLocale() {
+        return LocaleHolder.getLocale();
+    }
+
+    /**
+     * Retrieve the current UserDetails bound to the current thread by Spring Security, if any.
+     */
+    public static UserDetails getUserDetails() {
+        Authentication auth = SecurityContextHolder.getContext().getAuthentication();
+
+        if (auth != null && auth.getPrincipal() instanceof UserDetails) {
+            return ((UserDetails) auth.getPrincipal());
+        }
+
+        return null;
+    }
+
+    /**
+     * Return the current roles bound to the current thread by Spring Security.
+     */
+    public static List<String> getRoles() {
+        Authentication auth = SecurityContextHolder.getContext().getAuthentication();
+
+        if (auth != null) {
+            return toStringList(auth.getAuthorities());
+        }
+
+        return emptyList();
+    }
+
+    /**
+     * Tell whether the passed role is set?
+     *
+     * @return true if the passed role is present, false otherwise.
+     */
+    public static boolean hasRole(String roleName) {
+        for (String role : getRoles()) {
+            if (role.equalsIgnoreCase(roleName)) {
+                return true;
+            }
+        }
+
+        return false;
+    }
+
+    public static List<String> toStringList(Iterable<? extends GrantedAuthority> grantedAuthorities) {
+        List<String> result = newArrayList();
+
+        for (GrantedAuthority grantedAuthority : grantedAuthorities) {
+            result.add(grantedAuthority.getAuthority());
+        }
+
+        return result;
+    }
+}
\ No newline at end of file
diff --git a/src/main/generated-java/com/h2/demo/context/UserWithId.java b/src/main/generated-java/com/h2/demo/context/UserWithId.java
new file mode 100644
index 0000000..0819e6b
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/context/UserWithId.java
@@ -0,0 +1,32 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-backend-jpa:src/main/java/context/UserWithId.p.vm.java
+ */
+package com.h2.demo.context;
+
+import java.util.Collection;
+
+import org.springframework.security.core.GrantedAuthority;
+import org.springframework.security.core.userdetails.User;
+
+/**
+ * Simple User that also keep track of the primary key.
+ */
+public class UserWithId extends User {
+    private static final long serialVersionUID = 1L;
+    private String id;
+
+    public UserWithId(String username, String password, boolean enabled, boolean accountNonExpired, boolean credentialsNonExpired, boolean accountNonLocked,
+            Collection<? extends GrantedAuthority> authorities, String id) {
+        super(username, password, enabled, accountNonExpired, credentialsNonExpired, accountNonLocked, authorities);
+        this.id = id;
+    }
+
+    public String getId() {
+        return id;
+    }
+}
\ No newline at end of file
diff --git a/src/main/generated-java/com/h2/demo/domain/Account.java b/src/main/generated-java/com/h2/demo/domain/Account.java
new file mode 100644
index 0000000..d09b758
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/domain/Account.java
@@ -0,0 +1,512 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-backend-jpa:src/main/java/domain/Entity.e.vm.java
+ */
+package com.h2.demo.domain;
+
+import static javax.persistence.CascadeType.MERGE;
+import static javax.persistence.CascadeType.PERSIST;
+import static javax.persistence.FetchType.LAZY;
+import static javax.persistence.TemporalType.TIMESTAMP;
+
+import java.io.Serializable;
+import java.util.ArrayList;
+import java.util.Date;
+import java.util.List;
+
+import javax.persistence.Column;
+import javax.persistence.Entity;
+import javax.persistence.GeneratedValue;
+import javax.persistence.Id;
+import javax.persistence.JoinColumn;
+import javax.persistence.JoinTable;
+import javax.persistence.ManyToMany;
+import javax.persistence.ManyToOne;
+import javax.persistence.PrePersist;
+import javax.persistence.PreUpdate;
+import javax.persistence.Table;
+import javax.persistence.Temporal;
+import javax.persistence.Transient;
+import javax.persistence.Version;
+import javax.validation.constraints.NotNull;
+import javax.validation.constraints.Size;
+import javax.xml.bind.annotation.XmlTransient;
+
+import org.hibernate.annotations.GenericGenerator;
+import org.hibernate.validator.constraints.Email;
+import org.hibernate.validator.constraints.NotEmpty;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import com.google.common.base.Objects;
+import com.h2.demo.audit.AuditContextHolder;
+import com.h2.demo.validation.FixedLength;
+
+@Entity
+@Table(name = "ACCOUNT")
+public class Account implements Identifiable<String>, Serializable {
+    private static final long serialVersionUID = 1L;
+    private static final Logger log = LoggerFactory.getLogger(Account.class);
+
+    // Raw attributes
+    private String id;
+    private String login;
+    private String password;
+    private String email;
+    private Boolean isEnabled;
+    private String civility;
+    private String firstName;
+    private String lastName;
+    private Date birthDate;
+    private String description;
+    private Date creationDate;
+    private String creationAuthor;
+    private Date lastModificationDate;
+    private String lastModificationAuthor;
+    private Integer version;
+
+    // Many to one
+    private Address address;
+
+    // Many to many
+    private List<Role> roles = new ArrayList<Role>();
+
+    // -------------------------------
+    // Role names support
+    // -------------------------------
+
+    /**
+     * Returns the granted authorities for this user. You may override
+     * this method to provide your own custom authorities.
+     */
+    @Transient
+    @XmlTransient
+    public List<String> getRoleNames() {
+        List<String> roleNames = new ArrayList<String>();
+
+        for (Role role : getRoles()) {
+            roleNames.add(role.getRoleName());
+        }
+
+        return roleNames;
+    }
+
+    // -- [id] ------------------------
+
+    @Override
+    @Column(name = "ID", length = 36)
+    @GeneratedValue(generator = "strategy-uuid2")
+    @GenericGenerator(name = "strategy-uuid2", strategy = "uuid2")
+    @Id
+    public String getId() {
+        return id;
+    }
+
+    @Override
+    public void setId(String id) {
+        this.id = id;
+    }
+
+    public Account id(String id) {
+        setId(id);
+        return this;
+    }
+
+    @Override
+    @Transient
+    @XmlTransient
+    public boolean isIdSet() {
+        return id != null && !id.isEmpty();
+    }
+
+    // -- [login] ------------------------
+
+    @NotEmpty
+    @Size(max = 100)
+    @Column(name = "LOGIN", nullable = false, unique = true, length = 100)
+    public String getLogin() {
+        return login;
+    }
+
+    public void setLogin(String login) {
+        this.login = login;
+    }
+
+    public Account login(String login) {
+        setLogin(login);
+        return this;
+    }
+
+    // -- [password] ------------------------
+
+    @NotEmpty
+    @Size(max = 100)
+    @Column(name = "`PASSWORD`", nullable = false, length = 100)
+    public String getPassword() {
+        return password;
+    }
+
+    public void setPassword(String password) {
+        this.password = password;
+    }
+
+    public Account password(String password) {
+        setPassword(password);
+        return this;
+    }
+
+    // -- [email] ------------------------
+
+    @Email
+    @NotEmpty
+    @Size(max = 100)
+    @Column(name = "EMAIL", nullable = false, unique = true, length = 100)
+    public String getEmail() {
+        return email;
+    }
+
+    public void setEmail(String email) {
+        this.email = email;
+    }
+
+    public Account email(String email) {
+        setEmail(email);
+        return this;
+    }
+
+    // -- [isEnabled] ------------------------
+
+    @NotNull
+    @Column(name = "IS_ENABLED", nullable = false, length = 1)
+    public Boolean getIsEnabled() {
+        return isEnabled;
+    }
+
+    public void setIsEnabled(Boolean isEnabled) {
+        this.isEnabled = isEnabled;
+    }
+
+    public Account isEnabled(Boolean isEnabled) {
+        setIsEnabled(isEnabled);
+        return this;
+    }
+
+    // -- [civility] ------------------------
+
+    @FixedLength(length = 2)
+    @Column(name = "CIVILITY", length = 2)
+    public String getCivility() {
+        return civility;
+    }
+
+    public void setCivility(String civility) {
+        this.civility = civility;
+    }
+
+    public Account civility(String civility) {
+        setCivility(civility);
+        return this;
+    }
+
+    // -- [firstName] ------------------------
+
+    @Size(max = 100)
+    @Column(name = "FIRST_NAME", length = 100)
+    public String getFirstName() {
+        return firstName;
+    }
+
+    public void setFirstName(String firstName) {
+        this.firstName = firstName;
+    }
+
+    public Account firstName(String firstName) {
+        setFirstName(firstName);
+        return this;
+    }
+
+    // -- [lastName] ------------------------
+
+    @Size(max = 100)
+    @Column(name = "LAST_NAME", length = 100)
+    public String getLastName() {
+        return lastName;
+    }
+
+    public void setLastName(String lastName) {
+        this.lastName = lastName;
+    }
+
+    public Account lastName(String lastName) {
+        setLastName(lastName);
+        return this;
+    }
+
+    // -- [birthDate] ------------------------
+
+    @Column(name = "BIRTH_DATE", length = 23)
+    @Temporal(TIMESTAMP)
+    public Date getBirthDate() {
+        return birthDate;
+    }
+
+    public void setBirthDate(Date birthDate) {
+        this.birthDate = birthDate;
+    }
+
+    public Account birthDate(Date birthDate) {
+        setBirthDate(birthDate);
+        return this;
+    }
+
+    // -- [description] ------------------------
+
+    @Size(max = 255)
+    @Column(name = "DESCRIPTION")
+    public String getDescription() {
+        return description;
+    }
+
+    public void setDescription(String description) {
+        this.description = description;
+    }
+
+    public Account description(String description) {
+        setDescription(description);
+        return this;
+    }
+
+    // -- [creationDate] ------------------------
+
+    @Column(name = "CREATION_DATE", length = 23)
+    @Temporal(TIMESTAMP)
+    public Date getCreationDate() {
+        return creationDate;
+    }
+
+    public void setCreationDate(Date creationDate) {
+        this.creationDate = creationDate;
+    }
+
+    public Account creationDate(Date creationDate) {
+        setCreationDate(creationDate);
+        return this;
+    }
+
+    // -- [creationAuthor] ------------------------
+
+    @Column(name = "CREATION_AUTHOR", length = 200)
+    public String getCreationAuthor() {
+        return creationAuthor;
+    }
+
+    public void setCreationAuthor(String creationAuthor) {
+        this.creationAuthor = creationAuthor;
+    }
+
+    public Account creationAuthor(String creationAuthor) {
+        setCreationAuthor(creationAuthor);
+        return this;
+    }
+
+    // -- [lastModificationDate] ------------------------
+
+    @Column(name = "LAST_MODIFICATION_DATE", length = 23)
+    @Temporal(TIMESTAMP)
+    public Date getLastModificationDate() {
+        return lastModificationDate;
+    }
+
+    public void setLastModificationDate(Date lastModificationDate) {
+        this.lastModificationDate = lastModificationDate;
+    }
+
+    public Account lastModificationDate(Date lastModificationDate) {
+        setLastModificationDate(lastModificationDate);
+        return this;
+    }
+
+    // -- [lastModificationAuthor] ------------------------
+
+    @Column(name = "LAST_MODIFICATION_AUTHOR", length = 200)
+    public String getLastModificationAuthor() {
+        return lastModificationAuthor;
+    }
+
+    public void setLastModificationAuthor(String lastModificationAuthor) {
+        this.lastModificationAuthor = lastModificationAuthor;
+    }
+
+    public Account lastModificationAuthor(String lastModificationAuthor) {
+        setLastModificationAuthor(lastModificationAuthor);
+        return this;
+    }
+
+    // -- [version] ------------------------
+
+    @Column(name = "VERSION", precision = 10)
+    @Version
+    public Integer getVersion() {
+        return version;
+    }
+
+    public void setVersion(Integer version) {
+        this.version = version;
+    }
+
+    public Account version(Integer version) {
+        setVersion(version);
+        return this;
+    }
+
+    // -----------------------------------------------------------------
+    // Many to One support
+    // -----------------------------------------------------------------
+
+    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
+    // many-to-one: Account.address ==> Address.id
+    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
+
+    @JoinColumn(name = "ADDRESS_ID")
+    @ManyToOne(cascade = { PERSIST, MERGE }, fetch = LAZY)
+    public Address getAddress() {
+        return address;
+    }
+
+    /**
+     * Set the {@link #address} without adding this Account instance on the passed {@link #address}
+     */
+    public void setAddress(Address address) {
+        this.address = address;
+    }
+
+    public Account address(Address address) {
+        setAddress(address);
+        return this;
+    }
+
+    // -----------------------------------------------------------------
+    // Many to Many
+    // -----------------------------------------------------------------
+
+    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
+    // many-to-many: account ==> roles
+    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
+
+    /**
+     * Returns the {@link #roles} list.
+     */
+    @JoinTable(name = "ACCOUNT_ROLE", joinColumns = @JoinColumn(name = "ACCOUNT_ID"), inverseJoinColumns = @JoinColumn(name = "ROLE_ID"))
+    @ManyToMany(cascade = { PERSIST, MERGE })
+    public List<Role> getRoles() {
+        return roles;
+    }
+
+    /**
+     * Set the {@link #roles} list.
+     *
+     * @param roles the list of Role
+     */
+    public void setRoles(List<Role> roles) {
+        this.roles = roles;
+    }
+
+    /**
+     * Helper method to add the passed {@link Role} to the {@link #roles} list.
+     */
+    public boolean addRole(Role role) {
+        return getRoles().add(role);
+    }
+
+    /**
+     * Helper method to remove the passed {@link Role} from the {@link #roles} list.
+     */
+    public boolean removeRole(Role role) {
+        return getRoles().remove(role);
+    }
+
+    /**
+     * Helper method to determine if the passed {@link Role} is present in the {@link #roles} list.
+     */
+    public boolean containsRole(Role role) {
+        return getRoles() != null && getRoles().contains(role);
+    }
+
+    /**
+     * Apply the default values.
+     */
+    public Account withDefaults() {
+        setIsEnabled(true);
+        setCivility("MR");
+        return this;
+    }
+
+    /**
+     * Equals implementation using a business key.
+     */
+    @Override
+    public boolean equals(Object other) {
+        return this == other || (other instanceof Account && hashCode() == other.hashCode());
+    }
+
+    private volatile int previousHashCode = 0;
+
+    @Override
+    public int hashCode() {
+        int hashCode = Objects.hashCode(getLogin());
+
+        if (previousHashCode != 0 && previousHashCode != hashCode) {
+            log.warn("DEVELOPER: hashCode has changed!." //
+                    + "If you encounter this message you should take the time to carefuly review equals/hashCode for: " //
+                    + getClass().getCanonicalName());
+        }
+
+        previousHashCode = hashCode;
+        return hashCode;
+    }
+
+    /**
+     * Construct a readable string representation for this Account instance.
+     * @see java.lang.Object#toString()
+     */
+    @Override
+    public String toString() {
+        return Objects.toStringHelper(this) //
+                .add("id", getId()) //
+                .add("login", getLogin()) //
+                .add("password", "XXXX") //
+                .add("email", getEmail()) //
+                .add("isEnabled", getIsEnabled()) //
+                .add("civility", getCivility()) //
+                .add("firstName", getFirstName()) //
+                .add("lastName", getLastName()) //
+                .add("birthDate", getBirthDate()) //
+                .add("description", getDescription()) //
+                .add("creationDate", getCreationDate()) //
+                .add("creationAuthor", getCreationAuthor()) //
+                .add("lastModificationDate", getLastModificationDate()) //
+                .add("lastModificationAuthor", getLastModificationAuthor()) //
+                .add("version", getVersion()) //
+                .toString();
+    }
+
+    @PrePersist
+    protected void prePersist() {
+        if (AuditContextHolder.audit()) {
+            setCreationAuthor(AuditContextHolder.username());
+            setCreationDate(new Date());
+        }
+    }
+
+    @PreUpdate
+    protected void preUpdate() {
+        if (AuditContextHolder.audit()) {
+            setLastModificationAuthor(AuditContextHolder.username());
+            setLastModificationDate(new Date());
+        }
+    }
+}
\ No newline at end of file
diff --git a/src/main/generated-java/com/h2/demo/domain/Account_.java b/src/main/generated-java/com/h2/demo/domain/Account_.java
new file mode 100644
index 0000000..c7882d8
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/domain/Account_.java
@@ -0,0 +1,42 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-backend-jpa:src/main/java/domain/EntityMeta_.e.vm.java
+ */
+package com.h2.demo.domain;
+
+import java.util.Date;
+
+import javax.persistence.metamodel.ListAttribute;
+import javax.persistence.metamodel.SingularAttribute;
+import javax.persistence.metamodel.StaticMetamodel;
+
+@StaticMetamodel(Account.class)
+public abstract class Account_ {
+
+    // Raw attributes
+    public static volatile SingularAttribute<Account, String> id;
+    public static volatile SingularAttribute<Account, String> login;
+    public static volatile SingularAttribute<Account, String> password;
+    public static volatile SingularAttribute<Account, String> email;
+    public static volatile SingularAttribute<Account, Boolean> isEnabled;
+    public static volatile SingularAttribute<Account, String> civility;
+    public static volatile SingularAttribute<Account, String> firstName;
+    public static volatile SingularAttribute<Account, String> lastName;
+    public static volatile SingularAttribute<Account, Date> birthDate;
+    public static volatile SingularAttribute<Account, String> description;
+    public static volatile SingularAttribute<Account, Date> creationDate;
+    public static volatile SingularAttribute<Account, String> creationAuthor;
+    public static volatile SingularAttribute<Account, Date> lastModificationDate;
+    public static volatile SingularAttribute<Account, String> lastModificationAuthor;
+    public static volatile SingularAttribute<Account, Integer> version;
+
+    // Many to one
+    public static volatile SingularAttribute<Account, Address> address;
+
+    // Many to many
+    public static volatile ListAttribute<Account, Role> roles;
+}
\ No newline at end of file
diff --git a/src/main/generated-java/com/h2/demo/domain/Address.java b/src/main/generated-java/com/h2/demo/domain/Address.java
new file mode 100644
index 0000000..a064a89
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/domain/Address.java
@@ -0,0 +1,155 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-backend-jpa:src/main/java/domain/Entity.e.vm.java
+ */
+package com.h2.demo.domain;
+
+import java.io.Serializable;
+
+import javax.persistence.Column;
+import javax.persistence.Entity;
+import javax.persistence.GeneratedValue;
+import javax.persistence.Id;
+import javax.persistence.Table;
+import javax.persistence.Transient;
+import javax.persistence.Version;
+import javax.validation.constraints.Size;
+import javax.xml.bind.annotation.XmlTransient;
+
+import org.hibernate.validator.constraints.NotEmpty;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import com.google.common.base.Objects;
+
+@Entity
+@Table(name = "ADDRESS")
+public class Address implements Identifiable<Integer>, Serializable {
+    private static final long serialVersionUID = 1L;
+    private static final Logger log = LoggerFactory.getLogger(Address.class);
+
+    // Raw attributes
+    private Integer id;
+    private String streetName;
+    private String city;
+    private Integer version;
+
+    // -- [id] ------------------------
+
+    @Override
+    @Column(name = "ID", precision = 10)
+    @GeneratedValue
+    @Id
+    public Integer getId() {
+        return id;
+    }
+
+    @Override
+    public void setId(Integer id) {
+        this.id = id;
+    }
+
+    public Address id(Integer id) {
+        setId(id);
+        return this;
+    }
+
+    @Override
+    @Transient
+    @XmlTransient
+    public boolean isIdSet() {
+        return id != null;
+    }
+
+    // -- [streetName] ------------------------
+
+    @Size(max = 100)
+    @Column(name = "STREET_NAME", length = 100)
+    public String getStreetName() {
+        return streetName;
+    }
+
+    public void setStreetName(String streetName) {
+        this.streetName = streetName;
+    }
+
+    public Address streetName(String streetName) {
+        setStreetName(streetName);
+        return this;
+    }
+
+    // -- [city] ------------------------
+
+    @NotEmpty
+    @Size(max = 100)
+    @Column(name = "CITY", nullable = false, length = 100)
+    public String getCity() {
+        return city;
+    }
+
+    public void setCity(String city) {
+        this.city = city;
+    }
+
+    public Address city(String city) {
+        setCity(city);
+        return this;
+    }
+
+    // -- [version] ------------------------
+
+    @Column(name = "VERSION", precision = 10)
+    @Version
+    public Integer getVersion() {
+        return version;
+    }
+
+    public void setVersion(Integer version) {
+        this.version = version;
+    }
+
+    public Address version(Integer version) {
+        setVersion(version);
+        return this;
+    }
+
+    /**
+     * Apply the default values.
+     */
+    public Address withDefaults() {
+        return this;
+    }
+
+    /**
+     * Equals implementation using a business key.
+     */
+    @Override
+    public boolean equals(Object other) {
+        return this == other || (other instanceof Address && hashCode() == other.hashCode());
+    }
+
+    private IdentifiableHashBuilder identifiableHashBuilder = new IdentifiableHashBuilder();
+
+    @Override
+    public int hashCode() {
+        return identifiableHashBuilder.hash(log, this);
+    }
+
+    /**
+     * Construct a readable string representation for this Address instance.
+     * @see java.lang.Object#toString()
+     */
+    @Override
+    public String toString() {
+        return Objects.toStringHelper(this) //
+                .add("id", getId()) //
+                .add("streetName", getStreetName()) //
+                .add("city", getCity()) //
+                .add("version", getVersion()) //
+                .toString();
+    }
+}
\ No newline at end of file
diff --git a/src/main/generated-java/com/h2/demo/domain/Address_.java b/src/main/generated-java/com/h2/demo/domain/Address_.java
new file mode 100644
index 0000000..e3d0bba
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/domain/Address_.java
@@ -0,0 +1,22 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-backend-jpa:src/main/java/domain/EntityMeta_.e.vm.java
+ */
+package com.h2.demo.domain;
+
+import javax.persistence.metamodel.SingularAttribute;
+import javax.persistence.metamodel.StaticMetamodel;
+
+@StaticMetamodel(Address.class)
+public abstract class Address_ {
+
+    // Raw attributes
+    public static volatile SingularAttribute<Address, Integer> id;
+    public static volatile SingularAttribute<Address, String> streetName;
+    public static volatile SingularAttribute<Address, String> city;
+    public static volatile SingularAttribute<Address, Integer> version;
+}
\ No newline at end of file
diff --git a/src/main/generated-java/com/h2/demo/domain/AuditLog.java b/src/main/generated-java/com/h2/demo/domain/AuditLog.java
new file mode 100644
index 0000000..7bf4ada
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/domain/AuditLog.java
@@ -0,0 +1,213 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-backend-jpa:src/main/java/domain/Entity.e.vm.java
+ */
+package com.h2.demo.domain;
+
+import static javax.persistence.TemporalType.TIMESTAMP;
+
+import java.io.Serializable;
+import java.util.Date;
+
+import javax.persistence.Column;
+import javax.persistence.Entity;
+import javax.persistence.GeneratedValue;
+import javax.persistence.Id;
+import javax.persistence.Table;
+import javax.persistence.Temporal;
+import javax.persistence.Transient;
+import javax.validation.constraints.Size;
+import javax.xml.bind.annotation.XmlTransient;
+
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import com.google.common.base.Objects;
+
+@Entity
+@Table(name = "AUDIT_LOG")
+public class AuditLog implements Identifiable<Integer>, Serializable {
+    private static final long serialVersionUID = 1L;
+    private static final Logger log = LoggerFactory.getLogger(AuditLog.class);
+
+    // Raw attributes
+    private Integer id;
+    private String author;
+    private String event;
+    private Date eventDate;
+    private String stringAttribute1;
+    private String stringAttribute2;
+    private String stringAttribute3;
+
+    // -- [id] ------------------------
+
+    @Override
+    @Column(name = "ID", precision = 10)
+    @GeneratedValue
+    @Id
+    public Integer getId() {
+        return id;
+    }
+
+    @Override
+    public void setId(Integer id) {
+        this.id = id;
+    }
+
+    public AuditLog id(Integer id) {
+        setId(id);
+        return this;
+    }
+
+    @Override
+    @Transient
+    @XmlTransient
+    public boolean isIdSet() {
+        return id != null;
+    }
+
+    // -- [author] ------------------------
+
+    @Size(max = 256)
+    @Column(name = "AUTHOR", length = 256)
+    public String getAuthor() {
+        return author;
+    }
+
+    public void setAuthor(String author) {
+        this.author = author;
+    }
+
+    public AuditLog author(String author) {
+        setAuthor(author);
+        return this;
+    }
+
+    // -- [event] ------------------------
+
+    @Size(max = 256)
+    @Column(name = "EVENT", length = 256)
+    public String getEvent() {
+        return event;
+    }
+
+    public void setEvent(String event) {
+        this.event = event;
+    }
+
+    public AuditLog event(String event) {
+        setEvent(event);
+        return this;
+    }
+
+    // -- [eventDate] ------------------------
+
+    @Column(name = "EVENT_DATE", length = 23)
+    @Temporal(TIMESTAMP)
+    public Date getEventDate() {
+        return eventDate;
+    }
+
+    public void setEventDate(Date eventDate) {
+        this.eventDate = eventDate;
+    }
+
+    public AuditLog eventDate(Date eventDate) {
+        setEventDate(eventDate);
+        return this;
+    }
+
+    // -- [stringAttribute1] ------------------------
+
+    @Size(max = 256)
+    @Column(name = "STRING_ATTRIBUTE_1", length = 256)
+    public String getStringAttribute1() {
+        return stringAttribute1;
+    }
+
+    public void setStringAttribute1(String stringAttribute1) {
+        this.stringAttribute1 = stringAttribute1;
+    }
+
+    public AuditLog stringAttribute1(String stringAttribute1) {
+        setStringAttribute1(stringAttribute1);
+        return this;
+    }
+
+    // -- [stringAttribute2] ------------------------
+
+    @Size(max = 256)
+    @Column(name = "STRING_ATTRIBUTE_2", length = 256)
+    public String getStringAttribute2() {
+        return stringAttribute2;
+    }
+
+    public void setStringAttribute2(String stringAttribute2) {
+        this.stringAttribute2 = stringAttribute2;
+    }
+
+    public AuditLog stringAttribute2(String stringAttribute2) {
+        setStringAttribute2(stringAttribute2);
+        return this;
+    }
+
+    // -- [stringAttribute3] ------------------------
+
+    @Size(max = 256)
+    @Column(name = "STRING_ATTRIBUTE_3", length = 256)
+    public String getStringAttribute3() {
+        return stringAttribute3;
+    }
+
+    public void setStringAttribute3(String stringAttribute3) {
+        this.stringAttribute3 = stringAttribute3;
+    }
+
+    public AuditLog stringAttribute3(String stringAttribute3) {
+        setStringAttribute3(stringAttribute3);
+        return this;
+    }
+
+    /**
+     * Apply the default values.
+     */
+    public AuditLog withDefaults() {
+        return this;
+    }
+
+    /**
+     * Equals implementation using a business key.
+     */
+    @Override
+    public boolean equals(Object other) {
+        return this == other || (other instanceof AuditLog && hashCode() == other.hashCode());
+    }
+
+    private IdentifiableHashBuilder identifiableHashBuilder = new IdentifiableHashBuilder();
+
+    @Override
+    public int hashCode() {
+        return identifiableHashBuilder.hash(log, this);
+    }
+
+    /**
+     * Construct a readable string representation for this AuditLog instance.
+     * @see java.lang.Object#toString()
+     */
+    @Override
+    public String toString() {
+        return Objects.toStringHelper(this) //
+                .add("id", getId()) //
+                .add("author", getAuthor()) //
+                .add("event", getEvent()) //
+                .add("eventDate", getEventDate()) //
+                .add("stringAttribute1", getStringAttribute1()) //
+                .add("stringAttribute2", getStringAttribute2()) //
+                .add("stringAttribute3", getStringAttribute3()) //
+                .toString();
+    }
+}
\ No newline at end of file
diff --git a/src/main/generated-java/com/h2/demo/domain/AuditLog_.java b/src/main/generated-java/com/h2/demo/domain/AuditLog_.java
new file mode 100644
index 0000000..971bb12
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/domain/AuditLog_.java
@@ -0,0 +1,27 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-backend-jpa:src/main/java/domain/EntityMeta_.e.vm.java
+ */
+package com.h2.demo.domain;
+
+import java.util.Date;
+
+import javax.persistence.metamodel.SingularAttribute;
+import javax.persistence.metamodel.StaticMetamodel;
+
+@StaticMetamodel(AuditLog.class)
+public abstract class AuditLog_ {
+
+    // Raw attributes
+    public static volatile SingularAttribute<AuditLog, Integer> id;
+    public static volatile SingularAttribute<AuditLog, String> author;
+    public static volatile SingularAttribute<AuditLog, String> event;
+    public static volatile SingularAttribute<AuditLog, Date> eventDate;
+    public static volatile SingularAttribute<AuditLog, String> stringAttribute1;
+    public static volatile SingularAttribute<AuditLog, String> stringAttribute2;
+    public static volatile SingularAttribute<AuditLog, String> stringAttribute3;
+}
\ No newline at end of file
diff --git a/src/main/generated-java/com/h2/demo/domain/Book.java b/src/main/generated-java/com/h2/demo/domain/Book.java
new file mode 100644
index 0000000..9bc1ff8
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/domain/Book.java
@@ -0,0 +1,193 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-backend-jpa:src/main/java/domain/Entity.e.vm.java
+ */
+package com.h2.demo.domain;
+
+import static javax.persistence.CascadeType.MERGE;
+import static javax.persistence.CascadeType.PERSIST;
+import static javax.persistence.FetchType.LAZY;
+
+import java.io.Serializable;
+
+import javax.persistence.Column;
+import javax.persistence.Entity;
+import javax.persistence.GeneratedValue;
+import javax.persistence.Id;
+import javax.persistence.JoinColumn;
+import javax.persistence.ManyToOne;
+import javax.persistence.Table;
+import javax.persistence.Transient;
+import javax.persistence.Version;
+import javax.validation.constraints.Digits;
+import javax.validation.constraints.NotNull;
+import javax.validation.constraints.Size;
+import javax.xml.bind.annotation.XmlTransient;
+
+import org.hibernate.validator.constraints.NotEmpty;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import com.google.common.base.Objects;
+
+@Entity
+@Table(name = "BOOK")
+public class Book implements Identifiable<Integer>, Serializable {
+    private static final long serialVersionUID = 1L;
+    private static final Logger log = LoggerFactory.getLogger(Book.class);
+
+    // Raw attributes
+    private Integer id;
+    private String title;
+    private Integer numberOfPages;
+    private Integer version;
+
+    // Many to one
+    private Account account;
+
+    // -- [id] ------------------------
+
+    @Override
+    @Column(name = "ID", precision = 10)
+    @GeneratedValue
+    @Id
+    public Integer getId() {
+        return id;
+    }
+
+    @Override
+    public void setId(Integer id) {
+        this.id = id;
+    }
+
+    public Book id(Integer id) {
+        setId(id);
+        return this;
+    }
+
+    @Override
+    @Transient
+    @XmlTransient
+    public boolean isIdSet() {
+        return id != null;
+    }
+
+    // -- [title] ------------------------
+
+    @NotEmpty
+    @Size(max = 100)
+    @Column(name = "TITLE", nullable = false, length = 100)
+    public String getTitle() {
+        return title;
+    }
+
+    public void setTitle(String title) {
+        this.title = title;
+    }
+
+    public Book title(String title) {
+        setTitle(title);
+        return this;
+    }
+
+    // -- [numberOfPages] ------------------------
+
+    @Digits(integer = 10, fraction = 0)
+    @NotNull
+    @Column(name = "NUMBER_OF_PAGES", nullable = false, precision = 10)
+    public Integer getNumberOfPages() {
+        return numberOfPages;
+    }
+
+    public void setNumberOfPages(Integer numberOfPages) {
+        this.numberOfPages = numberOfPages;
+    }
+
+    public Book numberOfPages(Integer numberOfPages) {
+        setNumberOfPages(numberOfPages);
+        return this;
+    }
+
+    // -- [version] ------------------------
+
+    @Column(name = "VERSION", precision = 10)
+    @Version
+    public Integer getVersion() {
+        return version;
+    }
+
+    public void setVersion(Integer version) {
+        this.version = version;
+    }
+
+    public Book version(Integer version) {
+        setVersion(version);
+        return this;
+    }
+
+    // -----------------------------------------------------------------
+    // Many to One support
+    // -----------------------------------------------------------------
+
+    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
+    // many-to-one: Book.account ==> Account.id
+    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
+
+    @JoinColumn(name = "ACCOUNT_ID")
+    @ManyToOne(cascade = { PERSIST, MERGE }, fetch = LAZY)
+    public Account getAccount() {
+        return account;
+    }
+
+    /**
+     * Set the {@link #account} without adding this Book instance on the passed {@link #account}
+     */
+    public void setAccount(Account account) {
+        this.account = account;
+    }
+
+    public Book account(Account account) {
+        setAccount(account);
+        return this;
+    }
+
+    /**
+     * Apply the default values.
+     */
+    public Book withDefaults() {
+        return this;
+    }
+
+    /**
+     * Equals implementation using a business key.
+     */
+    @Override
+    public boolean equals(Object other) {
+        return this == other || (other instanceof Book && hashCode() == other.hashCode());
+    }
+
+    private IdentifiableHashBuilder identifiableHashBuilder = new IdentifiableHashBuilder();
+
+    @Override
+    public int hashCode() {
+        return identifiableHashBuilder.hash(log, this);
+    }
+
+    /**
+     * Construct a readable string representation for this Book instance.
+     * @see java.lang.Object#toString()
+     */
+    @Override
+    public String toString() {
+        return Objects.toStringHelper(this) //
+                .add("id", getId()) //
+                .add("title", getTitle()) //
+                .add("numberOfPages", getNumberOfPages()) //
+                .add("version", getVersion()) //
+                .toString();
+    }
+}
\ No newline at end of file
diff --git a/src/main/generated-java/com/h2/demo/domain/Book_.java b/src/main/generated-java/com/h2/demo/domain/Book_.java
new file mode 100644
index 0000000..3fca97c
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/domain/Book_.java
@@ -0,0 +1,25 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-backend-jpa:src/main/java/domain/EntityMeta_.e.vm.java
+ */
+package com.h2.demo.domain;
+
+import javax.persistence.metamodel.SingularAttribute;
+import javax.persistence.metamodel.StaticMetamodel;
+
+@StaticMetamodel(Book.class)
+public abstract class Book_ {
+
+    // Raw attributes
+    public static volatile SingularAttribute<Book, Integer> id;
+    public static volatile SingularAttribute<Book, String> title;
+    public static volatile SingularAttribute<Book, Integer> numberOfPages;
+    public static volatile SingularAttribute<Book, Integer> version;
+
+    // Many to one
+    public static volatile SingularAttribute<Book, Account> account;
+}
\ No newline at end of file
diff --git a/src/main/generated-java/com/h2/demo/domain/Document.java b/src/main/generated-java/com/h2/demo/domain/Document.java
new file mode 100644
index 0000000..2943e67
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/domain/Document.java
@@ -0,0 +1,238 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-backend-jpa:src/main/java/domain/Entity.e.vm.java
+ */
+package com.h2.demo.domain;
+
+import static javax.persistence.CascadeType.MERGE;
+import static javax.persistence.CascadeType.PERSIST;
+import static javax.persistence.FetchType.LAZY;
+
+import java.io.Serializable;
+
+import javax.persistence.Basic;
+import javax.persistence.Column;
+import javax.persistence.Entity;
+import javax.persistence.GeneratedValue;
+import javax.persistence.Id;
+import javax.persistence.JoinColumn;
+import javax.persistence.Lob;
+import javax.persistence.ManyToOne;
+import javax.persistence.Table;
+import javax.persistence.Transient;
+import javax.persistence.Version;
+import javax.validation.constraints.Digits;
+import javax.validation.constraints.NotNull;
+import javax.validation.constraints.Size;
+import javax.xml.bind.annotation.XmlTransient;
+
+import org.hibernate.annotations.GenericGenerator;
+import org.hibernate.validator.constraints.NotEmpty;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import com.google.common.base.Objects;
+
+@Entity
+@Table(name = "DOCUMENT")
+public class Document implements Identifiable<String>, Serializable {
+    private static final long serialVersionUID = 1L;
+    private static final Logger log = LoggerFactory.getLogger(Document.class);
+
+    // Raw attributes
+    private String id;
+    private byte[] documentBinary;
+    private String documentFileName;
+    private String documentContentType;
+    private Integer documentSize;
+    private Integer version;
+
+    // Many to one
+    private Account account;
+
+    // -- [id] ------------------------
+
+    @Override
+    @Column(name = "ID", length = 36)
+    @GeneratedValue(generator = "strategy-uuid2")
+    @GenericGenerator(name = "strategy-uuid2", strategy = "uuid2")
+    @Id
+    public String getId() {
+        return id;
+    }
+
+    @Override
+    public void setId(String id) {
+        this.id = id;
+    }
+
+    public Document id(String id) {
+        setId(id);
+        return this;
+    }
+
+    @Override
+    @Transient
+    @XmlTransient
+    public boolean isIdSet() {
+        return id != null && !id.isEmpty();
+    }
+
+    // -- [documentBinary] ------------------------
+
+    @Basic(fetch = LAZY)
+    @Column(name = "DOCUMENT_BINARY")
+    @Lob
+    public byte[] getDocumentBinary() {
+        return documentBinary;
+    }
+
+    public void setDocumentBinary(byte[] documentBinary) {
+        this.documentBinary = documentBinary;
+    }
+
+    public Document documentBinary(byte[] documentBinary) {
+        setDocumentBinary(documentBinary);
+        return this;
+    }
+
+    // -- [documentFileName] ------------------------
+
+    @NotEmpty
+    @Size(max = 100)
+    @Column(name = "DOCUMENT_FILE_NAME", nullable = false, length = 100)
+    public String getDocumentFileName() {
+        return documentFileName;
+    }
+
+    public void setDocumentFileName(String documentFileName) {
+        this.documentFileName = documentFileName;
+    }
+
+    public Document documentFileName(String documentFileName) {
+        setDocumentFileName(documentFileName);
+        return this;
+    }
+
+    // -- [documentContentType] ------------------------
+
+    @NotEmpty
+    @Size(max = 100)
+    @Column(name = "DOCUMENT_CONTENT_TYPE", nullable = false, length = 100)
+    public String getDocumentContentType() {
+        return documentContentType;
+    }
+
+    public void setDocumentContentType(String documentContentType) {
+        this.documentContentType = documentContentType;
+    }
+
+    public Document documentContentType(String documentContentType) {
+        setDocumentContentType(documentContentType);
+        return this;
+    }
+
+    // -- [documentSize] ------------------------
+
+    @Digits(integer = 10, fraction = 0)
+    @NotNull
+    @Column(name = "DOCUMENT_SIZE", nullable = false, precision = 10)
+    public Integer getDocumentSize() {
+        return documentSize;
+    }
+
+    public void setDocumentSize(Integer documentSize) {
+        this.documentSize = documentSize;
+    }
+
+    public Document documentSize(Integer documentSize) {
+        setDocumentSize(documentSize);
+        return this;
+    }
+
+    // -- [version] ------------------------
+
+    @Column(name = "VERSION", precision = 10)
+    @Version
+    public Integer getVersion() {
+        return version;
+    }
+
+    public void setVersion(Integer version) {
+        this.version = version;
+    }
+
+    public Document version(Integer version) {
+        setVersion(version);
+        return this;
+    }
+
+    // -----------------------------------------------------------------
+    // Many to One support
+    // -----------------------------------------------------------------
+
+    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
+    // many-to-one: Document.account ==> Account.id
+    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
+
+    @NotNull
+    @JoinColumn(name = "ACCOUNT_ID", nullable = false)
+    @ManyToOne(cascade = { PERSIST, MERGE }, fetch = LAZY)
+    public Account getAccount() {
+        return account;
+    }
+
+    /**
+     * Set the {@link #account} without adding this Document instance on the passed {@link #account}
+     */
+    public void setAccount(Account account) {
+        this.account = account;
+    }
+
+    public Document account(Account account) {
+        setAccount(account);
+        return this;
+    }
+
+    /**
+     * Apply the default values.
+     */
+    public Document withDefaults() {
+        return this;
+    }
+
+    /**
+     * Equals implementation using a business key.
+     */
+    @Override
+    public boolean equals(Object other) {
+        return this == other || (other instanceof Document && hashCode() == other.hashCode());
+    }
+
+    private IdentifiableHashBuilder identifiableHashBuilder = new IdentifiableHashBuilder();
+
+    @Override
+    public int hashCode() {
+        return identifiableHashBuilder.hash(log, this);
+    }
+
+    /**
+     * Construct a readable string representation for this Document instance.
+     * @see java.lang.Object#toString()
+     */
+    @Override
+    public String toString() {
+        return Objects.toStringHelper(this) //
+                .add("id", getId()) //
+                .add("documentBinary", getDocumentBinary()) //
+                .add("documentFileName", getDocumentFileName()) //
+                .add("documentContentType", getDocumentContentType()) //
+                .add("documentSize", getDocumentSize()) //
+                .add("version", getVersion()) //
+                .toString();
+    }
+}
\ No newline at end of file
diff --git a/src/main/generated-java/com/h2/demo/domain/Document_.java b/src/main/generated-java/com/h2/demo/domain/Document_.java
new file mode 100644
index 0000000..2267a7e
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/domain/Document_.java
@@ -0,0 +1,27 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-backend-jpa:src/main/java/domain/EntityMeta_.e.vm.java
+ */
+package com.h2.demo.domain;
+
+import javax.persistence.metamodel.SingularAttribute;
+import javax.persistence.metamodel.StaticMetamodel;
+
+@StaticMetamodel(Document.class)
+public abstract class Document_ {
+
+    // Raw attributes
+    public static volatile SingularAttribute<Document, String> id;
+    public static volatile SingularAttribute<Document, byte[]> documentBinary;
+    public static volatile SingularAttribute<Document, String> documentFileName;
+    public static volatile SingularAttribute<Document, String> documentContentType;
+    public static volatile SingularAttribute<Document, Integer> documentSize;
+    public static volatile SingularAttribute<Document, Integer> version;
+
+    // Many to one
+    public static volatile SingularAttribute<Document, Account> account;
+}
\ No newline at end of file
diff --git a/src/main/generated-java/com/h2/demo/domain/Identifiable.java b/src/main/generated-java/com/h2/demo/domain/Identifiable.java
new file mode 100644
index 0000000..769a82e
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/domain/Identifiable.java
@@ -0,0 +1,34 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-backend-jpa:src/main/java/domain/support/Identifiable.p.vm.java
+ */
+package com.h2.demo.domain;
+
+import java.io.Serializable;
+
+/**
+ * By making entities implement this interface we can easily retrieve from the
+ * {@link com.h2.demo.repository.support.GenericRepository} the identifier property of the entity.
+ */
+public interface Identifiable<PK extends Serializable> {
+
+    /**
+     * @return the primary key
+     */
+    PK getId();
+
+    /**
+     * Sets the primary key
+     */
+    void setId(PK id);
+
+    /**
+     * Helper method to know whether the primary key is set or not.
+     * @return true if the primary key is set, false otherwise
+     */
+    boolean isIdSet();
+}
\ No newline at end of file
diff --git a/src/main/generated-java/com/h2/demo/domain/IdentifiableHashBuilder.java b/src/main/generated-java/com/h2/demo/domain/IdentifiableHashBuilder.java
new file mode 100644
index 0000000..94ede55
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/domain/IdentifiableHashBuilder.java
@@ -0,0 +1,40 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-backend-jpa:src/main/java/domain/support/IdentifiableHashBuilder.p.vm.java
+ */
+package com.h2.demo.domain;
+
+import java.io.Serializable;
+
+import org.slf4j.Logger;
+
+/**
+ * The first time the {@link #hash(Logger, Identifiable)} is called, we check if the primary key is present or not.
+ * <ul>
+ * <li>If yes: we use it to get the hash</li>
+ * <li>If no: we use a VMID during the entire life of this instance even if later on this instance is assigned a primary key.</li>
+ * </ul>
+ */
+public class IdentifiableHashBuilder implements Serializable {
+    private static final long serialVersionUID = 1L;
+    private Object technicalId;
+
+    public int hash(Logger log, Identifiable<?> identifiable) {
+        if (technicalId == null) {
+            if (identifiable.isIdSet()) {
+                technicalId = identifiable.getId();
+            } else {
+                technicalId = new java.rmi.dgc.VMID();
+                log.warn("DEVELOPER: hashCode is not safe." //
+                        + "If you encounter this message you should take the time to carefuly " //
+                        + "review the equals/hashCode methods for: " + identifiable.getClass().getCanonicalName() //
+                        + " You may consider using a business key.");
+            }
+        }
+        return technicalId.hashCode();
+    }
+}
diff --git a/src/main/generated-java/com/h2/demo/domain/LabelizedEnum.java b/src/main/generated-java/com/h2/demo/domain/LabelizedEnum.java
new file mode 100644
index 0000000..8324667
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/domain/LabelizedEnum.java
@@ -0,0 +1,17 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-backend-jpa:src/main/java/enum/support/LabelizedEnum.p.vm.java
+ */
+package com.h2.demo.domain;
+
+public interface LabelizedEnum {
+
+    /**
+     * The localized label for this enum value.
+     */
+    String getLabel();
+}
\ No newline at end of file
diff --git a/src/main/generated-java/com/h2/demo/domain/Legacy.java b/src/main/generated-java/com/h2/demo/domain/Legacy.java
new file mode 100644
index 0000000..19d183e
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/domain/Legacy.java
@@ -0,0 +1,128 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-backend-jpa:src/main/java/domain/Entity.e.vm.java
+ */
+package com.h2.demo.domain;
+
+import java.io.Serializable;
+
+import javax.persistence.Column;
+import javax.persistence.EmbeddedId;
+import javax.persistence.Entity;
+import javax.persistence.Table;
+import javax.persistence.Transient;
+import javax.persistence.UniqueConstraint;
+import javax.validation.constraints.Size;
+import javax.xml.bind.annotation.XmlTransient;
+
+import org.hibernate.validator.constraints.NotEmpty;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import com.google.common.base.Objects;
+
+@Entity
+@Table(name = "LEGACY", uniqueConstraints = { @UniqueConstraint(name = "PRIMARY_KEY_8", columnNames = { "NAME", "CODE", "DEPT" }) })
+public class Legacy implements Identifiable<LegacyPk>, Serializable {
+    private static final long serialVersionUID = 1L;
+    private static final Logger log = LoggerFactory.getLogger(Legacy.class);
+
+    // Composite primary key
+    private LegacyPk id = new LegacyPk();
+
+    // Raw attributes
+    private String extraInfo;
+
+    // -----------------------
+    // Composite Primary Key
+    // -----------------------
+
+    /**
+     * Returns the composite primary key.
+     */
+    @Override
+    @EmbeddedId
+    public LegacyPk getId() {
+        return id;
+    }
+
+    /**
+     * Set the composite primary key.
+     * @param id the composite primary key.
+     */
+    @Override
+    public void setId(LegacyPk id) {
+        this.id = id;
+    }
+
+    public Legacy id(LegacyPk id) {
+        setId(id);
+        return this;
+    }
+
+    /**
+     * Tells whether or not this instance has a non empty composite primary key set.
+     * @return true if a non empty primary key is set, false otherwise
+     */
+    @Override
+    @Transient
+    @XmlTransient
+    public boolean isIdSet() {
+        return getId() != null && getId().areFieldsSet();
+    }
+
+    // -- [extraInfo] ------------------------
+
+    @NotEmpty
+    @Size(max = 100)
+    @Column(name = "EXTRA_INFO", nullable = false, length = 100)
+    public String getExtraInfo() {
+        return extraInfo;
+    }
+
+    public void setExtraInfo(String extraInfo) {
+        this.extraInfo = extraInfo;
+    }
+
+    public Legacy extraInfo(String extraInfo) {
+        setExtraInfo(extraInfo);
+        return this;
+    }
+
+    /**
+     * Apply the default values.
+     */
+    public Legacy withDefaults() {
+        return this;
+    }
+
+    /**
+     * Equals implementation using a business key.
+     */
+    @Override
+    public boolean equals(Object other) {
+        return this == other || (other instanceof Legacy && hashCode() == other.hashCode());
+    }
+
+    private IdentifiableHashBuilder identifiableHashBuilder = new IdentifiableHashBuilder();
+
+    @Override
+    public int hashCode() {
+        return identifiableHashBuilder.hash(log, this);
+    }
+
+    /**
+     * Construct a readable string representation for this Legacy instance.
+     * @see java.lang.Object#toString()
+     */
+    @Override
+    public String toString() {
+        return Objects.toStringHelper(this) //
+                .add("extraInfo", getExtraInfo()) //
+                .toString();
+    }
+}
\ No newline at end of file
diff --git a/src/main/generated-java/com/h2/demo/domain/LegacyPk.java b/src/main/generated-java/com/h2/demo/domain/LegacyPk.java
new file mode 100644
index 0000000..e36c76f
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/domain/LegacyPk.java
@@ -0,0 +1,194 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-backend-jpa:src/main/java/domain/CompositePk.cpk.vm.java
+ */
+package com.h2.demo.domain;
+
+import static org.apache.commons.lang.StringUtils.isNotEmpty;
+
+import java.io.Serializable;
+
+import javax.persistence.Column;
+import javax.persistence.Embeddable;
+import javax.persistence.Transient;
+import javax.validation.constraints.Digits;
+import javax.validation.constraints.NotNull;
+import javax.validation.constraints.Size;
+
+import org.hibernate.validator.constraints.NotEmpty;
+
+import com.google.common.base.Objects;
+
+@Embeddable
+public class LegacyPk implements Comparable<LegacyPk>, Serializable {
+    private static final long serialVersionUID = 1L;
+
+    private String code;
+    private Integer dept;
+    private String name;
+
+    public LegacyPk() {
+    }
+
+    public LegacyPk(String code, Integer dept, String name) {
+        this.code = code;
+        this.dept = dept;
+        this.name = name;
+    }
+
+    /**
+     * Helper to determine if this composite primary key is fully set.
+     */
+    @Transient
+    public boolean areFieldsSet() {
+        return isCodeSet() && isDeptSet() && isNameSet();
+    }
+
+    /**
+     * Helper method to determine if this instance is considered empty, that is,
+     * if all the non primary key columns are null.
+     */
+    @Transient
+    public boolean isEmpty() {
+        return !isCodeSet() && !isDeptSet() && !isNameSet();
+    }
+
+    //-- [code] ------------------------------
+
+    @NotEmpty
+    @Size(max = 8)
+    @Column(name = "CODE", nullable = false, length = 8)
+    public String getCode() {
+        return code;
+    }
+
+    public void setCode(String code) {
+        this.code = code;
+    }
+
+    public LegacyPk code(String code) {
+        setCode(code);
+        return this;
+    }
+
+    /**
+     * Helper that determines if this attribute is set or not.
+     */
+    @Transient
+    public boolean isCodeSet() {
+        return getCode() != null && !getCode().isEmpty();
+    }
+
+    //-- [dept] ------------------------------
+
+    @Digits(integer = 10, fraction = 0)
+    @NotNull
+    @Column(name = "DEPT", nullable = false, precision = 10)
+    public Integer getDept() {
+        return dept;
+    }
+
+    public void setDept(Integer dept) {
+        this.dept = dept;
+    }
+
+    public LegacyPk dept(Integer dept) {
+        setDept(dept);
+        return this;
+    }
+
+    /**
+     * Helper that determines if this attribute is set or not.
+     */
+    @Transient
+    public boolean isDeptSet() {
+        return getDept() != null;
+    }
+
+    //-- [name] ------------------------------
+
+    @NotEmpty
+    @Size(max = 16)
+    @Column(name = "NAME", nullable = false, length = 16)
+    public String getName() {
+        return name;
+    }
+
+    public void setName(String name) {
+        this.name = name;
+    }
+
+    public LegacyPk name(String name) {
+        setName(name);
+        return this;
+    }
+
+    /**
+     * Helper that determines if this attribute is set or not.
+     */
+    @Transient
+    public boolean isNameSet() {
+        return getName() != null && !getName().isEmpty();
+    }
+
+    @Override
+    public boolean equals(Object other) {
+        return this == other || (other instanceof LegacyPk && hashCode() == other.hashCode());
+    }
+
+    @Override
+    public int hashCode() {
+        return Objects.hashCode(getCode(), //
+                getDept(), //
+                getName());
+    }
+
+    @Override
+    public int compareTo(LegacyPk other) {
+        return other == null ? -1 : hashCode() - other.hashCode();
+    }
+
+    /**
+     * Return the string representation of the composite primary key, it should be reversable by version produced by the {@link #String()} method
+     */
+    @Override
+    public String toString() {
+        StringBuilder result = new StringBuilder();
+        if (isCodeSet()) {
+            result.append(getCode());
+        }
+        result.append(":");
+        if (isDeptSet()) {
+            result.append(getDept());
+        }
+        result.append(":");
+        if (isNameSet()) {
+            result.append(getName());
+        }
+
+        return result.toString();
+    }
+
+    /**
+     * Build an instance from a string version produced by the {@link #toString()} method
+     */
+    public static LegacyPk fromString(String string) {
+        LegacyPk result = new LegacyPk();
+        String[] values = string.split(":");
+        if (isNotEmpty(values[0])) {
+            result.setCode(values[0]);
+        }
+        if (isNotEmpty(values[1])) {
+            result.setDept(Integer.valueOf(values[1]));
+        }
+        if (isNotEmpty(values[2])) {
+            result.setName(values[2]);
+        }
+
+        return result;
+    }
+}
diff --git a/src/main/generated-java/com/h2/demo/domain/LegacyPk_.java b/src/main/generated-java/com/h2/demo/domain/LegacyPk_.java
new file mode 100644
index 0000000..a7662dc
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/domain/LegacyPk_.java
@@ -0,0 +1,20 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-backend-jpa:src/main/java/domain/CompositePk_.cpk.vm.java
+ */
+package com.h2.demo.domain;
+
+import javax.persistence.metamodel.SingularAttribute;
+import javax.persistence.metamodel.StaticMetamodel;
+
+@StaticMetamodel(LegacyPk.class)
+public abstract class LegacyPk_ {
+    // pk attributes
+    public static volatile SingularAttribute<LegacyPk, String> code;
+    public static volatile SingularAttribute<LegacyPk, Integer> dept;
+    public static volatile SingularAttribute<LegacyPk, String> name;
+}
diff --git a/src/main/generated-java/com/h2/demo/domain/Legacy_.java b/src/main/generated-java/com/h2/demo/domain/Legacy_.java
new file mode 100644
index 0000000..e1f7ef0
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/domain/Legacy_.java
@@ -0,0 +1,21 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-backend-jpa:src/main/java/domain/EntityMeta_.e.vm.java
+ */
+package com.h2.demo.domain;
+
+import javax.persistence.metamodel.SingularAttribute;
+import javax.persistence.metamodel.StaticMetamodel;
+
+@StaticMetamodel(Legacy.class)
+public abstract class Legacy_ {
+    // Composite primary key
+    public static volatile SingularAttribute<Legacy, LegacyPk> id;
+
+    // Raw attributes
+    public static volatile SingularAttribute<Legacy, String> extraInfo;
+}
\ No newline at end of file
diff --git a/src/main/generated-java/com/h2/demo/domain/MoreTypesDemo.java b/src/main/generated-java/com/h2/demo/domain/MoreTypesDemo.java
new file mode 100644
index 0000000..1de18e1
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/domain/MoreTypesDemo.java
@@ -0,0 +1,312 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-backend-jpa:src/main/java/domain/Entity.e.vm.java
+ */
+package com.h2.demo.domain;
+
+import static javax.persistence.TemporalType.DATE;
+import static javax.persistence.TemporalType.TIMESTAMP;
+
+import java.io.Serializable;
+import java.math.BigDecimal;
+import java.math.BigInteger;
+import java.util.Date;
+
+import javax.persistence.Column;
+import javax.persistence.Entity;
+import javax.persistence.GeneratedValue;
+import javax.persistence.Id;
+import javax.persistence.Table;
+import javax.persistence.Temporal;
+import javax.persistence.Transient;
+import javax.persistence.Version;
+import javax.validation.constraints.Digits;
+import javax.xml.bind.annotation.XmlTransient;
+
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import com.google.common.base.Objects;
+
+@Entity
+@Table(name = "MORE_TYPES_DEMO")
+public class MoreTypesDemo implements Identifiable<BigDecimal>, Serializable {
+    private static final long serialVersionUID = 1L;
+    private static final Logger log = LoggerFactory.getLogger(MoreTypesDemo.class);
+
+    // Raw attributes
+    private BigDecimal id;
+    private Integer numberInt;
+    private Long numberLong;
+    private Double numberDouble;
+    private Float numberFloat;
+    private BigInteger numberBigInteger;
+    private BigDecimal numberBigDecimal;
+    private Date dateJavaTemporalDate;
+    private Date dateJavaTemporalTimestamp;
+    private Date dateJoda;
+    private Date dateTimeJoda;
+    private Integer version;
+
+    // -- [id] ------------------------
+
+    @Override
+    @Column(name = "ID", precision = 15, scale = 5)
+    @GeneratedValue
+    @Id
+    public BigDecimal getId() {
+        return id;
+    }
+
+    @Override
+    public void setId(BigDecimal id) {
+        this.id = id;
+    }
+
+    public MoreTypesDemo id(BigDecimal id) {
+        setId(id);
+        return this;
+    }
+
+    @Override
+    @Transient
+    @XmlTransient
+    public boolean isIdSet() {
+        return id != null;
+    }
+
+    // -- [numberInt] ------------------------
+
+    @Digits(integer = 10, fraction = 0)
+    @Column(name = "NUMBER_INT", precision = 10)
+    public Integer getNumberInt() {
+        return numberInt;
+    }
+
+    public void setNumberInt(Integer numberInt) {
+        this.numberInt = numberInt;
+    }
+
+    public MoreTypesDemo numberInt(Integer numberInt) {
+        setNumberInt(numberInt);
+        return this;
+    }
+
+    // -- [numberLong] ------------------------
+
+    @Digits(integer = 19, fraction = 0)
+    @Column(name = "NUMBER_LONG", precision = 19)
+    public Long getNumberLong() {
+        return numberLong;
+    }
+
+    public void setNumberLong(Long numberLong) {
+        this.numberLong = numberLong;
+    }
+
+    public MoreTypesDemo numberLong(Long numberLong) {
+        setNumberLong(numberLong);
+        return this;
+    }
+
+    // -- [numberDouble] ------------------------
+
+    @Digits(integer = 17, fraction = 0)
+    @Column(name = "NUMBER_DOUBLE", precision = 17)
+    public Double getNumberDouble() {
+        return numberDouble;
+    }
+
+    public void setNumberDouble(Double numberDouble) {
+        this.numberDouble = numberDouble;
+    }
+
+    public MoreTypesDemo numberDouble(Double numberDouble) {
+        setNumberDouble(numberDouble);
+        return this;
+    }
+
+    // -- [numberFloat] ------------------------
+
+    @Digits(integer = 7, fraction = 0)
+    @Column(name = "NUMBER_FLOAT", precision = 7)
+    public Float getNumberFloat() {
+        return numberFloat;
+    }
+
+    public void setNumberFloat(Float numberFloat) {
+        this.numberFloat = numberFloat;
+    }
+
+    public MoreTypesDemo numberFloat(Float numberFloat) {
+        setNumberFloat(numberFloat);
+        return this;
+    }
+
+    // -- [numberBigInteger] ------------------------
+
+    @Digits(integer = 20, fraction = 0)
+    @Column(name = "NUMBER_BIG_INTEGER", precision = 20)
+    public BigInteger getNumberBigInteger() {
+        return numberBigInteger;
+    }
+
+    public void setNumberBigInteger(BigInteger numberBigInteger) {
+        this.numberBigInteger = numberBigInteger;
+    }
+
+    public MoreTypesDemo numberBigInteger(BigInteger numberBigInteger) {
+        setNumberBigInteger(numberBigInteger);
+        return this;
+    }
+
+    // -- [numberBigDecimal] ------------------------
+
+    @Digits(integer = 18, fraction = 2)
+    @Column(name = "NUMBER_BIG_DECIMAL", precision = 20, scale = 2)
+    public BigDecimal getNumberBigDecimal() {
+        return numberBigDecimal;
+    }
+
+    public void setNumberBigDecimal(BigDecimal numberBigDecimal) {
+        this.numberBigDecimal = numberBigDecimal;
+    }
+
+    public MoreTypesDemo numberBigDecimal(BigDecimal numberBigDecimal) {
+        setNumberBigDecimal(numberBigDecimal);
+        return this;
+    }
+
+    // -- [dateJavaTemporalDate] ------------------------
+
+    @Column(name = "DATE_JAVA_TEMPORAL_DATE", length = 8)
+    @Temporal(DATE)
+    public Date getDateJavaTemporalDate() {
+        return dateJavaTemporalDate;
+    }
+
+    public void setDateJavaTemporalDate(Date dateJavaTemporalDate) {
+        this.dateJavaTemporalDate = dateJavaTemporalDate;
+    }
+
+    public MoreTypesDemo dateJavaTemporalDate(Date dateJavaTemporalDate) {
+        setDateJavaTemporalDate(dateJavaTemporalDate);
+        return this;
+    }
+
+    // -- [dateJavaTemporalTimestamp] ------------------------
+
+    @Column(name = "DATE_JAVA_TEMPORAL_TIMESTAMP", length = 23)
+    @Temporal(TIMESTAMP)
+    public Date getDateJavaTemporalTimestamp() {
+        return dateJavaTemporalTimestamp;
+    }
+
+    public void setDateJavaTemporalTimestamp(Date dateJavaTemporalTimestamp) {
+        this.dateJavaTemporalTimestamp = dateJavaTemporalTimestamp;
+    }
+
+    public MoreTypesDemo dateJavaTemporalTimestamp(Date dateJavaTemporalTimestamp) {
+        setDateJavaTemporalTimestamp(dateJavaTemporalTimestamp);
+        return this;
+    }
+
+    // -- [dateJoda] ------------------------
+
+    @Column(name = "DATE_JODA", length = 8)
+    @Temporal(DATE)
+    public Date getDateJoda() {
+        return dateJoda;
+    }
+
+    public void setDateJoda(Date dateJoda) {
+        this.dateJoda = dateJoda;
+    }
+
+    public MoreTypesDemo dateJoda(Date dateJoda) {
+        setDateJoda(dateJoda);
+        return this;
+    }
+
+    // -- [dateTimeJoda] ------------------------
+
+    @Column(name = "DATE_TIME_JODA", length = 23)
+    @Temporal(TIMESTAMP)
+    public Date getDateTimeJoda() {
+        return dateTimeJoda;
+    }
+
+    public void setDateTimeJoda(Date dateTimeJoda) {
+        this.dateTimeJoda = dateTimeJoda;
+    }
+
+    public MoreTypesDemo dateTimeJoda(Date dateTimeJoda) {
+        setDateTimeJoda(dateTimeJoda);
+        return this;
+    }
+
+    // -- [version] ------------------------
+
+    @Column(name = "VERSION", precision = 10)
+    @Version
+    public Integer getVersion() {
+        return version;
+    }
+
+    public void setVersion(Integer version) {
+        this.version = version;
+    }
+
+    public MoreTypesDemo version(Integer version) {
+        setVersion(version);
+        return this;
+    }
+
+    /**
+     * Apply the default values.
+     */
+    public MoreTypesDemo withDefaults() {
+        return this;
+    }
+
+    /**
+     * Equals implementation using a business key.
+     */
+    @Override
+    public boolean equals(Object other) {
+        return this == other || (other instanceof MoreTypesDemo && hashCode() == other.hashCode());
+    }
+
+    private IdentifiableHashBuilder identifiableHashBuilder = new IdentifiableHashBuilder();
+
+    @Override
+    public int hashCode() {
+        return identifiableHashBuilder.hash(log, this);
+    }
+
+    /**
+     * Construct a readable string representation for this MoreTypesDemo instance.
+     * @see java.lang.Object#toString()
+     */
+    @Override
+    public String toString() {
+        return Objects.toStringHelper(this) //
+                .add("id", getId()) //
+                .add("numberInt", getNumberInt()) //
+                .add("numberLong", getNumberLong()) //
+                .add("numberDouble", getNumberDouble()) //
+                .add("numberFloat", getNumberFloat()) //
+                .add("numberBigInteger", getNumberBigInteger()) //
+                .add("numberBigDecimal", getNumberBigDecimal()) //
+                .add("dateJavaTemporalDate", getDateJavaTemporalDate()) //
+                .add("dateJavaTemporalTimestamp", getDateJavaTemporalTimestamp()) //
+                .add("dateJoda", getDateJoda()) //
+                .add("dateTimeJoda", getDateTimeJoda()) //
+                .add("version", getVersion()) //
+                .toString();
+    }
+}
\ No newline at end of file
diff --git a/src/main/generated-java/com/h2/demo/domain/MoreTypesDemo_.java b/src/main/generated-java/com/h2/demo/domain/MoreTypesDemo_.java
new file mode 100644
index 0000000..cddb165
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/domain/MoreTypesDemo_.java
@@ -0,0 +1,34 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-backend-jpa:src/main/java/domain/EntityMeta_.e.vm.java
+ */
+package com.h2.demo.domain;
+
+import java.math.BigDecimal;
+import java.math.BigInteger;
+import java.util.Date;
+
+import javax.persistence.metamodel.SingularAttribute;
+import javax.persistence.metamodel.StaticMetamodel;
+
+@StaticMetamodel(MoreTypesDemo.class)
+public abstract class MoreTypesDemo_ {
+
+    // Raw attributes
+    public static volatile SingularAttribute<MoreTypesDemo, BigDecimal> id;
+    public static volatile SingularAttribute<MoreTypesDemo, Integer> numberInt;
+    public static volatile SingularAttribute<MoreTypesDemo, Long> numberLong;
+    public static volatile SingularAttribute<MoreTypesDemo, Double> numberDouble;
+    public static volatile SingularAttribute<MoreTypesDemo, Float> numberFloat;
+    public static volatile SingularAttribute<MoreTypesDemo, BigInteger> numberBigInteger;
+    public static volatile SingularAttribute<MoreTypesDemo, BigDecimal> numberBigDecimal;
+    public static volatile SingularAttribute<MoreTypesDemo, Date> dateJavaTemporalDate;
+    public static volatile SingularAttribute<MoreTypesDemo, Date> dateJavaTemporalTimestamp;
+    public static volatile SingularAttribute<MoreTypesDemo, Date> dateJoda;
+    public static volatile SingularAttribute<MoreTypesDemo, Date> dateTimeJoda;
+    public static volatile SingularAttribute<MoreTypesDemo, Integer> version;
+}
\ No newline at end of file
diff --git a/src/main/generated-java/com/h2/demo/domain/Role.java b/src/main/generated-java/com/h2/demo/domain/Role.java
new file mode 100644
index 0000000..3827b11
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/domain/Role.java
@@ -0,0 +1,125 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-backend-jpa:src/main/java/domain/Entity.e.vm.java
+ */
+package com.h2.demo.domain;
+
+import java.io.Serializable;
+
+import javax.persistence.Column;
+import javax.persistence.Entity;
+import javax.persistence.GeneratedValue;
+import javax.persistence.Id;
+import javax.persistence.Table;
+import javax.persistence.Transient;
+import javax.validation.constraints.Size;
+import javax.xml.bind.annotation.XmlTransient;
+
+import org.hibernate.validator.constraints.NotEmpty;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import com.google.common.base.Objects;
+
+@Entity
+@Table(name = "`ROLE`")
+public class Role implements Identifiable<Integer>, Serializable {
+    private static final long serialVersionUID = 1L;
+    private static final Logger log = LoggerFactory.getLogger(Role.class);
+
+    // Raw attributes
+    private Integer id;
+    private String roleName;
+
+    // -- [id] ------------------------
+
+    @Override
+    @Column(name = "ID", precision = 10)
+    @GeneratedValue
+    @Id
+    public Integer getId() {
+        return id;
+    }
+
+    @Override
+    public void setId(Integer id) {
+        this.id = id;
+    }
+
+    public Role id(Integer id) {
+        setId(id);
+        return this;
+    }
+
+    @Override
+    @Transient
+    @XmlTransient
+    public boolean isIdSet() {
+        return id != null;
+    }
+
+    // -- [roleName] ------------------------
+
+    @NotEmpty
+    @Size(max = 100)
+    @Column(name = "ROLE_NAME", nullable = false, unique = true, length = 100)
+    public String getRoleName() {
+        return roleName;
+    }
+
+    public void setRoleName(String roleName) {
+        this.roleName = roleName;
+    }
+
+    public Role roleName(String roleName) {
+        setRoleName(roleName);
+        return this;
+    }
+
+    /**
+     * Apply the default values.
+     */
+    public Role withDefaults() {
+        return this;
+    }
+
+    /**
+     * Equals implementation using a business key.
+     */
+    @Override
+    public boolean equals(Object other) {
+        return this == other || (other instanceof Role && hashCode() == other.hashCode());
+    }
+
+    private volatile int previousHashCode = 0;
+
+    @Override
+    public int hashCode() {
+        int hashCode = Objects.hashCode(getRoleName());
+
+        if (previousHashCode != 0 && previousHashCode != hashCode) {
+            log.warn("DEVELOPER: hashCode has changed!." //
+                    + "If you encounter this message you should take the time to carefuly review equals/hashCode for: " //
+                    + getClass().getCanonicalName());
+        }
+
+        previousHashCode = hashCode;
+        return hashCode;
+    }
+
+    /**
+     * Construct a readable string representation for this Role instance.
+     * @see java.lang.Object#toString()
+     */
+    @Override
+    public String toString() {
+        return Objects.toStringHelper(this) //
+                .add("id", getId()) //
+                .add("roleName", getRoleName()) //
+                .toString();
+    }
+}
\ No newline at end of file
diff --git a/src/main/generated-java/com/h2/demo/domain/Role_.java b/src/main/generated-java/com/h2/demo/domain/Role_.java
new file mode 100644
index 0000000..96a1b38
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/domain/Role_.java
@@ -0,0 +1,20 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-backend-jpa:src/main/java/domain/EntityMeta_.e.vm.java
+ */
+package com.h2.demo.domain;
+
+import javax.persistence.metamodel.SingularAttribute;
+import javax.persistence.metamodel.StaticMetamodel;
+
+@StaticMetamodel(Role.class)
+public abstract class Role_ {
+
+    // Raw attributes
+    public static volatile SingularAttribute<Role, Integer> id;
+    public static volatile SingularAttribute<Role, String> roleName;
+}
\ No newline at end of file
diff --git a/src/main/generated-java/com/h2/demo/domain/SavedSearch.java b/src/main/generated-java/com/h2/demo/domain/SavedSearch.java
new file mode 100644
index 0000000..57c29c9
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/domain/SavedSearch.java
@@ -0,0 +1,193 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-backend-jpa:src/main/java/domain/Entity.e.vm.java
+ */
+package com.h2.demo.domain;
+
+import static javax.persistence.CascadeType.MERGE;
+import static javax.persistence.CascadeType.PERSIST;
+import static javax.persistence.FetchType.LAZY;
+
+import java.io.Serializable;
+
+import javax.persistence.Basic;
+import javax.persistence.Column;
+import javax.persistence.Entity;
+import javax.persistence.GeneratedValue;
+import javax.persistence.Id;
+import javax.persistence.JoinColumn;
+import javax.persistence.Lob;
+import javax.persistence.ManyToOne;
+import javax.persistence.Table;
+import javax.persistence.Transient;
+import javax.validation.constraints.Size;
+import javax.xml.bind.annotation.XmlTransient;
+
+import org.hibernate.validator.constraints.NotEmpty;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import com.google.common.base.Objects;
+
+@Entity
+@Table(name = "SAVED_SEARCH")
+public class SavedSearch implements Identifiable<Integer>, Serializable {
+    private static final long serialVersionUID = 1L;
+    private static final Logger log = LoggerFactory.getLogger(SavedSearch.class);
+
+    // Raw attributes
+    private Integer id;
+    private String name;
+    private String formClassname;
+    private byte[] formContent;
+
+    // Many to one
+    private Account account;
+
+    // -- [id] ------------------------
+
+    @Override
+    @Column(name = "ID", precision = 10)
+    @GeneratedValue
+    @Id
+    public Integer getId() {
+        return id;
+    }
+
+    @Override
+    public void setId(Integer id) {
+        this.id = id;
+    }
+
+    public SavedSearch id(Integer id) {
+        setId(id);
+        return this;
+    }
+
+    @Override
+    @Transient
+    @XmlTransient
+    public boolean isIdSet() {
+        return id != null;
+    }
+
+    // -- [name] ------------------------
+
+    @NotEmpty
+    @Size(max = 128)
+    @Column(name = "NAME", nullable = false, length = 128)
+    public String getName() {
+        return name;
+    }
+
+    public void setName(String name) {
+        this.name = name;
+    }
+
+    public SavedSearch name(String name) {
+        setName(name);
+        return this;
+    }
+
+    // -- [formClassname] ------------------------
+
+    @NotEmpty
+    @Size(max = 256)
+    @Column(name = "FORM_CLASSNAME", nullable = false, length = 256)
+    public String getFormClassname() {
+        return formClassname;
+    }
+
+    public void setFormClassname(String formClassname) {
+        this.formClassname = formClassname;
+    }
+
+    public SavedSearch formClassname(String formClassname) {
+        setFormClassname(formClassname);
+        return this;
+    }
+
+    // -- [formContent] ------------------------
+
+    @Basic(fetch = LAZY)
+    @Column(name = "FORM_CONTENT")
+    @Lob
+    public byte[] getFormContent() {
+        return formContent;
+    }
+
+    public void setFormContent(byte[] formContent) {
+        this.formContent = formContent;
+    }
+
+    public SavedSearch formContent(byte[] formContent) {
+        setFormContent(formContent);
+        return this;
+    }
+
+    // -----------------------------------------------------------------
+    // Many to One support
+    // -----------------------------------------------------------------
+
+    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
+    // many-to-one: SavedSearch.account ==> Account.id
+    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
+
+    @JoinColumn(name = "ACCOUNT_ID")
+    @ManyToOne(cascade = { PERSIST, MERGE }, fetch = LAZY)
+    public Account getAccount() {
+        return account;
+    }
+
+    /**
+     * Set the {@link #account} without adding this SavedSearch instance on the passed {@link #account}
+     */
+    public void setAccount(Account account) {
+        this.account = account;
+    }
+
+    public SavedSearch account(Account account) {
+        setAccount(account);
+        return this;
+    }
+
+    /**
+     * Apply the default values.
+     */
+    public SavedSearch withDefaults() {
+        return this;
+    }
+
+    /**
+     * Equals implementation using a business key.
+     */
+    @Override
+    public boolean equals(Object other) {
+        return this == other || (other instanceof SavedSearch && hashCode() == other.hashCode());
+    }
+
+    private IdentifiableHashBuilder identifiableHashBuilder = new IdentifiableHashBuilder();
+
+    @Override
+    public int hashCode() {
+        return identifiableHashBuilder.hash(log, this);
+    }
+
+    /**
+     * Construct a readable string representation for this SavedSearch instance.
+     * @see java.lang.Object#toString()
+     */
+    @Override
+    public String toString() {
+        return Objects.toStringHelper(this) //
+                .add("id", getId()) //
+                .add("name", getName()) //
+                .add("formClassname", getFormClassname()) //
+                .add("formContent", getFormContent()) //
+                .toString();
+    }
+}
\ No newline at end of file
diff --git a/src/main/generated-java/com/h2/demo/domain/SavedSearch_.java b/src/main/generated-java/com/h2/demo/domain/SavedSearch_.java
new file mode 100644
index 0000000..3481083
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/domain/SavedSearch_.java
@@ -0,0 +1,25 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-backend-jpa:src/main/java/domain/EntityMeta_.e.vm.java
+ */
+package com.h2.demo.domain;
+
+import javax.persistence.metamodel.SingularAttribute;
+import javax.persistence.metamodel.StaticMetamodel;
+
+@StaticMetamodel(SavedSearch.class)
+public abstract class SavedSearch_ {
+
+    // Raw attributes
+    public static volatile SingularAttribute<SavedSearch, Integer> id;
+    public static volatile SingularAttribute<SavedSearch, String> name;
+    public static volatile SingularAttribute<SavedSearch, String> formClassname;
+    public static volatile SingularAttribute<SavedSearch, byte[]> formContent;
+
+    // Many to one
+    public static volatile SingularAttribute<SavedSearch, Account> account;
+}
\ No newline at end of file
diff --git a/src/main/generated-java/com/h2/demo/printer/AccountPrinter.java b/src/main/generated-java/com/h2/demo/printer/AccountPrinter.java
new file mode 100644
index 0000000..19a7cfb
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/printer/AccountPrinter.java
@@ -0,0 +1,44 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-backend-jpa:src/main/java/printer/Printer.e.vm.java
+ */
+package com.h2.demo.printer;
+
+import java.util.Locale;
+
+import javax.inject.Named;
+import javax.inject.Singleton;
+
+import com.h2.demo.domain.Account;
+import com.h2.demo.domain.Account_;
+import com.h2.demo.printer.support.GenericPrinter;
+
+/**
+ * {@link GenericPrinter} for {@link Account} 
+ *
+ * @see GenericPrinter
+ * @see TypeAwarePrinter
+ */
+@Named
+@Singleton
+public class AccountPrinter extends GenericPrinter<Account> {
+    public AccountPrinter() {
+        super(Account.class, Account_.login, Account_.firstName, Account_.lastName);
+    }
+
+    @Override
+    public String print(Account account, Locale locale) {
+        if (account == null) {
+            return "";
+        }
+        StringBuilder ret = new StringBuilder();
+        appendIfNotEmpty(ret, account.getLogin());
+        appendIfNotEmpty(ret, account.getFirstName());
+        appendIfNotEmpty(ret, account.getLastName());
+        return ret.toString();
+    }
+}
\ No newline at end of file
diff --git a/src/main/generated-java/com/h2/demo/printer/AddressPrinter.java b/src/main/generated-java/com/h2/demo/printer/AddressPrinter.java
new file mode 100644
index 0000000..8973819
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/printer/AddressPrinter.java
@@ -0,0 +1,42 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-backend-jpa:src/main/java/printer/Printer.e.vm.java
+ */
+package com.h2.demo.printer;
+
+import java.util.Locale;
+
+import javax.inject.Named;
+import javax.inject.Singleton;
+
+import com.h2.demo.domain.Address;
+import com.h2.demo.domain.Address_;
+import com.h2.demo.printer.support.GenericPrinter;
+
+/**
+ * {@link GenericPrinter} for {@link Address} 
+ *
+ * @see GenericPrinter
+ * @see TypeAwarePrinter
+ */
+@Named
+@Singleton
+public class AddressPrinter extends GenericPrinter<Address> {
+    public AddressPrinter() {
+        super(Address.class, Address_.city);
+    }
+
+    @Override
+    public String print(Address address, Locale locale) {
+        if (address == null) {
+            return "";
+        }
+        StringBuilder ret = new StringBuilder();
+        appendIfNotEmpty(ret, address.getCity());
+        return ret.toString();
+    }
+}
\ No newline at end of file
diff --git a/src/main/generated-java/com/h2/demo/printer/AuditLogPrinter.java b/src/main/generated-java/com/h2/demo/printer/AuditLogPrinter.java
new file mode 100644
index 0000000..2b4ff1a
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/printer/AuditLogPrinter.java
@@ -0,0 +1,44 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-backend-jpa:src/main/java/printer/Printer.e.vm.java
+ */
+package com.h2.demo.printer;
+
+import java.util.Locale;
+
+import javax.inject.Named;
+import javax.inject.Singleton;
+
+import com.h2.demo.domain.AuditLog;
+import com.h2.demo.domain.AuditLog_;
+import com.h2.demo.printer.support.GenericPrinter;
+
+/**
+ * {@link GenericPrinter} for {@link AuditLog} 
+ *
+ * @see GenericPrinter
+ * @see TypeAwarePrinter
+ */
+@Named
+@Singleton
+public class AuditLogPrinter extends GenericPrinter<AuditLog> {
+    public AuditLogPrinter() {
+        super(AuditLog.class, AuditLog_.author, AuditLog_.event, AuditLog_.stringAttribute1);
+    }
+
+    @Override
+    public String print(AuditLog auditLog, Locale locale) {
+        if (auditLog == null) {
+            return "";
+        }
+        StringBuilder ret = new StringBuilder();
+        appendIfNotEmpty(ret, auditLog.getAuthor());
+        appendIfNotEmpty(ret, auditLog.getEvent());
+        appendIfNotEmpty(ret, auditLog.getStringAttribute1());
+        return ret.toString();
+    }
+}
\ No newline at end of file
diff --git a/src/main/generated-java/com/h2/demo/printer/BookPrinter.java b/src/main/generated-java/com/h2/demo/printer/BookPrinter.java
new file mode 100644
index 0000000..9940c64
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/printer/BookPrinter.java
@@ -0,0 +1,42 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-backend-jpa:src/main/java/printer/Printer.e.vm.java
+ */
+package com.h2.demo.printer;
+
+import java.util.Locale;
+
+import javax.inject.Named;
+import javax.inject.Singleton;
+
+import com.h2.demo.domain.Book;
+import com.h2.demo.domain.Book_;
+import com.h2.demo.printer.support.GenericPrinter;
+
+/**
+ * {@link GenericPrinter} for {@link Book} 
+ *
+ * @see GenericPrinter
+ * @see TypeAwarePrinter
+ */
+@Named
+@Singleton
+public class BookPrinter extends GenericPrinter<Book> {
+    public BookPrinter() {
+        super(Book.class, Book_.title);
+    }
+
+    @Override
+    public String print(Book book, Locale locale) {
+        if (book == null) {
+            return "";
+        }
+        StringBuilder ret = new StringBuilder();
+        appendIfNotEmpty(ret, book.getTitle());
+        return ret.toString();
+    }
+}
\ No newline at end of file
diff --git a/src/main/generated-java/com/h2/demo/printer/DocumentPrinter.java b/src/main/generated-java/com/h2/demo/printer/DocumentPrinter.java
new file mode 100644
index 0000000..2729eca
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/printer/DocumentPrinter.java
@@ -0,0 +1,42 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-backend-jpa:src/main/java/printer/Printer.e.vm.java
+ */
+package com.h2.demo.printer;
+
+import java.util.Locale;
+
+import javax.inject.Named;
+import javax.inject.Singleton;
+
+import com.h2.demo.domain.Document;
+import com.h2.demo.domain.Document_;
+import com.h2.demo.printer.support.GenericPrinter;
+
+/**
+ * {@link GenericPrinter} for {@link Document} 
+ *
+ * @see GenericPrinter
+ * @see TypeAwarePrinter
+ */
+@Named
+@Singleton
+public class DocumentPrinter extends GenericPrinter<Document> {
+    public DocumentPrinter() {
+        super(Document.class, Document_.documentFileName);
+    }
+
+    @Override
+    public String print(Document document, Locale locale) {
+        if (document == null) {
+            return "";
+        }
+        StringBuilder ret = new StringBuilder();
+        appendIfNotEmpty(ret, document.getDocumentFileName());
+        return ret.toString();
+    }
+}
\ No newline at end of file
diff --git a/src/main/generated-java/com/h2/demo/printer/LegacyPrinter.java b/src/main/generated-java/com/h2/demo/printer/LegacyPrinter.java
new file mode 100644
index 0000000..1a70cb7
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/printer/LegacyPrinter.java
@@ -0,0 +1,42 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-backend-jpa:src/main/java/printer/Printer.e.vm.java
+ */
+package com.h2.demo.printer;
+
+import java.util.Locale;
+
+import javax.inject.Named;
+import javax.inject.Singleton;
+
+import com.h2.demo.domain.Legacy;
+import com.h2.demo.domain.Legacy_;
+import com.h2.demo.printer.support.GenericPrinter;
+
+/**
+ * {@link GenericPrinter} for {@link Legacy} 
+ *
+ * @see GenericPrinter
+ * @see TypeAwarePrinter
+ */
+@Named
+@Singleton
+public class LegacyPrinter extends GenericPrinter<Legacy> {
+    public LegacyPrinter() {
+        super(Legacy.class, Legacy_.extraInfo);
+    }
+
+    @Override
+    public String print(Legacy legacy, Locale locale) {
+        if (legacy == null) {
+            return "";
+        }
+        StringBuilder ret = new StringBuilder();
+        appendIfNotEmpty(ret, legacy.getExtraInfo());
+        return ret.toString();
+    }
+}
\ No newline at end of file
diff --git a/src/main/generated-java/com/h2/demo/printer/MoreTypesDemoPrinter.java b/src/main/generated-java/com/h2/demo/printer/MoreTypesDemoPrinter.java
new file mode 100644
index 0000000..c873191
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/printer/MoreTypesDemoPrinter.java
@@ -0,0 +1,44 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-backend-jpa:src/main/java/printer/Printer.e.vm.java
+ */
+package com.h2.demo.printer;
+
+import java.util.Locale;
+
+import javax.inject.Named;
+import javax.inject.Singleton;
+
+import com.h2.demo.domain.MoreTypesDemo;
+import com.h2.demo.domain.MoreTypesDemo_;
+import com.h2.demo.printer.support.GenericPrinter;
+
+/**
+ * {@link GenericPrinter} for {@link MoreTypesDemo} 
+ *
+ * @see GenericPrinter
+ * @see TypeAwarePrinter
+ */
+@Named
+@Singleton
+public class MoreTypesDemoPrinter extends GenericPrinter<MoreTypesDemo> {
+    public MoreTypesDemoPrinter() {
+        super(MoreTypesDemo.class, MoreTypesDemo_.numberInt, MoreTypesDemo_.numberLong, MoreTypesDemo_.numberDouble);
+    }
+
+    @Override
+    public String print(MoreTypesDemo moreTypesDemo, Locale locale) {
+        if (moreTypesDemo == null) {
+            return "";
+        }
+        StringBuilder ret = new StringBuilder();
+        appendIfNotEmpty(ret, moreTypesDemo.getNumberInt());
+        appendIfNotEmpty(ret, moreTypesDemo.getNumberLong());
+        appendIfNotEmpty(ret, moreTypesDemo.getNumberDouble());
+        return ret.toString();
+    }
+}
\ No newline at end of file
diff --git a/src/main/generated-java/com/h2/demo/printer/RolePrinter.java b/src/main/generated-java/com/h2/demo/printer/RolePrinter.java
new file mode 100644
index 0000000..820eadc
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/printer/RolePrinter.java
@@ -0,0 +1,42 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-backend-jpa:src/main/java/printer/Printer.e.vm.java
+ */
+package com.h2.demo.printer;
+
+import java.util.Locale;
+
+import javax.inject.Named;
+import javax.inject.Singleton;
+
+import com.h2.demo.domain.Role;
+import com.h2.demo.domain.Role_;
+import com.h2.demo.printer.support.GenericPrinter;
+
+/**
+ * {@link GenericPrinter} for {@link Role} 
+ *
+ * @see GenericPrinter
+ * @see TypeAwarePrinter
+ */
+@Named
+@Singleton
+public class RolePrinter extends GenericPrinter<Role> {
+    public RolePrinter() {
+        super(Role.class, Role_.roleName);
+    }
+
+    @Override
+    public String print(Role role, Locale locale) {
+        if (role == null) {
+            return "";
+        }
+        StringBuilder ret = new StringBuilder();
+        appendIfNotEmpty(ret, role.getRoleName());
+        return ret.toString();
+    }
+}
\ No newline at end of file
diff --git a/src/main/generated-java/com/h2/demo/printer/SavedSearchPrinter.java b/src/main/generated-java/com/h2/demo/printer/SavedSearchPrinter.java
new file mode 100644
index 0000000..cbe8399
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/printer/SavedSearchPrinter.java
@@ -0,0 +1,42 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-backend-jpa:src/main/java/printer/Printer.e.vm.java
+ */
+package com.h2.demo.printer;
+
+import java.util.Locale;
+
+import javax.inject.Named;
+import javax.inject.Singleton;
+
+import com.h2.demo.domain.SavedSearch;
+import com.h2.demo.domain.SavedSearch_;
+import com.h2.demo.printer.support.GenericPrinter;
+
+/**
+ * {@link GenericPrinter} for {@link SavedSearch} 
+ *
+ * @see GenericPrinter
+ * @see TypeAwarePrinter
+ */
+@Named
+@Singleton
+public class SavedSearchPrinter extends GenericPrinter<SavedSearch> {
+    public SavedSearchPrinter() {
+        super(SavedSearch.class, SavedSearch_.name);
+    }
+
+    @Override
+    public String print(SavedSearch savedSearch, Locale locale) {
+        if (savedSearch == null) {
+            return "";
+        }
+        StringBuilder ret = new StringBuilder();
+        appendIfNotEmpty(ret, savedSearch.getName());
+        return ret.toString();
+    }
+}
\ No newline at end of file
diff --git a/src/main/generated-java/com/h2/demo/printer/support/GenericPrinter.java b/src/main/generated-java/com/h2/demo/printer/support/GenericPrinter.java
new file mode 100644
index 0000000..29075c9
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/printer/support/GenericPrinter.java
@@ -0,0 +1,62 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-backend-jpa:src/main/java/printer/support/GenericPrinter.p.vm.java
+ */
+package com.h2.demo.printer.support;
+
+import static com.google.common.collect.Lists.newArrayList;
+import static org.apache.commons.lang.StringUtils.isNotBlank;
+
+import java.util.List;
+import java.util.Locale;
+
+import javax.persistence.metamodel.Attribute;
+
+import com.h2.demo.context.LocaleHolder;
+import com.h2.demo.repository.support.JpaUtil;
+
+public abstract class GenericPrinter<T> {
+    private final Class<T> clazz;
+    private final List<String> displayedAttributes;
+
+    public GenericPrinter(Class<T> clazz, Attribute<?, ?>... displayedAttributes) {
+        this.clazz = clazz;
+        this.displayedAttributes = newArrayList(JpaUtil.getInstance().toNames(displayedAttributes));
+    }
+
+    public Class<T> getTarget() {
+        return clazz;
+    }
+
+    public String print(T document) {
+        return print(document, LocaleHolder.getLocale());
+    }
+
+    public abstract String print(T object, Locale locale);
+
+    public List<String> getDisplayedAttributes() {
+        return displayedAttributes;
+    }
+
+    protected void appendIfNotEmpty(StringBuilder builder, String value) {
+        if (isNotBlank(value)) {
+            if (builder.length() != 0) {
+                builder.append('/');
+            }
+            builder.append(value.trim());
+        }
+    }
+
+    protected void appendIfNotEmpty(StringBuilder builder, Object value) {
+        if (value != null) {
+            if (builder.length() != 0) {
+                builder.append('/');
+            }
+            builder.append(value);
+        }
+    }
+}
\ No newline at end of file
diff --git a/src/main/generated-java/com/h2/demo/printer/support/TypeAwarePrinter.java b/src/main/generated-java/com/h2/demo/printer/support/TypeAwarePrinter.java
new file mode 100644
index 0000000..cc2a969
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/printer/support/TypeAwarePrinter.java
@@ -0,0 +1,55 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-backend-jpa:src/main/java/printer/support/TypeAwarePrinter.p.vm.java
+ */
+package com.h2.demo.printer.support;
+
+import static com.google.common.collect.Maps.newHashMap;
+import static org.hibernate.proxy.HibernateProxyHelper.getClassWithoutInitializingProxy;
+
+import java.util.List;
+import java.util.Locale;
+import java.util.Map;
+
+import javax.inject.Inject;
+import javax.inject.Named;
+import javax.inject.Singleton;
+
+import com.h2.demo.context.LocaleHolder;
+
+/**
+ * Given the type of the object use the corresponding {@link GenericPrinter}, or use {@link #toString()} method.
+ */
+@Named("printer")
+@Singleton
+public class TypeAwarePrinter {
+    private Map<Class<?>, GenericPrinter<?>> printers = newHashMap();
+
+    @Inject
+    void buildCache(List<GenericPrinter<?>> registredPrinters) {
+        for (GenericPrinter<?> printer : registredPrinters) {
+            printers.put(printer.getTarget(), printer);
+        }
+    }
+
+    public String print(Object object) {
+        return print(object, LocaleHolder.getLocale());
+    }
+
+    @SuppressWarnings("unchecked")
+    public String print(Object object, Locale locale) {
+        if (object == null) {
+            return "";
+        }
+
+        // note: getClassWithoutInitializingProxy expects a non null object
+        // _HACK_ as we depend on hibernate here.
+        @SuppressWarnings("rawtypes")
+        GenericPrinter printer = printers.get(getClassWithoutInitializingProxy(object));
+        return printer == null ? object.toString() : printer.print(object, locale);
+    }
+}
\ No newline at end of file
diff --git a/src/main/generated-java/com/h2/demo/repository/AccountRepository.java b/src/main/generated-java/com/h2/demo/repository/AccountRepository.java
new file mode 100644
index 0000000..5967cfa
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/repository/AccountRepository.java
@@ -0,0 +1,83 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-backend-jpa:src/main/java/repository/Repository.e.vm.java
+ */
+package com.h2.demo.repository;
+
+import javax.inject.Named;
+import javax.inject.Singleton;
+
+import org.springframework.transaction.annotation.Transactional;
+
+import com.h2.demo.domain.Account;
+import com.h2.demo.repository.support.GenericRepository;
+
+/**
+ * {@link GenericRepository} for {@link Account} 
+ */
+@Named
+@Singleton
+public class AccountRepository extends GenericRepository<Account, String> {
+
+    public AccountRepository() {
+        super(Account.class);
+    }
+
+    @Override
+    public Account getNew() {
+        return new Account();
+    }
+
+    @Override
+    public Account getNewWithDefaults() {
+        return getNew().withDefaults();
+    }
+
+    /**
+     * Return the persistent instance of {@link Account} with the given unique property value login,
+     * or null if there is no such persistent instance.
+     *
+     * @param login the unique value
+     * @return the corresponding {@link Account} persistent instance or null
+     */
+    @Transactional(readOnly = true)
+    public Account getByLogin(String login) {
+        return findUniqueOrNone(new Account().login(login));
+    }
+
+    /**
+     * Delete a {@link Account} using the unique column login
+     *
+     * @param login the unique value
+     */
+    @Transactional
+    public void deleteByLogin(String login) {
+        delete(getByLogin(login));
+    }
+
+    /**
+     * Return the persistent instance of {@link Account} with the given unique property value email,
+     * or null if there is no such persistent instance.
+     *
+     * @param email the unique value
+     * @return the corresponding {@link Account} persistent instance or null
+     */
+    @Transactional(readOnly = true)
+    public Account getByEmail(String email) {
+        return findUniqueOrNone(new Account().email(email));
+    }
+
+    /**
+     * Delete a {@link Account} using the unique column email
+     *
+     * @param email the unique value
+     */
+    @Transactional
+    public void deleteByEmail(String email) {
+        delete(getByEmail(email));
+    }
+}
\ No newline at end of file
diff --git a/src/main/generated-java/com/h2/demo/repository/AddressRepository.java b/src/main/generated-java/com/h2/demo/repository/AddressRepository.java
new file mode 100644
index 0000000..2b989b6
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/repository/AddressRepository.java
@@ -0,0 +1,37 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-backend-jpa:src/main/java/repository/Repository.e.vm.java
+ */
+package com.h2.demo.repository;
+
+import javax.inject.Named;
+import javax.inject.Singleton;
+
+import com.h2.demo.domain.Address;
+import com.h2.demo.repository.support.GenericRepository;
+
+/**
+ * {@link GenericRepository} for {@link Address} 
+ */
+@Named
+@Singleton
+public class AddressRepository extends GenericRepository<Address, Integer> {
+
+    public AddressRepository() {
+        super(Address.class);
+    }
+
+    @Override
+    public Address getNew() {
+        return new Address();
+    }
+
+    @Override
+    public Address getNewWithDefaults() {
+        return getNew().withDefaults();
+    }
+}
\ No newline at end of file
diff --git a/src/main/generated-java/com/h2/demo/repository/AuditLogRepository.java b/src/main/generated-java/com/h2/demo/repository/AuditLogRepository.java
new file mode 100644
index 0000000..8a2d9b1
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/repository/AuditLogRepository.java
@@ -0,0 +1,37 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-backend-jpa:src/main/java/repository/Repository.e.vm.java
+ */
+package com.h2.demo.repository;
+
+import javax.inject.Named;
+import javax.inject.Singleton;
+
+import com.h2.demo.domain.AuditLog;
+import com.h2.demo.repository.support.GenericRepository;
+
+/**
+ * {@link GenericRepository} for {@link AuditLog} 
+ */
+@Named
+@Singleton
+public class AuditLogRepository extends GenericRepository<AuditLog, Integer> {
+
+    public AuditLogRepository() {
+        super(AuditLog.class);
+    }
+
+    @Override
+    public AuditLog getNew() {
+        return new AuditLog();
+    }
+
+    @Override
+    public AuditLog getNewWithDefaults() {
+        return getNew().withDefaults();
+    }
+}
\ No newline at end of file
diff --git a/src/main/generated-java/com/h2/demo/repository/BookRepository.java b/src/main/generated-java/com/h2/demo/repository/BookRepository.java
new file mode 100644
index 0000000..99b2510
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/repository/BookRepository.java
@@ -0,0 +1,37 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-backend-jpa:src/main/java/repository/Repository.e.vm.java
+ */
+package com.h2.demo.repository;
+
+import javax.inject.Named;
+import javax.inject.Singleton;
+
+import com.h2.demo.domain.Book;
+import com.h2.demo.repository.support.GenericRepository;
+
+/**
+ * {@link GenericRepository} for {@link Book} 
+ */
+@Named
+@Singleton
+public class BookRepository extends GenericRepository<Book, Integer> {
+
+    public BookRepository() {
+        super(Book.class);
+    }
+
+    @Override
+    public Book getNew() {
+        return new Book();
+    }
+
+    @Override
+    public Book getNewWithDefaults() {
+        return getNew().withDefaults();
+    }
+}
\ No newline at end of file
diff --git a/src/main/generated-java/com/h2/demo/repository/DocumentRepository.java b/src/main/generated-java/com/h2/demo/repository/DocumentRepository.java
new file mode 100644
index 0000000..a0a1768
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/repository/DocumentRepository.java
@@ -0,0 +1,56 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-backend-jpa:src/main/java/repository/Repository.e.vm.java
+ */
+package com.h2.demo.repository;
+
+import javax.inject.Named;
+import javax.inject.Singleton;
+
+import org.hibernate.LazyInitializationException;
+import org.springframework.transaction.annotation.Transactional;
+
+import com.h2.demo.domain.Document;
+import com.h2.demo.repository.support.GenericRepository;
+
+/**
+ * {@link GenericRepository} for {@link Document} 
+ */
+@Named
+@Singleton
+public class DocumentRepository extends GenericRepository<Document, String> {
+
+    public DocumentRepository() {
+        super(Document.class);
+    }
+
+    @Override
+    public Document getNew() {
+        return new Document();
+    }
+
+    @Override
+    public Document getNewWithDefaults() {
+        return getNew().withDefaults();
+    }
+
+    /**
+     * Safe way to load the documentBinary content. 
+     */
+    @Transactional(readOnly = true)
+    public byte[] getDocumentBinary(Document document) {
+        if (!document.isIdSet()) {
+            return document.getDocumentBinary();
+        }
+
+        try {
+            return document.getDocumentBinary();
+        } catch (LazyInitializationException lie) { // _HACK_ as we still rely on hibernate here
+            return get(document).getDocumentBinary();
+        }
+    }
+}
\ No newline at end of file
diff --git a/src/main/generated-java/com/h2/demo/repository/LegacyRepository.java b/src/main/generated-java/com/h2/demo/repository/LegacyRepository.java
new file mode 100644
index 0000000..1bd6415
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/repository/LegacyRepository.java
@@ -0,0 +1,38 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-backend-jpa:src/main/java/repository/Repository.e.vm.java
+ */
+package com.h2.demo.repository;
+
+import javax.inject.Named;
+import javax.inject.Singleton;
+
+import com.h2.demo.domain.Legacy;
+import com.h2.demo.domain.LegacyPk;
+import com.h2.demo.repository.support.GenericRepository;
+
+/**
+ * {@link GenericRepository} for {@link Legacy} 
+ */
+@Named
+@Singleton
+public class LegacyRepository extends GenericRepository<Legacy, LegacyPk> {
+
+    public LegacyRepository() {
+        super(Legacy.class);
+    }
+
+    @Override
+    public Legacy getNew() {
+        return new Legacy();
+    }
+
+    @Override
+    public Legacy getNewWithDefaults() {
+        return getNew().withDefaults();
+    }
+}
\ No newline at end of file
diff --git a/src/main/generated-java/com/h2/demo/repository/MoreTypesDemoRepository.java b/src/main/generated-java/com/h2/demo/repository/MoreTypesDemoRepository.java
new file mode 100644
index 0000000..ccaf6f2
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/repository/MoreTypesDemoRepository.java
@@ -0,0 +1,39 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-backend-jpa:src/main/java/repository/Repository.e.vm.java
+ */
+package com.h2.demo.repository;
+
+import java.math.BigDecimal;
+
+import javax.inject.Named;
+import javax.inject.Singleton;
+
+import com.h2.demo.domain.MoreTypesDemo;
+import com.h2.demo.repository.support.GenericRepository;
+
+/**
+ * {@link GenericRepository} for {@link MoreTypesDemo} 
+ */
+@Named
+@Singleton
+public class MoreTypesDemoRepository extends GenericRepository<MoreTypesDemo, BigDecimal> {
+
+    public MoreTypesDemoRepository() {
+        super(MoreTypesDemo.class);
+    }
+
+    @Override
+    public MoreTypesDemo getNew() {
+        return new MoreTypesDemo();
+    }
+
+    @Override
+    public MoreTypesDemo getNewWithDefaults() {
+        return getNew().withDefaults();
+    }
+}
\ No newline at end of file
diff --git a/src/main/generated-java/com/h2/demo/repository/RoleRepository.java b/src/main/generated-java/com/h2/demo/repository/RoleRepository.java
new file mode 100644
index 0000000..71c51a4
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/repository/RoleRepository.java
@@ -0,0 +1,61 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-backend-jpa:src/main/java/repository/Repository.e.vm.java
+ */
+package com.h2.demo.repository;
+
+import javax.inject.Named;
+import javax.inject.Singleton;
+
+import org.springframework.transaction.annotation.Transactional;
+
+import com.h2.demo.domain.Role;
+import com.h2.demo.repository.support.GenericRepository;
+
+/**
+ * {@link GenericRepository} for {@link Role} 
+ */
+@Named
+@Singleton
+public class RoleRepository extends GenericRepository<Role, Integer> {
+
+    public RoleRepository() {
+        super(Role.class);
+    }
+
+    @Override
+    public Role getNew() {
+        return new Role();
+    }
+
+    @Override
+    public Role getNewWithDefaults() {
+        return getNew().withDefaults();
+    }
+
+    /**
+     * Return the persistent instance of {@link Role} with the given unique property value roleName,
+     * or null if there is no such persistent instance.
+     *
+     * @param roleName the unique value
+     * @return the corresponding {@link Role} persistent instance or null
+     */
+    @Transactional(readOnly = true)
+    public Role getByRoleName(String roleName) {
+        return findUniqueOrNone(new Role().roleName(roleName));
+    }
+
+    /**
+     * Delete a {@link Role} using the unique column roleName
+     *
+     * @param roleName the unique value
+     */
+    @Transactional
+    public void deleteByRoleName(String roleName) {
+        delete(getByRoleName(roleName));
+    }
+}
\ No newline at end of file
diff --git a/src/main/generated-java/com/h2/demo/repository/SavedSearchRepository.java b/src/main/generated-java/com/h2/demo/repository/SavedSearchRepository.java
new file mode 100644
index 0000000..f80a769
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/repository/SavedSearchRepository.java
@@ -0,0 +1,56 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-backend-jpa:src/main/java/repository/Repository.e.vm.java
+ */
+package com.h2.demo.repository;
+
+import javax.inject.Named;
+import javax.inject.Singleton;
+
+import org.hibernate.LazyInitializationException;
+import org.springframework.transaction.annotation.Transactional;
+
+import com.h2.demo.domain.SavedSearch;
+import com.h2.demo.repository.support.GenericRepository;
+
+/**
+ * {@link GenericRepository} for {@link SavedSearch} 
+ */
+@Named
+@Singleton
+public class SavedSearchRepository extends GenericRepository<SavedSearch, Integer> {
+
+    public SavedSearchRepository() {
+        super(SavedSearch.class);
+    }
+
+    @Override
+    public SavedSearch getNew() {
+        return new SavedSearch();
+    }
+
+    @Override
+    public SavedSearch getNewWithDefaults() {
+        return getNew().withDefaults();
+    }
+
+    /**
+     * Safe way to load the formContent content. 
+     */
+    @Transactional(readOnly = true)
+    public byte[] getFormContent(SavedSearch savedSearch) {
+        if (!savedSearch.isIdSet()) {
+            return savedSearch.getFormContent();
+        }
+
+        try {
+            return savedSearch.getFormContent();
+        } catch (LazyInitializationException lie) { // _HACK_ as we still rely on hibernate here
+            return get(savedSearch).getFormContent();
+        }
+    }
+}
\ No newline at end of file
diff --git a/src/main/generated-java/com/h2/demo/repository/support/ByExampleUtil.java b/src/main/generated-java/com/h2/demo/repository/support/ByExampleUtil.java
new file mode 100644
index 0000000..99261d6
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/repository/support/ByExampleUtil.java
@@ -0,0 +1,166 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-backend-jpa:src/main/java/repository/support/ByExampleUtil.p.vm.java
+ */
+package com.h2.demo.repository.support;
+
+import static com.google.common.collect.Lists.newArrayList;
+import static java.util.Collections.emptyList;
+import static javax.persistence.metamodel.Attribute.PersistentAttributeType.EMBEDDED;
+import static javax.persistence.metamodel.Attribute.PersistentAttributeType.MANY_TO_ONE;
+import static javax.persistence.metamodel.Attribute.PersistentAttributeType.ONE_TO_ONE;
+import static org.apache.commons.lang.StringUtils.isNotEmpty;
+
+import java.util.List;
+
+import javax.inject.Inject;
+import javax.inject.Named;
+import javax.inject.Singleton;
+import javax.persistence.EntityManager;
+import javax.persistence.PersistenceContext;
+import javax.persistence.criteria.CriteriaBuilder;
+import javax.persistence.criteria.ListJoin;
+import javax.persistence.criteria.Path;
+import javax.persistence.criteria.Predicate;
+import javax.persistence.criteria.Root;
+import javax.persistence.metamodel.ManagedType;
+import javax.persistence.metamodel.PluralAttribute;
+import javax.persistence.metamodel.SingularAttribute;
+
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import com.h2.demo.domain.Identifiable;
+
+/**
+ * Helper to create predicate by example. It processes associated entities (1 level deep).
+ */
+@Named
+@Singleton
+public class ByExampleUtil {
+    private static final Logger log = LoggerFactory.getLogger(ByExampleUtil.class);
+
+    @Inject
+    private JpaUtil jpaUtil;
+    @PersistenceContext
+    private EntityManager em;
+
+    public <T extends Identifiable<?>> Predicate byExampleOnEntity(Root<T> rootPath, T entityValue, CriteriaBuilder builder, SearchParameters sp) {
+        if (entityValue == null) {
+            return null;
+        }
+
+        Class<T> type = rootPath.getModel().getBindableJavaType();
+        ManagedType<T> mt = em.getMetamodel().entity(type);
+
+        List<Predicate> predicates = newArrayList();
+        predicates.addAll(byExample(mt, rootPath, entityValue, sp, builder));
+        predicates.addAll(byExampleOnCompositePk(rootPath, entityValue, sp, builder));
+        predicates.addAll(byExampleOnXToOne(mt, rootPath, entityValue, sp, builder)); // 1 level deep only
+        predicates.addAll(byExampleOnXToMany(mt, rootPath, entityValue, sp, builder));
+        return jpaUtil.concatPredicate(sp, builder, predicates);
+    }
+
+    protected <T extends Identifiable<?>> List<Predicate> byExampleOnCompositePk(Root<T> root, T entity, SearchParameters sp, CriteriaBuilder builder) {
+        String compositePropertyName = jpaUtil.compositePkPropertyName(entity);
+        if (compositePropertyName == null) {
+            return emptyList();
+        } else {
+            return newArrayList(byExampleOnEmbeddable(root.get(compositePropertyName), entity.getId(), sp, builder));
+        }
+    }
+
+    public <E> Predicate byExampleOnEmbeddable(Path<E> embeddablePath, E embeddableValue, SearchParameters sp, CriteriaBuilder builder) {
+        if (embeddableValue == null) {
+            return null;
+        }
+
+        Class<E> type = embeddablePath.getModel().getBindableJavaType();
+        ManagedType<E> mt = em.getMetamodel().embeddable(type); // note: calling .managedType() does not work
+
+        return jpaUtil.andPredicate(builder, byExample(mt, embeddablePath, embeddableValue, sp, builder));
+    }
+
+    /**
+     * Add a predicate for each simple property whose value is not null.
+     */
+    public <T> List<Predicate> byExample(ManagedType<T> mt, Path<T> mtPath, T mtValue, SearchParameters sp, CriteriaBuilder builder) {
+        List<Predicate> predicates = newArrayList();
+        for (SingularAttribute<? super T, ?> attr : mt.getSingularAttributes()) {
+            if (attr.getPersistentAttributeType() == MANY_TO_ONE //
+                    || attr.getPersistentAttributeType() == ONE_TO_ONE //
+                    || attr.getPersistentAttributeType() == EMBEDDED) {
+                continue;
+            }
+
+            Object attrValue = jpaUtil.getValue(mtValue, attr);
+            if (attrValue != null) {
+                if (attr.getJavaType() == String.class) {
+                    if (isNotEmpty((String) attrValue)) {
+                        predicates.add(jpaUtil.stringPredicate(mtPath.get(jpaUtil.stringAttribute(mt, attr)), attrValue, sp, builder));
+                    }
+                } else {
+                    predicates.add(builder.equal(mtPath.get(jpaUtil.attribute(mt, attr)), attrValue));
+                }
+            }
+        }
+        return predicates;
+    }
+
+    /**
+     * Invoke byExample method for each not null x-to-one association when their pk is not set. This allows you to search entities based on an associated
+     * entity's properties value.
+     */
+    @SuppressWarnings("unchecked")
+    public <T extends Identifiable<?>, M2O extends Identifiable<?>> List<Predicate> byExampleOnXToOne(ManagedType<T> mt, Root<T> mtPath, T mtValue,
+            SearchParameters sp, CriteriaBuilder builder) {
+        List<Predicate> predicates = newArrayList();
+        for (SingularAttribute<? super T, ?> attr : mt.getSingularAttributes()) {
+            if (attr.getPersistentAttributeType() == MANY_TO_ONE || attr.getPersistentAttributeType() == ONE_TO_ONE) {
+                M2O m2oValue = (M2O) jpaUtil.getValue(mtValue, mt.getAttribute(attr.getName()));
+                Class<M2O> m2oType = (Class<M2O>) attr.getBindableJavaType();
+                Path<M2O> m2oPath = (Path<M2O>) mtPath.get(attr);
+                ManagedType<M2O> m2oMt = em.getMetamodel().entity(m2oType);
+                if (m2oValue != null) {
+                    if (m2oValue.isIdSet()) { // we have an id, let's restrict only on this field
+                        predicates.add(builder.equal(m2oPath.get("id"), m2oValue.getId()));
+                    } else {
+                        predicates.addAll(byExample(m2oMt, m2oPath, m2oValue, sp, builder));
+                    }
+                }
+            }
+        }
+        return predicates;
+    }
+
+    /**
+     * Construct a join predicate on collection (eg many to many, List)
+     */
+    public <T> List<Predicate> byExampleOnXToMany(ManagedType<T> mt, Root<T> mtPath, T mtValue, SearchParameters sp, CriteriaBuilder builder) {
+        List<Predicate> predicates = newArrayList();
+        for (PluralAttribute<? super T, ?, ?> pa : mt.getPluralAttributes()) {
+            if (pa.getCollectionType() == PluralAttribute.CollectionType.LIST) {
+                List<?> values = (List<?>) jpaUtil.getValue(mtValue, mt.getAttribute(pa.getName()));
+                if (values != null && !values.isEmpty()) {
+                    if (sp.getUseAndInXToMany()) {
+                        if (values.size() > 3) {
+                            log.warn("Please note that using AND restriction on an Many to Many relationship requires as many joins as values");
+                        }
+                        for (Object value : values) {
+                            ListJoin<T, ?> join = mtPath.join(mt.getList(pa.getName()));
+                            predicates.add(join.in(value));
+                        }
+                    } else {
+                        ListJoin<T, ?> join = mtPath.join(mt.getList(pa.getName()));
+                        predicates.add(join.in(values));
+                    }
+                }
+            }
+        }
+        return predicates;
+    }
+}
\ No newline at end of file
diff --git a/src/main/generated-java/com/h2/demo/repository/support/ByNamedQueryUtil.java b/src/main/generated-java/com/h2/demo/repository/support/ByNamedQueryUtil.java
new file mode 100644
index 0000000..e50c8bb
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/repository/support/ByNamedQueryUtil.java
@@ -0,0 +1,154 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-backend-jpa:src/main/java/repository/support/ByNamedQueryUtil.p.vm.java
+ */
+package com.h2.demo.repository.support;
+
+import java.util.List;
+import java.util.Map;
+import java.util.Map.Entry;
+
+import javax.inject.Inject;
+import javax.inject.Named;
+import javax.inject.Singleton;
+import javax.persistence.EntityManager;
+import javax.persistence.PersistenceContext;
+import javax.persistence.Query;
+
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+/**
+ * Helper class to create named query supporting dynamic sort order and pagination.
+ */
+@Named
+@Singleton
+public class ByNamedQueryUtil {
+    private static final Logger log = LoggerFactory.getLogger(ByNamedQueryUtil.class);
+
+    @PersistenceContext
+    private EntityManager entityManager;
+    @Inject
+    private JpaUtil jpaUtil;
+
+    public ByNamedQueryUtil() {
+    }
+
+    public ByNamedQueryUtil(EntityManager entityManager) {
+        this.entityManager = entityManager;
+    }
+
+    protected EntityManager getEntityManager() {
+        return entityManager;
+    }
+
+    public <T> List<T> findByNamedQuery(SearchParameters sp) {
+        if (sp == null || !sp.hasNamedQuery()) {
+            throw new IllegalArgumentException("searchParameters must be non null and must have a namedQuery");
+        }
+
+        Query query = entityManager.createNamedQuery(sp.getNamedQuery());
+        String queryString = getQueryString(query);
+
+        // append order by if needed
+        if (queryString != null && sp.hasOrders()) {
+            // create the sql restriction clausis
+            StringBuilder orderClausis = new StringBuilder("order by ");
+            boolean first = true;
+            for (OrderBy orderBy : sp.getOrders()) {
+                if (!first) {
+                    orderClausis.append(", ");
+                }
+                orderClausis.append(orderBy.getPath());
+                orderClausis.append(orderBy.isOrderDesc() ? " desc" : " asc");
+                first = false;
+            }
+
+            log.debug("appending: [{}] to {}", orderClausis, queryString);
+
+            query = recreateQuery(query, queryString + " " + orderClausis.toString());
+        }
+
+        // pagination
+        jpaUtil.applyPagination(query, sp);
+
+        // named parameters
+        setQueryParameters(query, sp);
+
+        // execute
+        @SuppressWarnings("unchecked")
+        List<T> result = query.getResultList();
+
+        if (result != null) {
+            log.debug("{} returned a List of size: {}", sp.getNamedQuery(), result.size());
+        }
+
+        return result;
+    }
+
+    @SuppressWarnings("unchecked")
+    public <T> T byNamedQuery(SearchParameters sp) {
+        return (T) objectByNamedQuery(sp);
+    }
+
+    public Number numberByNamedQuery(SearchParameters sp) {
+        return (Number) objectByNamedQuery(sp);
+    }
+
+    public Object objectByNamedQuery(SearchParameters sp) {
+        if (sp == null || !sp.hasNamedQuery()) {
+            throw new IllegalStateException("Invalid search template provided: could not determine which namedQuery to use");
+        }
+
+        Query query = entityManager.createNamedQuery(sp.getNamedQuery());
+        String queryString = getQueryString(query);
+
+        // append select count if needed
+        if (queryString != null && queryString.toLowerCase().startsWith("from") && !queryString.toLowerCase().contains("count(")) {
+            query = recreateQuery(query, "select count(*) " + queryString);
+        }
+
+        setQueryParameters(query, sp);
+
+        log.debug("objectNamedQuery : {}", sp.toString());
+
+        // execute
+        Object result = query.getSingleResult();
+
+        if (log.isDebugEnabled()) {
+            log.debug("{} returned a {} object", sp.getNamedQuery(), result == null ? "null" : result.getClass());
+            if (result instanceof Number) {
+                log.debug("{} returned a number with value : {}", sp.getNamedQuery(), result);
+            }
+        }
+
+        return result;
+    }
+
+    private void setQueryParameters(Query query, SearchParameters sp) {
+        // add parameters for the named query
+        for (Entry<String, Object> entrySet : sp.getNamedQueryParameters().entrySet()) {
+            query.setParameter(entrySet.getKey(), entrySet.getValue());
+        }
+    }
+
+    /**
+     * If the named query has the "query" hint, it uses the hint value (which must be jpa QL) to create a new query and append to it the proper order by clause.
+     */
+    private String getQueryString(Query query) {
+        Map<String, Object> hints = query.getHints();
+        return hints != null ? (String) hints.get("query") : null;
+    }
+
+    private Query recreateQuery(Query current, String newSqlString) {
+        Query result = entityManager.createQuery(newSqlString);
+        for (Entry<String, Object> hint : current.getHints().entrySet()) {
+            result.setHint(hint.getKey(), hint.getValue());
+        }
+        return result;
+    }
+}
\ No newline at end of file
diff --git a/src/main/generated-java/com/h2/demo/repository/support/ByPatternUtil.java b/src/main/generated-java/com/h2/demo/repository/support/ByPatternUtil.java
new file mode 100644
index 0000000..3635be2
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/repository/support/ByPatternUtil.java
@@ -0,0 +1,62 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-backend-jpa:src/main/java/repository/support/ByPatternUtil.p.vm.java
+ */
+package com.h2.demo.repository.support;
+
+import static com.google.common.collect.Lists.newArrayList;
+import static javax.persistence.metamodel.Attribute.PersistentAttributeType.MANY_TO_ONE;
+import static javax.persistence.metamodel.Attribute.PersistentAttributeType.ONE_TO_ONE;
+
+import java.util.List;
+
+import javax.inject.Inject;
+import javax.inject.Named;
+import javax.inject.Singleton;
+import javax.persistence.EntityManager;
+import javax.persistence.PersistenceContext;
+import javax.persistence.criteria.CriteriaBuilder;
+import javax.persistence.criteria.Expression;
+import javax.persistence.criteria.Predicate;
+import javax.persistence.criteria.Root;
+import javax.persistence.metamodel.EntityType;
+import javax.persistence.metamodel.SingularAttribute;
+
+@Named
+@Singleton
+public class ByPatternUtil {
+    @PersistenceContext
+    private EntityManager em;
+    @Inject
+    private JpaUtil jpaUtil;
+
+    /**
+     * Lookup entities having at least one String attribute matching the passed sp's pattern
+     */
+    @SuppressWarnings("unchecked")
+    public <T> Predicate byPattern(Root<T> root, CriteriaBuilder builder, SearchParameters sp, Class<T> type) {
+        if (!sp.hasSearchPattern()) {
+            return null;
+        }
+
+        List<Predicate> predicates = newArrayList();
+        EntityType<T> entity = em.getMetamodel().entity(type);
+        String pattern = sp.getSearchPattern();
+
+        for (SingularAttribute<? super T, ?> attr : entity.getSingularAttributes()) {
+            if (attr.getPersistentAttributeType() == MANY_TO_ONE || attr.getPersistentAttributeType() == ONE_TO_ONE) {
+                continue;
+            }
+
+            if (attr.getJavaType() == String.class) {
+                predicates.add(jpaUtil.stringPredicate((Expression<String>) root.get(jpaUtil.attribute(entity, attr)), pattern, sp, builder));
+            }
+        }
+
+        return jpaUtil.orPredicate(builder, predicates);
+    }
+}
\ No newline at end of file
diff --git a/src/main/generated-java/com/h2/demo/repository/support/ByPropertySelectorUtil.java b/src/main/generated-java/com/h2/demo/repository/support/ByPropertySelectorUtil.java
new file mode 100644
index 0000000..1fa1a7c
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/repository/support/ByPropertySelectorUtil.java
@@ -0,0 +1,148 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-backend-jpa:src/main/java/repository/support/ByPropertySelectorUtil.p.vm.java
+ */
+package com.h2.demo.repository.support;
+
+import static com.google.common.collect.Lists.newArrayList;
+import static org.apache.commons.collections.CollectionUtils.isNotEmpty;
+
+import java.io.Serializable;
+import java.util.List;
+
+import javax.inject.Inject;
+import javax.inject.Named;
+import javax.inject.Singleton;
+import javax.persistence.criteria.CriteriaBuilder;
+import javax.persistence.criteria.Path;
+import javax.persistence.criteria.Predicate;
+import javax.persistence.criteria.Root;
+
+import com.h2.demo.domain.Identifiable;
+
+/**
+ * Helper to create a predicate out of {@link PropertySelector}s.
+ */
+@Named
+@Singleton
+public class ByPropertySelectorUtil {
+
+    @Inject
+    private JpaUtil jpaUtil;
+
+    @SuppressWarnings("unchecked")
+    public <E> Predicate byPropertySelectors(Root<E> root, CriteriaBuilder builder, SearchParameters sp) {
+        List<Predicate> predicates = newArrayList();
+
+        for (PropertySelector<?, ?> selector : sp.getProperties()) {
+            if (selector.isBoolean()) {
+                byBooleanSelector(root, builder, predicates, sp, (PropertySelector<? super E, Boolean>) selector);
+            } else if (selector.isString()) {
+                byStringSelector(root, builder, predicates, sp, (PropertySelector<? super E, String>) selector);
+            } else {
+                byObjectSelector(root, builder, predicates, sp, (PropertySelector<? super E, ?>) selector);
+            }
+        }
+        return jpaUtil.concatPredicate(sp, builder, predicates);
+    }
+
+    private <E> void byBooleanSelector(Root<E> root, CriteriaBuilder builder, List<Predicate> predicates, SearchParameters sp,
+            PropertySelector<? super E, Boolean> selector) {
+        if (selector.isNotEmpty()) {
+            List<Predicate> selectorPredicates = newArrayList();
+
+            for (Boolean selection : selector.getSelected()) {
+                Path<Boolean> path = jpaUtil.getPath(root, selector.getAttributes());
+                if (selection == null) {
+                    selectorPredicates.add(builder.isNull(path));
+                } else {
+                    selectorPredicates.add(selection ? builder.isTrue(path) : builder.isFalse(path));
+                }
+            }
+            if (selector.isOrMode()) {
+                predicates.add(jpaUtil.orPredicate(builder, selectorPredicates));
+            } else {
+                predicates.add(jpaUtil.andPredicate(builder, selectorPredicates));
+            }
+        }
+    }
+
+    private <E> void byStringSelector(Root<E> root, CriteriaBuilder builder, List<Predicate> predicates, SearchParameters sp,
+            PropertySelector<? super E, String> selector) {
+        if (selector.isNotEmpty()) {
+            List<Predicate> selectorPredicates = newArrayList();
+
+            for (String selection : selector.getSelected()) {
+                Path<String> path = jpaUtil.getPath(root, selector.getAttributes());
+                selectorPredicates.add(jpaUtil.stringPredicate(path, selection, selector.getSearchMode(), sp, builder));
+            }
+            if (selector.isOrMode()) {
+                predicates.add(jpaUtil.orPredicate(builder, selectorPredicates));
+            } else {
+                predicates.add(jpaUtil.andPredicate(builder, selectorPredicates));
+            }
+        }
+    }
+
+    private <E> void byObjectSelector(Root<E> root, CriteriaBuilder builder, List<Predicate> predicates, SearchParameters sp,
+            PropertySelector<? super E, ?> selector) {
+        if (selector.isNotEmpty()) {
+            if (selector.isOrMode()) {
+                byObjectOrModeSelector(root, builder, predicates, sp, selector);
+            } else {
+                byObjectAndModeSelector(root, builder, predicates, sp, selector);
+            }
+        } else if (selector.isNotIncludingNullSet()) {
+            predicates.add(builder.isNotNull(jpaUtil.getPath(root, selector.getAttributes())));
+        }
+    }
+
+    private <E> void byObjectOrModeSelector(Root<E> root, CriteriaBuilder builder, List<Predicate> predicates, SearchParameters sp,
+            PropertySelector<? super E, ?> selector) {
+        List<Predicate> selectorPredicates = newArrayList();
+        Path<?> path = jpaUtil.getPath(root, selector.getAttributes());
+        List<?> selected = selector.getSelected();
+        if (selector.getSelected().contains(null)) {
+            selected = newArrayList(selector.getSelected());
+            selected.remove(null);
+            selectorPredicates.add(builder.isNull(path));
+        }
+        if (isNotEmpty(selected)) {
+            if (selected.get(0) instanceof Identifiable) {
+                List<Serializable> ids = newArrayList();
+                for (Object selection : selected) {
+                    ids.add(((Identifiable<?>) selection).getId());
+                }
+                selectorPredicates.add(path.get("id").in(ids));
+            } else {
+                selectorPredicates.add(path.in(selected));
+            }
+        }
+        predicates.add(jpaUtil.orPredicate(builder, selectorPredicates));
+    }
+
+    private <E> void byObjectAndModeSelector(Root<E> root, CriteriaBuilder builder, List<Predicate> predicates, SearchParameters sp,
+            PropertySelector<? super E, ?> selector) {
+        List<Predicate> selectorPredicates = newArrayList();
+        List<?> selected = selector.getSelected();
+        if (selector.getSelected().contains(null)) {
+            selected = newArrayList(selector.getSelected());
+            selected.remove(null);
+            selectorPredicates.add(builder.isNull(jpaUtil.getPath(root, selector.getAttributes())));
+        }
+        for (Object selection : selector.getSelected()) {
+            Path<?> path = jpaUtil.getPath(root, selector.getAttributes());
+            if (selection instanceof Identifiable) {
+                selectorPredicates.add(builder.equal(path.get("id"), ((Identifiable<?>) selection).getId()));
+            } else {
+                selectorPredicates.add(builder.equal(path, selection));
+            }
+        }
+        predicates.add(jpaUtil.andPredicate(builder, selectorPredicates));
+    }
+
+}
\ No newline at end of file
diff --git a/src/main/generated-java/com/h2/demo/repository/support/ByRangeUtil.java b/src/main/generated-java/com/h2/demo/repository/support/ByRangeUtil.java
new file mode 100644
index 0000000..aba32e7
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/repository/support/ByRangeUtil.java
@@ -0,0 +1,79 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-backend-jpa:src/main/java/repository/support/ByRangeUtil.p.vm.java
+ */
+package com.h2.demo.repository.support;
+
+import static com.google.common.collect.Lists.newArrayList;
+import static java.lang.Boolean.FALSE;
+import static java.lang.Boolean.TRUE;
+
+import java.util.List;
+
+import javax.inject.Inject;
+import javax.inject.Named;
+import javax.inject.Singleton;
+import javax.persistence.criteria.CriteriaBuilder;
+import javax.persistence.criteria.Path;
+import javax.persistence.criteria.Predicate;
+import javax.persistence.criteria.Root;
+
+/**
+ * Helper to create a predicate out of {@link Range}s.
+ */
+@SuppressWarnings("unchecked")
+@Named
+@Singleton
+public class ByRangeUtil {
+
+    @Inject
+    private JpaUtil jpaUtil;
+
+    public <E> Predicate byRanges(Root<E> root, CriteriaBuilder builder, SearchParameters sp, Class<E> type) {
+        List<Range<?, ?>> ranges = sp.getRanges();
+        List<Predicate> predicates = newArrayList();
+        for (Range<?, ?> r : ranges) {
+            Range<E, ?> range = (Range<E, ?>) r;
+            if (range.isSet()) {
+                Predicate rangePredicate = buildRangePredicate(range, root, builder);
+                if (rangePredicate != null) {
+                    predicates.add(rangePredicate);
+                }
+            }
+        }
+
+        return jpaUtil.concatPredicate(sp, builder, predicates);
+    }
+
+    private static <D extends Comparable<? super D>, E> Predicate buildRangePredicate(Range<E, D> range, Root<E> root, CriteriaBuilder builder) {
+        Predicate rangePredicate = null;
+        Path<D> path = JpaUtil.getInstance().getPath(root, range.getAttributes());
+        if (range.isBetween()) {
+            rangePredicate = builder.between(path, range.getFrom(), range.getTo());
+        } else if (range.isFromSet()) {
+            rangePredicate = builder.greaterThanOrEqualTo(path, range.getFrom());
+        } else if (range.isToSet()) {
+            rangePredicate = builder.lessThanOrEqualTo(path, range.getTo());
+        }
+
+        if (rangePredicate != null) {
+            if (!range.isIncludeNullSet() || range.getIncludeNull() == FALSE) {
+                return rangePredicate;
+            } else {
+                return builder.or(rangePredicate, builder.isNull(path));
+            }
+        } else {
+            // no from/to is set, but include null or not could be:
+            if (TRUE == range.getIncludeNull()) {
+                return builder.isNull(path);
+            } else if (FALSE == range.getIncludeNull()) {
+                return builder.isNotNull(path);
+            }
+        }
+        return null;
+    }
+}
\ No newline at end of file
diff --git a/src/main/generated-java/com/h2/demo/repository/support/EntityGraphLoader.java b/src/main/generated-java/com/h2/demo/repository/support/EntityGraphLoader.java
new file mode 100644
index 0000000..b07281e
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/repository/support/EntityGraphLoader.java
@@ -0,0 +1,76 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-backend-jpa:src/main/java/repository/support/EntityGraphLoader.p.vm.java
+ */
+package com.h2.demo.repository.support;
+
+import java.io.Serializable;
+import java.util.Collection;
+
+import org.springframework.transaction.annotation.Transactional;
+
+import com.h2.demo.domain.Identifiable;
+
+/**
+ * The EntityGraphLoader is used to load within a single read-only transaction all the desired associations that 
+ * are normally lazily loaded.
+ */
+public abstract class EntityGraphLoader<T extends Identifiable<PK>, PK extends Serializable> {
+
+    protected GenericRepository<T, PK> repository;
+
+    // required by cglib to create a proxy around the object as we are using the @Transactional annotation
+    public EntityGraphLoader() {
+    }
+
+    public EntityGraphLoader(GenericRepository<T, PK> repository) {
+        this.repository = repository;
+    }
+
+    /**
+     * Get the entity by id and load its graph using loadGraph.
+     */
+    @Transactional(readOnly = true)
+    public T getById(PK pk) {
+        T entity = repository.getById(pk);
+        loadGraph(entity);
+        return entity;
+    }
+
+    /**
+     * Merge the passed entity and load the graph of the merged entity using loadGraph.
+     */
+    @Transactional(readOnly = true)
+    public T merge(T entity) {
+        T mergedEntity = repository.merge(entity);
+        loadGraph(mergedEntity);
+        return mergedEntity;
+    }
+
+    /**
+     * Load whatever is needed in the graph of the passed entity, for example x-to-many collection, x-to-one object, etc.
+     */
+    public abstract void loadGraph(T entity);
+
+    /**
+     * Load the passed 'x-to-many' association.
+     */
+    protected void loadCollection(Collection<?> collection) {
+        if (collection != null) {
+            collection.size();
+        }
+    }
+
+    /**
+     * Load the passed 'x-to-one' association.
+     */
+    protected void loadSingular(Object association) {
+        if (association != null) {
+            association.toString();
+        }
+    }
+}
\ No newline at end of file
diff --git a/src/main/generated-java/com/h2/demo/repository/support/GenericRepository.java b/src/main/generated-java/com/h2/demo/repository/support/GenericRepository.java
new file mode 100644
index 0000000..faa3402
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/repository/support/GenericRepository.java
@@ -0,0 +1,673 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-backend-jpa:src/main/java/repository/support/GenericRepository.p.vm.java
+ */
+package com.h2.demo.repository.support;
+
+import static com.google.common.base.Preconditions.checkNotNull;
+import static com.google.common.collect.Lists.newArrayList;
+
+import java.io.Serializable;
+import java.util.List;
+
+import javax.inject.Inject;
+import javax.persistence.EntityManager;
+import javax.persistence.NoResultException;
+import javax.persistence.NonUniqueResultException;
+import javax.persistence.PersistenceContext;
+import javax.persistence.TypedQuery;
+import javax.persistence.criteria.CriteriaBuilder;
+import javax.persistence.criteria.CriteriaQuery;
+import javax.persistence.criteria.Fetch;
+import javax.persistence.criteria.FetchParent;
+import javax.persistence.criteria.JoinType;
+import javax.persistence.criteria.Path;
+import javax.persistence.criteria.Predicate;
+import javax.persistence.criteria.Root;
+import javax.persistence.metamodel.Attribute;
+import javax.persistence.metamodel.EntityType;
+import javax.persistence.metamodel.PluralAttribute;
+import javax.persistence.metamodel.SingularAttribute;
+
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+import org.springframework.transaction.annotation.Transactional;
+
+import com.h2.demo.domain.Identifiable;
+
+/**
+ * JPA 2 {@link GenericRepository} implementation 
+ */
+public abstract class GenericRepository<E extends Identifiable<PK>, PK extends Serializable> {
+    @Inject
+    protected ByExampleUtil byExampleUtil;
+    @Inject
+    protected ByPatternUtil byPatternUtil;
+    @Inject
+    protected ByRangeUtil byRangeUtil;
+    @Inject
+    protected ByNamedQueryUtil byNamedQueryUtil;
+    @Inject
+    protected ByPropertySelectorUtil byPropertySelectorUtil;
+    @Inject
+    protected OrderByUtil orderByUtil;
+    @Inject
+    protected MetamodelUtil metamodelUtil;
+    @Inject
+    private JpaUtil jpaUtil;
+    @PersistenceContext
+    protected EntityManager entityManager;
+    protected Class<E> type;
+    protected Logger log;
+    protected String cacheRegion;
+
+    /**
+     * This constructor needs the real type of the generic type E so it can be given to the {@link EntityManager}.
+     */
+    public GenericRepository(Class<E> type) {
+        this.type = type;
+        this.log = LoggerFactory.getLogger(getClass());
+        this.cacheRegion = type.getCanonicalName();
+    }
+
+    public Class<E> getType() {
+        return type;
+    }
+
+    /**
+     * Create a new instance of the repository type.
+     * 
+     * @return a new instance with no property set.
+     */
+    public abstract E getNew();
+
+    /**
+     * Creates a new instance and initializes it with some default values.
+     * 
+     * @return a new instance initialized with default values.
+     */
+    public E getNewWithDefaults() {
+        return getNew();
+    }
+
+    /**
+     * Gets from the repository the E entity instance.
+     * 
+     * DAO for the local database will typically use the primary key or unique fields of the given entity, while DAO for external repository may use a unique
+     * field present in the entity as they probably have no knowledge of the primary key. Hence, passing the entity as an argument instead of the primary key
+     * allows you to switch the DAO more easily.
+     * 
+     * @param entity an E instance having a primary key set
+     * @return the corresponding E persistent instance or null if none could be found.
+     */
+    @Transactional(readOnly = true)
+    public E get(E entity) {
+        return entity == null ? null : getById(entity.getId());
+    }
+
+    @Transactional(readOnly = true)
+    public E getById(PK pk) {
+        if (pk == null) {
+            return null;
+        }
+
+        E entityFound = entityManager.find(type, pk);
+        if (entityFound == null) {
+            log.warn("get returned null with id={}", pk);
+        }
+        return entityFound;
+    }
+
+    /**
+     * Refresh the given entity with up to date data. Does nothing if the given entity is a new entity (not yet managed).
+     * 
+     * @param entity the entity to refresh.
+     */
+    @Transactional(readOnly = true)
+    public void refresh(E entity) {
+        if (entityManager.contains(entity)) {
+            entityManager.refresh(entity);
+        }
+    }
+
+    /**
+     * Find and load all instances.
+     */
+    @Transactional(readOnly = true)
+    public List<E> find() {
+        return find(getNew(), new SearchParameters());
+    }
+
+    /**
+     * Find and load a list of E instance.
+     * 
+     * @param entity a sample entity whose non-null properties may be used as search hints
+     * @return the entities matching the search.
+     */
+    @Transactional(readOnly = true)
+    public List<E> find(E e) {
+        return find(e, new SearchParameters());
+    }
+
+    /**
+     * Find and load a list of E instance.
+     * 
+     * @param searchParameters carries additional search information
+     * @return the entities matching the search.
+     */
+    @Transactional(readOnly = true)
+    public List<E> find(SearchParameters searchParameters) {
+        return find(getNew(), searchParameters);
+    }
+
+    /**
+     * Find and load a list of E instance.
+     * 
+     * @param entity a sample entity whose non-null properties may be used as search hints
+     * @param searchParameters carries additional search information
+     * @return the entities matching the search.
+     */
+    @Transactional(readOnly = true)
+    public List<E> find(E entity, SearchParameters sp) {
+        if (sp.hasNamedQuery()) {
+            return byNamedQueryUtil.findByNamedQuery(sp);
+        }
+        CriteriaBuilder builder = entityManager.getCriteriaBuilder();
+        CriteriaQuery<E> criteriaQuery = builder.createQuery(type);
+        if (sp.getDistinct()) {
+            criteriaQuery.distinct(true);
+        }
+        Root<E> root = criteriaQuery.from(type);
+
+        // predicate
+        Predicate predicate = getPredicate(criteriaQuery, root, builder, entity, sp);
+        if (predicate != null) {
+            criteriaQuery = criteriaQuery.where(predicate);
+        }
+
+        // fetches
+        fetches(sp, root);
+
+        // order by
+        criteriaQuery.orderBy(orderByUtil.buildJpaOrders(sp.getOrders(), root, builder, sp));
+
+        TypedQuery<E> typedQuery = entityManager.createQuery(criteriaQuery);
+        applyCacheHints(typedQuery, sp);
+        jpaUtil.applyPagination(typedQuery, sp);
+        List<E> entities = typedQuery.getResultList();
+        log.debug("Returned {} elements", entities.size());
+
+        return entities;
+    }
+
+    /**
+     * Find a list of E property.
+     * 
+     * @param propertyType type of the property
+     * @param entity a sample entity whose non-null properties may be used as search hints
+     * @param searchParameters carries additional search information
+     * @param path the path to the property
+     * @return the entities property matching the search.
+     */
+    @Transactional(readOnly = true)
+    public <T> List<T> findProperty(Class<T> propertyType, E entity, SearchParameters sp, String path) {
+        return findProperty(propertyType, entity, sp, metamodelUtil.toAttributes(path, type));
+    }
+
+    /**
+     * Find a list of E property.
+     * 
+     * @param propertyType type of the property
+     * @param entity a sample entity whose non-null properties may be used as search hints
+     * @param searchParameters carries additional search information
+     * @param attributes the list of attributes to the property
+     * @return the entities property matching the search.
+     */
+    @Transactional(readOnly = true)
+    public <T> List<T> findProperty(Class<T> propertyType, E entity, SearchParameters sp, Attribute<?, ?>... attributes) {
+        return findProperty(propertyType, entity, sp, newArrayList(attributes));
+    }
+
+    /**
+     * Find a list of E property.
+     * 
+     * @param propertyType type of the property
+     * @param entity a sample entity whose non-null properties may be used as search hints
+     * @param searchParameters carries additional search information
+     * @param attributes the list of attributes to the property
+     * @return the entities property matching the search.
+     */
+    @Transactional(readOnly = true)
+    public <T> List<T> findProperty(Class<T> propertyType, E entity, SearchParameters sp, List<Attribute<?, ?>> attributes) {
+        if (sp.hasNamedQuery()) {
+            return byNamedQueryUtil.findByNamedQuery(sp);
+        }
+        CriteriaBuilder builder = entityManager.getCriteriaBuilder();
+        CriteriaQuery<T> criteriaQuery = builder.createQuery(propertyType);
+        if (sp.getDistinct()) {
+            criteriaQuery.distinct(true);
+        }
+        Root<E> root = criteriaQuery.from(type);
+        Path<T> path = jpaUtil.getPath(root, attributes);
+        criteriaQuery.select(path);
+
+        // predicate
+        Predicate predicate = getPredicate(criteriaQuery, root, builder, entity, sp);
+        if (predicate != null) {
+            criteriaQuery = criteriaQuery.where(predicate);
+        }
+
+        // fetches
+        fetches(sp, root);
+
+        // order by
+        // we do not want to follow order by specified in search parameters
+        criteriaQuery.orderBy(builder.asc(path));
+
+        TypedQuery<T> typedQuery = entityManager.createQuery(criteriaQuery);
+        applyCacheHints(typedQuery, sp);
+        jpaUtil.applyPagination(typedQuery, sp);
+        List<T> entities = typedQuery.getResultList();
+        log.debug("Returned {} elements", entities.size());
+
+        return entities;
+    }
+
+    /**
+     * Count the number of E instances.
+     * 
+     * @param searchParameters carries additional search information
+     * @return the number of entities matching the search.
+     */
+    @Transactional(readOnly = true)
+    public int findCount(SearchParameters sp) {
+        return findCount(getNew(), sp);
+    }
+
+    /**
+     * Count the number of E instances.
+     * 
+     * @param entity a sample entity whose non-null properties may be used as search hint
+     * @return the number of entities matching the search.
+     */
+    @Transactional(readOnly = true)
+    public int findCount(E entity) {
+        return findCount(entity, new SearchParameters());
+    }
+
+    /**
+     * Count the number of E instances.
+     * 
+     * @param entity a sample entity whose non-null properties may be used as search hint
+     * @param searchParameters carries additional search information
+     * @return the number of entities matching the search.
+     */
+    @Transactional(readOnly = true)
+    public int findCount(E entity, SearchParameters sp) {
+        checkNotNull(entity, "The entity cannot be null");
+        checkNotNull(sp, "The searchParameters cannot be null");
+
+        if (sp.hasNamedQuery()) {
+            return byNamedQueryUtil.numberByNamedQuery(sp).intValue();
+        }
+        CriteriaBuilder builder = entityManager.getCriteriaBuilder();
+
+        CriteriaQuery<Long> criteriaQuery = builder.createQuery(Long.class);
+        Root<E> root = criteriaQuery.from(type);
+
+        if (sp.getDistinct()) {
+            criteriaQuery = criteriaQuery.select(builder.countDistinct(root));
+        } else {
+            criteriaQuery = criteriaQuery.select(builder.count(root));
+        }
+
+        // predicate
+        Predicate predicate = getPredicate(criteriaQuery, root, builder, entity, sp);
+        if (predicate != null) {
+            criteriaQuery = criteriaQuery.where(predicate);
+        }
+
+        // construct order by to fetch or joins if needed
+        orderByUtil.buildJpaOrders(sp.getOrders(), root, builder, sp);
+
+        TypedQuery<Long> typedQuery = entityManager.createQuery(criteriaQuery);
+
+        applyCacheHints(typedQuery, sp);
+        return typedQuery.getSingleResult().intValue();
+    }
+
+    /**
+     * Count the number of E instances.
+     * 
+     * @param entity a sample entity whose non-null properties may be used as search hint
+     * @param searchParameters carries additional search information
+     * @param path the path to the property
+     * @return the number of entities matching the search.
+     */
+    @Transactional(readOnly = true)
+    public int findPropertyCount(E entity, SearchParameters sp, String path) {
+        return findPropertyCount(entity, sp, metamodelUtil.toAttributes(path, type));
+    }
+
+    /**
+     * Count the number of E instances.
+     * 
+     * @param entity a sample entity whose non-null properties may be used as search hint
+     * @param searchParameters carries additional search information
+     * @param attributes the list of attributes to the property
+     * @return the number of entities matching the search.
+     */
+    @Transactional(readOnly = true)
+    public int findPropertyCount(E entity, SearchParameters sp, Attribute<?, ?>... attributes) {
+        return findPropertyCount(entity, sp, newArrayList(attributes));
+    }
+
+    /**
+     * Count the number of E instances.
+     * 
+     * @param entity a sample entity whose non-null properties may be used as search hint
+     * @param searchParameters carries additional search information
+     * @param attributes the list of attributes to the property
+     * @return the number of entities matching the search.
+     */
+    @Transactional(readOnly = true)
+    public int findPropertyCount(E entity, SearchParameters sp, List<Attribute<?, ?>> attributes) {
+        if (sp.hasNamedQuery()) {
+            return byNamedQueryUtil.numberByNamedQuery(sp).intValue();
+        }
+        CriteriaBuilder builder = entityManager.getCriteriaBuilder();
+        CriteriaQuery<Long> criteriaQuery = builder.createQuery(Long.class);
+        Root<E> root = criteriaQuery.from(type);
+        Path<?> path = jpaUtil.getPath(root, attributes);
+
+        if (sp.getDistinct()) {
+            criteriaQuery = criteriaQuery.select(builder.countDistinct(path));
+        } else {
+            criteriaQuery = criteriaQuery.select(builder.count(path));
+        }
+
+        // predicate
+        Predicate predicate = getPredicate(criteriaQuery, root, builder, entity, sp);
+        if (predicate != null) {
+            criteriaQuery = criteriaQuery.where(predicate);
+        }
+
+        // construct order by to fetch or joins if needed
+        orderByUtil.buildJpaOrders(sp.getOrders(), root, builder, sp);
+
+        TypedQuery<Long> typedQuery = entityManager.createQuery(criteriaQuery);
+
+        applyCacheHints(typedQuery, sp);
+        return typedQuery.getSingleResult().intValue();
+    }
+
+    @Transactional(readOnly = true)
+    public E findUnique(SearchParameters sp) {
+        return findUnique(getNew(), sp);
+    }
+
+    @Transactional(readOnly = true)
+    public E findUnique(E e) {
+        return findUnique(e, new SearchParameters());
+    }
+
+    @Transactional(readOnly = true)
+    public E findUnique(E entity, SearchParameters sp) {
+        E result = findUniqueOrNone(entity, sp);
+        if (result != null) {
+            return result;
+        }
+        throw new NoResultException("Developper: You expected 1 result but found none !");
+    }
+
+    @Transactional(readOnly = true)
+    public E findUniqueOrNone(SearchParameters sp) {
+        return findUniqueOrNone(getNew(), sp);
+    }
+
+    @Transactional(readOnly = true)
+    public E findUniqueOrNone(E entity) {
+        return findUniqueOrNone(entity, new SearchParameters());
+    }
+
+    /**
+     * We request at most 2, if there's more than one then we throw a {@link NonUniqueResultException}
+     * 
+     * @throws NonUniqueResultException
+     */
+    @Transactional(readOnly = true)
+    public E findUniqueOrNone(E entity, SearchParameters sp) {
+        // this code is an optimization to prevent using a count
+        sp.setFirst(0);
+        sp.setMaxResults(2);
+        List<E> results = find(entity, sp);
+
+        if (results == null || results.isEmpty()) {
+            return null;
+        } else if (results.size() > 1) {
+            throw new NonUniqueResultException("Developper: You expected 1 result but we found more ! sample: " + entity);
+        } else {
+            return results.iterator().next();
+        }
+    }
+
+    @Transactional(readOnly = true)
+    public E findUniqueOrNew(SearchParameters sp) {
+        return findUniqueOrNew(getNew(), sp);
+    }
+
+    @Transactional(readOnly = true)
+    public E findUniqueOrNew(E e) {
+        return findUniqueOrNew(e, new SearchParameters());
+    }
+
+    @Transactional(readOnly = true)
+    public E findUniqueOrNew(E entity, SearchParameters sp) {
+        E result = findUniqueOrNone(entity, sp);
+        if (result != null) {
+            return result;
+        } else {
+            return getNewWithDefaults();
+        }
+    }
+
+    protected <R> Predicate getPredicate(CriteriaQuery<?> criteriaQuery, Root<E> root, CriteriaBuilder builder, E entity, SearchParameters sp) {
+        return jpaUtil.andPredicate(builder, // 
+                bySearchPredicate(root, builder, entity, sp), //
+                byMandatoryPredicate(criteriaQuery, root, builder, entity, sp));
+    }
+
+    protected <R> Predicate bySearchPredicate(Root<E> root, CriteriaBuilder builder, E entity, SearchParameters sp) {
+        return jpaUtil.concatPredicate(sp, builder, //
+                byRanges(root, builder, sp, type), //
+                byPropertySelectors(root, builder, sp), //
+                byExample(root, builder, sp, entity), //
+                byPattern(root, builder, sp, type));
+    }
+
+    protected Predicate byExample(Root<E> root, CriteriaBuilder builder, SearchParameters sp, E entity) {
+        return byExampleUtil.byExampleOnEntity(root, entity, builder, sp);
+    }
+
+    protected Predicate byPropertySelectors(Root<E> root, CriteriaBuilder builder, SearchParameters sp) {
+        return byPropertySelectorUtil.byPropertySelectors(root, builder, sp);
+    }
+
+    protected Predicate byRanges(Root<E> root, CriteriaBuilder builder, SearchParameters sp, Class<E> type) {
+        return byRangeUtil.byRanges(root, builder, sp, type);
+    }
+
+    protected Predicate byPattern(Root<E> root, CriteriaBuilder builder, SearchParameters sp, Class<E> type) {
+        return byPatternUtil.byPattern(root, builder, sp, type);
+    }
+
+    /**
+     * You may override this method to add a Predicate to the default find method.
+     */
+    protected <R> Predicate byMandatoryPredicate(CriteriaQuery<?> criteriaQuery, Root<E> root, CriteriaBuilder builder, E entity, SearchParameters sp) {
+        return null;
+    }
+
+    /**
+     * Save or update the given entity E to the repository. Assume that the entity is already present in the persistence context. No merge is done.
+     * 
+     * @param entity the entity to be saved or updated.
+     */
+    @Transactional
+    public void save(E entity) {
+        checkNotNull(entity, "The entity to save cannot be null");
+
+        // creation with auto generated id
+        if (!entity.isIdSet()) {
+            entityManager.persist(entity);
+            return;
+        }
+
+        // creation with manually assigned key
+        if (jpaUtil.isEntityIdManuallyAssigned(type) && !entityManager.contains(entity)) {
+            entityManager.persist(entity);
+            return;
+        }
+        // other cases are update
+        // the simple fact to invoke this method, from a service method annotated with @Transactional,
+        // does the job (assuming the give entity is present in the persistence context)
+    }
+
+    /**
+     * Persist the given entity.
+     */
+    @Transactional
+    public void persist(E entity) {
+        entityManager.persist(entity);
+    }
+
+    /**
+     * Merge the state of the given entity into the current persistence context.
+     */
+    @Transactional
+    public E merge(E entity) {
+        return entityManager.merge(entity);
+    }
+
+    /**
+     * Delete the given entity E from the repository.
+     * 
+     * @param entity the entity to be deleted.
+     */
+    @Transactional
+    public void delete(E entity) {
+        if (entityManager.contains(entity)) {
+            entityManager.remove(entity);
+        } else {
+            // could be a delete on a transient instance
+            E entityRef = entityManager.getReference(type, entity.getId());
+
+            if (entityRef != null) {
+                entityManager.remove(entityRef);
+            } else {
+                log.warn("Attempt to delete an instance that is not present in the database: {}", entity);
+            }
+        }
+    }
+
+    // -----------------
+    // Util
+    // -----------------
+
+    /**
+     * Helper to determine if the passed given property is null. Used mainly on binary lazy loaded property. 
+     * @param id the entity id
+     * @param property the property to check
+     */
+    @Transactional(readOnly = true)
+    public boolean isPropertyNull(PK id, SingularAttribute<E, ?> property) {
+        checkNotNull(id, "The id cannot be null");
+        checkNotNull(property, "The property cannot be null");
+        CriteriaBuilder builder = entityManager.getCriteriaBuilder();
+        CriteriaQuery<Long> criteriaQuery = builder.createQuery(Long.class);
+        Root<E> root = criteriaQuery.from(type);
+        criteriaQuery = criteriaQuery.select(builder.count(root));
+
+        // predicate
+        Predicate idPredicate = builder.equal(root.get("id"), id);
+        Predicate isNullPredicate = builder.isNull(root.get(property));
+        criteriaQuery = criteriaQuery.where(jpaUtil.andPredicate(builder, idPredicate, isNullPredicate));
+
+        TypedQuery<Long> typedQuery = entityManager.createQuery(criteriaQuery);
+        return typedQuery.getSingleResult().intValue() == 1;
+    }
+
+    /**
+     * Return the optimistic version value, if any.
+     */
+    @SuppressWarnings("unchecked")
+    @Transactional(readOnly = true)
+    public Comparable<Object> getVersion(E entity) {
+        EntityType<E> entityType = entityManager.getMetamodel().entity(type);
+        if (!entityType.hasVersionAttribute()) {
+            return null;
+        }
+        return (Comparable<Object>) jpaUtil.getValue(entity, getVersionAttribute(entityType));
+    }
+
+    /**
+     * _HACK_ too bad that JPA does not provide this entityType.getVersion();
+     * 
+     * @see http://stackoverflow.com/questions/13265094/generic-way-to-get-jpa-entity-version
+     */
+    protected SingularAttribute<? super E, ?> getVersionAttribute(EntityType<E> entityType) {
+        for (SingularAttribute<? super E, ?> sa : entityType.getSingularAttributes()) {
+            if (sa.isVersion()) {
+                return sa;
+            }
+        }
+        return null;
+    }
+
+    // -----------------
+    // Commons
+    // -----------------
+
+    /**
+     * Set hints for 2d level cache.
+     */
+    protected void applyCacheHints(TypedQuery<?> typedQuery, SearchParameters sp) {
+        if (sp.isCacheable()) {
+            typedQuery.setHint("org.hibernate.cacheable", true);
+
+            if (sp.hasCacheRegion()) {
+                typedQuery.setHint("org.hibernate.cacheRegion", sp.getCacheRegion());
+            } else {
+                typedQuery.setHint("org.hibernate.cacheRegion", cacheRegion);
+            }
+        }
+    }
+
+    @SuppressWarnings({ "unchecked", "rawtypes" })
+    protected void fetches(SearchParameters sp, Root<E> root) {
+        for (List<Attribute<?, ?>> args : sp.getFetches()) {
+            FetchParent<?, ?> from = root;
+            for (Attribute<?, ?> arg : args) {
+                boolean found = false;
+                for (Fetch<?, ?> fetch : from.getFetches()) {
+                    if (arg.equals(fetch.getAttribute())) {
+                        from = fetch;
+                        found = true;
+                        break;
+                    }
+                }
+                if (!found) {
+                    if (arg instanceof PluralAttribute) {
+                        from = from.fetch((PluralAttribute) arg, JoinType.LEFT);
+                    } else {
+                        from = from.fetch((SingularAttribute) arg, JoinType.LEFT);
+                    }
+                }
+            }
+        }
+    }
+}
\ No newline at end of file
diff --git a/src/main/generated-java/com/h2/demo/repository/support/JpaUniqueUtil.java b/src/main/generated-java/com/h2/demo/repository/support/JpaUniqueUtil.java
new file mode 100644
index 0000000..777a61b
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/repository/support/JpaUniqueUtil.java
@@ -0,0 +1,215 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-backend-jpa:src/main/java/repository/support/JpaUniqueUtil.p.vm.java
+ */
+package com.h2.demo.repository.support;
+
+import static com.google.common.collect.Iterables.concat;
+import static com.google.common.collect.Lists.newArrayList;
+import static com.google.common.collect.Maps.newHashMap;
+import static java.util.Collections.emptyList;
+import static org.apache.commons.lang.StringUtils.equalsIgnoreCase;
+import static org.hibernate.proxy.HibernateProxyHelper.getClassWithoutInitializingProxy;
+
+import java.lang.reflect.Field;
+import java.lang.reflect.Method;
+import java.util.List;
+import java.util.Map;
+
+import javax.inject.Inject;
+import javax.inject.Named;
+import javax.inject.Singleton;
+import javax.persistence.Column;
+import javax.persistence.EntityManager;
+import javax.persistence.PersistenceContext;
+import javax.persistence.Table;
+import javax.persistence.TypedQuery;
+import javax.persistence.UniqueConstraint;
+
+import org.apache.commons.lang.WordUtils;
+
+import com.h2.demo.context.LocaleHolder;
+import com.h2.demo.domain.Identifiable;
+
+@Named
+@Singleton
+public class JpaUniqueUtil {
+    @PersistenceContext
+    private EntityManager entityManager;
+    @Inject
+    private JpaUtil jpaUtil;
+
+    /**
+     * Return the error code if the given property is already present in the database, returns null otherwise.
+     */
+    public String validateSimpleUnique(Identifiable<?> entity, String property, Object value) {
+        Map<String, Object> values = newHashMap();
+        values.put(property, value);
+        return existsInDatabaseOnAllObjects(entity, values) ? simpleUniqueConstraintError(entity, property) : null;
+    }
+
+    /**
+     * Return a list of error codes for all composite unique and simple unique constraints violations.
+     */
+    public List<String> validateUniques(Identifiable<?> entity) {
+        return newArrayList(concat( //
+                validateCompositeUniqueConstraints(entity), //
+                validateSimpleUniqueConstraints(entity) //
+        ));
+    }
+
+    private List<String> validateSimpleUniqueConstraints(Identifiable<?> entity) {
+        return newArrayList(concat( //
+                validateSimpleUniqueConstraintsDefinedOnMethods(entity), //
+                validateSimpleUniqueConstraintsDefinedOnFields(entity)));
+    }
+
+    private List<String> validateSimpleUniqueConstraintsDefinedOnFields(Identifiable<?> entity) {
+        Class<?> entityClass = getClassWithoutInitializingProxy(entity);
+        List<String> errors = newArrayList();
+        for (Field field : entityClass.getFields()) {
+            Column column = field.getAnnotation(Column.class);
+            if (column != null && column.unique()) {
+                Map<String, Object> values = newHashMap();
+                values.put(field.getName(), jpaUtil.getValueFromField(field, entity));
+                if (existsInDatabaseOnAllObjects(entity, values)) {
+                    errors.add(simpleUniqueConstraintError(entity, field.getName()));
+                }
+            }
+        }
+        return errors;
+    }
+
+    private List<String> validateSimpleUniqueConstraintsDefinedOnMethods(Identifiable<?> entity) {
+        Class<?> entityClass = getClassWithoutInitializingProxy(entity);
+        List<String> errors = newArrayList();
+        for (Method method : entityClass.getMethods()) {
+            Column column = entityClass.getAnnotation(Column.class);
+            if (column != null && column.unique()) {
+                Map<String, Object> values = newHashMap();
+                String property = jpaUtil.methodToProperty(method);
+                values.put(property, invokeMethod(method, entity));
+                if (existsInDatabaseOnAllObjects(entity, values)) {
+                    errors.add(simpleUniqueConstraintError(entity, property));
+                }
+            }
+        }
+        return errors;
+    }
+
+    private String simpleUniqueConstraintError(Identifiable<?> entity, String property) {
+        return WordUtils.uncapitalize(jpaUtil.getEntityName(entity)) + "_" + property + "_already_exists";
+    }
+
+    private List<String> validateCompositeUniqueConstraints(Identifiable<?> entity) {
+        Class<?> entityClass = getClassWithoutInitializingProxy(entity);
+        Table table = entityClass.getAnnotation(Table.class);
+        if (table == null) {
+            return emptyList();
+        }
+        List<String> errors = newArrayList();
+        for (UniqueConstraint uniqueConstraint : table.uniqueConstraints()) {
+            if (!checkCompositeUniqueConstraint(entity, entityClass, uniqueConstraint)) {
+                errors.add(compositeUniqueConstraintErrorCode(entity, uniqueConstraint));
+            }
+        }
+        return errors;
+    }
+
+    private String compositeUniqueConstraintErrorCode(Identifiable<?> entity, UniqueConstraint uniqueConstraint) {
+        return WordUtils.uncapitalize(jpaUtil.getEntityName(entity)) + "_"
+                + (uniqueConstraint.name() == null ? "composite_unique_constraint_error" : uniqueConstraint.name().toLowerCase());
+    }
+
+    private boolean checkCompositeUniqueConstraint(Identifiable<?> entity, Class<?> entityClass, UniqueConstraint u) {
+        Map<String, Object> values = newHashMap();
+        values.putAll(getPropertyConstraints(entity, entityClass, u, ""));
+        return !existsInDatabaseOnAllObjects(entity, values);
+    }
+
+    private Map<String, Object> getPropertyConstraints(Object entity, Class<?> entityClass, UniqueConstraint u, String prefix) {
+        Map<String, Object> values = newHashMap();
+        for (String column : u.columnNames()) {
+            Method method = columnNameToMethod(entityClass, column);
+            if (method != null) {
+                values.put(prefix + jpaUtil.methodToProperty(method), invokeMethod(method, entity));
+            } else {
+                Field field = columnNameToField(entityClass, column);
+                if (field != null) {
+                    values.put(prefix + field.getName(), jpaUtil.getValueFromField(field, entity));
+                }
+            }
+        }
+        return values;
+    }
+
+    private Method columnNameToMethod(Class<?> clazz, String columnName) {
+        for (Method method : clazz.getMethods()) {
+            Column column = method.getAnnotation(Column.class);
+            if (column != null && equalsIgnoreCase(columnName, column.name())) {
+                return method;
+            }
+        }
+        return null;
+    }
+
+    private Field columnNameToField(Class<?> clazz, String columnName) {
+        for (Field field : clazz.getFields()) {
+            Column column = field.getAnnotation(Column.class);
+            if (equalsIgnoreCase(columnName, column.name())) {
+                return field;
+            }
+        }
+        return null;
+    }
+
+    private boolean existsInDatabaseOnAllObjects(Identifiable<?> entity, Map<String, Object> values) {
+        if (entity == null || values == null || values.isEmpty()) {
+            return false;
+        }
+        String entityName = jpaUtil.getEntityName(entity);
+        String sqlQuery = "select count(c) from " + entityName + " c where";
+        boolean first = true;
+        for (Map.Entry<String, Object> property : values.entrySet()) {
+            sqlQuery += !first ? " and " : " ";
+            if (property.getValue() instanceof String) {
+                sqlQuery += "upper(" + property.getKey() + ")=:" + property.getKey();
+            } else {
+                sqlQuery += property.getKey() + "=:" + property.getKey();
+            }
+            first = false;
+        }
+        if (entity.isIdSet()) {
+            if (!first) {
+                sqlQuery += " and";
+            }
+            sqlQuery += " id<>:id";
+        }
+        TypedQuery<Long> query = entityManager.createQuery(sqlQuery, Long.class);
+        for (Map.Entry<String, Object> property : values.entrySet()) {
+            String propertyName = property.getKey();
+            Object value = property.getValue();
+            if (value instanceof String) {
+                value = ((String) value).toUpperCase(LocaleHolder.getLocale());
+            }
+            query.setParameter(propertyName, value);
+        }
+        if (entity.isIdSet()) {
+            query.setParameter("id", entity.getId());
+        }
+        return query.getSingleResult() > 0;
+    }
+
+    @SuppressWarnings("unchecked")
+    private <T> T invokeMethod(Method method, Object target) {
+        try {
+            return (T) method.invoke(target);
+        } catch (Exception e) {
+            throw new RuntimeException(e);
+        }
+    }
+}
\ No newline at end of file
diff --git a/src/main/generated-java/com/h2/demo/repository/support/JpaUtil.java b/src/main/generated-java/com/h2/demo/repository/support/JpaUtil.java
new file mode 100644
index 0000000..0207634
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/repository/support/JpaUtil.java
@@ -0,0 +1,343 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-backend-jpa:src/main/java/repository/support/JpaUtil.p.vm.java
+ */
+package com.h2.demo.repository.support;
+
+import static com.google.common.base.Predicates.notNull;
+import static com.google.common.base.Throwables.propagate;
+import static com.google.common.collect.Iterables.filter;
+import static com.google.common.collect.Iterables.toArray;
+import static com.google.common.collect.Lists.newArrayList;
+import static com.google.common.collect.Maps.newHashMap;
+import static java.lang.reflect.Modifier.isPublic;
+import static org.apache.commons.lang.StringUtils.isBlank;
+import static org.hibernate.proxy.HibernateProxyHelper.getClassWithoutInitializingProxy;
+
+import java.beans.PropertyDescriptor;
+import java.lang.reflect.Field;
+import java.lang.reflect.Method;
+import java.util.List;
+import java.util.Map;
+
+import javax.inject.Named;
+import javax.inject.Singleton;
+import javax.persistence.EmbeddedId;
+import javax.persistence.Entity;
+import javax.persistence.GeneratedValue;
+import javax.persistence.Id;
+import javax.persistence.Query;
+import javax.persistence.criteria.CriteriaBuilder;
+import javax.persistence.criteria.Expression;
+import javax.persistence.criteria.Fetch;
+import javax.persistence.criteria.FetchParent;
+import javax.persistence.criteria.From;
+import javax.persistence.criteria.Join;
+import javax.persistence.criteria.JoinType;
+import javax.persistence.criteria.Path;
+import javax.persistence.criteria.Predicate;
+import javax.persistence.criteria.Root;
+import javax.persistence.metamodel.Attribute;
+import javax.persistence.metamodel.ManagedType;
+import javax.persistence.metamodel.PluralAttribute;
+import javax.persistence.metamodel.SingularAttribute;
+
+import org.apache.commons.beanutils.MethodUtils;
+import org.apache.commons.beanutils.PropertyUtils;
+import org.apache.commons.lang.WordUtils;
+import org.springframework.context.annotation.Lazy;
+
+import com.h2.demo.context.LocaleHolder;
+import com.h2.demo.domain.Identifiable;
+
+@Named
+@Singleton
+@Lazy(false)
+public class JpaUtil {
+
+    private Map<Class<?>, String> compositePkCache = newHashMap();
+    private static JpaUtil instance;
+
+    public static JpaUtil getInstance() {
+        return instance;
+    }
+
+    public JpaUtil() {
+        instance = this;
+    }
+
+    public boolean isEntityIdManuallyAssigned(Class<?> type) {
+        for (Method method : type.getMethods()) {
+            if (isPrimaryKey(method)) {
+                return isManuallyAssigned(method);
+            }
+        }
+        return false; // no pk found, should not happen
+    }
+
+    private boolean isPrimaryKey(Method method) {
+        return isPublic(method.getModifiers()) && (method.getAnnotation(Id.class) != null || method.getAnnotation(EmbeddedId.class) != null);
+    }
+
+    private boolean isManuallyAssigned(Method method) {
+        if (method.getAnnotation(Id.class) != null) {
+            return method.getAnnotation(GeneratedValue.class) == null;
+        }
+
+        return method.getAnnotation(EmbeddedId.class) != null;
+    }
+
+    public Predicate concatPredicate(SearchParameters sp, CriteriaBuilder builder, Predicate... predicatesNullAllowed) {
+        return concatPredicate(sp, builder, newArrayList(predicatesNullAllowed));
+    }
+
+    public Predicate concatPredicate(SearchParameters sp, CriteriaBuilder builder, Iterable<Predicate> predicatesNullAllowed) {
+        if (sp.isAndMode()) {
+            return andPredicate(builder, predicatesNullAllowed);
+        } else {
+            return orPredicate(builder, predicatesNullAllowed);
+        }
+    }
+
+    public Predicate andPredicate(CriteriaBuilder builder, Predicate... predicatesNullAllowed) {
+        return andPredicate(builder, newArrayList(predicatesNullAllowed));
+    }
+
+    public Predicate orPredicate(CriteriaBuilder builder, Predicate... predicatesNullAllowed) {
+        return orPredicate(builder, newArrayList(predicatesNullAllowed));
+    }
+
+    public Predicate andPredicate(CriteriaBuilder builder, Iterable<Predicate> predicatesNullAllowed) {
+        List<Predicate> predicates = newArrayList(filter(predicatesNullAllowed, notNull()));
+        if (predicates == null || predicates.isEmpty()) {
+            return null;
+        } else if (predicates.size() == 1) {
+            return predicates.get(0);
+        } else {
+            return builder.and(toArray(predicates, Predicate.class));
+        }
+    }
+
+    public Predicate orPredicate(CriteriaBuilder builder, Iterable<Predicate> predicatesNullAllowed) {
+        List<Predicate> predicates = newArrayList(filter(predicatesNullAllowed, notNull()));
+        if (predicates == null || predicates.isEmpty()) {
+            return null;
+        } else if (predicates.size() == 1) {
+            return predicates.get(0);
+        } else {
+            return builder.or(toArray(predicates, Predicate.class));
+        }
+    }
+
+    public <E> Predicate stringPredicate(Expression<String> path, Object attrValue, SearchMode searchMode, SearchParameters sp, CriteriaBuilder builder) {
+        if (sp.isCaseInsensitive()) {
+            path = builder.lower(path);
+            attrValue = ((String) attrValue).toLowerCase(LocaleHolder.getLocale());
+        }
+
+        switch (searchMode != null ? searchMode : sp.getSearchMode()) {
+        case EQUALS:
+            return builder.equal(path, attrValue);
+        case ENDING_LIKE:
+            return builder.like(path, "%" + attrValue);
+        case STARTING_LIKE:
+            return builder.like(path, attrValue + "%");
+        case ANYWHERE:
+            return builder.like(path, "%" + attrValue + "%");
+        case LIKE:
+            return builder.like(path, (String) attrValue); // assume user provide the wild cards
+        default:
+            throw new IllegalStateException("expecting a search mode!");
+        }
+    }
+
+    public <E> Predicate stringPredicate(Expression<String> path, Object attrValue, SearchParameters sp, CriteriaBuilder builder) {
+        return stringPredicate(path, attrValue, null, sp, builder);
+    }
+
+    /**
+     * Convert the passed propertyPath into a JPA path.
+     * <p>
+     * Note: JPA will do joins if the property is in an associated entity.
+     */
+    @SuppressWarnings("unchecked")
+    public <E, F> Path<F> getPath(Root<E> root, List<Attribute<?, ?>> attributes) {
+        Path<?> path = root;
+        for (Attribute<?, ?> attribute : attributes) {
+            boolean found = false;
+            if (path instanceof FetchParent) {
+                for (Fetch<E, ?> fetch : ((FetchParent<?, E>) path).getFetches()) {
+                    if (attribute.getName().equals(fetch.getAttribute().getName()) && (fetch instanceof Join<?, ?>)) {
+                        path = (Join<E, ?>) fetch;
+                        found = true;
+                        break;
+                    }
+                }
+            }
+            if (!found) {
+                if (attribute instanceof PluralAttribute) {
+                    path = ((From<?, ?>) path).join(attribute.getName(), JoinType.LEFT);
+                } else {
+                    path = path.get(attribute.getName());
+                }
+            }
+        }
+        return (Path<F>) path;
+    }
+
+    public void verifyPath(Attribute<?, ?>... path) {
+        verifyPath(newArrayList(path));
+    }
+
+    public void verifyPath(List<Attribute<?, ?>> path) {
+        List<Attribute<?, ?>> attributes = newArrayList(path);
+        Class<?> from = null;
+        if (attributes.get(0).isCollection()) {
+            from = ((PluralAttribute) attributes.get(0)).getElementType().getJavaType();
+        } else {
+            from = attributes.get(0).getJavaType();
+        }
+        attributes.remove(0);
+        for (Attribute<?, ?> attribute : attributes) {
+            if (!attribute.getDeclaringType().getJavaType().isAssignableFrom(from)) {
+                throw new IllegalStateException("Wrong path.");
+            }
+            from = attribute.getJavaType();
+        }
+    }
+
+    public <T extends Identifiable<?>> String compositePkPropertyName(T entity) {
+        Class<?> entityClass = entity.getClass();
+        if (compositePkCache.containsKey(entityClass)) {
+            return compositePkCache.get(entityClass);
+        }
+
+        for (Method m : entity.getClass().getMethods()) {
+            if (m.getAnnotation(EmbeddedId.class) != null) {
+                String propertyName = methodToProperty(m);
+                compositePkCache.put(entityClass, propertyName);
+                return propertyName;
+            }
+        }
+        for (Field f : entity.getClass().getFields()) {
+            if (f.getAnnotation(EmbeddedId.class) != null) {
+                String propertyName = f.getName();
+                compositePkCache.put(entityClass, propertyName);
+                return propertyName;
+            }
+        }
+        compositePkCache.put(entityClass, null);
+        return null;
+    }
+
+    public <T> boolean isPk(ManagedType<T> mt, SingularAttribute<? super T, ?> attr) {
+        try {
+            Method m = MethodUtils.getAccessibleMethod(mt.getJavaType(), "get" + WordUtils.capitalize(attr.getName()), (Class<?>) null);
+            if (m != null && m.getAnnotation(Id.class) != null) {
+                return true;
+            }
+
+            Field field = mt.getJavaType().getField(attr.getName());
+            return field.getAnnotation(Id.class) != null;
+        } catch (Exception e) {
+            return false;
+        }
+    }
+
+    public <T> Object getValue(T example, Attribute<? super T, ?> attr) {
+        try {
+            if (attr.getJavaMember() instanceof Method) {
+                return ((Method) attr.getJavaMember()).invoke(example);
+            } else {
+                return ((Field) attr.getJavaMember()).get(example);
+            }
+        } catch (Exception e) {
+            throw propagate(e);
+        }
+    }
+
+    public <T, A> SingularAttribute<? super T, A> attribute(ManagedType<? super T> mt, Attribute<? super T, A> attr) {
+        return mt.getSingularAttribute(attr.getName(), attr.getJavaType());
+    }
+
+    public <T> SingularAttribute<? super T, String> stringAttribute(ManagedType<? super T> mt, Attribute<? super T, ?> attr) {
+        return mt.getSingularAttribute(attr.getName(), String.class);
+    }
+
+    public <T extends Identifiable<?>> boolean hasSimplePk(T entity) {
+        for (Method m : entity.getClass().getMethods()) {
+            if (m.getAnnotation(Id.class) != null) {
+                return true;
+            }
+        }
+        for (Field f : entity.getClass().getFields()) {
+            if (f.getAnnotation(Id.class) != null) {
+                return true;
+            }
+        }
+        return false;
+    }
+
+    public String[] toNames(Attribute<?, ?>... attributes) {
+        return toNamesList(newArrayList(attributes)).toArray(new String[0]);
+    }
+
+    public List<String> toNamesList(List<Attribute<?, ?>> attributes) {
+        List<String> ret = newArrayList();
+        for (Attribute<?, ?> attribute : attributes) {
+            ret.add(attribute.getName());
+        }
+        return ret;
+    }
+
+    public String getEntityName(Identifiable<?> entity) {
+        Entity entityAnnotation = entity.getClass().getAnnotation(Entity.class);
+        if (isBlank(entityAnnotation.name())) {
+            return getClassWithoutInitializingProxy(entity).getSimpleName();
+        }
+        return entityAnnotation.name();
+    }
+
+    public String methodToProperty(Method m) {
+        PropertyDescriptor[] pds = PropertyUtils.getPropertyDescriptors(m.getDeclaringClass());
+        for (PropertyDescriptor pd : pds) {
+            if (m.equals(pd.getReadMethod()) || m.equals(pd.getWriteMethod())) {
+                return pd.getName();
+            }
+        }
+        return null;
+    }
+
+    public Object getValueFromField(Field field, Object object) {
+        boolean accessible = field.isAccessible();
+        try {
+            return getField(field, object);
+        } finally {
+            field.setAccessible(accessible);
+        }
+    }
+
+    public void applyPagination(Query query, SearchParameters sp) {
+        if (sp.getFirst() > 0) {
+            query.setFirstResult(sp.getFirst());
+        }
+        if (sp.getPageSize() > 0) {
+            query.setMaxResults(sp.getPageSize());
+        } else if (sp.getMaxResults() > 0) {
+            query.setMaxResults(sp.getMaxResults());
+        }
+    }
+
+    @SuppressWarnings("unchecked")
+    private <T> T getField(Field field, Object target) {
+        try {
+            return (T) field.get(target);
+        } catch (Exception e) {
+            throw new RuntimeException(e);
+        }
+    }
+}
\ No newline at end of file
diff --git a/src/main/generated-java/com/h2/demo/repository/support/MetamodelUtil.java b/src/main/generated-java/com/h2/demo/repository/support/MetamodelUtil.java
new file mode 100644
index 0000000..addb4cb
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/repository/support/MetamodelUtil.java
@@ -0,0 +1,152 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-backend-jpa:src/main/java/repository/support/MetamodelUtil.p.vm.java
+ */
+package com.h2.demo.repository.support;
+
+import static com.google.common.collect.Lists.newArrayList;
+import static com.google.common.collect.Maps.newHashMap;
+
+import java.lang.reflect.AccessibleObject;
+import java.lang.reflect.Field;
+import java.util.Collection;
+import java.util.List;
+import java.util.Map;
+
+import javax.inject.Named;
+import javax.inject.Singleton;
+import javax.persistence.CascadeType;
+import javax.persistence.ManyToMany;
+import javax.persistence.ManyToOne;
+import javax.persistence.OneToMany;
+import javax.persistence.OneToOne;
+import javax.persistence.metamodel.Attribute;
+import javax.persistence.metamodel.PluralAttribute;
+import javax.persistence.metamodel.SingularAttribute;
+
+import org.springframework.context.annotation.Lazy;
+
+import com.google.common.base.Splitter;
+
+@Named
+@Singleton
+@Lazy(false)
+public class MetamodelUtil {
+    private static MetamodelUtil instance;
+
+    public static MetamodelUtil getInstance() {
+        return instance;
+    }
+
+    private Map<Class<?>, Class<?>> metamodelCache = newHashMap();
+
+    public MetamodelUtil() {
+        instance = this;
+    }
+
+    public SingularAttribute<?, ?> toAttribute(String property, Class<?> from) {
+        try {
+            Class<?> metamodelClass = getCachedClass(from);
+            Field field = metamodelClass.getField(property);
+            return (SingularAttribute<?, ?>) field.get(null);
+        } catch (Exception e) {
+            throw new IllegalArgumentException(e);
+        }
+    }
+
+    public List<Attribute<?, ?>> toAttributes(String path, Class<?> from) {
+        try {
+            List<Attribute<?, ?>> attributes = newArrayList();
+            Class<?> current = from;
+            for (String pathItem : Splitter.on(".").split(path)) {
+                Class<?> metamodelClass = getCachedClass(current);
+                Field field = metamodelClass.getField(pathItem);
+                Attribute<?, ?> attribute = (Attribute<?, ?>) field.get(null);
+                attributes.add(attribute);
+                if (attribute instanceof PluralAttribute) {
+                    current = ((PluralAttribute<?, ?, ?>) attribute).getElementType().getJavaType();
+                } else {
+                    current = attribute.getJavaType();
+                }
+            }
+            return attributes;
+        } catch (Exception e) {
+            throw new IllegalArgumentException(e);
+        }
+    }
+
+    public String toPath(List<Attribute<?, ?>> attributes) {
+        StringBuilder path = new StringBuilder();
+        for (Attribute<?, ?> attribute : attributes) {
+            if (path.length() > 0) {
+                path.append(".");
+            }
+            path.append(attribute.getName());
+        }
+        return path.toString();
+    }
+
+    private Class<?> getCachedClass(Class<?> current) throws ClassNotFoundException {
+        if (metamodelCache.containsKey(current)) {
+            return metamodelCache.get(current);
+        }
+        Class<?> metamodelClass = Class.forName(current.getName() + "_");
+        metamodelCache.put(current, metamodelClass);
+        return metamodelClass;
+    }
+
+    /**
+     * Retrieves cascade from metamodel attribute
+     * 
+     * @return an empty collection if no jpa relation annotation can be found.
+     */
+    public Collection<CascadeType> getCascades(PluralAttribute<?, ?, ?> attribute) {
+        if (attribute.getJavaMember() instanceof AccessibleObject) {
+            AccessibleObject accessibleObject = (AccessibleObject) attribute.getJavaMember();
+            OneToMany oneToMany = accessibleObject.getAnnotation(OneToMany.class);
+            if (oneToMany != null) {
+                return newArrayList(oneToMany.cascade());
+            }
+            ManyToMany manyToMany = accessibleObject.getAnnotation(ManyToMany.class);
+            if (manyToMany != null) {
+                return newArrayList(manyToMany.cascade());
+            }
+        }
+        return newArrayList();
+    }
+
+    /**
+     * Retrieves cascade from metamodel attribute on a xToMany relation.
+     * 
+     * @return an empty collection if no jpa relation annotation can be found.
+     */
+    public Collection<CascadeType> getCascades(SingularAttribute<?, ?> attribute) {
+        if (attribute.getJavaMember() instanceof AccessibleObject) {
+            AccessibleObject accessibleObject = (AccessibleObject) attribute.getJavaMember();
+            OneToOne oneToOne = accessibleObject.getAnnotation(OneToOne.class);
+            if (oneToOne != null) {
+                return newArrayList(oneToOne.cascade());
+            }
+            ManyToOne manyToOne = accessibleObject.getAnnotation(ManyToOne.class);
+            if (manyToOne != null) {
+                return newArrayList(manyToOne.cascade());
+            }
+        }
+        return newArrayList();
+    }
+
+    public boolean isOrphanRemoval(PluralAttribute<?, ?, ?> attribute) {
+        if (attribute.getJavaMember() instanceof AccessibleObject) {
+            AccessibleObject accessibleObject = (AccessibleObject) attribute.getJavaMember();
+            OneToMany oneToMany = accessibleObject.getAnnotation(OneToMany.class);
+            if (oneToMany != null) {
+                return oneToMany.orphanRemoval();
+            }
+        }
+        return true;
+    }
+}
diff --git a/src/main/generated-java/com/h2/demo/repository/support/OrderBy.java b/src/main/generated-java/com/h2/demo/repository/support/OrderBy.java
new file mode 100644
index 0000000..bad40ff
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/repository/support/OrderBy.java
@@ -0,0 +1,91 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-backend-jpa:src/main/java/repository/support/OrderBy.p.vm.java
+ */
+package com.h2.demo.repository.support;
+
+import static com.google.common.base.Preconditions.checkNotNull;
+import static com.h2.demo.repository.support.OrderByDirection.ASC;
+import static com.h2.demo.repository.support.OrderByDirection.DESC;
+
+import java.io.Serializable;
+import java.util.List;
+
+import javax.persistence.metamodel.Attribute;
+
+import org.apache.commons.lang.builder.ToStringBuilder;
+
+/**
+ * Holder class for search ordering used by the {@link SearchParameters}.
+ * When used with {@link NamedQueryUtil}, you pass column name. For other usage, pass the property name.
+ */
+public class OrderBy implements Serializable {
+    private static final long serialVersionUID = 1L;
+    private final Path path;
+    private OrderByDirection direction = ASC;
+
+    public OrderBy(OrderByDirection direction, Attribute<?, ?>... attributes) {
+        this.direction = checkNotNull(direction);
+        this.path = new Path(checkNotNull(attributes));
+    }
+
+    public OrderBy(OrderByDirection direction, String path, Class<?> from) {
+        this.direction = checkNotNull(direction);
+        this.path = new Path(checkNotNull(path), checkNotNull(from));
+    }
+
+    public List<Attribute<?, ?>> getAttributes() {
+        return path.getAttributes();
+    }
+
+    public String getPath() {
+        return path.getPath();
+    }
+
+    public OrderByDirection getDirection() {
+        return direction;
+    }
+
+    public boolean isOrderDesc() {
+        return DESC == direction;
+    }
+
+    @Override
+    public int hashCode() {
+        final int prime = 31;
+        int result = 1;
+        result = prime * result + ((path == null) ? 0 : path.hashCode());
+        return result;
+    }
+
+    @Override
+    public boolean equals(Object obj) {
+        if (this == obj) {
+            return true;
+        }
+        if (obj == null) {
+            return false;
+        }
+        if (getClass() != obj.getClass()) {
+            return false;
+        }
+        OrderBy other = (OrderBy) obj;
+        if (path == null) {
+            if (other.path != null) {
+                return false;
+            }
+        } else if (!path.equals(other.path)) {
+            return false;
+        }
+        return true;
+    }
+
+    @Override
+    public String toString() {
+        return ToStringBuilder.reflectionToString(this);
+    }
+}
\ No newline at end of file
diff --git a/src/main/generated-java/com/h2/demo/repository/support/OrderByDirection.java b/src/main/generated-java/com/h2/demo/repository/support/OrderByDirection.java
new file mode 100644
index 0000000..bfac49a
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/repository/support/OrderByDirection.java
@@ -0,0 +1,13 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-backend-jpa:src/main/java/repository/support/OrderByDirection.p.vm.java
+ */
+package com.h2.demo.repository.support;
+
+public enum OrderByDirection {
+    ASC, DESC;
+}
diff --git a/src/main/generated-java/com/h2/demo/repository/support/OrderByUtil.java b/src/main/generated-java/com/h2/demo/repository/support/OrderByUtil.java
new file mode 100644
index 0000000..e4a8e5b
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/repository/support/OrderByUtil.java
@@ -0,0 +1,41 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-backend-jpa:src/main/java/repository/support/OrderByUtil.p.vm.java
+ */
+package com.h2.demo.repository.support;
+
+import static com.google.common.collect.Lists.newArrayList;
+
+import java.util.List;
+
+import javax.inject.Inject;
+import javax.inject.Named;
+import javax.inject.Singleton;
+import javax.persistence.criteria.CriteriaBuilder;
+import javax.persistence.criteria.Order;
+import javax.persistence.criteria.Path;
+import javax.persistence.criteria.Root;
+
+/**
+ * Helper to create list of {@link Order} out of {@link OrderBy}s.
+ */
+@Named
+@Singleton
+public class OrderByUtil {
+
+    @Inject
+    private JpaUtil jpaUtil;
+
+    public <E> List<Order> buildJpaOrders(Iterable<OrderBy> orders, Root<E> root, CriteriaBuilder builder, SearchParameters sp) {
+        List<Order> jpaOrders = newArrayList();
+        for (OrderBy ob : orders) {
+            Path<?> path = jpaUtil.getPath(root, ob.getAttributes());
+            jpaOrders.add(ob.isOrderDesc() ? builder.desc(path) : builder.asc(path));
+        }
+        return jpaOrders;
+    }
+}
\ No newline at end of file
diff --git a/src/main/generated-java/com/h2/demo/repository/support/Path.java b/src/main/generated-java/com/h2/demo/repository/support/Path.java
new file mode 100644
index 0000000..1fc411c
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/repository/support/Path.java
@@ -0,0 +1,87 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-backend-jpa:src/main/java/repository/support/Path.p.vm.java
+ */
+package com.h2.demo.repository.support;
+
+import static com.google.common.base.Preconditions.checkNotNull;
+import static com.google.common.collect.Lists.newArrayList;
+
+import java.io.Serializable;
+import java.util.List;
+
+import javax.persistence.metamodel.Attribute;
+
+/**
+ * Holder class for path used by the {@link OrderBy}, {@link PropertySelector}, {@link TermSelector} and {@link SearchParameters}.
+ */
+public class Path implements Serializable {
+    private static final long serialVersionUID = 1L;
+    private final String path;
+    private final Class<?> from;
+    private transient List<Attribute<?, ?>> attributes;
+
+    public Path(Attribute<?, ?>... attributes) {
+        this(newArrayList(attributes));
+    }
+
+    public Path(List<Attribute<?, ?>> attributes) {
+        JpaUtil.getInstance().verifyPath(checkNotNull(attributes));
+        this.attributes = newArrayList(attributes);
+        this.path = MetamodelUtil.getInstance().toPath(attributes);
+        this.from = attributes.get(0).getDeclaringType().getJavaType();
+    }
+
+    public Path(String path, Class<?> from) {
+        this.path = path;
+        this.from = from;
+        // to verify path
+        getAttributes();
+    }
+
+    public List<Attribute<?, ?>> getAttributes() {
+        if (attributes == null) {
+            attributes = MetamodelUtil.getInstance().toAttributes(path, from);
+        }
+        return attributes;
+    }
+
+    public String getPath() {
+        return path;
+    }
+
+    @Override
+    public int hashCode() {
+        final int prime = 31;
+        int result = 1;
+        result = prime * result + ((path == null) ? 0 : path.hashCode());
+        return result;
+    }
+
+    @Override
+    public boolean equals(Object obj) {
+        if (this == obj) {
+            return true;
+        }
+        if (obj == null) {
+            return false;
+        }
+        if (getClass() != obj.getClass()) {
+            return false;
+        }
+        Path other = (Path) obj;
+        if (path == null) {
+            if (other.path != null) {
+                return false;
+            }
+        } else if (!path.equals(other.path)) {
+            return false;
+        }
+        return true;
+    }
+
+}
\ No newline at end of file
diff --git a/src/main/generated-java/com/h2/demo/repository/support/PropertySelector.java b/src/main/generated-java/com/h2/demo/repository/support/PropertySelector.java
new file mode 100644
index 0000000..84d3cfb
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/repository/support/PropertySelector.java
@@ -0,0 +1,179 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-backend-jpa:src/main/java/repository/support/PropertySelector.p.vm.java
+ */
+package com.h2.demo.repository.support;
+
+import static com.google.common.base.Preconditions.checkNotNull;
+import static com.google.common.collect.Lists.newArrayList;
+
+import java.io.Serializable;
+import java.util.List;
+
+import javax.persistence.metamodel.Attribute;
+
+import org.apache.commons.lang.builder.ToStringBuilder;
+
+import com.h2.demo.domain.LabelizedEnum;
+
+/**
+ * Used to construct OR predicate for a property value. In other words you can search
+ * all entities E having a given property set to one of the selected values.
+ */
+public class PropertySelector<E, F> implements Serializable {
+    /**
+     * {@link PropertySelector} builder
+     */
+    public static <E, F> PropertySelector<E, F> newPropertySelector(Attribute<?, ?>... fields) {
+        return new PropertySelector<E, F>(checkNotNull(fields));
+    }
+
+    /**
+     * {@link PropertySelector} builder
+     */
+    public static <E, F> PropertySelector<E, F> newPropertySelector(String path, Class<E> from) {
+        return new PropertySelector<E, F>(path, from);
+    }
+
+    /**
+     * {@link PropertySelector} builder
+     */
+    public static <E, F> PropertySelector<E, F> newPropertySelector(boolean orMode, Attribute<?, ?>... fields) {
+        PropertySelector<E, F> ps = new PropertySelector<E, F>(checkNotNull(fields));
+        return ps.orMode(orMode);
+    }
+
+    private static final long serialVersionUID = 1L;
+
+    private final Path path;
+    private List<F> selected = newArrayList();
+    private SearchMode searchMode; // for string property only.
+    private Boolean notIncludingNull;
+    private boolean orMode = true;
+
+    public PropertySelector(Attribute<?, ?>... attributes) {
+        this.path = new Path(checkNotNull(attributes));
+    }
+
+    public PropertySelector(String path, Class<E> from) {
+        this.path = new Path(path, from);
+    }
+
+    public List<Attribute<?, ?>> getAttributes() {
+        return path.getAttributes();
+    }
+
+    public boolean isNotIncludingNullSet() {
+        return notIncludingNull != null;
+    }
+
+    public Boolean isNotIncludingNull() {
+        return notIncludingNull;
+    }
+
+    public PropertySelector<E, F> withoutNull() {
+        this.notIncludingNull = true;
+        return this;
+    }
+
+    /**
+     * Get the possible candidates for property.
+     */
+    public List<F> getSelected() {
+        return selected;
+    }
+
+    public PropertySelector<E, F> add(F object) {
+        this.selected.add(object);
+        return this;
+    }
+
+    /**
+     * Set the possible candidates for property.
+     */
+    public void setSelected(List<F> selected) {
+        this.selected = selected;
+    }
+
+    public PropertySelector<E, F> selected(F... selected) {
+        setSelected(newArrayList(selected));
+        return this;
+    }
+
+    public boolean isNotEmpty() {
+        return selected != null && !selected.isEmpty();
+    }
+
+    public void clearSelected() {
+        if (selected != null) {
+            selected.clear();
+        }
+    }
+
+    @SuppressWarnings("unchecked")
+    public void setValue(F value) {
+        this.selected = newArrayList(value);
+    }
+
+    public F getValue() {
+        return isNotEmpty() ? selected.get(0) : null;
+    }
+
+    public boolean isBoolean() {
+        return isType(Boolean.class);
+    }
+
+    public boolean isLabelizedEnum() {
+        return isType(LabelizedEnum.class);
+    }
+
+    public boolean isString() {
+        return isType(String.class);
+    }
+
+    public boolean isNumber() {
+        return isType(Number.class);
+    }
+
+    public boolean isType(Class<?> type) {
+        return type.isAssignableFrom(getAttributes().get(getAttributes().size() - 1).getJavaType());
+    }
+
+    public SearchMode getSearchMode() {
+        return searchMode;
+    }
+
+    /**
+     * In case, the field's type is a String, you can set a searchMode to use. It is null by default.
+     */
+    public void setSearchMode(SearchMode searchMode) {
+        this.searchMode = searchMode;
+    }
+
+    public PropertySelector<E, F> searchMode(SearchMode searchMode) {
+        setSearchMode(searchMode);
+        return this;
+    }
+
+    public boolean isOrMode() {
+        return orMode;
+    }
+
+    public void setOrMode(boolean orMode) {
+        this.orMode = orMode;
+    }
+
+    public PropertySelector<E, F> orMode(boolean orMode) {
+        setOrMode(orMode);
+        return this;
+    }
+
+    @Override
+    public String toString() {
+        return ToStringBuilder.reflectionToString(this);
+    }
+}
\ No newline at end of file
diff --git a/src/main/generated-java/com/h2/demo/repository/support/Range.java b/src/main/generated-java/com/h2/demo/repository/support/Range.java
new file mode 100644
index 0000000..f6f9f2c
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/repository/support/Range.java
@@ -0,0 +1,171 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-backend-jpa:src/main/java/repository/support/Range.p.vm.java
+ */
+package com.h2.demo.repository.support;
+
+import java.io.Serializable;
+import java.util.List;
+
+import javax.persistence.metamodel.Attribute;
+
+/**
+ * Range support for {@link Comparable} types.
+ */
+@SuppressWarnings("rawtypes")
+public class Range<E, D extends Comparable> implements Serializable {
+
+    /**
+     * {@link Range} builder
+     */
+    public static <E, D extends Comparable> Range<E, D> newRange(Attribute<?, ?>... fields) {
+        return new Range<E, D>(fields);
+    }
+
+    private static final long serialVersionUID = 1L;
+
+    private final Path path;
+    private D from;
+    private D to;
+    private Boolean includeNull;
+
+    /**
+     * Constructs a new {@link Range} with no boundaries and no restrictions on field's nullability.
+     * @param attributes the path to the attribute of an existing entity.
+     */
+    public Range(Attribute<?, ?>... attributes) {
+        path = new Path(attributes);
+    }
+
+    /**
+     * Constructs a new Range.
+     *
+     * @param from the lower boundary of this range. Null means no lower boundary.
+     * @param to the upper boundary of this range. Null means no upper boundary.
+     * @param attributes the path to the attribute of an existing entity.
+     */
+    public Range(D from, D to, Attribute<?, ?>... attributes) {
+        this(attributes);
+        this.from = from;
+        this.to = to;
+    }
+
+    /**
+     * Constructs a new Range.
+     *
+     * @param from the lower boundary of this range. Null means no lower boundary.
+     * @param to the upper boundary of this range. Null means no upper boundary.
+     * @param includeNull tells whether null should be filtered out or not.
+     * @param attributes the path to the attribute of an existing entity.
+     */
+    public Range(D from, D to, Boolean includeNull, Attribute<?, ?>... attributes) {
+        this(from, to, attributes);
+        this.includeNull = includeNull;
+    }
+
+    /**
+     * Constructs a new Range by copy.
+     */
+    public Range(Range<E, D> other) {
+        this.path = other.path;
+        this.from = other.from;
+        this.to = other.to;
+        this.includeNull = other.includeNull;
+    }
+
+    /**
+     * @return the entity's attribute this {@link Range} refers to.
+     */
+    public List<Attribute<?, ?>> getAttributes() {
+        return path.getAttributes();
+    }
+
+    /**
+     * @return the lower range boundary or null for unbound lower range.
+     */
+    public D getFrom() {
+        return from;
+    }
+
+    /**
+     * Sets the lower range boundary. Accepts null for unbound lower range.
+     */
+    public void setFrom(D from) {
+        this.from = from;
+    }
+
+    public Range<E, D> from(D from) {
+        setFrom(from);
+        return this;
+    }
+
+    public boolean isFromSet() {
+        return getFrom() != null;
+    }
+
+    /**
+     * @return the upper range boundary or null for unbound upper range.
+     */
+    public D getTo() {
+        return to;
+    }
+
+    public Range<E, D> to(D to) {
+        setTo(to);
+        return this;
+    }
+
+    /**
+     * Sets the upper range boundary. Accepts null for unbound upper range.
+     */
+    public void setTo(D to) {
+        this.to = to;
+    }
+
+    public boolean isToSet() {
+        return getTo() != null;
+    }
+
+    public void setIncludeNull(Boolean includeNull) {
+        this.includeNull = includeNull;
+    }
+
+    public Range<E, D> includeNull(Boolean includeNull) {
+        setIncludeNull(includeNull);
+        return this;
+    }
+
+    public Boolean getIncludeNull() {
+        return includeNull;
+    }
+
+    public boolean isIncludeNullSet() {
+        return includeNull != null;
+    }
+
+    public boolean isBetween() {
+        return isFromSet() && isToSet();
+    }
+
+    public boolean isSet() {
+        return isFromSet() || isToSet() || isIncludeNullSet();
+    }
+
+    @SuppressWarnings("unchecked")
+    public boolean isValid() {
+        if (isBetween()) {
+            return getFrom().compareTo(getTo()) <= 0;
+        }
+        return true;
+    }
+
+    public void resetRange() {
+        from = null;
+        to = null;
+        includeNull = null;
+    }
+}
\ No newline at end of file
diff --git a/src/main/generated-java/com/h2/demo/repository/support/RepositoryLocator.java b/src/main/generated-java/com/h2/demo/repository/support/RepositoryLocator.java
new file mode 100644
index 0000000..a3bdcff
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/repository/support/RepositoryLocator.java
@@ -0,0 +1,45 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-backend-jpa:src/main/java/repository/support/RepositoryLocator.p.vm.java
+ */
+package com.h2.demo.repository.support;
+
+import static com.google.common.collect.Maps.newHashMap;
+import static org.hibernate.proxy.HibernateProxyHelper.getClassWithoutInitializingProxy;
+
+import java.io.Serializable;
+import java.util.List;
+import java.util.Map;
+
+import javax.inject.Inject;
+import javax.inject.Named;
+import javax.inject.Singleton;
+
+import com.h2.demo.domain.Identifiable;
+
+@Named
+@Singleton
+public class RepositoryLocator {
+    private Map<Class<?>, GenericRepository<?, ?>> repositories = newHashMap();
+
+    @Inject
+    void buildCache(List<GenericRepository<?, ?>> registredRepositories) {
+        for (GenericRepository<?, ?> repository : registredRepositories) {
+            repositories.put(repository.getType(), repository);
+        }
+    }
+
+    @SuppressWarnings("unchecked")
+    public <PK extends Serializable, E extends Identifiable<PK>> GenericRepository<E, PK> getRepository(Class<? extends E> clazz) {
+        return (GenericRepository<E, PK>) repositories.get(clazz);
+    }
+
+    @SuppressWarnings("unchecked")
+    public <PK extends Serializable, E extends Identifiable<PK>> GenericRepository<E, PK> getRepository(E entity) {
+        return (GenericRepository<E, PK>) repositories.get(getClassWithoutInitializingProxy(entity));
+    }
+}
\ No newline at end of file
diff --git a/src/main/generated-java/com/h2/demo/repository/support/SearchMode.java b/src/main/generated-java/com/h2/demo/repository/support/SearchMode.java
new file mode 100644
index 0000000..728ac66
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/repository/support/SearchMode.java
@@ -0,0 +1,56 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-backend-jpa:src/main/java/repository/support/SearchMode.p.vm.java
+ */
+package com.h2.demo.repository.support;
+
+/**
+ * Static values to use in conjunction with {@link SearchParameters} object.
+ * It maps the kind of search you can do in SQL.
+ */
+public enum SearchMode {
+    /**
+     * Match exactly the properties
+     */
+    EQUALS("eq"),
+    /**
+     * Activates LIKE search and add a '%' prefix and suffix before searching.
+     */
+    ANYWHERE("any"),
+    /**
+     * Activate LIKE search and add a '%' prefix before searching.
+     */
+    STARTING_LIKE("sl"),
+    /**
+     * Activate LIKE search. User provides the wildcard.
+     */
+    LIKE("li"),
+    /**
+     * Activate LIKE search and add a '%' suffix before searching.
+     */
+    ENDING_LIKE("el");
+
+    private final String code;
+
+    SearchMode(String code) {
+        this.code = code;
+    }
+
+    public String getCode() {
+        return code;
+    }
+
+    public static final SearchMode convert(String code) {
+        for (SearchMode searchMode : SearchMode.values()) {
+            if (searchMode.getCode().equals(code)) {
+                return searchMode;
+            }
+        }
+
+        return EQUALS; // default
+    }
+}
diff --git a/src/main/generated-java/com/h2/demo/repository/support/SearchParameters.java b/src/main/generated-java/com/h2/demo/repository/support/SearchParameters.java
new file mode 100644
index 0000000..e51a32f
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/repository/support/SearchParameters.java
@@ -0,0 +1,702 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-backend-jpa:src/main/java/repository/support/SearchParameters.p.vm.java
+ */
+package com.h2.demo.repository.support;
+
+import static com.google.common.base.Preconditions.checkNotNull;
+import static com.google.common.collect.Lists.newArrayList;
+import static com.google.common.collect.Lists.transform;
+import static com.google.common.collect.Maps.newHashMap;
+import static com.google.common.collect.Sets.newHashSet;
+import static com.h2.demo.repository.support.PropertySelector.newPropertySelector;
+import static org.apache.commons.lang.StringUtils.isNotBlank;
+
+import java.io.Serializable;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
+
+import javax.persistence.metamodel.Attribute;
+import javax.persistence.metamodel.SingularAttribute;
+
+import org.apache.commons.lang.builder.ToStringBuilder;
+
+import com.google.common.base.Function;
+
+/**
+ * The SearchParameters is used to pass search parameters to the DAO layer.
+ * 
+ * Its usage keeps 'find' method signatures in the DAO/Service layer simple.
+ * 
+ * A SearchParameters helps you drive your search in the following areas:
+ * <ul>
+ * <li>Configure the search mode (EQUALS, LIKE, ...)</li>
+ * <li>Pagination: it allows you to limit your search results to a specific range.</li>
+ * <li>Allow you to specify ORDER BY and ASC/DESC</li>
+ * <li>Enable/disable case sensitivity</li>
+ * <li>Enable/disable 2d level cache</li>
+ * <li>LIKE search against all string values: simply set the searchPattern property</li>
+ * <li>Named query: if you set a named query it will be executed. Named queries can be defined in annotation or src/main/resources/META-INF/orm.xml</li>
+ * </ul>
+ * 
+ * Note : All requests are limited to a maximum number of elements to prevent resource exhaustion.
+ * 
+ * @see GenericDao
+ * @see SearchMode
+ * @see OrderBy
+ * @see Range
+ * @see NamedQueryUtil
+ * @see PropertySelector
+ * @see EntitySelector
+ */
+public class SearchParameters implements Serializable {
+    private static final long serialVersionUID = 1L;
+
+    private SearchMode searchMode = SearchMode.EQUALS;
+    private boolean andMode = true;
+
+    // named query related
+    private String namedQuery;
+    private Map<String, Object> parameters = newHashMap();
+
+    private Set<OrderBy> orders = newHashSet();
+
+    // technical parameters
+    private boolean caseSensitive = true;
+
+    // pagination
+    private int maxResults = -1;
+    private int first = 0;
+    private int pageSize = 0;
+
+    // fetches
+    private Set<Path> fetches = newHashSet();
+
+    // ranges
+    private List<Range<?, ?>> ranges = newArrayList();
+
+    // property selectors
+    private List<PropertySelector<?, ?>> properties = newArrayList();
+
+    // pattern to match against all strings.
+    private String searchPattern;
+
+    // Warn: before enabling cache for queries,
+    // check this: https://hibernate.atlassian.net/browse/HHH-1523
+    private Boolean cacheable = false;
+    private String cacheRegion;
+
+    // extra parameters
+    private Map<String, Object> extraParameters = newHashMap();
+
+    private boolean useAndInXToMany = true;
+
+    private boolean useDistinct = false;
+
+    // -----------------------------------
+    // SearchMode
+    // -----------------------------------
+
+    /**
+     * Fluently set the @{link SearchMode}. It defaults to EQUALS.
+     * 
+     * @see SearchMode#EQUALS
+     */
+    public void setSearchMode(SearchMode searchMode) {
+        this.searchMode = checkNotNull(searchMode);
+    }
+
+    /**
+     * Return the @{link SearchMode}. It defaults to EQUALS.
+     * 
+     * @see SearchMode#EQUALS
+     */
+    public SearchMode getSearchMode() {
+        return searchMode;
+    }
+
+    public boolean is(SearchMode searchMode) {
+        return getSearchMode() == searchMode;
+    }
+
+    /**
+     * Fluently set the @{link SearchMode}. It defaults to EQUALS.
+     * 
+     * @see SearchMode#EQUALS
+     */
+    public SearchParameters searchMode(SearchMode searchMode) {
+        setSearchMode(searchMode);
+        return this;
+    }
+
+    /**
+     * Use the EQUALS @{link SearchMode}.
+     * 
+     * @see SearchMode#EQUALS
+     */
+    public SearchParameters equals() {
+        return searchMode(SearchMode.EQUALS);
+    }
+
+    /**
+     * Use the ANYWHERE @{link SearchMode}.
+     * 
+     * @see SearchMode#ANYWHERE
+     */
+    public SearchParameters anywhere() {
+        return searchMode(SearchMode.ANYWHERE);
+    }
+
+    /**
+     * Use the STARTING_LIKE @{link SearchMode}.
+     * 
+     * @see SearchMode#STARTING_LIKE
+     */
+    public SearchParameters startingLike() {
+        return searchMode(SearchMode.STARTING_LIKE);
+    }
+
+    /**
+     * Use the LIKE @{link SearchMode}.
+     * 
+     * @see SearchMode#LIKE
+     */
+    public SearchParameters like() {
+        return searchMode(SearchMode.LIKE);
+    }
+
+    /**
+     * Use the ENDING_LIKE @{link SearchMode}.
+     * 
+     * @see SearchMode#ENDING_LIKE
+     */
+    public SearchParameters endingLike() {
+        return searchMode(SearchMode.ENDING_LIKE);
+    }
+
+    // -----------------------------------
+    // Predicate mode
+    // -----------------------------------
+
+    public void setAndMode(boolean andMode) {
+        this.andMode = andMode;
+    }
+
+    public boolean isAndMode() {
+        return andMode;
+    }
+
+    /**
+     * use <code>and</code> to build the final predicate
+     */
+    public SearchParameters andMode() {
+        setAndMode(true);
+        return this;
+    }
+
+    /**
+     * use <code>or</code> to build the final predicate
+     */
+    public SearchParameters orMode() {
+        setAndMode(false);
+        return this;
+    }
+
+    // -----------------------------------
+    // Named query support
+    // -----------------------------------
+
+    /**
+     * Returns true if a named query has been set, false otherwise. When it returns true, the DAO layer will call the namedQuery.
+     */
+    public boolean hasNamedQuery() {
+        return isNotBlank(namedQuery);
+    }
+
+    /**
+     * Set the named query to be used by the DAO layer. Null by default.
+     */
+    public void setNamedQuery(String namedQuery) {
+        this.namedQuery = namedQuery;
+    }
+
+    /**
+     * Return the name of the named query to be used by the DAO layer.
+     */
+    public String getNamedQuery() {
+        return namedQuery;
+    }
+
+    /**
+     * Set the parameters for the named query.
+     */
+    public void setNamedQueryParameters(Map<String, Object> parameters) {
+        this.parameters = checkNotNull(parameters);
+    }
+
+    /**
+     * Set the parameters for the named query.
+     */
+    public void addNamedQueryParameter(String name, Object value) {
+        parameters.put(checkNotNull(name), checkNotNull(value));
+    }
+
+    /**
+     * The parameters associated with the named query, if any.
+     */
+    public Map<String, Object> getNamedQueryParameters() {
+        return parameters;
+    }
+
+    /**
+     * Return the value of the given parameter name.
+     */
+    public Object getNamedQueryParameter(String parameterName) {
+        return parameters.get(checkNotNull(parameterName));
+    }
+
+    /**
+     * Fluently set the named query to be used by the DAO layer. Null by default.
+     */
+    public SearchParameters namedQuery(String namedQuery) {
+        setNamedQuery(namedQuery);
+        return this;
+    }
+
+    /**
+     * Fluently set the parameters for the named query.
+     */
+    public SearchParameters namedQueryParameters(Map<String, Object> parameters) {
+        setNamedQueryParameters(parameters);
+        return this;
+    }
+
+    /**
+     * Fluently set the parameter for the named query.
+     */
+    public SearchParameters namedQueryParameter(String name, Object value) {
+        addNamedQueryParameter(name, value);
+        return this;
+    }
+
+    // -----------------------------------
+    // Search pattern support
+    // -----------------------------------
+
+    /**
+     * When it returns true, it indicates to the DAO layer to use the given searchPattern on all string properties.
+     */
+    public boolean hasSearchPattern() {
+        return isNotBlank(searchPattern);
+    }
+
+    /**
+     * Set the pattern which may contains wildcards (ex: <code>e%r%ka</code> ).
+     * <p> 
+     * The given searchPattern is used by the DAO layer on all string properties. Null by default.
+     */
+    public void setSearchPattern(String searchPattern) {
+        this.searchPattern = searchPattern;
+    }
+
+    public SearchParameters searchPattern(String searchPattern) {
+        setSearchPattern(searchPattern);
+        return this;
+    }
+
+    public String getSearchPattern() {
+        return searchPattern;
+    }
+
+    // -----------------------------------
+    // Case sensitiveness support
+    // -----------------------------------
+
+    /**
+     * Set the case sensitiveness. Defaults to false.
+     * 
+     * @param caseSensitive
+     */
+    public void setCaseSensitive(boolean caseSensitive) {
+        this.caseSensitive = caseSensitive;
+    }
+
+    public boolean isCaseSensitive() {
+        return caseSensitive;
+    }
+
+    public boolean isCaseInsensitive() {
+        return !caseSensitive;
+    }
+
+    /**
+     * Fluently set the case sensitiveness. Defaults to false.
+     * 
+     * @param caseSensitive
+     */
+    public SearchParameters caseSensitive(boolean caseSensitive) {
+        setCaseSensitive(caseSensitive);
+        return this;
+    }
+
+    /**
+     * Fluently set the case sensitiveness to true.
+     */
+    public SearchParameters caseSensitive() {
+        return caseSensitive(true);
+    }
+
+    /**
+     * Fluently set the case sensitiveness to false.
+     */
+    public SearchParameters caseInsensitive() {
+        return caseSensitive(false);
+    }
+
+    // -----------------------------------
+    // Order by support
+    // -----------------------------------
+
+    public List<OrderBy> getOrders() {
+        return newArrayList(orders);
+    }
+
+    public void addOrderBy(OrderBy orderBy) {
+        if (!orders.add(checkNotNull(orderBy))) {
+            throw new IllegalArgumentException("Duplicate orderBy: '" + orderBy + "'.");
+        }
+    }
+
+    public boolean hasOrders() {
+        return !orders.isEmpty();
+    }
+
+    public SearchParameters orderBy(OrderBy... orderBys) {
+        for (OrderBy orderBy : checkNotNull(orderBys)) {
+            addOrderBy(orderBy);
+        }
+        return this;
+    }
+
+    public SearchParameters asc(Attribute<?, ?>... attributes) {
+        return orderBy(new OrderBy(OrderByDirection.ASC, attributes));
+    }
+
+    public SearchParameters desc(Attribute<?, ?>... attributes) {
+        return orderBy(new OrderBy(OrderByDirection.DESC, attributes));
+    }
+
+    public SearchParameters orderBy(OrderByDirection orderByDirection, Attribute<?, ?>... attributes) {
+        return orderBy(new OrderBy(orderByDirection, attributes));
+    }
+
+    public SearchParameters asc(String property, Class<?> from) {
+        return orderBy(new OrderBy(OrderByDirection.ASC, property, from));
+    }
+
+    public SearchParameters desc(String property, Class<?> from) {
+        return orderBy(new OrderBy(OrderByDirection.DESC, property, from));
+    }
+
+    public SearchParameters orderBy(OrderByDirection orderByDirection, String property, Class<?> from) {
+        return orderBy(new OrderBy(orderByDirection, property, from));
+    }
+
+    // -----------------------------------
+    // Search by range support
+    // -----------------------------------
+
+    public List<Range<?, ?>> getRanges() {
+        return ranges;
+    }
+
+    public void addRange(Range<?, ?> range) {
+        ranges.add(checkNotNull(range));
+    }
+
+    public boolean hasRanges() {
+        return !ranges.isEmpty();
+    }
+
+    public SearchParameters range(Range<?, ?>... ranges) {
+        for (Range<?, ?> range : checkNotNull(ranges)) {
+            addRange(range);
+        }
+        return this;
+    }
+
+    public <D extends Comparable<? super D>> SearchParameters range(D from, D to, Attribute<?, ?>... attributes) {
+        return range(new Range<D, D>(from, to, attributes));
+    }
+
+    // -----------------------------------
+    // Search by property selector support
+    // -----------------------------------
+
+    public List<PropertySelector<?, ?>> getProperties() {
+        return properties;
+    }
+
+    public void addProperty(PropertySelector<?, ?> propertySelector) {
+        properties.add(checkNotNull(propertySelector));
+    }
+
+    public boolean hasProperties() {
+        return !properties.isEmpty();
+    }
+
+    public SearchParameters property(PropertySelector<?, ?>... propertySelectors) {
+        for (PropertySelector<?, ?> propertySelector : checkNotNull(propertySelectors)) {
+            addProperty(propertySelector);
+        }
+        return this;
+    }
+
+    public <F> SearchParameters property(Attribute<?, ?> fields, F... selected) {
+        return property(newPropertySelector(fields).selected(selected));
+    }
+
+    // -----------------------------------
+    // Pagination support
+    // -----------------------------------
+
+    /**
+     * Set the maximum number of results to retrieve. Pass -1 for no limits.
+     */
+    public void setMaxResults(int maxResults) {
+        this.maxResults = maxResults;
+    }
+
+    public int getMaxResults() {
+        return maxResults;
+    }
+
+    /**
+     * Set the position of the first result to retrieve.
+     * 
+     * @param first position of the first result, numbered from 0
+     */
+    public void setFirst(int first) {
+        this.first = first;
+    }
+
+    public int getFirst() {
+        return first;
+    }
+
+    /**
+     * Set the page size, that is the maximum number of result to retrieve.
+     */
+    public void setPageSize(int pageSize) {
+        this.pageSize = pageSize;
+    }
+
+    public int getPageSize() {
+        return pageSize;
+    }
+
+    public SearchParameters maxResults(int maxResults) {
+        setMaxResults(maxResults);
+        return this;
+    }
+
+    public SearchParameters noLimit() {
+        setMaxResults(-1);
+        return this;
+    }
+
+    public SearchParameters limitBroadSearch() {
+        setMaxResults(500);
+        return this;
+    }
+
+    public SearchParameters first(int first) {
+        setFirst(first);
+        return this;
+    }
+
+    public SearchParameters pageSize(int pageSize) {
+        setPageSize(pageSize);
+        return this;
+    }
+
+    // -----------------------------------------
+    // Fetch associated entity using a LEFT Join
+    // -----------------------------------------
+
+    /**
+     * Returns the attributes (x-to-one association) which must be fetched with a left join.
+     */
+    public List<List<Attribute<?, ?>>> getFetches() {
+        return transform(newArrayList(fetches), new Function<Path, List<Attribute<?, ?>>>() {
+            public List<Attribute<?, ?>> apply(Path input) {
+                return input.getAttributes();
+            }
+        });
+    }
+
+    public boolean hasFetches() {
+        return !fetches.isEmpty();
+    }
+
+    /**
+     * The given attribute (x-to-one association) will be fetched with a left join.
+     */
+    public void addFetch(Attribute<?, ?>... attributes) {
+        addFetch(newArrayList(attributes));
+    }
+
+    public void addFetch(List<Attribute<?, ?>> attributes) {
+        fetches.add(new Path(attributes));
+    }
+
+    /**
+     * Fluently set the fetch attribute
+     */
+    public SearchParameters fetch(Attribute<?, ?>... attributes) {
+        fetch(newArrayList(attributes));
+        return this;
+    }
+
+    /**
+     * Fluently set the fetch attribute
+     */
+    public SearchParameters fetch(List<Attribute<?, ?>> attributes) {
+        addFetch(attributes);
+        return this;
+    }
+
+    // -----------------------------------
+    // Caching support
+    // -----------------------------------
+
+    /**
+     * Default to false. Please read https://hibernate.atlassian.net/browse/HHH-1523 before using cache.
+     */
+    public void setCacheable(boolean cacheable) {
+        this.cacheable = cacheable;
+    }
+
+    public boolean isCacheable() {
+        return cacheable;
+    }
+
+    public boolean hasCacheRegion() {
+        return isNotBlank(cacheRegion);
+    }
+
+    public void setCacheRegion(String cacheRegion) {
+        this.cacheRegion = cacheRegion;
+    }
+
+    public String getCacheRegion() {
+        return cacheRegion;
+    }
+
+    public SearchParameters cacheable(boolean cacheable) {
+        setCacheable(cacheable);
+        return this;
+    }
+
+    public SearchParameters enableCache() {
+        setCacheable(true);
+        return this;
+    }
+
+    public SearchParameters disableCache() {
+        setCacheable(false);
+        return this;
+    }
+
+    public SearchParameters cacheRegion(String cacheRegion) {
+        setCacheRegion(checkNotNull(cacheRegion));
+        return this;
+    }
+
+    // -----------------------------------
+    // Extra parameters
+    // -----------------------------------
+
+    /**
+     * Set additionnal parameters.
+     */
+    public void setExtraParameters(Map<String, Object> extraParameters) {
+        this.extraParameters = extraParameters;
+    }
+
+    public Map<String, Object> getExtraParameters() {
+        return extraParameters;
+    }
+
+    /**
+     * add additionnal parameter.
+     */
+    public SearchParameters addExtraParameter(String key, Object o) {
+        extraParameters.put(checkNotNull(key), o);
+        return this;
+    }
+
+    /**
+     * get additionnal parameter.
+     */
+    @SuppressWarnings("unchecked")
+    public <T> T getExtraParameter(String key) {
+        return (T) extraParameters.get(key);
+    }
+
+    // -----------------------------------
+    // Use and in XToMany Search
+    // -----------------------------------
+
+    public void setUseAndInXToMany(boolean useAndInXToMany) {
+        this.useAndInXToMany = useAndInXToMany;
+    }
+
+    public boolean getUseAndInXToMany() {
+        return useAndInXToMany;
+    }
+
+    public SearchParameters useOrInXToMany() {
+        return useAndInXToMany(false);
+    }
+
+    public SearchParameters useAndInXToMany() {
+        return useAndInXToMany(true);
+    }
+
+    public SearchParameters useAndInXToMany(boolean xToManyAndMode) {
+        setUseAndInXToMany(xToManyAndMode);
+        return this;
+    }
+
+    // -----------------------------------
+    // Distinct
+    // -----------------------------------
+
+    public void setDistinct(boolean useDistinct) {
+        this.useDistinct = useDistinct;
+    }
+
+    public boolean getDistinct() {
+        return useDistinct;
+    }
+
+    public SearchParameters distinct(boolean useDistinct) {
+        setDistinct(useDistinct);
+        return this;
+    }
+
+    public SearchParameters distinct() {
+        return distinct(true);
+    }
+
+    @Override
+    public String toString() {
+        return ToStringBuilder.reflectionToString(this);
+    }
+}
\ No newline at end of file
diff --git a/src/main/generated-java/com/h2/demo/security/UserDetailsServiceImpl.java b/src/main/generated-java/com/h2/demo/security/UserDetailsServiceImpl.java
new file mode 100644
index 0000000..3f4ff7b
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/security/UserDetailsServiceImpl.java
@@ -0,0 +1,90 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-backend-jpa:src/main/java/security/UserDetailsServiceImpl.p.vm.java
+ */
+package com.h2.demo.security;
+
+import static com.google.common.collect.Lists.newArrayList;
+
+import java.util.Collection;
+import java.util.List;
+
+import javax.inject.Inject;
+import javax.inject.Named;
+import javax.inject.Singleton;
+
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+import org.springframework.security.core.GrantedAuthority;
+import org.springframework.security.core.authority.SimpleGrantedAuthority;
+import org.springframework.security.core.userdetails.UserDetails;
+import org.springframework.security.core.userdetails.UserDetailsService;
+import org.springframework.security.core.userdetails.UsernameNotFoundException;
+import org.springframework.transaction.annotation.Transactional;
+
+import com.h2.demo.context.UserWithId;
+import com.h2.demo.domain.Account;
+import com.h2.demo.repository.AccountRepository;
+
+/**
+ * An implementation of Spring Security's {@link UserDetailsService}.
+ * 
+ * @see http://static.springsource.org/spring-security/site/reference.html
+ */
+@Singleton
+@Named("userDetailsService")
+public class UserDetailsServiceImpl implements UserDetailsService {
+
+    private static final Logger log = LoggerFactory.getLogger(UserDetailsServiceImpl.class);
+
+    private AccountRepository accountRepository;
+
+    @Inject
+    public UserDetailsServiceImpl(AccountRepository accountRepository) {
+        this.accountRepository = accountRepository;
+    }
+
+    /**
+     * Retrieve an account depending on its login this method is not case sensitive.
+     *
+     * @param username the user's username
+     * @return a Spring Security userdetails object that matches the username
+     * @throws UsernameNotFoundException when the user could not be found
+     * @throws DataAccessException when an error occurred while retrieving the account
+     */
+    @Transactional(readOnly = true)
+    @Override
+    public UserDetails loadUserByUsername(String username) {
+        if (username == null || username.trim().isEmpty()) {
+            throw new UsernameNotFoundException("Empty username");
+        }
+        log.debug("Security verification for user '{}'", username);
+
+        Account account = accountRepository.getByLogin(username);
+
+        if (account == null) {
+            log.info("User {} could not be found", username);
+            throw new UsernameNotFoundException("user " + username + " could not be found");
+        }
+
+        Collection<GrantedAuthority> grantedAuthorities = toGrantedAuthorities(account.getRoleNames());
+        String password = account.getPassword();
+        boolean enabled = account.getIsEnabled();
+        boolean accountNonExpired = true;
+        boolean credentialsNonExpired = true;
+        boolean accountNonLocked = true;
+        return new UserWithId(username, password, enabled, accountNonExpired, credentialsNonExpired, accountNonLocked, grantedAuthorities, account.getId());
+    }
+
+    private Collection<GrantedAuthority> toGrantedAuthorities(List<String> roles) {
+        List<GrantedAuthority> result = newArrayList();
+        for (String role : roles) {
+            result.add(new SimpleGrantedAuthority(role));
+        }
+        return result;
+    }
+}
\ No newline at end of file
diff --git a/src/main/generated-java/com/h2/demo/service/AuditEvent.java b/src/main/generated-java/com/h2/demo/service/AuditEvent.java
new file mode 100644
index 0000000..d25bf4e
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/service/AuditEvent.java
@@ -0,0 +1,18 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-backend-jpa:src/main/java/service/AuditEvent.p.vm.java
+ */
+package com.h2.demo.service;
+
+public enum AuditEvent {
+    ApplicationStartup, //
+    ApplicationShutdown, //
+    LoginSuccessful, //
+    Creation, //
+    Deletion, //
+    Modification;
+}
\ No newline at end of file
diff --git a/src/main/generated-java/com/h2/demo/service/AuditLogService.java b/src/main/generated-java/com/h2/demo/service/AuditLogService.java
new file mode 100644
index 0000000..bcf1736
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/service/AuditLogService.java
@@ -0,0 +1,108 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-backend-jpa:src/main/java/service/AuditLogService.p.vm.java
+ */
+package com.h2.demo.service;
+
+import static com.google.common.collect.Lists.newArrayList;
+
+import java.util.Date;
+import java.util.List;
+import java.util.concurrent.BlockingQueue;
+import java.util.concurrent.LinkedBlockingQueue;
+
+import javax.inject.Inject;
+import javax.inject.Named;
+import javax.inject.Singleton;
+
+import org.hibernate.Session;
+import org.hibernate.SessionFactory;
+import org.hibernate.Transaction;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+import org.springframework.context.annotation.Lazy;
+import org.springframework.scheduling.annotation.Scheduled;
+
+import com.h2.demo.context.UserContext;
+import com.h2.demo.domain.AuditLog;
+
+@Named
+@Singleton
+@Lazy(false)
+public class AuditLogService {
+    private static final Logger log = LoggerFactory.getLogger(AuditLogService.class);
+    private static final int DEFAULT_BATCH_INSERT_SIZE = 50;
+    @Inject
+    private SessionFactory sessionFactory;
+    protected BlockingQueue<AuditLog> queue = new LinkedBlockingQueue<AuditLog>(1000);
+    protected int batchInsertSize = DEFAULT_BATCH_INSERT_SIZE;
+
+    @Scheduled(fixedDelay = 1 * 1000)
+    public void batchInsert() {
+        List<AuditLog> httpEvents = newArrayList();
+        int size = queue.drainTo(httpEvents, batchInsertSize);
+        if (size != 0) {
+            batchInsert(httpEvents);
+        }
+    }
+
+    public void event(AuditEvent auditEvent) {
+        event(auditEvent, null);
+    }
+
+    public void event(AuditEvent auditEvent, String string1) {
+        event(auditEvent, string1, null);
+    }
+
+    public void event(AuditEvent auditEvent, String string1, String string2) {
+        event(auditEvent, string1, string2, null);
+    }
+
+    public void event(AuditEvent auditEvent, String string1, String string2, String string3) {
+        AuditLog auditLog = new AuditLog();
+        auditLog.setAuthor(UserContext.getUsername());
+        auditLog.setEvent(auditEvent.name());
+        auditLog.setStringAttribute1(string1);
+        auditLog.setStringAttribute2(string2);
+        auditLog.setStringAttribute3(string3);
+        log(auditLog);
+    }
+
+    public void log(AuditLog auditLog) {
+        setupDefaults(auditLog);
+        queue.add(auditLog);
+    }
+
+    private void setupDefaults(AuditLog auditLog) {
+        if (auditLog.getAuthor() == null) {
+            auditLog.setAuthor(UserContext.getUsername());
+        }
+        if (auditLog.getEventDate() == null) {
+            auditLog.setEventDate(new Date());
+        }
+    }
+
+    private void batchInsert(List<AuditLog> auditLogs) {
+        Session session = null;
+        try {
+            session = sessionFactory.openSession();
+            Transaction transaction = session.beginTransaction();
+            for (AuditLog auditLog : auditLogs) {
+                session.save(auditLog);
+            }
+            session.flush();
+            transaction.commit();
+            log.debug("Added {} AuditLog in database", auditLogs.size());
+        } catch (Exception e) {
+            log.error("Error while inserting AuditLog", e);
+        } finally {
+            if (session != null) {
+                session.close();
+            }
+        }
+    }
+}
\ No newline at end of file
diff --git a/src/main/generated-java/com/h2/demo/service/EnvironmentService.java b/src/main/generated-java/com/h2/demo/service/EnvironmentService.java
new file mode 100644
index 0000000..66a65eb
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/service/EnvironmentService.java
@@ -0,0 +1,57 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-backend-jpa:src/main/java/service/EnvironmentService.p.vm.java
+ */
+package com.h2.demo.service;
+
+import static com.h2.demo.service.EnvironmentService.Environment.Development;
+import static com.h2.demo.service.EnvironmentService.Environment.Integration;
+import static com.h2.demo.service.EnvironmentService.Environment.Production;
+import static com.h2.demo.service.EnvironmentService.Environment.toEnvironment;
+import static org.apache.commons.lang.StringUtils.trimToEmpty;
+
+import javax.inject.Named;
+
+import org.springframework.beans.factory.annotation.Value;
+
+@Named
+public class EnvironmentService {
+    @Value("${env_name:development}")
+    private String environmentName;
+
+    public enum Environment {
+        Development, Integration, Production;
+        boolean is(String value) {
+            return name().equalsIgnoreCase(trimToEmpty(value));
+        }
+
+        public static Environment toEnvironment(String value) {
+            for (Environment environment : values()) {
+                if (environment.is(value)) {
+                    return environment;
+                }
+            }
+            return Development;
+        }
+    }
+
+    public boolean isDevelopment() {
+        return Development.is(environmentName);
+    }
+
+    public boolean isIntegration() {
+        return Integration.is(environmentName);
+    }
+
+    public boolean isProduction() {
+        return Production.is(environmentName);
+    }
+
+    public Environment getEnvironment() {
+        return toEnvironment(environmentName);
+    }
+}
diff --git a/src/main/generated-java/com/h2/demo/service/VersionService.java b/src/main/generated-java/com/h2/demo/service/VersionService.java
new file mode 100644
index 0000000..a9f22a5
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/service/VersionService.java
@@ -0,0 +1,43 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-backend-jpa:src/main/java/service/VersionService.p.vm.java
+ */
+package com.h2.demo.service;
+
+import static org.apache.commons.lang.StringUtils.endsWithIgnoreCase;
+import static org.apache.commons.lang.StringUtils.equalsIgnoreCase;
+
+import javax.inject.Named;
+
+import org.springframework.beans.factory.annotation.Value;
+
+@Named
+public class VersionService {
+
+    private static final String NO_SVN_REVISION = "noSVNRevision";
+
+    @Value("${build.version:}")
+    private String version;
+
+    @Value("${build.svnrevision:}")
+    private String svnrevision;
+
+    public String format() {
+        if (endsWithIgnoreCase(version, "SNAPSHOT") && !equalsIgnoreCase(svnrevision, NO_SVN_REVISION)) {
+            return version + " (rev" + svnrevision + ")";
+        }
+        return version;
+    }
+
+    public String getVersion() {
+        return version;
+    }
+
+    public String getSvnrevision() {
+        return svnrevision;
+    }
+}
diff --git a/src/main/generated-java/com/h2/demo/util/DateUtil.java b/src/main/generated-java/com/h2/demo/util/DateUtil.java
new file mode 100644
index 0000000..3850c2f
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/util/DateUtil.java
@@ -0,0 +1,27 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-backend-jpa:src/main/java/util/DateUtil.p.vm.java
+ */
+package com.h2.demo.util;
+
+import java.util.Date;
+
+public class DateUtil {
+    /**
+     * Compare 2 dates using seconds precision.
+     * Useful for JPA equality concern when comparing Date from Java world (with millisec precision) with date
+     * retrieved from Oracle (second precision only).
+     */
+    public boolean secondPrecisionDateEquality(Date date1, Date date2) {
+        return secondPrecisionDate(date1).equals(secondPrecisionDate(date2));
+    }
+
+    public static String secondPrecisionDate(Date date) {
+        String ret = Long.toString(date.getTime());
+        return ret.substring(0, ret.length() - 3);
+    }
+}
\ No newline at end of file
diff --git a/src/main/generated-java/com/h2/demo/util/ResourcesUtil.java b/src/main/generated-java/com/h2/demo/util/ResourcesUtil.java
new file mode 100644
index 0000000..ce7aef1
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/util/ResourcesUtil.java
@@ -0,0 +1,87 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-backend-jpa:src/main/java/util/ResourcesUtil.p.vm.java
+ */
+package com.h2.demo.util;
+
+import javax.inject.Inject;
+import javax.inject.Named;
+import javax.inject.Singleton;
+
+import org.springframework.context.MessageSource;
+import org.springframework.context.annotation.Lazy;
+
+import com.h2.demo.context.LocaleHolder;
+
+/**
+ * ResourcesUtil allows you to retrieve localized resources for the locale present in the current thread of execution.
+ * It can be used from both Spring beans (simple dependency injection) and from non spring beans. In the later case,
+ * you obtain the reference thanks to the static method ResourcesUtil.getInstance()
+ */
+@Named
+@Singleton
+@Lazy(false)
+public class ResourcesUtil {
+    private static ResourcesUtil instance;
+
+    public static ResourcesUtil getInstance() {
+        return instance;
+    }
+
+    @Inject
+    private MessageSource messageSource;
+
+    public ResourcesUtil() {
+        instance = this;
+    }
+
+    /**
+     * Return the {@link MessageSource} that backs this ResourcesUtil.
+     */
+    public MessageSource getMessageSource() {
+        return messageSource;
+    }
+
+    /**
+     * Return the property value for the contextual locale.
+     * If no value is found, the given key is returned.
+     */
+    public String getProperty(String key, Object... args) {
+        if (key == null) {
+            return "";
+        }
+
+        return messageSource.getMessage(key, args, LocaleHolder.getLocale());
+    }
+
+    /**
+     * Same as {@link #getProperty(String, Object...)} but use the count to choose the proper key.
+     * Used when the message varies depending on the context. 
+     * <p>
+     * For example: 
+     * <ul>
+     * <li>there is no result</li>
+     * <li>there is one result</li>
+     * <li>there are n results</li>
+     * </ul>
+     * @param key the base key
+     */
+    public String getPluralableProperty(String key, int count) {
+        if (key == null) {
+            return "";
+        }
+
+        switch (count) {
+        case 0:
+            return getProperty(key + "_0");
+        case 1:
+            return getProperty(key + "_1");
+        default:
+            return getProperty(key + "_n", count);
+        }
+    }
+}
\ No newline at end of file
diff --git a/src/main/generated-java/com/h2/demo/validation/FixedLength.java b/src/main/generated-java/com/h2/demo/validation/FixedLength.java
new file mode 100644
index 0000000..63d990b
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/validation/FixedLength.java
@@ -0,0 +1,39 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-backend-jpa:src/main/java/validation/FixedLength.p.vm.java
+ */
+package com.h2.demo.validation;
+
+import static java.lang.annotation.ElementType.ANNOTATION_TYPE;
+import static java.lang.annotation.ElementType.FIELD;
+import static java.lang.annotation.ElementType.METHOD;
+import static java.lang.annotation.RetentionPolicy.RUNTIME;
+
+import java.lang.annotation.Documented;
+import java.lang.annotation.Retention;
+import java.lang.annotation.Target;
+
+import javax.validation.Constraint;
+import javax.validation.Payload;
+
+import com.h2.demo.validation.impl.FixedLengthValidator;
+
+@Target({ METHOD, FIELD, ANNOTATION_TYPE })
+@Retention(RUNTIME)
+@Constraint(validatedBy = FixedLengthValidator.class)
+@Documented
+public @interface FixedLength {
+    int length() default 0;
+
+    boolean nullable() default true;
+
+    String message() default "{com.h2.demo.validation.FixedLength.message}";
+
+    Class<?>[] groups() default {};
+
+    Class<? extends Payload>[] payload() default {};
+}
diff --git a/src/main/generated-java/com/h2/demo/validation/impl/FixedLengthValidator.java b/src/main/generated-java/com/h2/demo/validation/impl/FixedLengthValidator.java
new file mode 100644
index 0000000..c0c1eed
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/validation/impl/FixedLengthValidator.java
@@ -0,0 +1,34 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-backend-jpa:src/main/java/validation/impl/FixedLengthValidator.p.vm.java
+ */
+package com.h2.demo.validation.impl;
+
+import static org.apache.commons.lang.StringUtils.isEmpty;
+
+import javax.validation.ConstraintValidator;
+import javax.validation.ConstraintValidatorContext;
+
+import com.h2.demo.validation.FixedLength;
+
+public class FixedLengthValidator implements ConstraintValidator<FixedLength, String> {
+
+    private FixedLength constraint;
+
+    @Override
+    public void initialize(FixedLength constraint) {
+        this.constraint = constraint;
+    }
+
+    @Override
+    public boolean isValid(String value, ConstraintValidatorContext context) {
+        if (isEmpty(value)) {
+            return constraint.nullable();
+        }
+        return value.length() == constraint.length();
+    }
+}
diff --git a/src/main/generated-java/com/h2/demo/web/component/DatePicker.java b/src/main/generated-java/com/h2/demo/web/component/DatePicker.java
new file mode 100644
index 0000000..d708708
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/web/component/DatePicker.java
@@ -0,0 +1,149 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-jsf2-spring-conversation:src/main/java/component/DatePicker.p.vm.java
+ */
+package com.h2.demo.web.component;
+
+import static com.h2.demo.web.component.DatePickerHelper.normalize;
+
+import java.io.IOException;
+import java.util.Calendar;
+import java.util.Date;
+
+import javax.faces.component.FacesComponent;
+import javax.faces.component.NamingContainer;
+import javax.faces.component.UIInput;
+import javax.faces.context.FacesContext;
+import javax.faces.convert.Converter;
+import javax.faces.convert.ConverterException;
+import javax.faces.convert.DateTimeConverter;
+
+import org.joda.time.LocalDate;
+import org.joda.time.LocalDateTime;
+
+import com.h2.demo.web.converter.support.LocalDateConverter;
+import com.h2.demo.web.converter.support.LocalDateTimeConverter;
+
+/**
+ * Java side of the <code>datePicker</code> composite component that supports
+ * <ul>
+ * <li>{@link Date}</li>
+ * <li>{@link LocalDate}</li>
+ * <li>{@link LocalDateTime}</li>
+ * </ul>
+ * This component exists solely to make accessible ARIA compatible date components
+ *
+ * @see http://weblogs.java.net/blog/cayhorstmann/archive/2010/01/30/composite-input-components-jsf
+ * @see http://www.w3.org/WAI/intro/aria.php
+ * @see the followings jsf components : inputDateAria, inputDateTimeAria, inputLocalDateAria, inputLocalDateTimeAria
+ */
+@FacesComponent("components.DatePicker")
+public class DatePicker extends UIInput implements NamingContainer {
+
+    @Override
+    public String getFamily() {
+        return "javax.faces.NamingContainer";
+    }
+
+    @Override
+    public void encodeBegin(FacesContext context) throws IOException {
+        UIInput year = findUIInput("year");
+        UIInput month = findUIInput("month");
+        UIInput day = findUIInput("day");
+        UIInput hour = findUIInput("hour");
+        UIInput min = findUIInput("minute");
+
+        Converter converter = getConverter();
+        if (converter instanceof LocalDateConverter) {
+            encode(year, month, day, (LocalDate) getValue());
+        } else if (converter instanceof LocalDateTimeConverter) {
+            encode(year, month, day, hour, min, (LocalDateTime) getValue());
+        } else if (converter instanceof DateTimeConverter) {
+            encode(year, month, day, hour, min, (Date) getValue());
+        }
+
+        super.encodeBegin(context);
+    }
+
+    private void encode(UIInput year, UIInput month, UIInput day, LocalDate localDate) {
+        if (localDate == null) {
+            return;
+        }
+
+        year.setValue(normalize(localDate.getYear()));
+        month.setValue(normalize(localDate.getMonthOfYear()));
+        day.setValue(normalize(localDate.getDayOfMonth()));
+    }
+
+    private void encode(UIInput year, UIInput month, UIInput day, UIInput hour, UIInput min, LocalDateTime localDateTime) {
+        if (localDateTime == null) {
+            return;
+        }
+
+        year.setValue(normalize(localDateTime.getYear()));
+        month.setValue(normalize(localDateTime.getMonthOfYear()));
+        day.setValue(normalize(localDateTime.getDayOfMonth()));
+        hour.setValue(normalize(localDateTime.getHourOfDay()));
+        min.setValue(normalize(localDateTime.getMinuteOfHour()));
+    }
+
+    private void encode(UIInput year, UIInput month, UIInput day, UIInput hour, UIInput min, Date date) {
+        if (date == null) {
+            return;
+        }
+        Calendar calendar = Calendar.getInstance();
+        calendar.setTime(date);
+
+        year.setValue(normalize(calendar.get(Calendar.YEAR)));
+        month.setValue(normalize(calendar.get(Calendar.MONTH) + 1));
+        day.setValue(normalize(calendar.get(Calendar.DAY_OF_MONTH)));
+        hour.setValue(normalize(calendar.get(Calendar.HOUR_OF_DAY)));
+        min.setValue(normalize(calendar.get(Calendar.MINUTE)));
+    }
+
+    @Override
+    protected Object getConvertedValue(FacesContext context, Object newSubmittedValue) throws ConverterException {
+        return getConverter().getAsObject(context, this, (String) newSubmittedValue);
+    }
+
+    /**
+     * Construct submitted value as <code>yyyy-MM-dd</code>, <code>yyyy-MM-dd HH:mm</code> or <code>HH:mm</code> The returned string is used by getConvertedValue...
+     */
+    @Override
+    public Object getSubmittedValue() {
+        UIInput year = findUIInput("year");
+        UIInput month = findUIInput("month");
+        UIInput day = findUIInput("day");
+        UIInput hour = findUIInput("hour");
+        UIInput minute = findUIInput("minute");
+
+        StringBuilder sb = new StringBuilder();
+        if (isConvertible(year) && isConvertible(month) && isConvertible(day)) {
+            sb.append(year.getSubmittedValue());
+            sb.append("-").append(month.getSubmittedValue());
+            sb.append("-").append(day.getSubmittedValue());
+            if (hour.isRendered() && minute.isRendered()) {
+                sb.append(" ");
+            }
+        }
+
+        if (isConvertible(hour) && isConvertible(minute)) {
+            sb.append(hour.getSubmittedValue());
+            sb.append(":").append(minute.getSubmittedValue());
+        }
+
+        return sb.toString();
+    }
+
+    private UIInput findUIInput(String id) {
+        return (UIInput) findComponent(id);
+    }
+
+    private boolean isConvertible(UIInput input) {
+        return input.isRendered() && input.getSubmittedValue() != null && !((String) input.getSubmittedValue()).isEmpty();
+    }
+}
\ No newline at end of file
diff --git a/src/main/generated-java/com/h2/demo/web/component/DatePickerHelper.java b/src/main/generated-java/com/h2/demo/web/component/DatePickerHelper.java
new file mode 100644
index 0000000..827303f
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/web/component/DatePickerHelper.java
@@ -0,0 +1,113 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-jsf2-spring-conversation:src/main/java/component/DatePickerHelper.p.vm.java
+ */
+package com.h2.demo.web.component;
+
+import static com.google.common.collect.Lists.newArrayList;
+import static java.util.Calendar.DAY_OF_MONTH;
+import static java.util.Calendar.DAY_OF_WEEK;
+import static java.util.Calendar.LONG;
+import static java.util.Calendar.MONTH;
+import static java.util.Calendar.YEAR;
+
+import java.util.Calendar;
+import java.util.List;
+
+import javax.faces.component.UIInput;
+import javax.faces.context.FacesContext;
+import javax.faces.model.SelectItem;
+import javax.inject.Named;
+import javax.inject.Singleton;
+
+import com.h2.demo.context.LocaleHolder;
+
+/**
+ * Helper used from the {@link DatePicker} composite component.
+ */
+@Named
+@Singleton
+public class DatePickerHelper {
+
+    public List<SelectItem> getYears(int min, int max) {
+        List<SelectItem> result = newArrayList();
+        for (int i = min; i <= max; i++) {
+            String year = String.valueOf(i);
+            result.add(new SelectItem(year, year));
+        }
+
+        return result;
+    }
+
+    public List<SelectItem> getMonths() {
+        List<SelectItem> result = newArrayList();
+
+        Calendar c = Calendar.getInstance();
+        c.set(DAY_OF_MONTH, 1); // prevent potential month shifting when reseting month below
+
+        for (int i = 1; i <= 12; i++) {
+            c.set(MONTH, i - 1);
+            String label = c.getDisplayName(MONTH, LONG, LocaleHolder.getLocale());
+            result.add(new SelectItem(normalize(i), label));
+        }
+
+        return result;
+    }
+
+    public List<SelectItem> getDays(String ccClientId, boolean appendDayOfWeek) {
+        UIInput ccDatepicker = (UIInput) FacesContext.getCurrentInstance().getViewRoot().findComponent(ccClientId);
+        UIInput year = (UIInput) ccDatepicker.findComponent("year");
+        UIInput month = (UIInput) ccDatepicker.findComponent("month");
+
+        Calendar c = Calendar.getInstance();
+        c.set(DAY_OF_MONTH, 1); // prevent potential month shifting when reseting month below
+        try {
+            c.set(YEAR, Integer.parseInt((String) year.getLocalValue()));
+            c.set(MONTH, Integer.parseInt((String) month.getLocalValue()) - 1);
+        } catch (Exception e) {
+            //
+        }
+
+        List<SelectItem> result = newArrayList();
+
+        int max = c.getActualMaximum(DAY_OF_MONTH);
+        for (int i = 1; i <= max; i++) {
+            String day = normalize(i);
+            c.set(DAY_OF_MONTH, i);
+            StringBuilder sb = new StringBuilder();
+            sb.append(day);
+            if (appendDayOfWeek) {
+                sb.append(" ").append(c.getDisplayName(DAY_OF_WEEK, LONG, LocaleHolder.getLocale()));
+            }
+            result.add(new SelectItem(day, sb.toString()));
+        }
+
+        return result;
+    }
+
+    public List<SelectItem> getHours() {
+        List<SelectItem> result = newArrayList();
+        for (int i = 0; i < 24; i++) {
+            String hour = normalize(i);
+            result.add(new SelectItem(hour, hour));
+        }
+        return result;
+    }
+
+    public List<SelectItem> getMinutes() {
+        List<SelectItem> result = newArrayList();
+        result.add(new SelectItem("00", "00"));
+        result.add(new SelectItem("15", "15"));
+        result.add(new SelectItem("30", "30"));
+        result.add(new SelectItem("45", "45"));
+        return result;
+    }
+
+    public static final String normalize(int i) {
+        return i < 10 ? "0" + i : "" + i;
+    }
+}
\ No newline at end of file
diff --git a/src/main/generated-java/com/h2/demo/web/configuration/LocaleConfiguration.java b/src/main/generated-java/com/h2/demo/web/configuration/LocaleConfiguration.java
new file mode 100644
index 0000000..f85aa4c
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/web/configuration/LocaleConfiguration.java
@@ -0,0 +1,24 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-jsf2-spring-conversation:src/main/java/configuration/LocaleConfiguration.p.vm.java
+ */
+package com.h2.demo.web.configuration;
+
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+import org.springframework.web.servlet.LocaleResolver;
+import org.springframework.web.servlet.i18n.CookieLocaleResolver;
+
+@Configuration
+public class LocaleConfiguration {
+    @Bean
+    public LocaleResolver localeResolver() {
+        CookieLocaleResolver resolver = new CookieLocaleResolver();
+        resolver.setCookieName("locale");
+        return resolver;
+    }
+}
diff --git a/src/main/generated-java/com/h2/demo/web/configuration/ViewScopeConfiguration.java b/src/main/generated-java/com/h2/demo/web/configuration/ViewScopeConfiguration.java
new file mode 100644
index 0000000..f194265
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/web/configuration/ViewScopeConfiguration.java
@@ -0,0 +1,35 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-jsf2-spring-conversation:src/main/java/configuration/ViewScopeConfiguration.p.vm.java
+ */
+package com.h2.demo.web.configuration;
+
+import static com.google.common.collect.Maps.newHashMap;
+
+import java.util.Map;
+
+import org.springframework.beans.factory.config.CustomScopeConfigurer;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+
+import com.h2.demo.web.faces.ConversationContextScope;
+import com.h2.demo.web.faces.ConversationScope;
+import com.h2.demo.web.faces.ViewScope;
+
+@Configuration
+public class ViewScopeConfiguration {
+    @Bean
+    public static CustomScopeConfigurer viewScope() {
+        CustomScopeConfigurer scope = new CustomScopeConfigurer();
+        Map<String, Object> map = newHashMap();
+        map.put("view", new ViewScope());
+        map.put("conversationContext", new ConversationContextScope());
+        map.put("conversation", new ConversationScope());
+        scope.setScopes(map);
+        return scope;
+    }
+}
\ No newline at end of file
diff --git a/src/main/generated-java/com/h2/demo/web/conversation/Conversation.java b/src/main/generated-java/com/h2/demo/web/conversation/Conversation.java
new file mode 100644
index 0000000..d514015
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/web/conversation/Conversation.java
@@ -0,0 +1,355 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-jsf2-spring-conversation:src/main/java/conversation/Conversation.p.vm.java
+ */
+package com.h2.demo.web.conversation;
+
+import static com.google.common.collect.Sets.newHashSet;
+import static com.h2.demo.web.conversation.ConversationUtil.cidParamValue;
+
+import java.io.Serializable;
+import java.util.HashMap;
+import java.util.Map;
+import java.util.Set;
+import java.util.Stack;
+import java.util.concurrent.atomic.AtomicInteger;
+
+import javax.servlet.http.HttpServletRequest;
+import javax.servlet.http.HttpSession;
+
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import com.h2.demo.domain.Identifiable;
+
+/**
+ * A conversation has a smaller scope than an http session. It has well defined entry and exits boundaries.
+ * Within a conversation the user can perform actions and navigate from page to page.
+ * 
+ * <p>
+ * Each page is bound to a {@link ConversationContext} which is stored in a stack maintained by the conversation. 
+ * All {@link ConversationContextScoped} beans are stored in the page's {@link ConversationContext}.
+ * 
+ * <p>
+ * There are 4 types of navigation inside a conversation:
+ * <ol>
+ * <li><b>forward navigation</b> using a new {@link ConversationContext}. In that case, a new {@link ConversationContext} is created and pushed on top of the
+ * Conversation's {@link ConversationContext} stack.</li>
+ * 
+ * <li><b>backward navigation</b>. It consists in popping the current {@link ConversationContext} from the stack and returning the viewUri of the
+ * {@link ConversationContext} promoted on top of the stack.</li>
+ * 
+ * <li><b>navigation in the same context</b>. You just replace the {@link ConversationContext}'s viewUri. It can be useful if you want to have access to the
+ * beans/vars from the previous page. But beware, we do not keep track of viewUri changes inside a {@link ConversationContext}.</li>
+ * 
+ * <li><b>navigation outside of the conversation</b>. You simply return a URL that does not carry the conversation _cid parameter.</li>
+ * </ol>
+ *
+ * <p>
+ * The main strength of this API is the possibility to pass information back, using {@link ConversationCallBack} to the previous page when we do backward
+ * navigation. It allows page/navigation/action reusability as the current page does not need to know which page led to it.
+ * 
+ * <p>
+ * The most important methods are:
+ * <ol>
+ * <li>{@link #nextView()} which returns the implicit JSF view to display (the conversation's page). Use it in your JSF action returning implicit view.</li>
+ * <li>{@link #setNextContext()} to push (push is not done immediately for technical reason) a new {@link ConversationContext}.</li>
+ * <li>{@link #incrementPopContextOnNextPauseCounter()} if you want to pop a {@link ConversationContext} from the stack.</li>
+ * </ol>
+ */
+public class Conversation implements Serializable {
+    private static final long serialVersionUID = 1L;
+    public static final String CONVERSATION_COUNTER_KEY = "convCounter";
+    private static final Logger log = LoggerFactory.getLogger(Conversation.class);
+
+    private String id;
+
+    /**
+     *  Stores <code>conversation</code> scope beans.
+     */
+    private Map<String, Object> beans = new HashMap<String, Object>();
+
+    /**
+     * Each time a {@link ConversationContext} is created we assign it an id. 
+     */
+    private int conversationContextIdCounter = 0;
+    private Stack<ConversationContext<?>> contextes = new Stack<ConversationContext<?>>();
+    private int popContextOnNextPauseCounter = 0;
+    private ConversationContext<?> nextContext;
+
+    /**
+     * Create a new conversation and assign it a unique id in the scope of the user's session.
+     */
+    public static Conversation newConversation(HttpSession session) {
+        AtomicInteger counter = (AtomicInteger) session.getAttribute(CONVERSATION_COUNTER_KEY);
+        if (counter == null) {
+            counter = new AtomicInteger(0);
+            session.setAttribute(CONVERSATION_COUNTER_KEY, counter);
+        }
+
+        return new Conversation(String.valueOf(counter.incrementAndGet()));
+    }
+
+    /**
+     * Create a new conversation and assign it a unique id in the scope of the user's session.
+     */
+    public static Conversation newConversation(HttpSession session, ConversationContext<?> conversationContext) {
+        Conversation newInstance = newConversation(session);
+        newInstance.setNextContext(conversationContext);
+        return newInstance;
+    }
+
+    public Conversation() {
+    }
+
+    public Conversation(String id) {
+        this.id = id;
+    }
+
+    /**
+     * Returns this conversation Id.
+     */
+    public String getId() {
+        return id;
+    }
+
+    /**
+     * Returns this conversation <code>_cid</code> param value.
+     */
+    public String getCid() {
+        return cidParamValue(id, nextContext().getId());
+    }
+
+    /**
+     * Add a bean in the <code>conversation</code> scope store.
+     */
+    public void addBean(String name, Object bean) {
+        beans.put(name, bean);
+    }
+
+    /**
+     * Get a bean from the <code>conversation</code> scope store.
+     */
+    public Object getBean(String name) {
+        return beans.get(name);
+    }
+
+    /**
+     * Here to handle browser's back button
+     * @param ccid
+     * @param request
+     */
+    protected void handleOutOfSynchContext(String ccid, HttpServletRequest request) throws UnexpectedConversationException {
+        ConversationContext<?> requestedContext = null;
+
+        for (ConversationContext<?> ctx : contextes) {
+            if (requestedContext == null) {
+                if (ctx.getId().equals(ccid)) {
+                    requestedContext = ctx;
+                }
+            } else {
+                // we pop all contextes that are placed after the contexId requested
+                incrementPopContextOnNextPauseCounter();
+            }
+        }
+
+        if (requestedContext != null) {
+            popContextesIfNeeded();
+        } else {
+            throw new UnexpectedConversationException("Uri not in sync with conversation expecting _ccid_=" + getCurrentContext().getId() + " but got " + ccid,
+                    request.getRequestURI(), getUrl());
+        }
+    }
+
+    /**
+     * Increment the number of conversation context that must be popped from the stack by the conversation manager 
+     * when it pauses the current conversation.
+     * <p>
+     * <i>Why don't we pop directly the context here?</i>
+     * <p>
+     * When an action is triggered from within a dataTable, the JSF runtime executes some EL after our action. 
+     * By doing so it requests a conversation scoped bean that belongs to the current context. 
+     * If this context is popped too soon, the bean is recreated!
+     */
+    public void incrementPopContextOnNextPauseCounter() {
+        popContextOnNextPauseCounter++;
+    }
+
+    /**
+     * The number of conversation contextes that must be popped on next conversation pause.
+     */
+    public int getPopContextOnNextPauseCounter() {
+        return popContextOnNextPauseCounter;
+    }
+
+    /**
+     * Set the next context. Note that this context is not pushed on the stack immediately.
+     * Therefore you cannot set multiple contextes in the hope that they will stacked up.
+     */
+    public void setNextContext(ConversationContext<?> newContext) {
+        newContext.setId(String.valueOf(++conversationContextIdCounter));
+        newContext.setConversationId(getId());
+        // we delay the context push because apparently some EL is invoked after bean action is performed
+        // which it leads in some cases to re-creation of 'conversation scoped' bean.
+        nextContext = newContext; // will be pushed at next request during resuming...
+    }
+
+    public ConversationContext<?> nextContext(ConversationContext<?> newContext) {
+        setNextContext(newContext);
+        return newContext;
+    }
+
+    protected void pushNextContextIfNeeded() {
+        if (nextContext != null) {
+            contextes.push(nextContext);
+            log.debug("pushed 1 context on stack: {}", nextContext.getLabel());
+            nextContext = null;
+        }
+    }
+
+    /**
+     * Set the <code>sub</code> var to true in the passed context and invoke {@link #setNextContext(ConversationContext)}
+     * @param newContext
+     * @see #setNextContext(ConversationContext)
+     */
+    public void setNextContextSub(ConversationContext<?> newContext) {
+        setNextContext(newContext.sub());
+    }
+
+    /**
+     * Set the <code>sub</code> var to true and the <code>readonly</code> var to true in the passed context and invoke {@link #setNextContext(ConversationContext)}.
+     * @param newContext
+     * @see #setNextContext(ConversationContext)
+     */
+    public void setNextContextSubReadOnly(ConversationContext<?> newContext) {
+        setNextContext(newContext.sub().readonly());
+    }
+
+    /**
+     * Set the <code>readonly</code> var to true in the passed context and invoke {@link #setNextContext(ConversationContext)}.
+     * @param newContext
+     * @see #setNextContext(ConversationContext)
+     */
+    public void setNextContextReadOnly(ConversationContext<?> newContext) {
+        setNextContext(newContext.readonly());
+    }
+
+    public final int getConversationContextesCount() {
+        return contextes.size();
+    }
+
+    /**
+     * Returns the context on top on stack.
+     * BEWARE, the context could have been scheduled for popping.
+     */
+    @SuppressWarnings("unchecked")
+    public <T extends ConversationContext<?>> T getCurrentContext() {
+        return (T) contextes.peek();
+    }
+
+    public Stack<ConversationContext<?>> getConversationContextes() {
+        return contextes;
+    }
+
+    protected void popContextesIfNeeded() {
+        if (popContextOnNextPauseCounter > 1) {
+            log.debug("There are {} to pop from the stack", popContextOnNextPauseCounter);
+        }
+
+        Set<Identifiable<? extends Serializable>> dependentEntities = newHashSet();
+        for (int i = 0; i < popContextOnNextPauseCounter; i++) {
+            if (!contextes.isEmpty()) {
+                ConversationContext<?> ccPopped = contextes.pop();
+                dependentEntities.addAll(ccPopped.getDependentEntities());
+                log.debug("popped 1 context from stack: {}", ccPopped.getLabel());
+            } else {
+                log.warn("Attention, too many pop requested! Could be source of potential bug");
+            }
+        }
+
+        popContextOnNextPauseCounter = 0;
+
+        if (contextes.isEmpty()) {
+            log.info("All contextes have been popped. Natural conversation ending will be performed");
+        } else {
+            // adds all popped entities to current context
+            getCurrentContext().addDependentEntities(dependentEntities);
+        }
+    }
+
+    /**
+     * Returns the view url for the next page. Used by action when returning the view.
+     */
+    public String nextView() {
+        ConversationContext<?> context = nextContext();
+        return context != null ? context.view() : "/home.faces?faces-redirect=true";
+    }
+
+    /**
+     * Returns the url for the next page. Used by filter.
+     */
+    public String nextUrl() {
+        ConversationContext<?> context = nextContext();
+        return context != null ? context.getUrl() : "/home.faces";
+    }
+
+    @SuppressWarnings("unchecked")
+    public <T extends ConversationContext<?>> T nextContext() {
+        if (nextContext != null) {
+            return (T) nextContext;
+        }
+
+        if (popContextOnNextPauseCounter > 0) {
+            int nextActiveContextIndex = contextes.size() - 1 - popContextOnNextPauseCounter;
+            if (nextActiveContextIndex >= 0) {
+                ConversationContext<?> contextOnTopOfStackOnNextResume = contextes.elementAt(nextActiveContextIndex);
+                return (T) contextOnTopOfStackOnNextResume;
+            } else {
+                return null;
+            }
+        }
+
+        return (T) contextes.peek();
+    }
+
+    // ------------------------------------------
+    // Methods below use the last pushed context
+    // ------------------------------------------
+
+    /**
+     * @return the label of the last pushed context. 
+     */
+    public String getLabel() {
+        return contextes.peek().getLabel();
+    }
+
+    /**
+     * @return the menu url of the last pushed context. 
+     */
+    public String getUrl() {
+        return contextes.peek().getUrl();
+    }
+
+    /**
+     * @return the uri of the last pushed context. 
+     */
+    public String getViewUri() {
+        return contextes.peek().getViewUri();
+    }
+
+    public void setVar(String name, Object var) {
+        contextes.peek().setVar(name, var);
+    }
+
+    public Object getVar(String name) {
+        return contextes.peek().getVar(name);
+    }
+
+    public <T> T getVar(String name, Class<T> expectedType) {
+        return contextes.peek().getVar(name, expectedType);
+    }
+}
diff --git a/src/main/generated-java/com/h2/demo/web/conversation/ConversationCallBack.java b/src/main/generated-java/com/h2/demo/web/conversation/ConversationCallBack.java
new file mode 100644
index 0000000..fdeddf2
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/web/conversation/ConversationCallBack.java
@@ -0,0 +1,120 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-jsf2-spring-conversation:src/main/java/conversation/ConversationCallBack.p.vm.java
+ */
+package com.h2.demo.web.conversation;
+
+import static com.h2.demo.web.conversation.ConversationHolder.getCurrentConversation;
+
+import java.io.Serializable;
+
+/**
+ * CallBacks should be invoked at the end of a @{link ConversationContext} life.
+ * A CallBack allows the creator of the conversation context to know which action led to the context termination and to retrieve 
+ * any relevant output.
+ * For example, a conversation context can be created to let a user select an entity among a list of entities. When the user selects 
+ * an entity, the action invokes the selected(T entity) method which let the creator of the context do something with the selected 
+ * entity (e.g add it or set it somewhere...).
+ */
+public class ConversationCallBack<T> implements Serializable {
+    private static final long serialVersionUID = 1L;
+
+    public ConversationCallBack() {
+    }
+
+    public final String ok(T entity) {
+        incrementPopContextOnNextPauseCounter();
+        onOk(entity);
+        return nextView();
+    }
+
+    /**
+     * The given entity has been oked. Example: it could mean
+     * that it is a newly created entity, that it was validated (but not saved) and
+     * that it is up to you to decide what to do with it.
+     */
+    protected void onOk(T entity) {
+    }
+
+    public final String selected(T entity) {
+        incrementPopContextOnNextPauseCounter();
+        onSelected(entity);
+        return nextView();
+    }
+
+    public final String selected(T... entities) {
+        incrementPopContextOnNextPauseCounter();
+        for (T entity : entities) {
+            onSelected(entity);
+        }
+        return nextView();
+    }
+
+    /**
+     * The given entity has been selected.
+     */
+    protected void onSelected(T entity) {
+    }
+
+    public final String saved(T entity) {
+        incrementPopContextOnNextPauseCounter();
+        onSaved(entity);
+        return nextView();
+    }
+
+    /**
+     * The given entity has just been saved.
+     */
+    protected void onSaved(T entity) {
+    }
+
+    public final String notSaved(T entity) {
+        incrementPopContextOnNextPauseCounter();
+        onNotSaved(entity);
+        return nextView();
+    }
+
+    /**
+     * The given entity has not been saved.
+     */
+    protected void onNotSaved(T entity) {
+    }
+
+    public final String deleted(T entity) {
+        incrementPopContextOnNextPauseCounter();
+        onDeleted(entity);
+        return nextView();
+    }
+
+    /**
+     * The given entity has just been deleted.
+     */
+    protected void onDeleted(T entity) {
+    }
+
+    public final String back() {
+        incrementPopContextOnNextPauseCounter();
+        onBack();
+        return nextView();
+    }
+
+    /**
+     * No real action was performed, the user just asked to go back.
+     */
+    protected void onBack() {
+    }
+
+    // Context utils
+
+    private void incrementPopContextOnNextPauseCounter() {
+        getCurrentConversation().incrementPopContextOnNextPauseCounter();
+    }
+
+    private String nextView() {
+        return getCurrentConversation().nextView();
+    }
+}
\ No newline at end of file
diff --git a/src/main/generated-java/com/h2/demo/web/conversation/ConversationContext.java b/src/main/generated-java/com/h2/demo/web/conversation/ConversationContext.java
new file mode 100644
index 0000000..c292a55
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/web/conversation/ConversationContext.java
@@ -0,0 +1,365 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-jsf2-spring-conversation:src/main/java/conversation/ConversationContext.p.vm.java
+ */
+package com.h2.demo.web.conversation;
+
+import static com.google.common.collect.Lists.newArrayList;
+import static com.google.common.collect.Maps.newHashMap;
+import static com.google.common.collect.Sets.newHashSet;
+import static com.h2.demo.web.conversation.ConversationUtil.cidParamNameValue;
+import static java.util.Collections.unmodifiableSet;
+
+import java.io.Serializable;
+import java.util.Collection;
+import java.util.List;
+import java.util.Map;
+import java.util.Map.Entry;
+import java.util.Set;
+
+import com.h2.demo.domain.Identifiable;
+import com.h2.demo.util.ResourcesUtil;
+
+/**
+ * Context holding variables and 'conversationContext' scoped beans so they can be accessed from the view.
+ * Note that you can change the view of the context. This allows you to navigate from page to page
+ * using the same context.
+ */
+public class ConversationContext<T> implements Serializable {
+    private static final long serialVersionUID = 1L;
+
+    /**
+     *  Stores 'conversationContext' scope beans.
+     */
+    private Map<String, Object> beans = newHashMap();
+
+    /**
+     *  Stores variables such as <code>readonly</code>, <code>sub</code>, etc.
+     */
+    private Map<String, Object> vars = newHashMap();
+    private String id; // context id
+    private String conversationId;
+    private ConversationCallBack<T> callBack = new ConversationCallBack<T>();
+    private String labelKey = null;
+    private Object[] labelKeyArgs = null;
+    private String viewUri;
+    private boolean isNewEntity;
+
+    public ConversationContext() {
+    }
+
+    public ConversationContext(String viewUri) {
+        this.viewUri = viewUri;
+    }
+
+    /**
+     * Set this conversation context id.
+     */
+    protected void setId(String id) {
+        this.id = id;
+    }
+
+    public ConversationContext<T> id(String id) {
+        setId(id);
+        return this;
+    }
+
+    public String getId() {
+        return id;
+    }
+
+    protected void setConversationId(String conversationId) {
+        this.conversationId = conversationId;
+    }
+
+    public ConversationContext<T> conversationId(String conversationId) {
+        setConversationId(conversationId);
+        return this;
+    }
+
+    /**
+     * Set the entity that will be used by the XxxForm.
+     */
+    public void setEntity(T entity) {
+        setVar("_entity", entity);
+    }
+
+    public ConversationContext<T> entity(T entity) {
+        setEntity(entity);
+        return this;
+    }
+
+    /**
+     * Returns the original entity that was passed to this context.
+     */
+    @SuppressWarnings("unchecked")
+    public T getEntity() {
+        return (T) vars.get("_entity");
+    }
+
+    public void setIsNewEntity(boolean isNewEntity) {
+        this.isNewEntity = isNewEntity;
+    }
+
+    public ConversationContext<T> isNewEntity(boolean isNewEntity) {
+        setIsNewEntity(isNewEntity);
+        return this;
+    }
+
+    public ConversationContext<T> newEntity() {
+        return isNewEntity(true);
+    }
+
+    public boolean isNewEntity() {
+        return isNewEntity;
+    }
+
+    /**
+     * Use this method if you want the entity to be loaded afterward.
+     */
+    public void setEntityId(Serializable entityId) {
+        setVar("entityId", entityId);
+    }
+
+    public ConversationContext<T> entityId(Serializable entityId) {
+        setEntityId(entityId);
+        return this;
+    }
+
+    @SuppressWarnings("unchecked")
+    public <PK> PK getEntityIdAndRemove() {
+        return (PK) vars.remove("entityId");
+    }
+
+    /**
+     * Sets the label displayed in the conversation menu.
+     * @param labelKey the resource property key.
+     * @param labelKeyArgs the optional args
+     */
+    public void setLabelKey(String labelKey, Object... labelKeyArgs) {
+        this.labelKey = labelKey;
+        this.labelKeyArgs = labelKeyArgs;
+    }
+
+    public ConversationContext<T> labelKey(String labelKey, Object... labelKeyArgs) {
+        setLabelKey(labelKey, labelKeyArgs);
+        return this;
+    }
+
+    /**
+     * Resolve the label at runtime as it depends on the current language.
+     */
+    public String getLabel() {
+        return ResourcesUtil.getInstance().getProperty(labelKey, labelKeyArgs);
+    }
+
+    /**
+     * Sets the viewUri attached to this context. 
+     */
+    public void setViewUri(String viewUri) {
+        this.viewUri = viewUri;
+    }
+
+    public ConversationContext<T> viewUri(String viewUri) {
+        setViewUri(viewUri);
+        return this;
+    }
+
+    /**
+     * The viewUri attached to this context.
+     */
+    public String getViewUri() {
+        return viewUri;
+    }
+
+    /**
+     * Sets the <code>sub</code> variable. This variable is used in the xhtml view to render certain menus/buttons.
+     */
+    public void setSub(boolean sub) {
+        setVar("sub", sub);
+    }
+
+    public ConversationContext<T> sub(boolean sub) {
+        setSub(sub);
+        return this;
+    }
+
+    public ConversationContext<T> sub() {
+        return sub(true);
+    }
+
+    public boolean isSub() {
+        return getVar("sub", Boolean.class) != null ? getVar("sub", Boolean.class) : false;
+    }
+
+    /**
+     * Sets the <code>readonly</code> variable.
+     */
+    public void setReadonly(boolean readonly) {
+        setVar("readonly", readonly);
+    }
+
+    public ConversationContext<T> readonly(boolean readonly) {
+        setReadonly(readonly);
+        return this;
+    }
+
+    public ConversationContext<T> readonly() {
+        return readonly(true);
+    }
+
+    public boolean isReadOnly() {
+        return getVar("readonly", Boolean.class) != null ? getVar("readonly", Boolean.class) : false;
+    }
+
+    /**
+     * Sets the <code>print</code> variable. It activates a printer friendly mode.
+     */
+    public void setPrint(boolean print) {
+        setVar("print", print);
+    }
+
+    public ConversationContext<T> print(boolean print) {
+        setPrint(print);
+        return this;
+    }
+
+    public ConversationContext<T> print() {
+        return print(true);
+    }
+
+    public boolean isPrint() {
+        return getVar("print", Boolean.class) != null ? getVar("print", Boolean.class) : false;
+    }
+
+    /**
+     * Sets the <code>dependentEntities</code> variables. It keeps track of entities to be saved/merged just as the primary <code>entity</code>.
+     */
+    public ConversationContext<T> dependentEntity(Identifiable<? extends Serializable>... dependents) {
+        addDependentEntities(newArrayList(dependents));
+        return this;
+    }
+
+    public void addDependentEntity(Identifiable<? extends Serializable> dependent) {
+        Set<Identifiable<? extends Serializable>> dependents = getDependents();
+        dependents.add(dependent);
+
+        setVar("dependent", dependents);
+    }
+
+    public void addDependentEntities(Collection<? extends Identifiable<? extends Serializable>> dependentsCollection) {
+        Set<Identifiable<? extends Serializable>> dependents = getDependents();
+        dependents.addAll(dependentsCollection);
+
+        setVar("dependent", dependents);
+    }
+
+    public Set<Identifiable<? extends Serializable>> getDependentEntities() {
+        Set<Identifiable<? extends Serializable>> dependents = getDependents();
+        return unmodifiableSet(dependents);
+    }
+
+    public void clearDependentEntities() {
+        setVar("dependent", newHashSet());
+    }
+
+    /**
+     * @return dependents entities set if exists, empty set otherwise.
+     */
+    @SuppressWarnings("unchecked")
+    private Set<Identifiable<? extends Serializable>> getDependents() {
+        Set<Identifiable<? extends Serializable>> dependents = (Set<Identifiable<? extends Serializable>>) getVar("dependent", Set.class);
+        if (dependents == null) {
+            dependents = newHashSet();
+        }
+        return dependents;
+    }
+
+    /**
+     * The callback to use just after this context is flagged for pop from the conversation's context stack. 
+     */
+    public void setCallBack(ConversationCallBack<T> callBack) {
+        this.callBack = callBack;
+    }
+
+    public ConversationContext<T> callBack(ConversationCallBack<T> callBack) {
+        setCallBack(callBack);
+        return this;
+    }
+
+    public ConversationCallBack<T> getCallBack() {
+        return callBack;
+    }
+
+    /**
+     * Returns the URL associated to this context. It is used for direct access, from the conversation menu or the filter.
+     */
+    public String getUrl() {
+        checkViewUriAndConversationId();
+        return viewUri + "?" + cidParamNameValue(conversationId, getId());
+    }
+
+    /**
+     * Return the view to display for this context. It is used by actions when returning a view.
+     */
+    public String view() {
+        checkViewUriAndConversationId();
+        return viewUri + "?faces-redirect=true&" + cidParamNameValue(conversationId, getId());
+    }
+
+    private void checkViewUriAndConversationId() {
+        if (viewUri == null) {
+            throw new IllegalStateException("Developer! viewUri is null, it must be set before calling view() or getUrl() methods");
+        }
+
+        if (conversationId == null) {
+            throw new IllegalStateException("Developer! conversationId is null, it must be set before calling view() or getUrl() methods");
+        }
+    }
+
+    // ----------------------------------
+    // Support for conversation scope
+    // ----------------------------------
+
+    /**
+     * Add a conversation scoped bean spring bean to this context. A bean is added either 'automatically' or manually.
+     * In the latter case, it is autowired afterward. (see {@link ConversationScope}).
+     */
+    public void addBean(String name, Object bean) {
+        beans.put(name, bean);
+    }
+
+    @SuppressWarnings("unchecked")
+    public <E> E getBean(String name, Class<E> expectedType) {
+        return (E) beans.get(name);
+    }
+
+    public void setVar(String name, Object var) {
+        vars.put(name, var);
+    }
+
+    public Object getVar(String name) {
+        return vars.get(name);
+    }
+
+    @SuppressWarnings("unchecked")
+    public <E> E getVar(String name, Class<E> expectedType) {
+        return (E) vars.get(name);
+    }
+
+    // ---------------------------
+    // For debug/training purposes 
+    // ---------------------------
+
+    public List<Entry<String, Object>> getBeanEntries() {
+        return newArrayList(beans.entrySet());
+    }
+
+    public List<Entry<String, Object>> getVarEntries() {
+        return newArrayList(vars.entrySet());
+    }
+}
\ No newline at end of file
diff --git a/src/main/generated-java/com/h2/demo/web/conversation/ConversationFilter.java b/src/main/generated-java/com/h2/demo/web/conversation/ConversationFilter.java
new file mode 100644
index 0000000..81a02ee
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/web/conversation/ConversationFilter.java
@@ -0,0 +1,87 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-jsf2-spring-conversation:src/main/java/conversation/ConversationFilter.p.vm.java
+ */
+package com.h2.demo.web.conversation;
+
+import static com.h2.demo.web.conversation.ConversationHolder.getCurrentConversation;
+import static com.h2.demo.web.conversation.ConversationUtil.getConversationContextId;
+import static com.h2.demo.web.conversation.ConversationUtil.getConversationId;
+
+import java.io.IOException;
+
+import javax.inject.Inject;
+import javax.inject.Named;
+import javax.servlet.Filter;
+import javax.servlet.FilterChain;
+import javax.servlet.FilterConfig;
+import javax.servlet.ServletException;
+import javax.servlet.ServletRequest;
+import javax.servlet.ServletResponse;
+import javax.servlet.http.HttpServletRequest;
+import javax.servlet.http.HttpServletResponse;
+
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+/**
+ * Filter responsible for creating/resuming {@link Conversation}.
+ * By convention, the conversation id and the context id are carried by the _cid parameter.
+ * To create a new conversation, you must request the initial conversation view and pass the _ncid_=value parameter.
+ */
+@Named
+public class ConversationFilter implements Filter {
+    private static final Logger log = LoggerFactory.getLogger(ConversationFilter.class);
+
+    @Inject
+    private ConversationManager conversationManager;
+
+    @Override
+    public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws IOException, ServletException {
+        HttpServletRequest request = (HttpServletRequest) servletRequest;
+        HttpServletResponse response = (HttpServletResponse) servletResponse;
+
+        String cid = getConversationId(request);
+
+        if (cid != null) {
+            String ccid = getConversationContextId(request);
+
+            // -----------------------------
+            // RESUME existing conversation
+            // -----------------------------
+            try {
+                conversationManager.resumeConversation(cid, ccid, request);
+                log.debug("Conv. {} resumed. Nb ctx: {}", cid, getCurrentConversation().getConversationContextesCount());
+            } catch (UnexpectedConversationException uue) {
+                log.error(uue.getMessage());
+                response.sendRedirect(request.getContextPath() + uue.getRedirectUrl());
+                return;
+            }
+
+            try {
+                filterChain.doFilter(request, response);
+            } finally {
+                conversationManager.pauseCurrentConversation(request);
+            }
+        } else if (!request.getRequestURI().contains("/javax.faces.resource/") && "true".equals(request.getParameter("_ncid_"))) {
+            throw new IllegalArgumentException("This version does not support ncid parameter");
+        } else {
+            // -----------------------------
+            // Not related to conversations
+            // -----------------------------
+            filterChain.doFilter(request, response);
+        }
+    }
+
+    @Override
+    public void init(FilterConfig filterConfig) throws ServletException {
+    }
+
+    @Override
+    public void destroy() {
+    }
+}
\ No newline at end of file
diff --git a/src/main/generated-java/com/h2/demo/web/conversation/ConversationHolder.java b/src/main/generated-java/com/h2/demo/web/conversation/ConversationHolder.java
new file mode 100644
index 0000000..9857035
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/web/conversation/ConversationHolder.java
@@ -0,0 +1,33 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-jsf2-spring-conversation:src/main/java/conversation/ConversationHolder.p.vm.java
+ */
+package com.h2.demo.web.conversation;
+
+/**
+ * Holds the current {@link Conversation} in the current thread of execution.
+ */
+public final class ConversationHolder {
+    private static final ThreadLocal<Conversation> currentConversationHolder = new ThreadLocal<Conversation>();
+
+    private ConversationHolder() {
+    }
+
+    /**
+     * Returns the {@link Conversation} that is bound to the current thread of execution.
+     */
+    public static Conversation getCurrentConversation() {
+        return currentConversationHolder.get();
+    }
+
+    /**
+     * Bind the passed {@link Conversation} to the current thread of execution.
+     */
+    public static void setCurrentConversation(Conversation conversation) {
+        currentConversationHolder.set(conversation);
+    }
+}
\ No newline at end of file
diff --git a/src/main/generated-java/com/h2/demo/web/conversation/ConversationListener.java b/src/main/generated-java/com/h2/demo/web/conversation/ConversationListener.java
new file mode 100644
index 0000000..bcf7b30
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/web/conversation/ConversationListener.java
@@ -0,0 +1,39 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-jsf2-spring-conversation:src/main/java/conversation/ConversationListener.p.vm.java
+ */
+package com.h2.demo.web.conversation;
+
+import javax.faces.lifecycle.Lifecycle;
+import javax.servlet.http.HttpServletRequest;
+
+/**
+ * Interface to be implemented if you wish to listen to the {@link Lifecycle} of {@link Conversation conversations}.
+ */
+public interface ConversationListener {
+
+    /**
+     * Called after a {@link Conversation} has been created but before it starts.
+     * @param conversation the conversation that was created.
+     */
+    void conversationCreated(Conversation conversation);
+
+    /**
+     * Called to indicate the passed conversation is being resumed.
+     */
+    void conversationResuming(Conversation conversation, HttpServletRequest request);
+
+    /**
+     * Called to indicate the passed Conversation is being paused.
+     */
+    void conversationPausing(Conversation conversation);
+
+    /**
+     * Called to indicate the conversation is ending.
+     */
+    void conversationEnding(Conversation conversation);
+}
\ No newline at end of file
diff --git a/src/main/generated-java/com/h2/demo/web/conversation/ConversationManager.java b/src/main/generated-java/com/h2/demo/web/conversation/ConversationManager.java
new file mode 100644
index 0000000..91fb0a5
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/web/conversation/ConversationManager.java
@@ -0,0 +1,273 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-jsf2-spring-conversation:src/main/java/conversation/ConversationManager.p.vm.java
+ */
+package com.h2.demo.web.conversation;
+
+import static com.google.common.collect.Maps.newTreeMap;
+import static com.h2.demo.web.conversation.ConversationHolder.setCurrentConversation;
+
+import java.util.Collection;
+import java.util.Comparator;
+import java.util.Map;
+
+import javax.faces.context.FacesContext;
+import javax.inject.Named;
+import javax.inject.Singleton;
+import javax.servlet.http.HttpServletRequest;
+import javax.servlet.http.HttpSession;
+
+import org.omnifaces.util.Faces;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+import org.springframework.beans.BeansException;
+import org.springframework.context.ApplicationContext;
+import org.springframework.context.ApplicationContextAware;
+import org.springframework.context.annotation.Lazy;
+
+/**
+ * The conversation manager is responsible for creating conversations, managing their lifecycle and calling the conversation listeners.
+ */
+@Named
+@Singleton
+@Lazy(false)
+public class ConversationManager implements ApplicationContextAware {
+    private static final Logger log = LoggerFactory.getLogger(ConversationManager.class);
+    private static final String CONVERSATION_MAP = "conversationMap";
+    private static ConversationManager instance;
+
+    public static ConversationManager getInstance() {
+        return instance;
+    }
+
+    /**
+     * This method should be used only in the following cases: 1) from code having no spring awareness, like filters. 2) from code that are session scoped in
+     * order to avoid serialization of the service. In other cases, please have the conversationManager injected normally.
+     */
+
+    private ApplicationContext applicationContext;
+    private Collection<ConversationListener> conversationListeners;
+    protected int maxConversations = 5;
+
+    public ConversationManager() {
+        instance = this;
+    }
+
+    @Override
+    public void setApplicationContext(ApplicationContext applicationContext) throws BeansException {
+        this.applicationContext = applicationContext;
+    }
+
+    /**
+     * The maximum number of conversations a given user can open simultaneously.
+     */
+    public int getMaxConversations() {
+        return maxConversations;
+    }
+
+    /**
+     * Return the number of conversations for the current user 
+     */
+    public int getNbConversations() {
+        return conversationMap().size();
+    }
+
+    /**
+     * Whether the max number of conversations per user is reached. Used in createConversation (which has no FacesContext yet).
+     */
+    public boolean isMaxConversationsReached(HttpSession session) {
+        return conversationMap(session).size() >= maxConversations;
+    }
+
+    /**
+     * Returns the current conversation. Note that this method is mainly here so it can be used from the view.
+     * Use directly ConversationHolder.getCurrentConversation() from Java code.
+     */
+    public Conversation getCurrentConversation() {
+        return ConversationHolder.getCurrentConversation();
+    }
+
+    // --------------------------------------
+    // Manage conversation lifecycle
+    // --------------------------------------
+
+    public Conversation beginConversation(ConversationContext<?> ctx) {
+        HttpSession session = Faces.getSession();
+        Map<String, Conversation> conversationMap = conversationMap(session);
+
+        handleMaxConversationsReached(session, conversationMap);
+
+        Conversation conversation = Conversation.newConversation(session, ctx);
+        conversationMap.put(conversation.getId(), conversation);
+        conversationCreated(conversation);
+        conversation.pushNextContextIfNeeded();
+        return conversation;
+    }
+
+    private void handleMaxConversationsReached(HttpSession session, Map<String, Conversation> conversationMap) {
+        if (isMaxConversationsReached(session)) {
+            // FIFO conversation eviction
+            String keyToEvict = conversationMap.keySet().iterator().next();
+            log.info("Max number of conversations ({}) reached. Evicting conversation {} using fifo policy", maxConversations, keyToEvict);
+            conversationMap.remove(keyToEvict); // TODO: special treatment for evicted conversation?
+        }
+    }
+
+    /**
+     * Resume the {@link Conversation} having the passed id. Before resuming it, if a pending ConversationContext is present, 
+     * it is pushed on the conversation contextes stack. 
+     * @param id the id of the conversation to resume 
+     * @param ccid the id of the conversation context that should be on top of the stack. 
+     * @param request
+     * @throws UnexpectedConversationException
+     */
+    public void resumeConversation(String id, String ccid, HttpServletRequest request) throws UnexpectedConversationException {
+        Conversation conversation = conversationMap(request.getSession()).get(id);
+
+        if (conversation != null) {
+            conversation.pushNextContextIfNeeded();
+
+            // compare the context id
+            if (!conversation.getCurrentContext().getId().equals(ccid)) {
+                conversation.handleOutOfSynchContext(ccid, request);
+            }
+            conversationResuming(conversation, request);
+            setCurrentConversation(conversation);
+        } else {
+            throw new UnexpectedConversationException("No conversation found for id=" + id, request.getRequestURI(), "/home.faces");
+        }
+    }
+
+    /**
+     * Pause the current conversation. Before pausing it, pops the current context as needed.
+     * In case all contextes are popped, then conversation is ended.
+     */
+    public void pauseCurrentConversation(HttpServletRequest request) {
+        Conversation conversation = getCurrentConversation();
+
+        // we check for not null because the conversation could have 
+        // been ended during the current request.
+        if (conversation != null) {
+            // call order of 2 methods below is important as we want all the contextes (even the one we are about to be popped)
+            // to be visible from the conversation listener.
+            conversationPausing(conversation);
+            conversation.popContextesIfNeeded();
+
+            if (conversation.getConversationContextesCount() == 0) {
+                // all was popped, we consider that this is the natural end of the conversation.
+                endCurrentConversation(request.getSession());
+            } else {
+                setCurrentConversation(null);
+            }
+        }
+    }
+
+    /**
+     * End the current Conversation. Invoked from place where no FacesContext is present.
+     */
+    public void endCurrentConversation(HttpSession session) {
+        Conversation endedConversation = endCurrentConversationCommon();
+        conversationMap(session).remove(endedConversation.getId());
+    }
+
+    /**
+     * End the current Conversation. Requires a FacesContext to be present.
+     */
+    public void endCurrentConversation() {
+        Conversation endedConversation = endCurrentConversationCommon();
+        conversationMap().remove(endedConversation.getId());
+    }
+
+    private Conversation endCurrentConversationCommon() {
+        Conversation conversation = getCurrentConversation();
+        log.info("Ending conversation {}", conversation.getId());
+        conversationEnding(conversation);
+        setCurrentConversation(null);
+        return conversation;
+    }
+
+    // --------------------------------------------
+    // Impl details
+    // --------------------------------------------    
+
+    /**
+     * Holds the current user's conversations.
+     * Note: When calling this method, you must be sure that the FacesContext is present. For example, FacesContext is not present in ConversationFilter.
+     */
+    public Map<String, Conversation> conversationMap() {
+        @SuppressWarnings("unchecked")
+        Map<String, Conversation> map = (Map<String, Conversation>) sessionMap().get(CONVERSATION_MAP);
+        if (map == null) {
+            map = newConversationOrderedMap();
+            sessionMap().put(CONVERSATION_MAP, map);
+        }
+        return map;
+    }
+
+    private Map<String, Conversation> conversationMap(HttpSession session) {
+        @SuppressWarnings("unchecked")
+        Map<String, Conversation> map = (Map<String, Conversation>) session.getAttribute(CONVERSATION_MAP);
+        if (map == null) {
+            map = newConversationOrderedMap();
+            session.setAttribute(CONVERSATION_MAP, map);
+        }
+        return map;
+    }
+
+    /**
+     * Constructs an ordered map so we can evict conversation on a FIFO basis.
+     * We rely on an Integer comparator as String comparison would not be exact.
+     */
+    private Map<String, Conversation> newConversationOrderedMap() {
+        return newTreeMap(new Comparator<String>() {
+            @Override
+            public int compare(String s1, String s2) {
+                return Integer.valueOf(s1).compareTo(Integer.valueOf(s2));
+            }
+        });
+    }
+
+    private Map<String, Object> sessionMap() {
+        return FacesContext.getCurrentInstance().getExternalContext().getSessionMap();
+    }
+
+    // --------------------------------------------
+    // Support for conversation listeners
+    // --------------------------------------------    
+
+    private Collection<ConversationListener> getConversationListeners() {
+        if (conversationListeners == null) {
+            conversationListeners = applicationContext.getBeansOfType(ConversationListener.class).values();
+
+        }
+        return conversationListeners;
+    }
+
+    private void conversationCreated(Conversation conversation) {
+        for (ConversationListener cl : getConversationListeners()) {
+            cl.conversationCreated(conversation);
+        }
+    }
+
+    private void conversationPausing(Conversation conversation) {
+        for (ConversationListener cl : getConversationListeners()) {
+            cl.conversationPausing(conversation);
+        }
+    }
+
+    private void conversationResuming(Conversation conversation, HttpServletRequest request) {
+        for (ConversationListener cl : getConversationListeners()) {
+            cl.conversationResuming(conversation, request);
+        }
+    }
+
+    private void conversationEnding(Conversation conversation) {
+        for (ConversationListener cl : getConversationListeners()) {
+            cl.conversationEnding(conversation);
+        }
+    }
+}
diff --git a/src/main/generated-java/com/h2/demo/web/conversation/ConversationUtil.java b/src/main/generated-java/com/h2/demo/web/conversation/ConversationUtil.java
new file mode 100644
index 0000000..02efc1b
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/web/conversation/ConversationUtil.java
@@ -0,0 +1,40 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-jsf2-spring-conversation:src/main/java/conversation/ConversationUtil.p.vm.java
+ */
+package com.h2.demo.web.conversation;
+
+import static org.apache.commons.lang.StringUtils.substringAfter;
+import static org.apache.commons.lang.StringUtils.substringBefore;
+
+import javax.servlet.http.HttpServletRequest;
+
+public final class ConversationUtil {
+    public static final String CID_PARAM_NAME = "_cid";
+    public static final String CID_PARAM_SEPARATOR = "c";
+
+    private ConversationUtil() {
+    }
+
+    public static String cidParamValue(String conversationId, String conversationContextId) {
+        return conversationId + CID_PARAM_SEPARATOR + conversationContextId;
+    }
+
+    public static String cidParamNameValue(String conversationId, String conversationContextId) {
+        return CID_PARAM_NAME + "=" + cidParamValue(conversationId, conversationContextId);
+    }
+
+    public static String getConversationId(HttpServletRequest request) {
+        String _cid = request.getParameter(CID_PARAM_NAME);
+        return _cid != null ? substringBefore(_cid, CID_PARAM_SEPARATOR) : null;
+    }
+
+    public static String getConversationContextId(HttpServletRequest request) {
+        String _cid = request.getParameter(CID_PARAM_NAME);
+        return _cid != null ? substringAfter(_cid, CID_PARAM_SEPARATOR) : null;
+    }
+}
\ No newline at end of file
diff --git a/src/main/generated-java/com/h2/demo/web/conversation/UnexpectedConversationException.java b/src/main/generated-java/com/h2/demo/web/conversation/UnexpectedConversationException.java
new file mode 100644
index 0000000..92d7e26
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/web/conversation/UnexpectedConversationException.java
@@ -0,0 +1,26 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-jsf2-spring-conversation:src/main/java/conversation/UnexpectedConversationException.p.vm.java
+ */
+package com.h2.demo.web.conversation;
+
+/**
+ * Exception thrown when the end user requests an unexpected URL, that is an URL which is out of sync with the current conversation.
+ */
+public class UnexpectedConversationException extends Exception {
+    private static final long serialVersionUID = 1L;
+    private final String redirectUrl;
+
+    public UnexpectedConversationException(String reason, String unexpectedUrl, String redirectUrl) {
+        super(reason + ". requested url: " + unexpectedUrl + " => we redirect her to " + redirectUrl);
+        this.redirectUrl = redirectUrl;
+    }
+
+    public String getRedirectUrl() {
+        return redirectUrl;
+    }
+}
\ No newline at end of file
diff --git a/src/main/generated-java/com/h2/demo/web/conversation/component/ConversationBreadCrumb.java b/src/main/generated-java/com/h2/demo/web/conversation/component/ConversationBreadCrumb.java
new file mode 100644
index 0000000..efbea80
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/web/conversation/component/ConversationBreadCrumb.java
@@ -0,0 +1,72 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-jsf2-spring-conversation:src/main/java/conversation/component/ConversationBreadCrumb.p.vm.java
+ */
+package com.h2.demo.web.conversation.component;
+
+import static com.h2.demo.web.conversation.ConversationHolder.getCurrentConversation;
+import static org.apache.commons.lang.StringUtils.isNotBlank;
+
+import java.util.Iterator;
+import java.util.Stack;
+
+import javax.inject.Named;
+import javax.inject.Singleton;
+
+import org.primefaces.model.menu.DefaultMenuItem;
+import org.primefaces.model.menu.DynamicMenuModel;
+import org.primefaces.model.menu.MenuModel;
+
+import com.h2.demo.web.conversation.Conversation;
+import com.h2.demo.web.conversation.ConversationContext;
+
+/**
+ * The Conversation breadcrumb displays the current conversation contextes.
+ * Usage: &lt;breadcrumb model="#{conversationBreadCrumb.model}" rendered="#{conversationBreadCrumb.render}" /&gt;
+ */
+@Named
+@Singleton
+public class ConversationBreadCrumb {
+
+    public boolean getRender() {
+        Conversation currentConversation = getCurrentConversation();
+        return currentConversation == null ? false : !currentConversation.getConversationContextes().isEmpty();
+    }
+
+    public MenuModel getModel() {
+        MenuModel model = new DynamicMenuModel();
+        Stack<ConversationContext<?>> ctxStack = getCurrentConversation().getConversationContextes();
+        int beforeLastIndex = ctxStack.size() - 2;
+        Iterator<ConversationContext<?>> iterator = ctxStack.iterator();
+
+        // first item is rendered as ui-icon-home => we don't want it so we disable it.
+        DefaultMenuItem menuItem = new DefaultMenuItem();
+        menuItem.setRendered(false);
+        model.addElement(menuItem);
+
+        int i = 0;
+        while (iterator.hasNext()) {
+            ConversationContext<?> ctx = iterator.next();
+            if (isNotBlank(ctx.getLabel())) {
+                menuItem = new DefaultMenuItem();
+                menuItem.setValue(ctx.getLabel());
+                if (i == beforeLastIndex && beforeLastIndex > 0) {
+                    // calls back button action which will trigger the callback 
+                    // as if the user had pressed on 'back' button.
+                    menuItem.setOnclick("APP.menu.back()");
+                    menuItem.setImmediate(true);
+                } else {
+                    menuItem.setDisabled(true);
+                }
+
+                model.addElement(menuItem);
+            }
+            i++;
+        }
+        return model;
+    }
+}
diff --git a/src/main/generated-java/com/h2/demo/web/conversation/component/ConversationMenu.java b/src/main/generated-java/com/h2/demo/web/conversation/component/ConversationMenu.java
new file mode 100644
index 0000000..cbb58fb
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/web/conversation/component/ConversationMenu.java
@@ -0,0 +1,50 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-jsf2-spring-conversation:src/main/java/conversation/component/ConversationMenu.p.vm.java
+ */
+package com.h2.demo.web.conversation.component;
+
+import static org.apache.commons.lang.StringUtils.isNotBlank;
+
+import javax.inject.Inject;
+import javax.inject.Named;
+import javax.inject.Singleton;
+
+import org.primefaces.model.menu.DefaultMenuItem;
+import org.primefaces.model.menu.DynamicMenuModel;
+import org.primefaces.model.menu.MenuModel;
+
+import com.h2.demo.web.conversation.Conversation;
+import com.h2.demo.web.conversation.ConversationManager;
+
+@Named
+@Singleton
+public class ConversationMenu {
+    @Inject
+    private ConversationManager conversationManager;
+
+    public boolean getRender() {
+        return !conversationManager.conversationMap().isEmpty();
+    }
+
+    public MenuModel getModel() {
+        MenuModel model = new DynamicMenuModel();
+        Conversation currentConversation = conversationManager.getCurrentConversation();
+        for (Conversation conversation : conversationManager.conversationMap().values()) {
+            DefaultMenuItem htmlMenuItem = new DefaultMenuItem();
+            htmlMenuItem.setValue(conversation.getLabel());
+            htmlMenuItem.setUrl(conversation.getUrl());
+            if (currentConversation != null && currentConversation.getId().equals(conversation.getId())) {
+                htmlMenuItem.setDisabled(true);
+            }
+            if (isNotBlank(conversation.getLabel())) {
+                model.addElement(htmlMenuItem);
+            }
+        }
+        return model;
+    }
+}
diff --git a/src/main/generated-java/com/h2/demo/web/converter/support/BooleanConverter.java b/src/main/generated-java/com/h2/demo/web/converter/support/BooleanConverter.java
new file mode 100644
index 0000000..25656a2
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/web/converter/support/BooleanConverter.java
@@ -0,0 +1,39 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-jsf2-spring-conversation:src/main/java/converter/support/BooleanConverter.p.vm.java
+ */
+package com.h2.demo.web.converter.support;
+
+import javax.faces.component.UIComponent;
+import javax.faces.context.FacesContext;
+import javax.faces.convert.Converter;
+import javax.inject.Named;
+import javax.inject.Singleton;
+
+/**
+ * Boolean converter, used by <code>selectManyCheckbox</code> tag.
+ */
+@Named
+@Singleton
+public class BooleanConverter implements Converter {
+
+    @Override
+    public Object getAsObject(FacesContext arg0, UIComponent arg1, String arg2) {
+        if (arg2 != null && !arg2.isEmpty()) {
+            return Boolean.valueOf(arg2);
+        }
+        return null;
+    }
+
+    @Override
+    public String getAsString(FacesContext arg0, UIComponent arg1, Object arg2) {
+        if (arg2 instanceof Boolean) {
+            return arg2.toString();
+        }
+        return "";
+    }
+}
\ No newline at end of file
diff --git a/src/main/generated-java/com/h2/demo/web/converter/support/GenericJsfConverter.java b/src/main/generated-java/com/h2/demo/web/converter/support/GenericJsfConverter.java
new file mode 100644
index 0000000..fe2e029
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/web/converter/support/GenericJsfConverter.java
@@ -0,0 +1,44 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-jsf2-spring-conversation:src/main/java/converter/support/GenericJsfConverter.p.vm.java
+ */
+package com.h2.demo.web.converter.support;
+
+import javax.faces.component.UIComponent;
+import javax.faces.context.FacesContext;
+import javax.faces.convert.Converter;
+import javax.faces.convert.ConverterException;
+import javax.inject.Named;
+import javax.inject.Singleton;
+
+import org.apache.commons.lang.RandomStringUtils;
+
+/**
+ * Base JSF converter to store objects in the jsf tree. 
+ */
+@Named
+@Singleton
+public class GenericJsfConverter implements Converter {
+    private static final String COMPONENT_UNIQUE_PREFIX = "object:";
+    private static final String COMPONENT_NULL_VALUE = COMPONENT_UNIQUE_PREFIX + "null";
+
+    public Object getAsObject(FacesContext context, UIComponent component, String value) throws ConverterException {
+        if (value == null || COMPONENT_NULL_VALUE.equals(value)) {
+            return null;
+        }
+        return component.getAttributes().get(value);
+    }
+
+    public String getAsString(FacesContext context, UIComponent component, Object object) {
+        if (object == null) {
+            return COMPONENT_NULL_VALUE;
+        }
+        String unique = COMPONENT_UNIQUE_PREFIX + RandomStringUtils.randomAlphanumeric(36);
+        component.getAttributes().put(unique, object);
+        return unique;
+    }
+}
\ No newline at end of file
diff --git a/src/main/generated-java/com/h2/demo/web/converter/support/LocalDateConverter.java b/src/main/generated-java/com/h2/demo/web/converter/support/LocalDateConverter.java
new file mode 100644
index 0000000..3d7ba63
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/web/converter/support/LocalDateConverter.java
@@ -0,0 +1,102 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-jsf2-spring-conversation:src/main/java/converter/support/LocalDateConverter.p.vm.java
+ */
+package com.h2.demo.web.converter.support;
+
+import javax.faces.component.PartialStateHolder;
+import javax.faces.component.UIComponent;
+import javax.faces.context.FacesContext;
+import javax.faces.convert.Converter;
+import javax.inject.Named;
+import javax.inject.Singleton;
+
+import org.joda.time.LocalDate;
+import org.joda.time.format.DateTimeFormat;
+import org.joda.time.format.DateTimeFormatter;
+
+import com.h2.demo.context.LocaleHolder;
+
+/**
+ * JSF converter for JodaTime {@link LocalDate}.
+ */
+@Named
+@Singleton
+public class LocalDateConverter implements Converter, PartialStateHolder {
+
+    private static final String pattern = "yyyy-MM-dd";
+    private DateTimeFormatter formatter = DateTimeFormat.forPattern(pattern);
+
+    /**
+     * <code>p:calendar</code> must to use the same pattern as the converter, so we provide it here.
+     */
+    public String getPattern() {
+        return pattern;
+    }
+
+    @Override
+    public Object getAsObject(FacesContext pFacesCtx, UIComponent pComponent, String value) {
+        if (value == null || value.isEmpty()) {
+            return null;
+        }
+
+        return formatter.withLocale(LocaleHolder.getLocale()).parseDateTime(value).toLocalDate();
+    }
+
+    @Override
+    public String getAsString(FacesContext pFacesCtx, UIComponent pComponent, Object value) {
+        if (value == null) {
+            return "";
+        }
+
+        if (value instanceof LocalDate) {
+            return formatter.withLocale(LocaleHolder.getLocale()).print((LocalDate) value);
+        }
+
+        throw new IllegalArgumentException("Expecting a LocalDate instance but received " + value.getClass().getName());
+    }
+
+    // PartialStateHolder implementation
+
+    @Override
+    public Object saveState(FacesContext context) {
+        return "";
+    }
+
+    @Override
+    public void restoreState(FacesContext context, Object state) {
+    }
+
+    private boolean transientFlag = true;
+
+    @Override
+    public boolean isTransient() {
+        return transientFlag;
+    }
+
+    @Override
+    public void setTransient(boolean transientFlag) {
+        this.transientFlag = transientFlag;
+    }
+
+    private boolean initialState;
+
+    @Override
+    public void markInitialState() {
+        initialState = true;
+    }
+
+    @Override
+    public boolean initialStateMarked() {
+        return initialState;
+    }
+
+    @Override
+    public void clearInitialState() {
+        initialState = false;
+    }
+}
\ No newline at end of file
diff --git a/src/main/generated-java/com/h2/demo/web/converter/support/LocalDateTimeConverter.java b/src/main/generated-java/com/h2/demo/web/converter/support/LocalDateTimeConverter.java
new file mode 100644
index 0000000..8a703ac
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/web/converter/support/LocalDateTimeConverter.java
@@ -0,0 +1,102 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-jsf2-spring-conversation:src/main/java/converter/support/LocalDateTimeConverter.p.vm.java
+ */
+package com.h2.demo.web.converter.support;
+
+import javax.faces.component.PartialStateHolder;
+import javax.faces.component.UIComponent;
+import javax.faces.context.FacesContext;
+import javax.faces.convert.Converter;
+import javax.inject.Named;
+import javax.inject.Singleton;
+
+import org.joda.time.LocalDateTime;
+import org.joda.time.format.DateTimeFormat;
+import org.joda.time.format.DateTimeFormatter;
+
+import com.h2.demo.context.LocaleHolder;
+
+/**
+ * JSF converter for JodaTime {@link LocalDateTime}.
+ */
+@Named
+@Singleton
+public class LocalDateTimeConverter implements Converter, PartialStateHolder {
+
+    private static final String pattern = "yyyy-MM-dd HH:mm";
+    private DateTimeFormatter formatter = DateTimeFormat.forPattern(pattern);
+
+    /**
+     * <code>p:calendar</code> must to use the same pattern as the converter, so we provide it here.
+     */
+    public String getPattern() {
+        return pattern;
+    }
+
+    @Override
+    public Object getAsObject(FacesContext pFacesCtx, UIComponent pComponent, String value) {
+        if (value == null || value.isEmpty()) {
+            return null;
+        }
+
+        return formatter.withLocale(LocaleHolder.getLocale()).parseDateTime(value).toLocalDateTime();
+    }
+
+    @Override
+    public String getAsString(FacesContext pFacesCtx, UIComponent pComponent, Object value) {
+        if (value == null) {
+            return "";
+        }
+
+        if (value instanceof LocalDateTime) {
+            return formatter.withLocale(LocaleHolder.getLocale()).print((LocalDateTime) value);
+        }
+
+        throw new IllegalArgumentException("Expecting a LocalDateTime instance but received " + value.getClass().getName());
+    }
+
+    // PartialStateHolder implementation
+
+    @Override
+    public Object saveState(FacesContext context) {
+        return "";
+    }
+
+    @Override
+    public void restoreState(FacesContext context, Object state) {
+    }
+
+    private boolean transientFlag = true;
+
+    @Override
+    public boolean isTransient() {
+        return transientFlag;
+    }
+
+    @Override
+    public void setTransient(boolean transientFlag) {
+        this.transientFlag = transientFlag;
+    }
+
+    private boolean initialState;
+
+    @Override
+    public void markInitialState() {
+        initialState = true;
+    }
+
+    @Override
+    public boolean initialStateMarked() {
+        return initialState;
+    }
+
+    @Override
+    public void clearInitialState() {
+        initialState = false;
+    }
+}
\ No newline at end of file
diff --git a/src/main/generated-java/com/h2/demo/web/domain/AccountController.java b/src/main/generated-java/com/h2/demo/web/domain/AccountController.java
new file mode 100644
index 0000000..ad97a63
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/web/domain/AccountController.java
@@ -0,0 +1,41 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-jsf2-spring-conversation:src/main/java/domain/Controller.e.vm.java
+ */
+package com.h2.demo.web.domain;
+
+import javax.inject.Inject;
+import javax.inject.Named;
+import javax.inject.Singleton;
+
+import com.h2.demo.domain.Account;
+import com.h2.demo.domain.Account_;
+import com.h2.demo.printer.AccountPrinter;
+import com.h2.demo.repository.AccountRepository;
+import com.h2.demo.repository.support.SearchParameters;
+import com.h2.demo.web.domain.support.GenericController;
+import com.h2.demo.web.permission.AccountPermission;
+
+/**
+ * Stateless controller for {@link Account} conversation start.
+ */
+@Named
+@Singleton
+public class AccountController extends GenericController<Account, String> {
+    public static final String ACCOUNT_EDIT_URI = "/domain/accountEdit.faces";
+    public static final String ACCOUNT_SELECT_URI = "/domain/accountSelect.faces";
+
+    @Inject
+    public AccountController(AccountRepository accountRepository, AccountPermission accountPermission, AccountPrinter accountPrinter) {
+        super(accountRepository, accountPermission, accountPrinter, ACCOUNT_SELECT_URI, ACCOUNT_EDIT_URI);
+    }
+
+    @Override
+    protected SearchParameters defaultOrder(SearchParameters searchParameters) {
+        return searchParameters.asc(Account_.login);
+    }
+}
\ No newline at end of file
diff --git a/src/main/generated-java/com/h2/demo/web/domain/AccountEditForm.java b/src/main/generated-java/com/h2/demo/web/domain/AccountEditForm.java
new file mode 100644
index 0000000..1c9219e
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/web/domain/AccountEditForm.java
@@ -0,0 +1,104 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-jsf2-spring-conversation:src/main/java/domain/EditForm.e.vm.java
+ */
+package com.h2.demo.web.domain;
+
+import javax.annotation.PostConstruct;
+import javax.inject.Inject;
+import javax.inject.Named;
+
+import com.h2.demo.domain.Account;
+import com.h2.demo.domain.Account_;
+import com.h2.demo.domain.Address;
+import com.h2.demo.domain.Role;
+import com.h2.demo.repository.AccountRepository;
+import com.h2.demo.web.domain.support.GenericEditForm;
+import com.h2.demo.web.domain.support.GenericToManyAssociation;
+import com.h2.demo.web.domain.support.GenericToOneAssociation;
+import com.h2.demo.web.faces.ConversationContextScoped;
+import com.h2.demo.web.util.TabBean;
+
+/**
+ * View Helper/Controller to edit {@link Account}.
+ */
+@Named
+@ConversationContextScoped
+public class AccountEditForm extends GenericEditForm<Account, String> {
+    @Inject
+    protected AccountController accountController;
+    @Inject
+    protected AddressController addressController;
+    protected GenericToOneAssociation<Address, Integer> address;
+    @Inject
+    protected RoleController roleController;
+    protected GenericToManyAssociation<Role, Integer> roles;
+    protected TabBean tabBean = new TabBean();
+
+    @Inject
+    public AccountEditForm(AccountRepository accountRepository, AccountGraphLoader accountGraphLoader) {
+        super(accountRepository, accountGraphLoader);
+    }
+
+    /**
+     * View helper to store the x-to-many associations tab's index. 
+     */
+    @Override
+    public TabBean getTabBean() {
+        return tabBean;
+    }
+
+    /**
+     * The entity to edit/view.
+     */
+    public Account getAccount() {
+        return getEntity();
+    }
+
+    public String print() {
+        return accountController.print(getAccount());
+    }
+
+    @PostConstruct
+    void setupAddressActions() {
+        address = new GenericToOneAssociation<Address, Integer>(addressController, Account_.address) {
+            @Override
+            protected Address get() {
+                return getAccount().getAddress();
+            }
+
+            @Override
+            protected void set(Address address) {
+                getAccount().setAddress(address);
+            }
+        };
+    }
+
+    public GenericToOneAssociation<Address, Integer> getAddress() {
+        return address;
+    }
+
+    @PostConstruct
+    void setupRolesActions() {
+        roles = new GenericToManyAssociation<Role, Integer>(getAccount().getRoles(), roleController, Account_.roles) {
+            @Override
+            protected void remove(Role role) {
+                getAccount().removeRole(role);
+            }
+
+            @Override
+            protected void add(Role role) {
+                // add the object only to the role side of the relation 
+                getAccount().getRoles().add(role);
+            }
+        };
+    }
+
+    public GenericToManyAssociation<Role, Integer> getRoles() {
+        return roles;
+    }
+}
diff --git a/src/main/generated-java/com/h2/demo/web/domain/AccountExcelExporter.java b/src/main/generated-java/com/h2/demo/web/domain/AccountExcelExporter.java
new file mode 100644
index 0000000..abc8ec1
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/web/domain/AccountExcelExporter.java
@@ -0,0 +1,58 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-jsf2-spring-conversation:src/main/java/domain/ExcelExporter.e.vm.java
+ */
+package com.h2.demo.web.domain;
+
+import javax.inject.Inject;
+import javax.inject.Named;
+
+import com.h2.demo.domain.Account;
+import com.h2.demo.web.domain.support.GenericExcelExporter;
+import com.h2.demo.web.faces.ConversationContextScoped;
+
+/**
+ * Exports to excel document {@link Account} search criteria and result. 
+ */
+@Named
+@ConversationContextScoped
+public class AccountExcelExporter extends GenericExcelExporter<Account> {
+    @Inject
+    protected AccountSearchForm sf;
+
+    public AccountExcelExporter() {
+        super("account_login", "account_password", "account_email", "account_isEnabled", "account_civility", "account_firstName");
+    }
+
+    @Override
+    protected void fillResultItem(int row, Account item) {
+        int col = 0;
+        setValue(row, col++, item.getLogin());
+        setValue(row, col++, item.getPassword());
+        setValue(row, col++, item.getEmail());
+        setValue(row, col++, item.getIsEnabled());
+        setValue(row, col++, item.getCivility());
+        setValue(row, col++, item.getFirstName());
+    }
+
+    @Override
+    public void fillSearchCriteria(int row) {
+        useCriteriaSheet();
+
+        setSelector(row++, 0, "account_login", sf.getLoginSelector());
+        setSelector(row++, 0, "account_password", sf.getPasswordSelector());
+        setSelector(row++, 0, "account_email", sf.getEmailSelector());
+        setSelector(row++, 0, "account_isEnabled", sf.getIsEnabledSelector());
+        setSelector(row++, 0, "account_civility", sf.getCivilitySelector());
+        setSelector(row++, 0, "account_firstName", sf.getFirstNameSelector());
+        setSelector(row++, 0, "account_lastName", sf.getLastNameSelector());
+        setRangeDateTime(row++, 0, "account_birthDate", sf.getBirthDateRange());
+        setSelector(row++, 0, "account_description", sf.getDescriptionSelector());
+        setSelectedEntities(row++, 0, "account_address", sf.getAddressSelector().getSelected());
+        setSelectedEntities(row++, 0, "account_roles", sf.getAccount().getRoles());
+    }
+}
\ No newline at end of file
diff --git a/src/main/generated-java/com/h2/demo/web/domain/AccountGraphLoader.java b/src/main/generated-java/com/h2/demo/web/domain/AccountGraphLoader.java
new file mode 100644
index 0000000..a67a977
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/web/domain/AccountGraphLoader.java
@@ -0,0 +1,42 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-jsf2-spring-conversation:src/main/java/domain/GraphLoader.e.vm.java
+ */
+package com.h2.demo.web.domain;
+
+import javax.inject.Inject;
+import javax.inject.Named;
+import javax.inject.Singleton;
+
+import com.h2.demo.domain.Account;
+import com.h2.demo.repository.AccountRepository;
+import com.h2.demo.repository.support.EntityGraphLoader;
+
+/**
+ * Preloads the {@link Account} associations required by the view layer.
+ * 
+ * Do not use other GraphLoaders in this GraphLoader. 
+ */
+@Named
+@Singleton
+public class AccountGraphLoader extends EntityGraphLoader<Account, String> {
+    // required by cglib to create a proxy around the object as we are using the @Transactional annotation
+    protected AccountGraphLoader() {
+        super();
+    }
+
+    @Inject
+    public AccountGraphLoader(AccountRepository accountRepository) {
+        super(accountRepository);
+    }
+
+    @Override
+    public void loadGraph(Account account) {
+        loadSingular(account.getAddress());
+        loadCollection(account.getRoles());
+    }
+}
\ No newline at end of file
diff --git a/src/main/generated-java/com/h2/demo/web/domain/AccountLazyDataModel.java b/src/main/generated-java/com/h2/demo/web/domain/AccountLazyDataModel.java
new file mode 100644
index 0000000..84e2194
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/web/domain/AccountLazyDataModel.java
@@ -0,0 +1,34 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-jsf2-spring-conversation:src/main/java/domain/LazyDataModel.e.vm.java
+ */
+package com.h2.demo.web.domain;
+
+import javax.inject.Inject;
+import javax.inject.Named;
+
+import org.primefaces.model.LazyDataModel;
+
+import com.h2.demo.domain.Account;
+import com.h2.demo.repository.AccountRepository;
+import com.h2.demo.web.domain.support.GenericLazyDataModel;
+import com.h2.demo.web.faces.ConversationContextScoped;
+
+/**
+ * Provide PrimeFaces {@link LazyDataModel} for {@link Account}
+ */
+@Named
+@ConversationContextScoped
+public class AccountLazyDataModel extends GenericLazyDataModel<Account, String, AccountSearchForm> {
+    private static final long serialVersionUID = 1L;
+
+    @Inject
+    public AccountLazyDataModel(AccountRepository accountRepository, AccountController accountController, AccountSearchForm accountSearchForm,
+            AccountExcelExporter accountExcelExporter) {
+        super(accountRepository, accountController, accountSearchForm, accountExcelExporter);
+    }
+}
\ No newline at end of file
diff --git a/src/main/generated-java/com/h2/demo/web/domain/AccountSearchForm.java b/src/main/generated-java/com/h2/demo/web/domain/AccountSearchForm.java
new file mode 100644
index 0000000..b46b686
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/web/domain/AccountSearchForm.java
@@ -0,0 +1,137 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-jsf2-spring-conversation:src/main/java/domain/SearchForm.e.vm.java
+ */
+package com.h2.demo.web.domain;
+
+import static com.h2.demo.repository.support.PropertySelector.newPropertySelector;
+import static com.h2.demo.repository.support.Range.newRange;
+
+import java.util.Date;
+
+import javax.inject.Named;
+
+import com.h2.demo.domain.Account;
+import com.h2.demo.domain.Account_;
+import com.h2.demo.domain.Address;
+import com.h2.demo.domain.Role;
+import com.h2.demo.repository.support.PropertySelector;
+import com.h2.demo.repository.support.Range;
+import com.h2.demo.repository.support.SearchParameters;
+import com.h2.demo.web.domain.support.GenericSearchForm;
+import com.h2.demo.web.faces.ConversationContextScoped;
+
+/**
+ * View Helper to search {@link Account}.
+ * It exposes a {@link Account} instance so it can be used in search by-example-query.
+ */
+@Named
+@ConversationContextScoped
+public class AccountSearchForm extends GenericSearchForm<Account, String, AccountSearchForm> {
+    private static final long serialVersionUID = 1L;
+    protected Account account = new Account();
+    protected Range<Account, Date> birthDateRange = newRange(Account_.birthDate);
+    protected PropertySelector<Account, String> loginSelector = newPropertySelector(Account_.login);
+    protected PropertySelector<Account, String> passwordSelector = newPropertySelector(Account_.password);
+    protected PropertySelector<Account, String> emailSelector = newPropertySelector(Account_.email);
+    protected PropertySelector<Account, Boolean> isEnabledSelector = newPropertySelector(Account_.isEnabled);
+    protected PropertySelector<Account, String> civilitySelector = newPropertySelector(Account_.civility);
+    protected PropertySelector<Account, String> firstNameSelector = newPropertySelector(Account_.firstName);
+    protected PropertySelector<Account, String> lastNameSelector = newPropertySelector(Account_.lastName);
+    protected PropertySelector<Account, String> descriptionSelector = newPropertySelector(Account_.description);
+    protected PropertySelector<Account, Address> addressSelector = newPropertySelector(Account_.address);
+    protected PropertySelector<Account, Role> rolesSelector = newPropertySelector(false, Account_.roles);
+
+    public Account getAccount() {
+        return account;
+    }
+
+    @Override
+    protected Account getEntity() {
+        return getAccount();
+    }
+
+    @Override
+    public AccountSearchForm newInstance() {
+        return new AccountSearchForm();
+    }
+
+    @Override
+    public SearchParameters toSearchParameters() {
+        SearchParameters sp = searchParameters();
+        sp.range(birthDateRange);
+        sp.property(loginSelector, passwordSelector, emailSelector, isEnabledSelector, civilitySelector, firstNameSelector, lastNameSelector,
+                descriptionSelector);
+        sp.property(addressSelector);
+        sp.property(rolesSelector);
+        return sp;
+    }
+
+    @Override
+    public void resetWithOther(AccountSearchForm other) {
+        this.account = other.getAccount();
+        this.birthDateRange = other.getBirthDateRange();
+        this.loginSelector = other.getLoginSelector();
+        this.passwordSelector = other.getPasswordSelector();
+        this.emailSelector = other.getEmailSelector();
+        this.isEnabledSelector = other.getIsEnabledSelector();
+        this.civilitySelector = other.getCivilitySelector();
+        this.firstNameSelector = other.getFirstNameSelector();
+        this.lastNameSelector = other.getLastNameSelector();
+        this.descriptionSelector = other.getDescriptionSelector();
+        this.addressSelector = other.getAddressSelector();
+        this.rolesSelector = other.getRolesSelector();
+    }
+
+    // Ranges
+    public Range<Account, Date> getBirthDateRange() {
+        return birthDateRange;
+    }
+
+    // Property selectors
+    public PropertySelector<Account, String> getLoginSelector() {
+        return loginSelector;
+    }
+
+    public PropertySelector<Account, String> getPasswordSelector() {
+        return passwordSelector;
+    }
+
+    public PropertySelector<Account, String> getEmailSelector() {
+        return emailSelector;
+    }
+
+    public PropertySelector<Account, Boolean> getIsEnabledSelector() {
+        return isEnabledSelector;
+    }
+
+    public PropertySelector<Account, String> getCivilitySelector() {
+        return civilitySelector;
+    }
+
+    public PropertySelector<Account, String> getFirstNameSelector() {
+        return firstNameSelector;
+    }
+
+    public PropertySelector<Account, String> getLastNameSelector() {
+        return lastNameSelector;
+    }
+
+    public PropertySelector<Account, String> getDescriptionSelector() {
+        return descriptionSelector;
+    }
+
+    // Relation selectors
+    public PropertySelector<Account, Address> getAddressSelector() {
+        return addressSelector;
+    }
+
+    // Relation selectors
+    public PropertySelector<Account, Role> getRolesSelector() {
+        return rolesSelector;
+    }
+}
diff --git a/src/main/generated-java/com/h2/demo/web/domain/AddressController.java b/src/main/generated-java/com/h2/demo/web/domain/AddressController.java
new file mode 100644
index 0000000..8490436
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/web/domain/AddressController.java
@@ -0,0 +1,34 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-jsf2-spring-conversation:src/main/java/domain/Controller.e.vm.java
+ */
+package com.h2.demo.web.domain;
+
+import javax.inject.Inject;
+import javax.inject.Named;
+import javax.inject.Singleton;
+
+import com.h2.demo.domain.Address;
+import com.h2.demo.printer.AddressPrinter;
+import com.h2.demo.repository.AddressRepository;
+import com.h2.demo.web.domain.support.GenericController;
+import com.h2.demo.web.permission.AddressPermission;
+
+/**
+ * Stateless controller for {@link Address} conversation start.
+ */
+@Named
+@Singleton
+public class AddressController extends GenericController<Address, Integer> {
+    public static final String ADDRESS_EDIT_URI = "/domain/addressEdit.faces";
+    public static final String ADDRESS_SELECT_URI = "/domain/addressSelect.faces";
+
+    @Inject
+    public AddressController(AddressRepository addressRepository, AddressPermission addressPermission, AddressPrinter addressPrinter) {
+        super(addressRepository, addressPermission, addressPrinter, ADDRESS_SELECT_URI, ADDRESS_EDIT_URI);
+    }
+}
\ No newline at end of file
diff --git a/src/main/generated-java/com/h2/demo/web/domain/AddressEditForm.java b/src/main/generated-java/com/h2/demo/web/domain/AddressEditForm.java
new file mode 100644
index 0000000..bdbeee2
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/web/domain/AddressEditForm.java
@@ -0,0 +1,43 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-jsf2-spring-conversation:src/main/java/domain/EditForm.e.vm.java
+ */
+package com.h2.demo.web.domain;
+
+import javax.inject.Inject;
+import javax.inject.Named;
+
+import com.h2.demo.domain.Address;
+import com.h2.demo.repository.AddressRepository;
+import com.h2.demo.web.domain.support.GenericEditForm;
+import com.h2.demo.web.faces.ConversationContextScoped;
+
+/**
+ * View Helper/Controller to edit {@link Address}.
+ */
+@Named
+@ConversationContextScoped
+public class AddressEditForm extends GenericEditForm<Address, Integer> {
+    @Inject
+    protected AddressController addressController;
+
+    @Inject
+    public AddressEditForm(AddressRepository addressRepository) {
+        super(addressRepository);
+    }
+
+    /**
+     * The entity to edit/view.
+     */
+    public Address getAddress() {
+        return getEntity();
+    }
+
+    public String print() {
+        return addressController.print(getAddress());
+    }
+}
diff --git a/src/main/generated-java/com/h2/demo/web/domain/AddressExcelExporter.java b/src/main/generated-java/com/h2/demo/web/domain/AddressExcelExporter.java
new file mode 100644
index 0000000..a20d61e
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/web/domain/AddressExcelExporter.java
@@ -0,0 +1,45 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-jsf2-spring-conversation:src/main/java/domain/ExcelExporter.e.vm.java
+ */
+package com.h2.demo.web.domain;
+
+import javax.inject.Inject;
+import javax.inject.Named;
+
+import com.h2.demo.domain.Address;
+import com.h2.demo.web.domain.support.GenericExcelExporter;
+import com.h2.demo.web.faces.ConversationContextScoped;
+
+/**
+ * Exports to excel document {@link Address} search criteria and result. 
+ */
+@Named
+@ConversationContextScoped
+public class AddressExcelExporter extends GenericExcelExporter<Address> {
+    @Inject
+    protected AddressSearchForm sf;
+
+    public AddressExcelExporter() {
+        super("address_streetName", "address_city");
+    }
+
+    @Override
+    protected void fillResultItem(int row, Address item) {
+        int col = 0;
+        setValue(row, col++, item.getStreetName());
+        setValue(row, col++, item.getCity());
+    }
+
+    @Override
+    public void fillSearchCriteria(int row) {
+        useCriteriaSheet();
+
+        setSelector(row++, 0, "address_streetName", sf.getStreetNameSelector());
+        setSelector(row++, 0, "address_city", sf.getCitySelector());
+    }
+}
\ No newline at end of file
diff --git a/src/main/generated-java/com/h2/demo/web/domain/AddressLazyDataModel.java b/src/main/generated-java/com/h2/demo/web/domain/AddressLazyDataModel.java
new file mode 100644
index 0000000..26bc896
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/web/domain/AddressLazyDataModel.java
@@ -0,0 +1,34 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-jsf2-spring-conversation:src/main/java/domain/LazyDataModel.e.vm.java
+ */
+package com.h2.demo.web.domain;
+
+import javax.inject.Inject;
+import javax.inject.Named;
+
+import org.primefaces.model.LazyDataModel;
+
+import com.h2.demo.domain.Address;
+import com.h2.demo.repository.AddressRepository;
+import com.h2.demo.web.domain.support.GenericLazyDataModel;
+import com.h2.demo.web.faces.ConversationContextScoped;
+
+/**
+ * Provide PrimeFaces {@link LazyDataModel} for {@link Address}
+ */
+@Named
+@ConversationContextScoped
+public class AddressLazyDataModel extends GenericLazyDataModel<Address, Integer, AddressSearchForm> {
+    private static final long serialVersionUID = 1L;
+
+    @Inject
+    public AddressLazyDataModel(AddressRepository addressRepository, AddressController addressController, AddressSearchForm addressSearchForm,
+            AddressExcelExporter addressExcelExporter) {
+        super(addressRepository, addressController, addressSearchForm, addressExcelExporter);
+    }
+}
\ No newline at end of file
diff --git a/src/main/generated-java/com/h2/demo/web/domain/AddressSearchForm.java b/src/main/generated-java/com/h2/demo/web/domain/AddressSearchForm.java
new file mode 100644
index 0000000..b73e4f3
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/web/domain/AddressSearchForm.java
@@ -0,0 +1,70 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-jsf2-spring-conversation:src/main/java/domain/SearchForm.e.vm.java
+ */
+package com.h2.demo.web.domain;
+
+import static com.h2.demo.repository.support.PropertySelector.newPropertySelector;
+
+import javax.inject.Named;
+
+import com.h2.demo.domain.Address;
+import com.h2.demo.domain.Address_;
+import com.h2.demo.repository.support.PropertySelector;
+import com.h2.demo.repository.support.SearchParameters;
+import com.h2.demo.web.domain.support.GenericSearchForm;
+import com.h2.demo.web.faces.ConversationContextScoped;
+
+/**
+ * View Helper to search {@link Address}.
+ * It exposes a {@link Address} instance so it can be used in search by-example-query.
+ */
+@Named
+@ConversationContextScoped
+public class AddressSearchForm extends GenericSearchForm<Address, Integer, AddressSearchForm> {
+    private static final long serialVersionUID = 1L;
+    protected Address address = new Address();
+    protected PropertySelector<Address, String> streetNameSelector = newPropertySelector(Address_.streetName);
+    protected PropertySelector<Address, String> citySelector = newPropertySelector(Address_.city);
+
+    public Address getAddress() {
+        return address;
+    }
+
+    @Override
+    protected Address getEntity() {
+        return getAddress();
+    }
+
+    @Override
+    public AddressSearchForm newInstance() {
+        return new AddressSearchForm();
+    }
+
+    @Override
+    public SearchParameters toSearchParameters() {
+        SearchParameters sp = searchParameters();
+        sp.property(streetNameSelector, citySelector);
+        return sp;
+    }
+
+    @Override
+    public void resetWithOther(AddressSearchForm other) {
+        this.address = other.getAddress();
+        this.streetNameSelector = other.getStreetNameSelector();
+        this.citySelector = other.getCitySelector();
+    }
+
+    // Property selectors
+    public PropertySelector<Address, String> getStreetNameSelector() {
+        return streetNameSelector;
+    }
+
+    public PropertySelector<Address, String> getCitySelector() {
+        return citySelector;
+    }
+}
diff --git a/src/main/generated-java/com/h2/demo/web/domain/AuditLogController.java b/src/main/generated-java/com/h2/demo/web/domain/AuditLogController.java
new file mode 100644
index 0000000..02cab4f
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/web/domain/AuditLogController.java
@@ -0,0 +1,34 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-jsf2-spring-conversation:src/main/java/domain/Controller.e.vm.java
+ */
+package com.h2.demo.web.domain;
+
+import javax.inject.Inject;
+import javax.inject.Named;
+import javax.inject.Singleton;
+
+import com.h2.demo.domain.AuditLog;
+import com.h2.demo.printer.AuditLogPrinter;
+import com.h2.demo.repository.AuditLogRepository;
+import com.h2.demo.web.domain.support.GenericController;
+import com.h2.demo.web.permission.AuditLogPermission;
+
+/**
+ * Stateless controller for {@link AuditLog} conversation start.
+ */
+@Named
+@Singleton
+public class AuditLogController extends GenericController<AuditLog, Integer> {
+    public static final String AUDITLOG_EDIT_URI = "/domain/auditLogEdit.faces";
+    public static final String AUDITLOG_SELECT_URI = "/domain/auditLogSelect.faces";
+
+    @Inject
+    public AuditLogController(AuditLogRepository auditLogRepository, AuditLogPermission auditLogPermission, AuditLogPrinter auditLogPrinter) {
+        super(auditLogRepository, auditLogPermission, auditLogPrinter, AUDITLOG_SELECT_URI, AUDITLOG_EDIT_URI);
+    }
+}
\ No newline at end of file
diff --git a/src/main/generated-java/com/h2/demo/web/domain/AuditLogEditForm.java b/src/main/generated-java/com/h2/demo/web/domain/AuditLogEditForm.java
new file mode 100644
index 0000000..7d41839
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/web/domain/AuditLogEditForm.java
@@ -0,0 +1,43 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-jsf2-spring-conversation:src/main/java/domain/EditForm.e.vm.java
+ */
+package com.h2.demo.web.domain;
+
+import javax.inject.Inject;
+import javax.inject.Named;
+
+import com.h2.demo.domain.AuditLog;
+import com.h2.demo.repository.AuditLogRepository;
+import com.h2.demo.web.domain.support.GenericEditForm;
+import com.h2.demo.web.faces.ConversationContextScoped;
+
+/**
+ * View Helper/Controller to edit {@link AuditLog}.
+ */
+@Named
+@ConversationContextScoped
+public class AuditLogEditForm extends GenericEditForm<AuditLog, Integer> {
+    @Inject
+    protected AuditLogController auditLogController;
+
+    @Inject
+    public AuditLogEditForm(AuditLogRepository auditLogRepository) {
+        super(auditLogRepository);
+    }
+
+    /**
+     * The entity to edit/view.
+     */
+    public AuditLog getAuditLog() {
+        return getEntity();
+    }
+
+    public String print() {
+        return auditLogController.print(getAuditLog());
+    }
+}
diff --git a/src/main/generated-java/com/h2/demo/web/domain/AuditLogExcelExporter.java b/src/main/generated-java/com/h2/demo/web/domain/AuditLogExcelExporter.java
new file mode 100644
index 0000000..bee64a5
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/web/domain/AuditLogExcelExporter.java
@@ -0,0 +1,53 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-jsf2-spring-conversation:src/main/java/domain/ExcelExporter.e.vm.java
+ */
+package com.h2.demo.web.domain;
+
+import javax.inject.Inject;
+import javax.inject.Named;
+
+import com.h2.demo.domain.AuditLog;
+import com.h2.demo.web.domain.support.GenericExcelExporter;
+import com.h2.demo.web.faces.ConversationContextScoped;
+
+/**
+ * Exports to excel document {@link AuditLog} search criteria and result. 
+ */
+@Named
+@ConversationContextScoped
+public class AuditLogExcelExporter extends GenericExcelExporter<AuditLog> {
+    @Inject
+    protected AuditLogSearchForm sf;
+
+    public AuditLogExcelExporter() {
+        super("auditLog_author", "auditLog_event", "auditLog_eventDate", "auditLog_stringAttribute1", "auditLog_stringAttribute2", "auditLog_stringAttribute3");
+    }
+
+    @Override
+    protected void fillResultItem(int row, AuditLog item) {
+        int col = 0;
+        setValue(row, col++, item.getAuthor());
+        setValue(row, col++, item.getEvent());
+        setDateTime(row, col++, item.getEventDate());
+        setValue(row, col++, item.getStringAttribute1());
+        setValue(row, col++, item.getStringAttribute2());
+        setValue(row, col++, item.getStringAttribute3());
+    }
+
+    @Override
+    public void fillSearchCriteria(int row) {
+        useCriteriaSheet();
+
+        setSelector(row++, 0, "auditLog_author", sf.getAuthorSelector());
+        setSelector(row++, 0, "auditLog_event", sf.getEventSelector());
+        setRangeDateTime(row++, 0, "auditLog_eventDate", sf.getEventDateRange());
+        setSelector(row++, 0, "auditLog_stringAttribute1", sf.getStringAttribute1Selector());
+        setSelector(row++, 0, "auditLog_stringAttribute2", sf.getStringAttribute2Selector());
+        setSelector(row++, 0, "auditLog_stringAttribute3", sf.getStringAttribute3Selector());
+    }
+}
\ No newline at end of file
diff --git a/src/main/generated-java/com/h2/demo/web/domain/AuditLogLazyDataModel.java b/src/main/generated-java/com/h2/demo/web/domain/AuditLogLazyDataModel.java
new file mode 100644
index 0000000..011e1d2
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/web/domain/AuditLogLazyDataModel.java
@@ -0,0 +1,34 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-jsf2-spring-conversation:src/main/java/domain/LazyDataModel.e.vm.java
+ */
+package com.h2.demo.web.domain;
+
+import javax.inject.Inject;
+import javax.inject.Named;
+
+import org.primefaces.model.LazyDataModel;
+
+import com.h2.demo.domain.AuditLog;
+import com.h2.demo.repository.AuditLogRepository;
+import com.h2.demo.web.domain.support.GenericLazyDataModel;
+import com.h2.demo.web.faces.ConversationContextScoped;
+
+/**
+ * Provide PrimeFaces {@link LazyDataModel} for {@link AuditLog}
+ */
+@Named
+@ConversationContextScoped
+public class AuditLogLazyDataModel extends GenericLazyDataModel<AuditLog, Integer, AuditLogSearchForm> {
+    private static final long serialVersionUID = 1L;
+
+    @Inject
+    public AuditLogLazyDataModel(AuditLogRepository auditLogRepository, AuditLogController auditLogController, AuditLogSearchForm auditLogSearchForm,
+            AuditLogExcelExporter auditLogExcelExporter) {
+        super(auditLogRepository, auditLogController, auditLogSearchForm, auditLogExcelExporter);
+    }
+}
\ No newline at end of file
diff --git a/src/main/generated-java/com/h2/demo/web/domain/AuditLogSearchForm.java b/src/main/generated-java/com/h2/demo/web/domain/AuditLogSearchForm.java
new file mode 100644
index 0000000..4f45e98
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/web/domain/AuditLogSearchForm.java
@@ -0,0 +1,100 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-jsf2-spring-conversation:src/main/java/domain/SearchForm.e.vm.java
+ */
+package com.h2.demo.web.domain;
+
+import static com.h2.demo.repository.support.PropertySelector.newPropertySelector;
+import static com.h2.demo.repository.support.Range.newRange;
+
+import java.util.Date;
+
+import javax.inject.Named;
+
+import com.h2.demo.domain.AuditLog;
+import com.h2.demo.domain.AuditLog_;
+import com.h2.demo.repository.support.PropertySelector;
+import com.h2.demo.repository.support.Range;
+import com.h2.demo.repository.support.SearchParameters;
+import com.h2.demo.web.domain.support.GenericSearchForm;
+import com.h2.demo.web.faces.ConversationContextScoped;
+
+/**
+ * View Helper to search {@link AuditLog}.
+ * It exposes a {@link AuditLog} instance so it can be used in search by-example-query.
+ */
+@Named
+@ConversationContextScoped
+public class AuditLogSearchForm extends GenericSearchForm<AuditLog, Integer, AuditLogSearchForm> {
+    private static final long serialVersionUID = 1L;
+    protected AuditLog auditLog = new AuditLog();
+    protected Range<AuditLog, Date> eventDateRange = newRange(AuditLog_.eventDate);
+    protected PropertySelector<AuditLog, String> authorSelector = newPropertySelector(AuditLog_.author);
+    protected PropertySelector<AuditLog, String> eventSelector = newPropertySelector(AuditLog_.event);
+    protected PropertySelector<AuditLog, String> stringAttribute1Selector = newPropertySelector(AuditLog_.stringAttribute1);
+    protected PropertySelector<AuditLog, String> stringAttribute2Selector = newPropertySelector(AuditLog_.stringAttribute2);
+    protected PropertySelector<AuditLog, String> stringAttribute3Selector = newPropertySelector(AuditLog_.stringAttribute3);
+
+    public AuditLog getAuditLog() {
+        return auditLog;
+    }
+
+    @Override
+    protected AuditLog getEntity() {
+        return getAuditLog();
+    }
+
+    @Override
+    public AuditLogSearchForm newInstance() {
+        return new AuditLogSearchForm();
+    }
+
+    @Override
+    public SearchParameters toSearchParameters() {
+        SearchParameters sp = searchParameters();
+        sp.range(eventDateRange);
+        sp.property(authorSelector, eventSelector, stringAttribute1Selector, stringAttribute2Selector, stringAttribute3Selector);
+        return sp;
+    }
+
+    @Override
+    public void resetWithOther(AuditLogSearchForm other) {
+        this.auditLog = other.getAuditLog();
+        this.eventDateRange = other.getEventDateRange();
+        this.authorSelector = other.getAuthorSelector();
+        this.eventSelector = other.getEventSelector();
+        this.stringAttribute1Selector = other.getStringAttribute1Selector();
+        this.stringAttribute2Selector = other.getStringAttribute2Selector();
+        this.stringAttribute3Selector = other.getStringAttribute3Selector();
+    }
+
+    // Ranges
+    public Range<AuditLog, Date> getEventDateRange() {
+        return eventDateRange;
+    }
+
+    // Property selectors
+    public PropertySelector<AuditLog, String> getAuthorSelector() {
+        return authorSelector;
+    }
+
+    public PropertySelector<AuditLog, String> getEventSelector() {
+        return eventSelector;
+    }
+
+    public PropertySelector<AuditLog, String> getStringAttribute1Selector() {
+        return stringAttribute1Selector;
+    }
+
+    public PropertySelector<AuditLog, String> getStringAttribute2Selector() {
+        return stringAttribute2Selector;
+    }
+
+    public PropertySelector<AuditLog, String> getStringAttribute3Selector() {
+        return stringAttribute3Selector;
+    }
+}
diff --git a/src/main/generated-java/com/h2/demo/web/domain/BookController.java b/src/main/generated-java/com/h2/demo/web/domain/BookController.java
new file mode 100644
index 0000000..e7613db
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/web/domain/BookController.java
@@ -0,0 +1,34 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-jsf2-spring-conversation:src/main/java/domain/Controller.e.vm.java
+ */
+package com.h2.demo.web.domain;
+
+import javax.inject.Inject;
+import javax.inject.Named;
+import javax.inject.Singleton;
+
+import com.h2.demo.domain.Book;
+import com.h2.demo.printer.BookPrinter;
+import com.h2.demo.repository.BookRepository;
+import com.h2.demo.web.domain.support.GenericController;
+import com.h2.demo.web.permission.BookPermission;
+
+/**
+ * Stateless controller for {@link Book} conversation start.
+ */
+@Named
+@Singleton
+public class BookController extends GenericController<Book, Integer> {
+    public static final String BOOK_EDIT_URI = "/domain/bookEdit.faces";
+    public static final String BOOK_SELECT_URI = "/domain/bookSelect.faces";
+
+    @Inject
+    public BookController(BookRepository bookRepository, BookPermission bookPermission, BookPrinter bookPrinter) {
+        super(bookRepository, bookPermission, bookPrinter, BOOK_SELECT_URI, BOOK_EDIT_URI);
+    }
+}
\ No newline at end of file
diff --git a/src/main/generated-java/com/h2/demo/web/domain/BookEditForm.java b/src/main/generated-java/com/h2/demo/web/domain/BookEditForm.java
new file mode 100644
index 0000000..9b0f0c2
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/web/domain/BookEditForm.java
@@ -0,0 +1,69 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-jsf2-spring-conversation:src/main/java/domain/EditForm.e.vm.java
+ */
+package com.h2.demo.web.domain;
+
+import javax.annotation.PostConstruct;
+import javax.inject.Inject;
+import javax.inject.Named;
+
+import com.h2.demo.domain.Account;
+import com.h2.demo.domain.Book;
+import com.h2.demo.domain.Book_;
+import com.h2.demo.repository.BookRepository;
+import com.h2.demo.web.domain.support.GenericEditForm;
+import com.h2.demo.web.domain.support.GenericToOneAssociation;
+import com.h2.demo.web.faces.ConversationContextScoped;
+
+/**
+ * View Helper/Controller to edit {@link Book}.
+ */
+@Named
+@ConversationContextScoped
+public class BookEditForm extends GenericEditForm<Book, Integer> {
+    @Inject
+    protected BookController bookController;
+    @Inject
+    protected AccountController accountController;
+    protected GenericToOneAssociation<Account, String> account;
+
+    @Inject
+    public BookEditForm(BookRepository bookRepository, BookGraphLoader bookGraphLoader) {
+        super(bookRepository, bookGraphLoader);
+    }
+
+    /**
+     * The entity to edit/view.
+     */
+    public Book getBook() {
+        return getEntity();
+    }
+
+    public String print() {
+        return bookController.print(getBook());
+    }
+
+    @PostConstruct
+    void setupAccountActions() {
+        account = new GenericToOneAssociation<Account, String>(accountController, Book_.account) {
+            @Override
+            protected Account get() {
+                return getBook().getAccount();
+            }
+
+            @Override
+            protected void set(Account account) {
+                getBook().setAccount(account);
+            }
+        };
+    }
+
+    public GenericToOneAssociation<Account, String> getAccount() {
+        return account;
+    }
+}
diff --git a/src/main/generated-java/com/h2/demo/web/domain/BookExcelExporter.java b/src/main/generated-java/com/h2/demo/web/domain/BookExcelExporter.java
new file mode 100644
index 0000000..bb8e0d8
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/web/domain/BookExcelExporter.java
@@ -0,0 +1,46 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-jsf2-spring-conversation:src/main/java/domain/ExcelExporter.e.vm.java
+ */
+package com.h2.demo.web.domain;
+
+import javax.inject.Inject;
+import javax.inject.Named;
+
+import com.h2.demo.domain.Book;
+import com.h2.demo.web.domain.support.GenericExcelExporter;
+import com.h2.demo.web.faces.ConversationContextScoped;
+
+/**
+ * Exports to excel document {@link Book} search criteria and result. 
+ */
+@Named
+@ConversationContextScoped
+public class BookExcelExporter extends GenericExcelExporter<Book> {
+    @Inject
+    protected BookSearchForm sf;
+
+    public BookExcelExporter() {
+        super("book_title", "book_numberOfPages");
+    }
+
+    @Override
+    protected void fillResultItem(int row, Book item) {
+        int col = 0;
+        setValue(row, col++, item.getTitle());
+        setValue(row, col++, item.getNumberOfPages());
+    }
+
+    @Override
+    public void fillSearchCriteria(int row) {
+        useCriteriaSheet();
+
+        setSelectedEntities(row++, 0, "book_account", sf.getAccountSelector().getSelected());
+        setSelector(row++, 0, "book_title", sf.getTitleSelector());
+        setRangeNumber(row++, 0, "book_numberOfPages", sf.getNumberOfPagesRange());
+    }
+}
\ No newline at end of file
diff --git a/src/main/generated-java/com/h2/demo/web/domain/BookGraphLoader.java b/src/main/generated-java/com/h2/demo/web/domain/BookGraphLoader.java
new file mode 100644
index 0000000..da8c6be
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/web/domain/BookGraphLoader.java
@@ -0,0 +1,41 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-jsf2-spring-conversation:src/main/java/domain/GraphLoader.e.vm.java
+ */
+package com.h2.demo.web.domain;
+
+import javax.inject.Inject;
+import javax.inject.Named;
+import javax.inject.Singleton;
+
+import com.h2.demo.domain.Book;
+import com.h2.demo.repository.BookRepository;
+import com.h2.demo.repository.support.EntityGraphLoader;
+
+/**
+ * Preloads the {@link Book} associations required by the view layer.
+ * 
+ * Do not use other GraphLoaders in this GraphLoader. 
+ */
+@Named
+@Singleton
+public class BookGraphLoader extends EntityGraphLoader<Book, Integer> {
+    // required by cglib to create a proxy around the object as we are using the @Transactional annotation
+    protected BookGraphLoader() {
+        super();
+    }
+
+    @Inject
+    public BookGraphLoader(BookRepository bookRepository) {
+        super(bookRepository);
+    }
+
+    @Override
+    public void loadGraph(Book book) {
+        loadSingular(book.getAccount());
+    }
+}
\ No newline at end of file
diff --git a/src/main/generated-java/com/h2/demo/web/domain/BookLazyDataModel.java b/src/main/generated-java/com/h2/demo/web/domain/BookLazyDataModel.java
new file mode 100644
index 0000000..5d8c388
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/web/domain/BookLazyDataModel.java
@@ -0,0 +1,33 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-jsf2-spring-conversation:src/main/java/domain/LazyDataModel.e.vm.java
+ */
+package com.h2.demo.web.domain;
+
+import javax.inject.Inject;
+import javax.inject.Named;
+
+import org.primefaces.model.LazyDataModel;
+
+import com.h2.demo.domain.Book;
+import com.h2.demo.repository.BookRepository;
+import com.h2.demo.web.domain.support.GenericLazyDataModel;
+import com.h2.demo.web.faces.ConversationContextScoped;
+
+/**
+ * Provide PrimeFaces {@link LazyDataModel} for {@link Book}
+ */
+@Named
+@ConversationContextScoped
+public class BookLazyDataModel extends GenericLazyDataModel<Book, Integer, BookSearchForm> {
+    private static final long serialVersionUID = 1L;
+
+    @Inject
+    public BookLazyDataModel(BookRepository bookRepository, BookController bookController, BookSearchForm bookSearchForm, BookExcelExporter bookExcelExporter) {
+        super(bookRepository, bookController, bookSearchForm, bookExcelExporter);
+    }
+}
\ No newline at end of file
diff --git a/src/main/generated-java/com/h2/demo/web/domain/BookSearchForm.java b/src/main/generated-java/com/h2/demo/web/domain/BookSearchForm.java
new file mode 100644
index 0000000..c0e003b
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/web/domain/BookSearchForm.java
@@ -0,0 +1,89 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-jsf2-spring-conversation:src/main/java/domain/SearchForm.e.vm.java
+ */
+package com.h2.demo.web.domain;
+
+import static com.h2.demo.repository.support.PropertySelector.newPropertySelector;
+import static com.h2.demo.repository.support.Range.newRange;
+
+import javax.inject.Named;
+
+import com.h2.demo.domain.Account;
+import com.h2.demo.domain.Book;
+import com.h2.demo.domain.Book_;
+import com.h2.demo.repository.support.PropertySelector;
+import com.h2.demo.repository.support.Range;
+import com.h2.demo.repository.support.SearchParameters;
+import com.h2.demo.web.domain.support.GenericSearchForm;
+import com.h2.demo.web.faces.ConversationContextScoped;
+
+/**
+ * View Helper to search {@link Book}.
+ * It exposes a {@link Book} instance so it can be used in search by-example-query.
+ */
+@Named
+@ConversationContextScoped
+public class BookSearchForm extends GenericSearchForm<Book, Integer, BookSearchForm> {
+    private static final long serialVersionUID = 1L;
+    protected Book book = new Book();
+    protected Range<Book, Integer> numberOfPagesRange = newRange(Book_.numberOfPages);
+    protected PropertySelector<Book, String> titleSelector = newPropertySelector(Book_.title);
+    protected PropertySelector<Book, Integer> numberOfPagesSelector = newPropertySelector(Book_.numberOfPages);
+    protected PropertySelector<Book, Account> accountSelector = newPropertySelector(Book_.account);
+
+    public Book getBook() {
+        return book;
+    }
+
+    @Override
+    protected Book getEntity() {
+        return getBook();
+    }
+
+    @Override
+    public BookSearchForm newInstance() {
+        return new BookSearchForm();
+    }
+
+    @Override
+    public SearchParameters toSearchParameters() {
+        SearchParameters sp = searchParameters();
+        sp.range(numberOfPagesRange);
+        sp.property(titleSelector, numberOfPagesSelector);
+        sp.property(accountSelector);
+        return sp;
+    }
+
+    @Override
+    public void resetWithOther(BookSearchForm other) {
+        this.book = other.getBook();
+        this.numberOfPagesRange = other.getNumberOfPagesRange();
+        this.titleSelector = other.getTitleSelector();
+        this.numberOfPagesSelector = other.getNumberOfPagesSelector();
+        this.accountSelector = other.getAccountSelector();
+    }
+
+    // Ranges
+    public Range<Book, Integer> getNumberOfPagesRange() {
+        return numberOfPagesRange;
+    }
+
+    // Property selectors
+    public PropertySelector<Book, String> getTitleSelector() {
+        return titleSelector;
+    }
+
+    public PropertySelector<Book, Integer> getNumberOfPagesSelector() {
+        return numberOfPagesSelector;
+    }
+
+    // Relation selectors
+    public PropertySelector<Book, Account> getAccountSelector() {
+        return accountSelector;
+    }
+}
diff --git a/src/main/generated-java/com/h2/demo/web/domain/DocumentController.java b/src/main/generated-java/com/h2/demo/web/domain/DocumentController.java
new file mode 100644
index 0000000..f7cd399
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/web/domain/DocumentController.java
@@ -0,0 +1,38 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-jsf2-spring-conversation:src/main/java/domain/Controller.e.vm.java
+ */
+package com.h2.demo.web.domain;
+
+import javax.inject.Inject;
+import javax.inject.Named;
+import javax.inject.Singleton;
+
+import com.h2.demo.domain.Document;
+import com.h2.demo.printer.DocumentPrinter;
+import com.h2.demo.repository.DocumentRepository;
+import com.h2.demo.web.domain.support.GenericController;
+import com.h2.demo.web.permission.DocumentPermission;
+
+/**
+ * Stateless controller for {@link Document} conversation start.
+ */
+@Named
+@Singleton
+public class DocumentController extends GenericController<Document, String> {
+    public static final String DOCUMENT_EDIT_URI = "/domain/documentEdit.faces";
+    public static final String DOCUMENT_SELECT_URI = "/domain/documentSelect.faces";
+
+    @Inject
+    public DocumentController(DocumentRepository documentRepository, DocumentPermission documentPermission, DocumentPrinter documentPrinter) {
+        super(documentRepository, documentPermission, documentPrinter, DOCUMENT_SELECT_URI, DOCUMENT_EDIT_URI);
+    }
+
+    public DocumentFileUpload getDocumentFileUpload(Document document) {
+        return new DocumentFileUpload(document);
+    }
+}
\ No newline at end of file
diff --git a/src/main/generated-java/com/h2/demo/web/domain/DocumentEditForm.java b/src/main/generated-java/com/h2/demo/web/domain/DocumentEditForm.java
new file mode 100644
index 0000000..43f0ca2
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/web/domain/DocumentEditForm.java
@@ -0,0 +1,76 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-jsf2-spring-conversation:src/main/java/domain/EditForm.e.vm.java
+ */
+package com.h2.demo.web.domain;
+
+import javax.annotation.PostConstruct;
+import javax.inject.Inject;
+import javax.inject.Named;
+import javax.validation.constraints.NotNull;
+
+import com.h2.demo.domain.Account;
+import com.h2.demo.domain.Document;
+import com.h2.demo.domain.Document_;
+import com.h2.demo.repository.DocumentRepository;
+import com.h2.demo.web.domain.support.GenericEditForm;
+import com.h2.demo.web.domain.support.GenericToOneAssociation;
+import com.h2.demo.web.faces.ConversationContextScoped;
+
+/**
+ * View Helper/Controller to edit {@link Document}.
+ */
+@Named
+@ConversationContextScoped
+public class DocumentEditForm extends GenericEditForm<Document, String> {
+    @Inject
+    protected DocumentController documentController;
+    @Inject
+    protected AccountController accountController;
+    protected GenericToOneAssociation<Account, String> account;
+
+    @Inject
+    public DocumentEditForm(DocumentRepository documentRepository, DocumentGraphLoader documentGraphLoader) {
+        super(documentRepository, documentGraphLoader);
+    }
+
+    /**
+     * The entity to edit/view.
+     */
+    public Document getDocument() {
+        return getEntity();
+    }
+
+    public String print() {
+        return documentController.print(getDocument());
+    }
+
+    @PostConstruct
+    void setupAccountActions() {
+        account = new GenericToOneAssociation<Account, String>(accountController, Document_.account) {
+            @Override
+            protected Account get() {
+                return getDocument().getAccount();
+            }
+
+            @Override
+            protected void set(Account account) {
+                getDocument().setAccount(account);
+            }
+
+            @NotNull
+            @Override
+            public Account getSelected() {
+                return super.getSelected();
+            }
+        };
+    }
+
+    public GenericToOneAssociation<Account, String> getAccount() {
+        return account;
+    }
+}
diff --git a/src/main/generated-java/com/h2/demo/web/domain/DocumentExcelExporter.java b/src/main/generated-java/com/h2/demo/web/domain/DocumentExcelExporter.java
new file mode 100644
index 0000000..c818b85
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/web/domain/DocumentExcelExporter.java
@@ -0,0 +1,43 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-jsf2-spring-conversation:src/main/java/domain/ExcelExporter.e.vm.java
+ */
+package com.h2.demo.web.domain;
+
+import javax.inject.Inject;
+import javax.inject.Named;
+
+import com.h2.demo.domain.Document;
+import com.h2.demo.web.domain.support.GenericExcelExporter;
+import com.h2.demo.web.faces.ConversationContextScoped;
+
+/**
+ * Exports to excel document {@link Document} search criteria and result. 
+ */
+@Named
+@ConversationContextScoped
+public class DocumentExcelExporter extends GenericExcelExporter<Document> {
+    @Inject
+    protected DocumentSearchForm sf;
+
+    public DocumentExcelExporter() {
+        super("document_documentFileName");
+    }
+
+    @Override
+    protected void fillResultItem(int row, Document item) {
+        int col = 0;
+        setValue(row, col++, item.getDocumentFileName());
+    }
+
+    @Override
+    public void fillSearchCriteria(int row) {
+        useCriteriaSheet();
+
+        setSelectedEntities(row++, 0, "document_account", sf.getAccountSelector().getSelected());
+    }
+}
\ No newline at end of file
diff --git a/src/main/generated-java/com/h2/demo/web/domain/DocumentFileDownload.java b/src/main/generated-java/com/h2/demo/web/domain/DocumentFileDownload.java
new file mode 100644
index 0000000..242b36a
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/web/domain/DocumentFileDownload.java
@@ -0,0 +1,54 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-jsf2-spring-conversation:src/main/java/domain/FileDownload.e.vm.java
+ */
+package com.h2.demo.web.domain;
+
+import javax.inject.Inject;
+import javax.inject.Named;
+import javax.inject.Singleton;
+
+import org.primefaces.model.StreamedContent;
+
+import com.h2.demo.domain.Document;
+import com.h2.demo.domain.Document_;
+import com.h2.demo.repository.DocumentRepository;
+import com.h2.demo.web.domain.support.ByteArrayStreamedContent;
+
+/**
+ * Stateless controller to download {@link Document} binaries 
+ */
+@Named
+@Singleton
+public class DocumentFileDownload {
+    @Inject
+    private DocumentRepository documentRepository;
+
+    /**
+     * Primefaces support for documentBinary file download.
+     */
+    public StreamedContent getDocumentBinaryStream(final Document document) {
+        // check whether the binary is null WITHOUT downloading it.
+        if (document.isIdSet()) {
+            if (documentRepository.isPropertyNull(document.getId(), Document_.documentBinary)) {
+                return null;
+            }
+        } else if (document.getDocumentBinary() == null) {
+            return null;
+        }
+
+        ByteArrayStreamedContent basc = new ByteArrayStreamedContent() {
+            @Override
+            public byte[] getByteArray() {
+                return documentRepository.getDocumentBinary(document);
+            }
+        };
+        basc.setContentType(document.getDocumentContentType());
+        basc.setName(document.getDocumentFileName());
+        return basc;
+    }
+}
\ No newline at end of file
diff --git a/src/main/generated-java/com/h2/demo/web/domain/DocumentFileUpload.java b/src/main/generated-java/com/h2/demo/web/domain/DocumentFileUpload.java
new file mode 100644
index 0000000..05c15d7
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/web/domain/DocumentFileUpload.java
@@ -0,0 +1,34 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-jsf2-spring-conversation:src/main/java/domain/FileUpload.e.vm.java
+ */
+package com.h2.demo.web.domain;
+
+import org.apache.commons.io.FilenameUtils;
+import org.primefaces.event.FileUploadEvent;
+import org.primefaces.model.UploadedFile;
+
+import com.h2.demo.domain.Document;
+
+public class DocumentFileUpload {
+    private Document document;
+
+    public DocumentFileUpload(Document document) {
+        this.document = document;
+    }
+
+    /**
+     * Primefaces support for documentBinary file upload
+     */
+    public void onDocumentBinaryFileUpload(FileUploadEvent fileUploadEvent) {
+        UploadedFile uploadedFile = fileUploadEvent.getFile(); //application code
+        document.setDocumentBinary(uploadedFile.getContents());
+        document.setDocumentSize(document.getDocumentBinary().length);
+        document.setDocumentContentType(uploadedFile.getContentType());
+        document.setDocumentFileName(FilenameUtils.getName(uploadedFile.getFileName()));
+    }
+}
\ No newline at end of file
diff --git a/src/main/generated-java/com/h2/demo/web/domain/DocumentGraphLoader.java b/src/main/generated-java/com/h2/demo/web/domain/DocumentGraphLoader.java
new file mode 100644
index 0000000..4f74e34
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/web/domain/DocumentGraphLoader.java
@@ -0,0 +1,41 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-jsf2-spring-conversation:src/main/java/domain/GraphLoader.e.vm.java
+ */
+package com.h2.demo.web.domain;
+
+import javax.inject.Inject;
+import javax.inject.Named;
+import javax.inject.Singleton;
+
+import com.h2.demo.domain.Document;
+import com.h2.demo.repository.DocumentRepository;
+import com.h2.demo.repository.support.EntityGraphLoader;
+
+/**
+ * Preloads the {@link Document} associations required by the view layer.
+ * 
+ * Do not use other GraphLoaders in this GraphLoader. 
+ */
+@Named
+@Singleton
+public class DocumentGraphLoader extends EntityGraphLoader<Document, String> {
+    // required by cglib to create a proxy around the object as we are using the @Transactional annotation
+    protected DocumentGraphLoader() {
+        super();
+    }
+
+    @Inject
+    public DocumentGraphLoader(DocumentRepository documentRepository) {
+        super(documentRepository);
+    }
+
+    @Override
+    public void loadGraph(Document document) {
+        loadSingular(document.getAccount());
+    }
+}
\ No newline at end of file
diff --git a/src/main/generated-java/com/h2/demo/web/domain/DocumentLazyDataModel.java b/src/main/generated-java/com/h2/demo/web/domain/DocumentLazyDataModel.java
new file mode 100644
index 0000000..47bc421
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/web/domain/DocumentLazyDataModel.java
@@ -0,0 +1,34 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-jsf2-spring-conversation:src/main/java/domain/LazyDataModel.e.vm.java
+ */
+package com.h2.demo.web.domain;
+
+import javax.inject.Inject;
+import javax.inject.Named;
+
+import org.primefaces.model.LazyDataModel;
+
+import com.h2.demo.domain.Document;
+import com.h2.demo.repository.DocumentRepository;
+import com.h2.demo.web.domain.support.GenericLazyDataModel;
+import com.h2.demo.web.faces.ConversationContextScoped;
+
+/**
+ * Provide PrimeFaces {@link LazyDataModel} for {@link Document}
+ */
+@Named
+@ConversationContextScoped
+public class DocumentLazyDataModel extends GenericLazyDataModel<Document, String, DocumentSearchForm> {
+    private static final long serialVersionUID = 1L;
+
+    @Inject
+    public DocumentLazyDataModel(DocumentRepository documentRepository, DocumentController documentController, DocumentSearchForm documentSearchForm,
+            DocumentExcelExporter documentExcelExporter) {
+        super(documentRepository, documentController, documentSearchForm, documentExcelExporter);
+    }
+}
\ No newline at end of file
diff --git a/src/main/generated-java/com/h2/demo/web/domain/DocumentSearchForm.java b/src/main/generated-java/com/h2/demo/web/domain/DocumentSearchForm.java
new file mode 100644
index 0000000..f753add
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/web/domain/DocumentSearchForm.java
@@ -0,0 +1,65 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-jsf2-spring-conversation:src/main/java/domain/SearchForm.e.vm.java
+ */
+package com.h2.demo.web.domain;
+
+import static com.h2.demo.repository.support.PropertySelector.newPropertySelector;
+
+import javax.inject.Named;
+
+import com.h2.demo.domain.Account;
+import com.h2.demo.domain.Document;
+import com.h2.demo.domain.Document_;
+import com.h2.demo.repository.support.PropertySelector;
+import com.h2.demo.repository.support.SearchParameters;
+import com.h2.demo.web.domain.support.GenericSearchForm;
+import com.h2.demo.web.faces.ConversationContextScoped;
+
+/**
+ * View Helper to search {@link Document}.
+ * It exposes a {@link Document} instance so it can be used in search by-example-query.
+ */
+@Named
+@ConversationContextScoped
+public class DocumentSearchForm extends GenericSearchForm<Document, String, DocumentSearchForm> {
+    private static final long serialVersionUID = 1L;
+    protected Document document = new Document();
+    protected PropertySelector<Document, Account> accountSelector = newPropertySelector(Document_.account);
+
+    public Document getDocument() {
+        return document;
+    }
+
+    @Override
+    protected Document getEntity() {
+        return getDocument();
+    }
+
+    @Override
+    public DocumentSearchForm newInstance() {
+        return new DocumentSearchForm();
+    }
+
+    @Override
+    public SearchParameters toSearchParameters() {
+        SearchParameters sp = searchParameters();
+        sp.property(accountSelector);
+        return sp;
+    }
+
+    @Override
+    public void resetWithOther(DocumentSearchForm other) {
+        this.document = other.getDocument();
+        this.accountSelector = other.getAccountSelector();
+    }
+
+    // Relation selectors
+    public PropertySelector<Document, Account> getAccountSelector() {
+        return accountSelector;
+    }
+}
diff --git a/src/main/generated-java/com/h2/demo/web/domain/LegacyController.java b/src/main/generated-java/com/h2/demo/web/domain/LegacyController.java
new file mode 100644
index 0000000..e5f20d9
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/web/domain/LegacyController.java
@@ -0,0 +1,35 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-jsf2-spring-conversation:src/main/java/domain/Controller.e.vm.java
+ */
+package com.h2.demo.web.domain;
+
+import javax.inject.Inject;
+import javax.inject.Named;
+import javax.inject.Singleton;
+
+import com.h2.demo.domain.Legacy;
+import com.h2.demo.domain.LegacyPk;
+import com.h2.demo.printer.LegacyPrinter;
+import com.h2.demo.repository.LegacyRepository;
+import com.h2.demo.web.domain.support.GenericController;
+import com.h2.demo.web.permission.LegacyPermission;
+
+/**
+ * Stateless controller for {@link Legacy} conversation start.
+ */
+@Named
+@Singleton
+public class LegacyController extends GenericController<Legacy, LegacyPk> {
+    public static final String LEGACY_EDIT_URI = "/domain/legacyEdit.faces";
+    public static final String LEGACY_SELECT_URI = "/domain/legacySelect.faces";
+
+    @Inject
+    public LegacyController(LegacyRepository legacyRepository, LegacyPermission legacyPermission, LegacyPrinter legacyPrinter) {
+        super(legacyRepository, legacyPermission, legacyPrinter, LEGACY_SELECT_URI, LEGACY_EDIT_URI);
+    }
+}
\ No newline at end of file
diff --git a/src/main/generated-java/com/h2/demo/web/domain/LegacyEditForm.java b/src/main/generated-java/com/h2/demo/web/domain/LegacyEditForm.java
new file mode 100644
index 0000000..7d4aa84
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/web/domain/LegacyEditForm.java
@@ -0,0 +1,44 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-jsf2-spring-conversation:src/main/java/domain/EditForm.e.vm.java
+ */
+package com.h2.demo.web.domain;
+
+import javax.inject.Inject;
+import javax.inject.Named;
+
+import com.h2.demo.domain.Legacy;
+import com.h2.demo.domain.LegacyPk;
+import com.h2.demo.repository.LegacyRepository;
+import com.h2.demo.web.domain.support.GenericEditForm;
+import com.h2.demo.web.faces.ConversationContextScoped;
+
+/**
+ * View Helper/Controller to edit {@link Legacy}.
+ */
+@Named
+@ConversationContextScoped
+public class LegacyEditForm extends GenericEditForm<Legacy, LegacyPk> {
+    @Inject
+    protected LegacyController legacyController;
+
+    @Inject
+    public LegacyEditForm(LegacyRepository legacyRepository) {
+        super(legacyRepository);
+    }
+
+    /**
+     * The entity to edit/view.
+     */
+    public Legacy getLegacy() {
+        return getEntity();
+    }
+
+    public String print() {
+        return legacyController.print(getLegacy());
+    }
+}
diff --git a/src/main/generated-java/com/h2/demo/web/domain/LegacyExcelExporter.java b/src/main/generated-java/com/h2/demo/web/domain/LegacyExcelExporter.java
new file mode 100644
index 0000000..88821ff
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/web/domain/LegacyExcelExporter.java
@@ -0,0 +1,49 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-jsf2-spring-conversation:src/main/java/domain/ExcelExporter.e.vm.java
+ */
+package com.h2.demo.web.domain;
+
+import javax.inject.Inject;
+import javax.inject.Named;
+
+import com.h2.demo.domain.Legacy;
+import com.h2.demo.web.domain.support.GenericExcelExporter;
+import com.h2.demo.web.faces.ConversationContextScoped;
+
+/**
+ * Exports to excel document {@link Legacy} search criteria and result. 
+ */
+@Named
+@ConversationContextScoped
+public class LegacyExcelExporter extends GenericExcelExporter<Legacy> {
+    @Inject
+    protected LegacySearchForm sf;
+
+    public LegacyExcelExporter() {
+        super("legacy_name", "legacy_code", "legacy_dept", "legacy_extraInfo");
+    }
+
+    @Override
+    protected void fillResultItem(int row, Legacy item) {
+        int col = 0;
+        setValue(row, col++, item.getId().getName());
+        setValue(row, col++, item.getId().getCode());
+        setValue(row, col++, item.getId().getDept());
+        setValue(row, col++, item.getExtraInfo());
+    }
+
+    @Override
+    public void fillSearchCriteria(int row) {
+        useCriteriaSheet();
+
+        // todo
+        // todo
+        // todo
+        setSelector(row++, 0, "legacy_extraInfo", sf.getExtraInfoSelector());
+    }
+}
\ No newline at end of file
diff --git a/src/main/generated-java/com/h2/demo/web/domain/LegacyLazyDataModel.java b/src/main/generated-java/com/h2/demo/web/domain/LegacyLazyDataModel.java
new file mode 100644
index 0000000..0d403db
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/web/domain/LegacyLazyDataModel.java
@@ -0,0 +1,35 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-jsf2-spring-conversation:src/main/java/domain/LazyDataModel.e.vm.java
+ */
+package com.h2.demo.web.domain;
+
+import javax.inject.Inject;
+import javax.inject.Named;
+
+import org.primefaces.model.LazyDataModel;
+
+import com.h2.demo.domain.Legacy;
+import com.h2.demo.domain.LegacyPk;
+import com.h2.demo.repository.LegacyRepository;
+import com.h2.demo.web.domain.support.GenericLazyDataModel;
+import com.h2.demo.web.faces.ConversationContextScoped;
+
+/**
+ * Provide PrimeFaces {@link LazyDataModel} for {@link Legacy}
+ */
+@Named
+@ConversationContextScoped
+public class LegacyLazyDataModel extends GenericLazyDataModel<Legacy, LegacyPk, LegacySearchForm> {
+    private static final long serialVersionUID = 1L;
+
+    @Inject
+    public LegacyLazyDataModel(LegacyRepository legacyRepository, LegacyController legacyController, LegacySearchForm legacySearchForm,
+            LegacyExcelExporter legacyExcelExporter) {
+        super(legacyRepository, legacyController, legacySearchForm, legacyExcelExporter);
+    }
+}
\ No newline at end of file
diff --git a/src/main/generated-java/com/h2/demo/web/domain/LegacySearchForm.java b/src/main/generated-java/com/h2/demo/web/domain/LegacySearchForm.java
new file mode 100644
index 0000000..50b9843
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/web/domain/LegacySearchForm.java
@@ -0,0 +1,66 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-jsf2-spring-conversation:src/main/java/domain/SearchForm.e.vm.java
+ */
+package com.h2.demo.web.domain;
+
+import static com.h2.demo.repository.support.PropertySelector.newPropertySelector;
+
+import javax.inject.Named;
+
+import com.h2.demo.domain.Legacy;
+import com.h2.demo.domain.LegacyPk;
+import com.h2.demo.domain.Legacy_;
+import com.h2.demo.repository.support.PropertySelector;
+import com.h2.demo.repository.support.SearchParameters;
+import com.h2.demo.web.domain.support.GenericSearchForm;
+import com.h2.demo.web.faces.ConversationContextScoped;
+
+/**
+ * View Helper to search {@link Legacy}.
+ * It exposes a {@link Legacy} instance so it can be used in search by-example-query.
+ */
+@Named
+@ConversationContextScoped
+public class LegacySearchForm extends GenericSearchForm<Legacy, LegacyPk, LegacySearchForm> {
+    private static final long serialVersionUID = 1L;
+    protected Legacy legacy = new Legacy();
+    protected PropertySelector<Legacy, String> extraInfoSelector = newPropertySelector(Legacy_.extraInfo);
+
+    public Legacy getLegacy() {
+        return legacy;
+    }
+
+    @Override
+    protected Legacy getEntity() {
+        return getLegacy();
+    }
+
+    @Override
+    public LegacySearchForm newInstance() {
+        return new LegacySearchForm();
+    }
+
+    @Override
+    public SearchParameters toSearchParameters() {
+        SearchParameters sp = searchParameters();
+        sp.distinct(false); // we must force to false to cirvumvent a bug in H2 or Hibernate. TODO: report the bug
+        sp.property(extraInfoSelector);
+        return sp;
+    }
+
+    @Override
+    public void resetWithOther(LegacySearchForm other) {
+        this.legacy = other.getLegacy();
+        this.extraInfoSelector = other.getExtraInfoSelector();
+    }
+
+    // Property selectors
+    public PropertySelector<Legacy, String> getExtraInfoSelector() {
+        return extraInfoSelector;
+    }
+}
diff --git a/src/main/generated-java/com/h2/demo/web/domain/MoreTypesDemoController.java b/src/main/generated-java/com/h2/demo/web/domain/MoreTypesDemoController.java
new file mode 100644
index 0000000..1e9e9aa
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/web/domain/MoreTypesDemoController.java
@@ -0,0 +1,37 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-jsf2-spring-conversation:src/main/java/domain/Controller.e.vm.java
+ */
+package com.h2.demo.web.domain;
+
+import java.math.BigDecimal;
+
+import javax.inject.Inject;
+import javax.inject.Named;
+import javax.inject.Singleton;
+
+import com.h2.demo.domain.MoreTypesDemo;
+import com.h2.demo.printer.MoreTypesDemoPrinter;
+import com.h2.demo.repository.MoreTypesDemoRepository;
+import com.h2.demo.web.domain.support.GenericController;
+import com.h2.demo.web.permission.MoreTypesDemoPermission;
+
+/**
+ * Stateless controller for {@link MoreTypesDemo} conversation start.
+ */
+@Named
+@Singleton
+public class MoreTypesDemoController extends GenericController<MoreTypesDemo, BigDecimal> {
+    public static final String MORETYPESDEMO_EDIT_URI = "/domain/moreTypesDemoEdit.faces";
+    public static final String MORETYPESDEMO_SELECT_URI = "/domain/moreTypesDemoSelect.faces";
+
+    @Inject
+    public MoreTypesDemoController(MoreTypesDemoRepository moreTypesDemoRepository, MoreTypesDemoPermission moreTypesDemoPermission,
+            MoreTypesDemoPrinter moreTypesDemoPrinter) {
+        super(moreTypesDemoRepository, moreTypesDemoPermission, moreTypesDemoPrinter, MORETYPESDEMO_SELECT_URI, MORETYPESDEMO_EDIT_URI);
+    }
+}
\ No newline at end of file
diff --git a/src/main/generated-java/com/h2/demo/web/domain/MoreTypesDemoEditForm.java b/src/main/generated-java/com/h2/demo/web/domain/MoreTypesDemoEditForm.java
new file mode 100644
index 0000000..3c62198
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/web/domain/MoreTypesDemoEditForm.java
@@ -0,0 +1,45 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-jsf2-spring-conversation:src/main/java/domain/EditForm.e.vm.java
+ */
+package com.h2.demo.web.domain;
+
+import java.math.BigDecimal;
+
+import javax.inject.Inject;
+import javax.inject.Named;
+
+import com.h2.demo.domain.MoreTypesDemo;
+import com.h2.demo.repository.MoreTypesDemoRepository;
+import com.h2.demo.web.domain.support.GenericEditForm;
+import com.h2.demo.web.faces.ConversationContextScoped;
+
+/**
+ * View Helper/Controller to edit {@link MoreTypesDemo}.
+ */
+@Named
+@ConversationContextScoped
+public class MoreTypesDemoEditForm extends GenericEditForm<MoreTypesDemo, BigDecimal> {
+    @Inject
+    protected MoreTypesDemoController moreTypesDemoController;
+
+    @Inject
+    public MoreTypesDemoEditForm(MoreTypesDemoRepository moreTypesDemoRepository) {
+        super(moreTypesDemoRepository);
+    }
+
+    /**
+     * The entity to edit/view.
+     */
+    public MoreTypesDemo getMoreTypesDemo() {
+        return getEntity();
+    }
+
+    public String print() {
+        return moreTypesDemoController.print(getMoreTypesDemo());
+    }
+}
diff --git a/src/main/generated-java/com/h2/demo/web/domain/MoreTypesDemoExcelExporter.java b/src/main/generated-java/com/h2/demo/web/domain/MoreTypesDemoExcelExporter.java
new file mode 100644
index 0000000..77aece3
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/web/domain/MoreTypesDemoExcelExporter.java
@@ -0,0 +1,58 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-jsf2-spring-conversation:src/main/java/domain/ExcelExporter.e.vm.java
+ */
+package com.h2.demo.web.domain;
+
+import javax.inject.Inject;
+import javax.inject.Named;
+
+import com.h2.demo.domain.MoreTypesDemo;
+import com.h2.demo.web.domain.support.GenericExcelExporter;
+import com.h2.demo.web.faces.ConversationContextScoped;
+
+/**
+ * Exports to excel document {@link MoreTypesDemo} search criteria and result. 
+ */
+@Named
+@ConversationContextScoped
+public class MoreTypesDemoExcelExporter extends GenericExcelExporter<MoreTypesDemo> {
+    @Inject
+    protected MoreTypesDemoSearchForm sf;
+
+    public MoreTypesDemoExcelExporter() {
+        super("moreTypesDemo_numberInt", "moreTypesDemo_numberLong", "moreTypesDemo_numberDouble", "moreTypesDemo_numberFloat",
+                "moreTypesDemo_numberBigInteger", "moreTypesDemo_numberBigDecimal");
+    }
+
+    @Override
+    protected void fillResultItem(int row, MoreTypesDemo item) {
+        int col = 0;
+        setValue(row, col++, item.getNumberInt());
+        setValue(row, col++, item.getNumberLong());
+        setValue(row, col++, item.getNumberDouble());
+        setValue(row, col++, item.getNumberFloat());
+        setValue(row, col++, item.getNumberBigInteger());
+        setValue(row, col++, item.getNumberBigDecimal());
+    }
+
+    @Override
+    public void fillSearchCriteria(int row) {
+        useCriteriaSheet();
+
+        setRangeNumber(row++, 0, "moreTypesDemo_numberInt", sf.getNumberIntRange());
+        setRangeNumber(row++, 0, "moreTypesDemo_numberLong", sf.getNumberLongRange());
+        setRangeNumber(row++, 0, "moreTypesDemo_numberDouble", sf.getNumberDoubleRange());
+        setRangeNumber(row++, 0, "moreTypesDemo_numberFloat", sf.getNumberFloatRange());
+        setRangeNumber(row++, 0, "moreTypesDemo_numberBigInteger", sf.getNumberBigIntegerRange());
+        setRangeNumber(row++, 0, "moreTypesDemo_numberBigDecimal", sf.getNumberBigDecimalRange());
+        setRangeDate(row++, 0, "moreTypesDemo_dateJavaTemporalDate", sf.getDateJavaTemporalDateRange());
+        setRangeDateTime(row++, 0, "moreTypesDemo_dateJavaTemporalTimestamp", sf.getDateJavaTemporalTimestampRange());
+        setRangeDate(row++, 0, "moreTypesDemo_dateJoda", sf.getDateJodaRange());
+        setRangeDateTime(row++, 0, "moreTypesDemo_dateTimeJoda", sf.getDateTimeJodaRange());
+    }
+}
\ No newline at end of file
diff --git a/src/main/generated-java/com/h2/demo/web/domain/MoreTypesDemoLazyDataModel.java b/src/main/generated-java/com/h2/demo/web/domain/MoreTypesDemoLazyDataModel.java
new file mode 100644
index 0000000..1096d69
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/web/domain/MoreTypesDemoLazyDataModel.java
@@ -0,0 +1,36 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-jsf2-spring-conversation:src/main/java/domain/LazyDataModel.e.vm.java
+ */
+package com.h2.demo.web.domain;
+
+import java.math.BigDecimal;
+
+import javax.inject.Inject;
+import javax.inject.Named;
+
+import org.primefaces.model.LazyDataModel;
+
+import com.h2.demo.domain.MoreTypesDemo;
+import com.h2.demo.repository.MoreTypesDemoRepository;
+import com.h2.demo.web.domain.support.GenericLazyDataModel;
+import com.h2.demo.web.faces.ConversationContextScoped;
+
+/**
+ * Provide PrimeFaces {@link LazyDataModel} for {@link MoreTypesDemo}
+ */
+@Named
+@ConversationContextScoped
+public class MoreTypesDemoLazyDataModel extends GenericLazyDataModel<MoreTypesDemo, BigDecimal, MoreTypesDemoSearchForm> {
+    private static final long serialVersionUID = 1L;
+
+    @Inject
+    public MoreTypesDemoLazyDataModel(MoreTypesDemoRepository moreTypesDemoRepository, MoreTypesDemoController moreTypesDemoController,
+            MoreTypesDemoSearchForm moreTypesDemoSearchForm, MoreTypesDemoExcelExporter moreTypesDemoExcelExporter) {
+        super(moreTypesDemoRepository, moreTypesDemoController, moreTypesDemoSearchForm, moreTypesDemoExcelExporter);
+    }
+}
\ No newline at end of file
diff --git a/src/main/generated-java/com/h2/demo/web/domain/MoreTypesDemoSearchForm.java b/src/main/generated-java/com/h2/demo/web/domain/MoreTypesDemoSearchForm.java
new file mode 100644
index 0000000..85c37cc
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/web/domain/MoreTypesDemoSearchForm.java
@@ -0,0 +1,163 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-jsf2-spring-conversation:src/main/java/domain/SearchForm.e.vm.java
+ */
+package com.h2.demo.web.domain;
+
+import static com.h2.demo.repository.support.PropertySelector.newPropertySelector;
+import static com.h2.demo.repository.support.Range.newRange;
+
+import java.math.BigDecimal;
+import java.math.BigInteger;
+import java.util.Date;
+
+import javax.inject.Named;
+
+import com.h2.demo.domain.MoreTypesDemo;
+import com.h2.demo.domain.MoreTypesDemo_;
+import com.h2.demo.repository.support.PropertySelector;
+import com.h2.demo.repository.support.Range;
+import com.h2.demo.repository.support.SearchParameters;
+import com.h2.demo.web.domain.support.GenericSearchForm;
+import com.h2.demo.web.faces.ConversationContextScoped;
+
+/**
+ * View Helper to search {@link MoreTypesDemo}.
+ * It exposes a {@link MoreTypesDemo} instance so it can be used in search by-example-query.
+ */
+@Named
+@ConversationContextScoped
+public class MoreTypesDemoSearchForm extends GenericSearchForm<MoreTypesDemo, BigDecimal, MoreTypesDemoSearchForm> {
+    private static final long serialVersionUID = 1L;
+    protected MoreTypesDemo moreTypesDemo = new MoreTypesDemo();
+    protected Range<MoreTypesDemo, Integer> numberIntRange = newRange(MoreTypesDemo_.numberInt);
+    protected Range<MoreTypesDemo, Long> numberLongRange = newRange(MoreTypesDemo_.numberLong);
+    protected Range<MoreTypesDemo, Double> numberDoubleRange = newRange(MoreTypesDemo_.numberDouble);
+    protected Range<MoreTypesDemo, Float> numberFloatRange = newRange(MoreTypesDemo_.numberFloat);
+    protected Range<MoreTypesDemo, BigInteger> numberBigIntegerRange = newRange(MoreTypesDemo_.numberBigInteger);
+    protected Range<MoreTypesDemo, BigDecimal> numberBigDecimalRange = newRange(MoreTypesDemo_.numberBigDecimal);
+    protected Range<MoreTypesDemo, Date> dateJavaTemporalDateRange = newRange(MoreTypesDemo_.dateJavaTemporalDate);
+    protected Range<MoreTypesDemo, Date> dateJavaTemporalTimestampRange = newRange(MoreTypesDemo_.dateJavaTemporalTimestamp);
+    protected Range<MoreTypesDemo, Date> dateJodaRange = newRange(MoreTypesDemo_.dateJoda);
+    protected Range<MoreTypesDemo, Date> dateTimeJodaRange = newRange(MoreTypesDemo_.dateTimeJoda);
+    protected PropertySelector<MoreTypesDemo, Integer> numberIntSelector = newPropertySelector(MoreTypesDemo_.numberInt);
+    protected PropertySelector<MoreTypesDemo, Long> numberLongSelector = newPropertySelector(MoreTypesDemo_.numberLong);
+    protected PropertySelector<MoreTypesDemo, Double> numberDoubleSelector = newPropertySelector(MoreTypesDemo_.numberDouble);
+    protected PropertySelector<MoreTypesDemo, Float> numberFloatSelector = newPropertySelector(MoreTypesDemo_.numberFloat);
+    protected PropertySelector<MoreTypesDemo, BigInteger> numberBigIntegerSelector = newPropertySelector(MoreTypesDemo_.numberBigInteger);
+    protected PropertySelector<MoreTypesDemo, BigDecimal> numberBigDecimalSelector = newPropertySelector(MoreTypesDemo_.numberBigDecimal);
+
+    public MoreTypesDemo getMoreTypesDemo() {
+        return moreTypesDemo;
+    }
+
+    @Override
+    protected MoreTypesDemo getEntity() {
+        return getMoreTypesDemo();
+    }
+
+    @Override
+    public MoreTypesDemoSearchForm newInstance() {
+        return new MoreTypesDemoSearchForm();
+    }
+
+    @Override
+    public SearchParameters toSearchParameters() {
+        SearchParameters sp = searchParameters();
+        sp.range(numberIntRange, numberLongRange, numberDoubleRange, numberFloatRange, numberBigIntegerRange, numberBigDecimalRange, dateJavaTemporalDateRange,
+                dateJavaTemporalTimestampRange, dateJodaRange, dateTimeJodaRange);
+        sp.property(numberIntSelector, numberLongSelector, numberDoubleSelector, numberFloatSelector, numberBigIntegerSelector, numberBigDecimalSelector);
+        return sp;
+    }
+
+    @Override
+    public void resetWithOther(MoreTypesDemoSearchForm other) {
+        this.moreTypesDemo = other.getMoreTypesDemo();
+        this.numberIntRange = other.getNumberIntRange();
+        this.numberLongRange = other.getNumberLongRange();
+        this.numberDoubleRange = other.getNumberDoubleRange();
+        this.numberFloatRange = other.getNumberFloatRange();
+        this.numberBigIntegerRange = other.getNumberBigIntegerRange();
+        this.numberBigDecimalRange = other.getNumberBigDecimalRange();
+        this.dateJavaTemporalDateRange = other.getDateJavaTemporalDateRange();
+        this.dateJavaTemporalTimestampRange = other.getDateJavaTemporalTimestampRange();
+        this.dateJodaRange = other.getDateJodaRange();
+        this.dateTimeJodaRange = other.getDateTimeJodaRange();
+        this.numberIntSelector = other.getNumberIntSelector();
+        this.numberLongSelector = other.getNumberLongSelector();
+        this.numberDoubleSelector = other.getNumberDoubleSelector();
+        this.numberFloatSelector = other.getNumberFloatSelector();
+        this.numberBigIntegerSelector = other.getNumberBigIntegerSelector();
+        this.numberBigDecimalSelector = other.getNumberBigDecimalSelector();
+    }
+
+    // Ranges
+    public Range<MoreTypesDemo, Integer> getNumberIntRange() {
+        return numberIntRange;
+    }
+
+    public Range<MoreTypesDemo, Long> getNumberLongRange() {
+        return numberLongRange;
+    }
+
+    public Range<MoreTypesDemo, Double> getNumberDoubleRange() {
+        return numberDoubleRange;
+    }
+
+    public Range<MoreTypesDemo, Float> getNumberFloatRange() {
+        return numberFloatRange;
+    }
+
+    public Range<MoreTypesDemo, BigInteger> getNumberBigIntegerRange() {
+        return numberBigIntegerRange;
+    }
+
+    public Range<MoreTypesDemo, BigDecimal> getNumberBigDecimalRange() {
+        return numberBigDecimalRange;
+    }
+
+    public Range<MoreTypesDemo, Date> getDateJavaTemporalDateRange() {
+        return dateJavaTemporalDateRange;
+    }
+
+    public Range<MoreTypesDemo, Date> getDateJavaTemporalTimestampRange() {
+        return dateJavaTemporalTimestampRange;
+    }
+
+    public Range<MoreTypesDemo, Date> getDateJodaRange() {
+        return dateJodaRange;
+    }
+
+    public Range<MoreTypesDemo, Date> getDateTimeJodaRange() {
+        return dateTimeJodaRange;
+    }
+
+    // Property selectors
+    public PropertySelector<MoreTypesDemo, Integer> getNumberIntSelector() {
+        return numberIntSelector;
+    }
+
+    public PropertySelector<MoreTypesDemo, Long> getNumberLongSelector() {
+        return numberLongSelector;
+    }
+
+    public PropertySelector<MoreTypesDemo, Double> getNumberDoubleSelector() {
+        return numberDoubleSelector;
+    }
+
+    public PropertySelector<MoreTypesDemo, Float> getNumberFloatSelector() {
+        return numberFloatSelector;
+    }
+
+    public PropertySelector<MoreTypesDemo, BigInteger> getNumberBigIntegerSelector() {
+        return numberBigIntegerSelector;
+    }
+
+    public PropertySelector<MoreTypesDemo, BigDecimal> getNumberBigDecimalSelector() {
+        return numberBigDecimalSelector;
+    }
+}
diff --git a/src/main/generated-java/com/h2/demo/web/domain/RoleController.java b/src/main/generated-java/com/h2/demo/web/domain/RoleController.java
new file mode 100644
index 0000000..663fbe1
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/web/domain/RoleController.java
@@ -0,0 +1,41 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-jsf2-spring-conversation:src/main/java/domain/Controller.e.vm.java
+ */
+package com.h2.demo.web.domain;
+
+import javax.inject.Inject;
+import javax.inject.Named;
+import javax.inject.Singleton;
+
+import com.h2.demo.domain.Role;
+import com.h2.demo.domain.Role_;
+import com.h2.demo.printer.RolePrinter;
+import com.h2.demo.repository.RoleRepository;
+import com.h2.demo.repository.support.SearchParameters;
+import com.h2.demo.web.domain.support.GenericController;
+import com.h2.demo.web.permission.RolePermission;
+
+/**
+ * Stateless controller for {@link Role} conversation start.
+ */
+@Named
+@Singleton
+public class RoleController extends GenericController<Role, Integer> {
+    public static final String ROLE_EDIT_URI = "/domain/roleEdit.faces";
+    public static final String ROLE_SELECT_URI = "/domain/roleSelect.faces";
+
+    @Inject
+    public RoleController(RoleRepository roleRepository, RolePermission rolePermission, RolePrinter rolePrinter) {
+        super(roleRepository, rolePermission, rolePrinter, ROLE_SELECT_URI, ROLE_EDIT_URI);
+    }
+
+    @Override
+    protected SearchParameters defaultOrder(SearchParameters searchParameters) {
+        return searchParameters.asc(Role_.roleName);
+    }
+}
\ No newline at end of file
diff --git a/src/main/generated-java/com/h2/demo/web/domain/RoleEditForm.java b/src/main/generated-java/com/h2/demo/web/domain/RoleEditForm.java
new file mode 100644
index 0000000..54b488a
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/web/domain/RoleEditForm.java
@@ -0,0 +1,43 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-jsf2-spring-conversation:src/main/java/domain/EditForm.e.vm.java
+ */
+package com.h2.demo.web.domain;
+
+import javax.inject.Inject;
+import javax.inject.Named;
+
+import com.h2.demo.domain.Role;
+import com.h2.demo.repository.RoleRepository;
+import com.h2.demo.web.domain.support.GenericEditForm;
+import com.h2.demo.web.faces.ConversationContextScoped;
+
+/**
+ * View Helper/Controller to edit {@link Role}.
+ */
+@Named
+@ConversationContextScoped
+public class RoleEditForm extends GenericEditForm<Role, Integer> {
+    @Inject
+    protected RoleController roleController;
+
+    @Inject
+    public RoleEditForm(RoleRepository roleRepository) {
+        super(roleRepository);
+    }
+
+    /**
+     * The entity to edit/view.
+     */
+    public Role getRole() {
+        return getEntity();
+    }
+
+    public String print() {
+        return roleController.print(getRole());
+    }
+}
diff --git a/src/main/generated-java/com/h2/demo/web/domain/RoleExcelExporter.java b/src/main/generated-java/com/h2/demo/web/domain/RoleExcelExporter.java
new file mode 100644
index 0000000..97bfadc
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/web/domain/RoleExcelExporter.java
@@ -0,0 +1,43 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-jsf2-spring-conversation:src/main/java/domain/ExcelExporter.e.vm.java
+ */
+package com.h2.demo.web.domain;
+
+import javax.inject.Inject;
+import javax.inject.Named;
+
+import com.h2.demo.domain.Role;
+import com.h2.demo.web.domain.support.GenericExcelExporter;
+import com.h2.demo.web.faces.ConversationContextScoped;
+
+/**
+ * Exports to excel document {@link Role} search criteria and result. 
+ */
+@Named
+@ConversationContextScoped
+public class RoleExcelExporter extends GenericExcelExporter<Role> {
+    @Inject
+    protected RoleSearchForm sf;
+
+    public RoleExcelExporter() {
+        super("role_roleName");
+    }
+
+    @Override
+    protected void fillResultItem(int row, Role item) {
+        int col = 0;
+        setValue(row, col++, item.getRoleName());
+    }
+
+    @Override
+    public void fillSearchCriteria(int row) {
+        useCriteriaSheet();
+
+        setSelector(row++, 0, "role_roleName", sf.getRoleNameSelector());
+    }
+}
\ No newline at end of file
diff --git a/src/main/generated-java/com/h2/demo/web/domain/RoleLazyDataModel.java b/src/main/generated-java/com/h2/demo/web/domain/RoleLazyDataModel.java
new file mode 100644
index 0000000..55fb3f6
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/web/domain/RoleLazyDataModel.java
@@ -0,0 +1,33 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-jsf2-spring-conversation:src/main/java/domain/LazyDataModel.e.vm.java
+ */
+package com.h2.demo.web.domain;
+
+import javax.inject.Inject;
+import javax.inject.Named;
+
+import org.primefaces.model.LazyDataModel;
+
+import com.h2.demo.domain.Role;
+import com.h2.demo.repository.RoleRepository;
+import com.h2.demo.web.domain.support.GenericLazyDataModel;
+import com.h2.demo.web.faces.ConversationContextScoped;
+
+/**
+ * Provide PrimeFaces {@link LazyDataModel} for {@link Role}
+ */
+@Named
+@ConversationContextScoped
+public class RoleLazyDataModel extends GenericLazyDataModel<Role, Integer, RoleSearchForm> {
+    private static final long serialVersionUID = 1L;
+
+    @Inject
+    public RoleLazyDataModel(RoleRepository roleRepository, RoleController roleController, RoleSearchForm roleSearchForm, RoleExcelExporter roleExcelExporter) {
+        super(roleRepository, roleController, roleSearchForm, roleExcelExporter);
+    }
+}
\ No newline at end of file
diff --git a/src/main/generated-java/com/h2/demo/web/domain/RoleSearchForm.java b/src/main/generated-java/com/h2/demo/web/domain/RoleSearchForm.java
new file mode 100644
index 0000000..74c7942
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/web/domain/RoleSearchForm.java
@@ -0,0 +1,64 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-jsf2-spring-conversation:src/main/java/domain/SearchForm.e.vm.java
+ */
+package com.h2.demo.web.domain;
+
+import static com.h2.demo.repository.support.PropertySelector.newPropertySelector;
+
+import javax.inject.Named;
+
+import com.h2.demo.domain.Role;
+import com.h2.demo.domain.Role_;
+import com.h2.demo.repository.support.PropertySelector;
+import com.h2.demo.repository.support.SearchParameters;
+import com.h2.demo.web.domain.support.GenericSearchForm;
+import com.h2.demo.web.faces.ConversationContextScoped;
+
+/**
+ * View Helper to search {@link Role}.
+ * It exposes a {@link Role} instance so it can be used in search by-example-query.
+ */
+@Named
+@ConversationContextScoped
+public class RoleSearchForm extends GenericSearchForm<Role, Integer, RoleSearchForm> {
+    private static final long serialVersionUID = 1L;
+    protected Role role = new Role();
+    protected PropertySelector<Role, String> roleNameSelector = newPropertySelector(Role_.roleName);
+
+    public Role getRole() {
+        return role;
+    }
+
+    @Override
+    protected Role getEntity() {
+        return getRole();
+    }
+
+    @Override
+    public RoleSearchForm newInstance() {
+        return new RoleSearchForm();
+    }
+
+    @Override
+    public SearchParameters toSearchParameters() {
+        SearchParameters sp = searchParameters();
+        sp.property(roleNameSelector);
+        return sp;
+    }
+
+    @Override
+    public void resetWithOther(RoleSearchForm other) {
+        this.role = other.getRole();
+        this.roleNameSelector = other.getRoleNameSelector();
+    }
+
+    // Property selectors
+    public PropertySelector<Role, String> getRoleNameSelector() {
+        return roleNameSelector;
+    }
+}
diff --git a/src/main/generated-java/com/h2/demo/web/domain/SavedSearchController.java b/src/main/generated-java/com/h2/demo/web/domain/SavedSearchController.java
new file mode 100644
index 0000000..8e4dc62
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/web/domain/SavedSearchController.java
@@ -0,0 +1,38 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-jsf2-spring-conversation:src/main/java/domain/Controller.e.vm.java
+ */
+package com.h2.demo.web.domain;
+
+import javax.inject.Inject;
+import javax.inject.Named;
+import javax.inject.Singleton;
+
+import com.h2.demo.domain.SavedSearch;
+import com.h2.demo.printer.SavedSearchPrinter;
+import com.h2.demo.repository.SavedSearchRepository;
+import com.h2.demo.web.domain.support.GenericController;
+import com.h2.demo.web.permission.SavedSearchPermission;
+
+/**
+ * Stateless controller for {@link SavedSearch} conversation start.
+ */
+@Named
+@Singleton
+public class SavedSearchController extends GenericController<SavedSearch, Integer> {
+    public static final String SAVEDSEARCH_EDIT_URI = "/domain/savedSearchEdit.faces";
+    public static final String SAVEDSEARCH_SELECT_URI = "/domain/savedSearchSelect.faces";
+
+    @Inject
+    public SavedSearchController(SavedSearchRepository savedSearchRepository, SavedSearchPermission savedSearchPermission, SavedSearchPrinter savedSearchPrinter) {
+        super(savedSearchRepository, savedSearchPermission, savedSearchPrinter, SAVEDSEARCH_SELECT_URI, SAVEDSEARCH_EDIT_URI);
+    }
+
+    public SavedSearchFileUpload getSavedSearchFileUpload(SavedSearch savedSearch) {
+        return new SavedSearchFileUpload(savedSearch);
+    }
+}
\ No newline at end of file
diff --git a/src/main/generated-java/com/h2/demo/web/domain/SavedSearchEditForm.java b/src/main/generated-java/com/h2/demo/web/domain/SavedSearchEditForm.java
new file mode 100644
index 0000000..ead88e9
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/web/domain/SavedSearchEditForm.java
@@ -0,0 +1,69 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-jsf2-spring-conversation:src/main/java/domain/EditForm.e.vm.java
+ */
+package com.h2.demo.web.domain;
+
+import javax.annotation.PostConstruct;
+import javax.inject.Inject;
+import javax.inject.Named;
+
+import com.h2.demo.domain.Account;
+import com.h2.demo.domain.SavedSearch;
+import com.h2.demo.domain.SavedSearch_;
+import com.h2.demo.repository.SavedSearchRepository;
+import com.h2.demo.web.domain.support.GenericEditForm;
+import com.h2.demo.web.domain.support.GenericToOneAssociation;
+import com.h2.demo.web.faces.ConversationContextScoped;
+
+/**
+ * View Helper/Controller to edit {@link SavedSearch}.
+ */
+@Named
+@ConversationContextScoped
+public class SavedSearchEditForm extends GenericEditForm<SavedSearch, Integer> {
+    @Inject
+    protected SavedSearchController savedSearchController;
+    @Inject
+    protected AccountController accountController;
+    protected GenericToOneAssociation<Account, String> account;
+
+    @Inject
+    public SavedSearchEditForm(SavedSearchRepository savedSearchRepository, SavedSearchGraphLoader savedSearchGraphLoader) {
+        super(savedSearchRepository, savedSearchGraphLoader);
+    }
+
+    /**
+     * The entity to edit/view.
+     */
+    public SavedSearch getSavedSearch() {
+        return getEntity();
+    }
+
+    public String print() {
+        return savedSearchController.print(getSavedSearch());
+    }
+
+    @PostConstruct
+    void setupAccountActions() {
+        account = new GenericToOneAssociation<Account, String>(accountController, SavedSearch_.account) {
+            @Override
+            protected Account get() {
+                return getSavedSearch().getAccount();
+            }
+
+            @Override
+            protected void set(Account account) {
+                getSavedSearch().setAccount(account);
+            }
+        };
+    }
+
+    public GenericToOneAssociation<Account, String> getAccount() {
+        return account;
+    }
+}
diff --git a/src/main/generated-java/com/h2/demo/web/domain/SavedSearchExcelExporter.java b/src/main/generated-java/com/h2/demo/web/domain/SavedSearchExcelExporter.java
new file mode 100644
index 0000000..9942fa5
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/web/domain/SavedSearchExcelExporter.java
@@ -0,0 +1,46 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-jsf2-spring-conversation:src/main/java/domain/ExcelExporter.e.vm.java
+ */
+package com.h2.demo.web.domain;
+
+import javax.inject.Inject;
+import javax.inject.Named;
+
+import com.h2.demo.domain.SavedSearch;
+import com.h2.demo.web.domain.support.GenericExcelExporter;
+import com.h2.demo.web.faces.ConversationContextScoped;
+
+/**
+ * Exports to excel document {@link SavedSearch} search criteria and result. 
+ */
+@Named
+@ConversationContextScoped
+public class SavedSearchExcelExporter extends GenericExcelExporter<SavedSearch> {
+    @Inject
+    protected SavedSearchSearchForm sf;
+
+    public SavedSearchExcelExporter() {
+        super("savedSearch_name", "savedSearch_formClassname");
+    }
+
+    @Override
+    protected void fillResultItem(int row, SavedSearch item) {
+        int col = 0;
+        setValue(row, col++, item.getName());
+        setValue(row, col++, item.getFormClassname());
+    }
+
+    @Override
+    public void fillSearchCriteria(int row) {
+        useCriteriaSheet();
+
+        setSelector(row++, 0, "savedSearch_name", sf.getNameSelector());
+        setSelector(row++, 0, "savedSearch_formClassname", sf.getFormClassnameSelector());
+        setSelectedEntities(row++, 0, "savedSearch_account", sf.getAccountSelector().getSelected());
+    }
+}
\ No newline at end of file
diff --git a/src/main/generated-java/com/h2/demo/web/domain/SavedSearchFileDownload.java b/src/main/generated-java/com/h2/demo/web/domain/SavedSearchFileDownload.java
new file mode 100644
index 0000000..559e6a0
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/web/domain/SavedSearchFileDownload.java
@@ -0,0 +1,53 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-jsf2-spring-conversation:src/main/java/domain/FileDownload.e.vm.java
+ */
+package com.h2.demo.web.domain;
+
+import javax.inject.Inject;
+import javax.inject.Named;
+import javax.inject.Singleton;
+
+import org.primefaces.model.StreamedContent;
+
+import com.h2.demo.domain.SavedSearch;
+import com.h2.demo.domain.SavedSearch_;
+import com.h2.demo.repository.SavedSearchRepository;
+import com.h2.demo.web.domain.support.ByteArrayStreamedContent;
+
+/**
+ * Stateless controller to download {@link SavedSearch} binaries 
+ */
+@Named
+@Singleton
+public class SavedSearchFileDownload {
+    @Inject
+    private SavedSearchRepository savedSearchRepository;
+
+    /**
+     * Primefaces support for formContent file download.
+     */
+    public StreamedContent getFormContentStream(final SavedSearch savedSearch) {
+        // check whether the binary is null WITHOUT downloading it.
+        if (savedSearch.isIdSet()) {
+            if (savedSearchRepository.isPropertyNull(savedSearch.getId(), SavedSearch_.formContent)) {
+                return null;
+            }
+        } else if (savedSearch.getFormContent() == null) {
+            return null;
+        }
+
+        ByteArrayStreamedContent basc = new ByteArrayStreamedContent() {
+            @Override
+            public byte[] getByteArray() {
+                return savedSearchRepository.getFormContent(savedSearch);
+            }
+        };
+        basc.setName("formContent");
+        return basc;
+    }
+}
\ No newline at end of file
diff --git a/src/main/generated-java/com/h2/demo/web/domain/SavedSearchFileUpload.java b/src/main/generated-java/com/h2/demo/web/domain/SavedSearchFileUpload.java
new file mode 100644
index 0000000..02414f3
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/web/domain/SavedSearchFileUpload.java
@@ -0,0 +1,30 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-jsf2-spring-conversation:src/main/java/domain/FileUpload.e.vm.java
+ */
+package com.h2.demo.web.domain;
+
+import org.primefaces.event.FileUploadEvent;
+import org.primefaces.model.UploadedFile;
+
+import com.h2.demo.domain.SavedSearch;
+
+public class SavedSearchFileUpload {
+    private SavedSearch savedSearch;
+
+    public SavedSearchFileUpload(SavedSearch savedSearch) {
+        this.savedSearch = savedSearch;
+    }
+
+    /**
+     * Primefaces support for formContent file upload
+     */
+    public void onFormContentFileUpload(FileUploadEvent fileUploadEvent) {
+        UploadedFile uploadedFile = fileUploadEvent.getFile(); //application code
+        savedSearch.setFormContent(uploadedFile.getContents());
+    }
+}
\ No newline at end of file
diff --git a/src/main/generated-java/com/h2/demo/web/domain/SavedSearchGraphLoader.java b/src/main/generated-java/com/h2/demo/web/domain/SavedSearchGraphLoader.java
new file mode 100644
index 0000000..9df1cd0
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/web/domain/SavedSearchGraphLoader.java
@@ -0,0 +1,41 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-jsf2-spring-conversation:src/main/java/domain/GraphLoader.e.vm.java
+ */
+package com.h2.demo.web.domain;
+
+import javax.inject.Inject;
+import javax.inject.Named;
+import javax.inject.Singleton;
+
+import com.h2.demo.domain.SavedSearch;
+import com.h2.demo.repository.SavedSearchRepository;
+import com.h2.demo.repository.support.EntityGraphLoader;
+
+/**
+ * Preloads the {@link SavedSearch} associations required by the view layer.
+ * 
+ * Do not use other GraphLoaders in this GraphLoader. 
+ */
+@Named
+@Singleton
+public class SavedSearchGraphLoader extends EntityGraphLoader<SavedSearch, Integer> {
+    // required by cglib to create a proxy around the object as we are using the @Transactional annotation
+    protected SavedSearchGraphLoader() {
+        super();
+    }
+
+    @Inject
+    public SavedSearchGraphLoader(SavedSearchRepository savedSearchRepository) {
+        super(savedSearchRepository);
+    }
+
+    @Override
+    public void loadGraph(SavedSearch savedSearch) {
+        loadSingular(savedSearch.getAccount());
+    }
+}
\ No newline at end of file
diff --git a/src/main/generated-java/com/h2/demo/web/domain/SavedSearchLazyDataModel.java b/src/main/generated-java/com/h2/demo/web/domain/SavedSearchLazyDataModel.java
new file mode 100644
index 0000000..c6cd274
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/web/domain/SavedSearchLazyDataModel.java
@@ -0,0 +1,34 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-jsf2-spring-conversation:src/main/java/domain/LazyDataModel.e.vm.java
+ */
+package com.h2.demo.web.domain;
+
+import javax.inject.Inject;
+import javax.inject.Named;
+
+import org.primefaces.model.LazyDataModel;
+
+import com.h2.demo.domain.SavedSearch;
+import com.h2.demo.repository.SavedSearchRepository;
+import com.h2.demo.web.domain.support.GenericLazyDataModel;
+import com.h2.demo.web.faces.ConversationContextScoped;
+
+/**
+ * Provide PrimeFaces {@link LazyDataModel} for {@link SavedSearch}
+ */
+@Named
+@ConversationContextScoped
+public class SavedSearchLazyDataModel extends GenericLazyDataModel<SavedSearch, Integer, SavedSearchSearchForm> {
+    private static final long serialVersionUID = 1L;
+
+    @Inject
+    public SavedSearchLazyDataModel(SavedSearchRepository savedSearchRepository, SavedSearchController savedSearchController,
+            SavedSearchSearchForm savedSearchSearchForm, SavedSearchExcelExporter savedSearchExcelExporter) {
+        super(savedSearchRepository, savedSearchController, savedSearchSearchForm, savedSearchExcelExporter);
+    }
+}
\ No newline at end of file
diff --git a/src/main/generated-java/com/h2/demo/web/domain/SavedSearchSearchForm.java b/src/main/generated-java/com/h2/demo/web/domain/SavedSearchSearchForm.java
new file mode 100644
index 0000000..5a9525b
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/web/domain/SavedSearchSearchForm.java
@@ -0,0 +1,79 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-jsf2-spring-conversation:src/main/java/domain/SearchForm.e.vm.java
+ */
+package com.h2.demo.web.domain;
+
+import static com.h2.demo.repository.support.PropertySelector.newPropertySelector;
+
+import javax.inject.Named;
+
+import com.h2.demo.domain.Account;
+import com.h2.demo.domain.SavedSearch;
+import com.h2.demo.domain.SavedSearch_;
+import com.h2.demo.repository.support.PropertySelector;
+import com.h2.demo.repository.support.SearchParameters;
+import com.h2.demo.web.domain.support.GenericSearchForm;
+import com.h2.demo.web.faces.ConversationContextScoped;
+
+/**
+ * View Helper to search {@link SavedSearch}.
+ * It exposes a {@link SavedSearch} instance so it can be used in search by-example-query.
+ */
+@Named
+@ConversationContextScoped
+public class SavedSearchSearchForm extends GenericSearchForm<SavedSearch, Integer, SavedSearchSearchForm> {
+    private static final long serialVersionUID = 1L;
+    protected SavedSearch savedSearch = new SavedSearch();
+    protected PropertySelector<SavedSearch, String> nameSelector = newPropertySelector(SavedSearch_.name);
+    protected PropertySelector<SavedSearch, String> formClassnameSelector = newPropertySelector(SavedSearch_.formClassname);
+    protected PropertySelector<SavedSearch, Account> accountSelector = newPropertySelector(SavedSearch_.account);
+
+    public SavedSearch getSavedSearch() {
+        return savedSearch;
+    }
+
+    @Override
+    protected SavedSearch getEntity() {
+        return getSavedSearch();
+    }
+
+    @Override
+    public SavedSearchSearchForm newInstance() {
+        return new SavedSearchSearchForm();
+    }
+
+    @Override
+    public SearchParameters toSearchParameters() {
+        SearchParameters sp = searchParameters();
+        sp.property(nameSelector, formClassnameSelector);
+        sp.property(accountSelector);
+        return sp;
+    }
+
+    @Override
+    public void resetWithOther(SavedSearchSearchForm other) {
+        this.savedSearch = other.getSavedSearch();
+        this.nameSelector = other.getNameSelector();
+        this.formClassnameSelector = other.getFormClassnameSelector();
+        this.accountSelector = other.getAccountSelector();
+    }
+
+    // Property selectors
+    public PropertySelector<SavedSearch, String> getNameSelector() {
+        return nameSelector;
+    }
+
+    public PropertySelector<SavedSearch, String> getFormClassnameSelector() {
+        return formClassnameSelector;
+    }
+
+    // Relation selectors
+    public PropertySelector<SavedSearch, Account> getAccountSelector() {
+        return accountSelector;
+    }
+}
diff --git a/src/main/generated-java/com/h2/demo/web/domain/support/ByteArrayStreamedContent.java b/src/main/generated-java/com/h2/demo/web/domain/support/ByteArrayStreamedContent.java
new file mode 100644
index 0000000..53b0232
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/web/domain/support/ByteArrayStreamedContent.java
@@ -0,0 +1,63 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-jsf2-spring-conversation:src/main/java/domain/support/ByteArrayStreamedContent.p.vm.java
+ */
+package com.h2.demo.web.domain.support;
+
+import java.io.ByteArrayInputStream;
+import java.io.InputStream;
+
+import org.primefaces.model.StreamedContent;
+
+import com.h2.demo.web.util.DownloadUtil;
+
+/**
+ * StreamedContent that lazily loads the binary content.
+ */
+public abstract class ByteArrayStreamedContent implements StreamedContent {
+    private String contentType = "application/download";
+    private String name;
+    private String contentEncoding;
+
+    @Override
+    public InputStream getStream() {
+        DownloadUtil.forceResponseHeaderForDownload();
+        return new ByteArrayInputStream(getByteArray());
+    }
+
+    /**
+     * Lazily load the binary content.
+     */
+    protected abstract byte[] getByteArray();
+
+    @Override
+    public String getContentType() {
+        return contentType;
+    }
+
+    public void setContentType(String contentType) {
+        this.contentType = contentType;
+    }
+
+    @Override
+    public String getName() {
+        return name;
+    }
+
+    public void setName(String name) {
+        this.name = name;
+    }
+
+    public void setContentEncoding(String contentEncoding) {
+        this.contentEncoding = contentEncoding;
+    }
+
+    @Override
+    public String getContentEncoding() {
+        return contentEncoding;
+    }
+}
\ No newline at end of file
diff --git a/src/main/generated-java/com/h2/demo/web/domain/support/CommonAction.java b/src/main/generated-java/com/h2/demo/web/domain/support/CommonAction.java
new file mode 100644
index 0000000..923700a
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/web/domain/support/CommonAction.java
@@ -0,0 +1,42 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-jsf2-spring-conversation:src/main/java/domain/support/CommonAction.p.vm.java
+ */
+package com.h2.demo.web.domain.support;
+
+import static com.h2.demo.web.conversation.ConversationHolder.getCurrentConversation;
+
+import com.h2.demo.web.conversation.ConversationContext;
+import com.h2.demo.web.conversation.ConversationManager;
+
+/**
+ * Simple actions that can be shared.
+ */
+public abstract class CommonAction<E> {
+
+    /**
+     * Back action is used from readonly page to go back. It is expected to be non-ajax.
+     */
+    public String back() {
+        return context().getCallBack().back();
+    }
+
+    /**
+     * Ends the current conversation. It is expected to be non-ajax.
+     */
+    public String quit() {
+        ConversationManager.getInstance().endCurrentConversation();
+        return "/home.faces?faces-redirect=true"; // TODO: clean url, referer or else
+    }
+
+    /**
+     * Returns the current {@link ConversationContext}.
+     */
+    public ConversationContext<E> context() {
+        return getCurrentConversation().getCurrentContext();
+    }
+}
\ No newline at end of file
diff --git a/src/main/generated-java/com/h2/demo/web/domain/support/ControllerLocator.java b/src/main/generated-java/com/h2/demo/web/domain/support/ControllerLocator.java
new file mode 100644
index 0000000..3d541d3
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/web/domain/support/ControllerLocator.java
@@ -0,0 +1,42 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-jsf2-spring-conversation:src/main/java/domain/support/ControllerLocator.p.vm.java
+ */
+package com.h2.demo.web.domain.support;
+
+import static com.google.common.collect.Maps.newHashMap;
+import static org.hibernate.proxy.HibernateProxyHelper.getClassWithoutInitializingProxy;
+
+import java.io.Serializable;
+import java.util.List;
+import java.util.Map;
+
+import javax.inject.Inject;
+import javax.inject.Named;
+import javax.inject.Singleton;
+
+import com.h2.demo.domain.Identifiable;
+
+@Named
+@Singleton
+@SuppressWarnings("rawtypes")
+public class ControllerLocator {
+
+    private Map<Class, GenericController> permissions = newHashMap();
+
+    @Inject
+    void buildCache(List<GenericController> registredPermissions) {
+        for (GenericController permission : registredPermissions) {
+            permissions.put(permission.getRepository().getType(), permission);
+        }
+    }
+
+    @SuppressWarnings("unchecked")
+    public <E extends Identifiable<? extends Serializable>> GenericController<E, ?> getController(E entity) {
+        return (GenericController<E, ?>) permissions.get(getClassWithoutInitializingProxy(entity));
+    }
+}
diff --git a/src/main/generated-java/com/h2/demo/web/domain/support/GenericController.java b/src/main/generated-java/com/h2/demo/web/domain/support/GenericController.java
new file mode 100644
index 0000000..5ba69bb
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/web/domain/support/GenericController.java
@@ -0,0 +1,488 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-jsf2-spring-conversation:src/main/java/domain/support/GenericController.p.vm.java
+ */
+package com.h2.demo.web.domain.support;
+
+import static com.google.common.base.Preconditions.checkNotNull;
+import static com.google.common.base.Throwables.propagate;
+import static com.google.common.collect.Lists.newArrayList;
+import static com.h2.demo.repository.support.PropertySelector.newPropertySelector;
+import static com.h2.demo.web.conversation.ConversationHolder.getCurrentConversation;
+import static org.apache.commons.lang.StringUtils.isBlank;
+
+import java.io.Serializable;
+import java.util.List;
+
+import javax.faces.component.UIComponent;
+import javax.faces.context.FacesContext;
+import javax.inject.Inject;
+
+import org.apache.commons.lang.WordUtils;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import com.google.common.base.Splitter;
+import com.h2.demo.domain.Identifiable;
+import com.h2.demo.printer.support.GenericPrinter;
+import com.h2.demo.printer.support.TypeAwarePrinter;
+import com.h2.demo.repository.support.GenericRepository;
+import com.h2.demo.repository.support.JpaUniqueUtil;
+import com.h2.demo.repository.support.SearchParameters;
+import com.h2.demo.web.conversation.ConversationCallBack;
+import com.h2.demo.web.conversation.ConversationContext;
+import com.h2.demo.web.conversation.ConversationManager;
+import com.h2.demo.web.permission.support.GenericPermission;
+import com.h2.demo.web.util.MessageUtil;
+
+/**
+ * Base controller for JPA entities providing helper methods to:
+ * <ul>
+ *  <li>start conversations</li>
+ *  <li>create conversation context</li>
+ *  <li>support autoComplete component</li>
+ *  <li>perform actions</li>
+ *  <li>support excel export</li>
+ * </ul>
+ */
+public abstract class GenericController<E extends Identifiable<PK>, PK extends Serializable> {
+    private static final Logger log = LoggerFactory.getLogger(GenericController.class);
+    private static final String PERMISSION_DENIED = "/error/accessdenied";
+    private String selectUri;
+    private String editUri;
+
+    @Inject
+    protected ConversationManager conversationManager;
+    @Inject
+    protected JpaUniqueUtil jpaUniqueUtil;
+    @Inject
+    protected MessageUtil messageUtil;
+    @Inject
+    protected TypeAwarePrinter typeAwarePrinter;
+    protected GenericRepository<E, PK> repository;
+    protected GenericPermission<E> permission;
+    protected GenericPrinter<E> printer;
+
+    public GenericController(GenericRepository<E, PK> repository, GenericPermission<E> permission, GenericPrinter<E> printer, String selectUri, String editUri) {
+        this.repository = checkNotNull(repository);
+        this.permission = checkNotNull(permission);
+        this.printer = checkNotNull(printer);
+        this.selectUri = checkNotNull(selectUri);
+        this.editUri = checkNotNull(editUri);
+    }
+
+    public final GenericRepository<E, PK> getRepository() {
+        return repository;
+    }
+
+    public final GenericPermission<E> getPermission() {
+        return permission;
+    }
+
+    public final MessageUtil getMessageUtil() {
+        return messageUtil;
+    }
+
+    public String getPermissionDenied() {
+        return PERMISSION_DENIED;
+    }
+
+    public String getSelectUri() {
+        return selectUri;
+    }
+
+    public String getEditUri() {
+        return editUri;
+    }
+
+    // ----------------------------------------
+    // START CONVERSATION PROGRAMATICALY
+    // ----------------------------------------
+
+    /**
+     * Start a new {@link Conversation} that allows the user to search an existing entity.
+     * This method can be invoked from an h:commandLink's action attribute.
+     * @return the implicit first view for the newly created conversation.
+     */
+    public String beginSearch() {
+        if (!permission.canSearch()) {
+            return getPermissionDenied();
+        }
+        return beginConversation(newSearchContext(getSearchLabelKey()));
+    }
+
+    /**
+     * Start a new {@link Conversation} that allows the user to create a new entity.
+     * This method can be invoked from an h:commandLink's action attribute.
+     * @return the implicit first view for the newly created conversation.
+     */
+    public String beginCreate() {
+        if (!permission.canCreate()) {
+            return getPermissionDenied();
+        }
+        return beginConversation(newEditContext(getCreateLabelKey(), repository.getNewWithDefaults()));
+    }
+
+    /**
+     * Start a new {@link Conversation} using the passed ctx as the first conversation context.
+     * @return the implicit first view for the newly created conversation.
+     */
+    public String beginConversation(ConversationContext<E> ctx) {
+        return conversationManager.beginConversation(ctx).nextView();
+    }
+
+    // ----------------------------------------
+    // AUTO COMPLETE SUPPORT  
+    // ----------------------------------------
+
+    /**
+     * Auto-complete support. This method is used by primefaces autoComplete component.
+     */
+    public List<E> complete(String value) {
+        try {
+            SearchParameters searchParameters = new SearchParameters() //
+                    .limitBroadSearch() //
+                    .distinct() //
+                    .orMode();
+            E template = repository.getNew();
+            for (String property : completeProperties()) {
+                searchParameters.addProperty(newPropertySelector(property, repository.getType()).selected(value));
+            }
+            return repository.find(template, searchParameters);
+        } catch (Exception e) {
+            log.warn("error during complete", e);
+            throw propagate(e);
+        }
+    }
+
+    protected Iterable<String> completeProperties() {
+        String completeOnProperties = parameter("completeOnProperties", String.class);
+        return isBlank(completeOnProperties) ? printer.getDisplayedAttributes() : Splitter.on(";,").omitEmptyStrings().split(completeOnProperties);
+    }
+
+    public List<String> completeProperty(String value) {
+        return completeProperty(value, parameter("property", String.class), parameter("maxResults", Integer.class));
+    }
+
+    public List<String> completeProperty(String value, String property) {
+        return completeProperty(value, property, null);
+    }
+
+    public List<String> completeProperty(String toMatch, String property, Integer maxResults) {
+        List<String> values = completePropertyInDatabase(toMatch, property, maxResults);
+        if (isBlank(toMatch) || values.contains(toMatch)) {
+            // the term is already in the results, return them directly
+            return values;
+        } else {
+            // add the term before the results as it is not part of the results
+            List<String> retWithValue = newArrayList(toMatch);
+            retWithValue.addAll(values);
+            return retWithValue;
+        }
+    }
+
+    protected List<String> completePropertyInDatabase(String value, String property, Integer maxResults) {
+        try {
+            SearchParameters searchParameters = new SearchParameters() //
+                    .limitBroadSearch() //
+                    .caseInsensitive() //
+                    .anywhere() //
+                    .distinct();
+            if (maxResults != null) {
+                searchParameters.setMaxResults(maxResults);
+            }
+            searchParameters.addProperty(newPropertySelector(property, repository.getType()).selected(value));
+            return repository.findProperty(String.class, repository.getNew(), searchParameters, property);
+        } catch (Exception e) {
+            log.warn("error during completePropertyInDatabase", e);
+            throw propagate(e);
+        }
+    }
+
+    /**
+     * A simple autoComplete that returns exactly the input. It is used in search forms with {@link PropertySelector}.
+     */
+    public List<String> completeSame(String value) {
+        return newArrayList(value);
+    }
+
+    @SuppressWarnings("unchecked")
+    protected <T> T parameter(String propertyName, Class<T> expectedType) {
+        return (T) UIComponent.getCurrentComponent(FacesContext.getCurrentInstance()).getAttributes().get(propertyName);
+    }
+
+    protected SearchParameters defaultOrder(SearchParameters searchParameters) {
+        return searchParameters;
+    }
+
+    /**
+     * Decision helper used when handling ajax autoComplete event and regular page postback.
+     */
+    public boolean shouldReplace(E currentEntity, E selectedEntity) {
+        if (currentEntity == selectedEntity) {
+            return false;
+        }
+
+        if (currentEntity != null && selectedEntity != null && currentEntity.isIdSet() && selectedEntity.isIdSet()) {
+            if (selectedEntity.getId().equals(currentEntity.getId())) {
+                Comparable<Object> currentVersion = repository.getVersion(currentEntity);
+                if (currentVersion == null) {
+                    // assume no version at all is available
+                    // let's stick with current entity.
+                    return false;
+                }
+                Comparable<Object> selectedVersion = repository.getVersion(selectedEntity);
+                if (currentVersion.compareTo(selectedVersion) == 0) {
+                    // currentEntity could have been edited and not yet saved, we keep it.
+                    return false;
+                } else {
+                    // we could have an optimistic locking exception at save time
+                    // TODO: what should we do here?
+                    return false;
+                }
+            }
+        }
+        return true;
+    }
+
+    // ----------------------------------------
+    // CREATE IMPLICIT EDIT VIEW
+    // ----------------------------------------
+
+    /**
+     * Helper to create a new {@link ConversationContext} to view the passed entity and set it as the current conversation's next context.  
+     * The vars <code>sub</code> <code>readonly</code> are set to true.
+     * The permission {@link GenericPermission#canView()} is checked.
+     * 
+     * @param labelKey label key for breadCrumb and conversation menu.
+     * @param e the entity to view.
+     * @return the implicit view to access this context.
+     */
+    public String editSubReadOnlyView(String labelKey, E e) {
+        return editReadOnlyView(labelKey, e, true);
+    }
+
+    public String editReadOnlyView(String labelKey, E e, boolean sub) {
+        if (!permission.canView(e)) {
+            return getPermissionDenied();
+        }
+        ConversationContext<E> ctx = newEditContext(labelKey, e).sub(sub).readonly();
+        return getCurrentConversation().nextContext(ctx).view();
+    }
+
+    /**
+     * Helper to create a new {@link ConversationContext} to edit the passed entity and set it as the current conversation's next context.  
+     * The var <code>sub</code> is set to true.
+     * The permission {@link GenericPermission#canEdit()} is checked.
+     * 
+     * @param labelKey label key for breadCrumb and conversation menu.
+     * @param e the entity to edit.
+     * @return the implicit view to access this context.
+     */
+    public String editSubView(String labelKey, E e, ConversationCallBack<E> editCallBack) {
+        return editView(labelKey, e, editCallBack, true);
+    }
+
+    public String editView(String labelKey, E e, ConversationCallBack<E> editCallBack, boolean sub) {
+        if (!permission.canEdit(e)) {
+            return getPermissionDenied();
+        }
+        ConversationContext<E> ctx = newEditContext(labelKey, e, editCallBack).sub(sub);
+        return getCurrentConversation().nextContext(ctx).view();
+    }
+
+    /**
+     * Helper to create a new {@link ConversationContext} to create a new entity and set it as the current conversation's next context.  
+     * The var <code>sub</code> is set to true.
+     * 
+     * @param labelKey label key for breadCrumb and conversation menu.
+     * @return the implicit view to access this context.
+     */
+    public String createSubView(String labelKey, ConversationCallBack<E> createCallBack) {
+        return createView(labelKey, createCallBack, true);
+    }
+
+    /**
+     * Helper to create a new {@link ConversationContext} to edit the passed new entity and set it as the current conversation's next context.  
+     * The var <code>sub</code> is set to true.
+     * The permission {@link GenericPermission#canCreate()} is checked.
+     * 
+     * @param labelKey label key for breadCrumb and conversation menu.
+     * @param e the entity to edit.
+     * @return the implicit view to access this context.
+     */
+    public String createSubView(String labelKey, E e, ConversationCallBack<E> createCallBack) {
+        return createView(labelKey, e, createCallBack, true);
+    }
+
+    public String createView(String labelKey, ConversationCallBack<E> createCallBack, boolean sub) {
+        return createView(labelKey, repository.getNewWithDefaults(), createCallBack, sub);
+    }
+
+    public String createView(String labelKey, E e, ConversationCallBack<E> createCallBack, boolean sub) {
+        if (!permission.canCreate()) {
+            return getPermissionDenied();
+        }
+        ConversationContext<E> ctx = newEditContext(labelKey, e, createCallBack).sub(sub);
+        return getCurrentConversation().nextContext(ctx).view();
+    }
+
+    // ----------------------------------------
+    // CREATE IMPLICIT SELECT VIEW
+    // ----------------------------------------
+
+    public String selectSubView(String labelKey, ConversationCallBack<E> selectCallBack) {
+        return selectView(labelKey, selectCallBack, true);
+    }
+
+    public String selectView(String labelKey, ConversationCallBack<E> selectCallBack, boolean sub) {
+        if (!permission.canSelect()) {
+            return getPermissionDenied();
+        }
+        ConversationContext<E> ctx = newSearchContext(labelKey, selectCallBack).sub(sub);
+        return getCurrentConversation().nextContext(ctx).view();
+    }
+
+    public String multiSelectSubView(String labelKey, ConversationCallBack<E> selectCallBack) {
+        return multiSelectView(labelKey, selectCallBack, true);
+    }
+
+    public String multiSelectView(String labelKey, ConversationCallBack<E> selectCallBack, boolean sub) {
+        if (!permission.canSelect()) {
+            return getPermissionDenied();
+        }
+        ConversationContext<E> ctx = newSearchContext(labelKey, selectCallBack).sub(sub);
+        ctx.setVar("multiCheckboxSelection", true);
+        return getCurrentConversation().nextContext(ctx).view();
+    }
+
+    // ----------------------------------------
+    // CREATE EDIT CONVERSATION CONTEXT
+    // ----------------------------------------
+
+    /**
+     * Helper to construct a new {@link ConversationContext} to edit an entity.
+     * @param e the entity to edit.
+     */
+    public ConversationContext<E> newEditContext(E e) {
+        return new ConversationContext<E>().entity(e).isNewEntity(!e.isIdSet()).viewUri(getEditUri());
+    }
+
+    public ConversationContext<E> newEditContext(String labelKey, E e) {
+        return newEditContext(e).labelKey(labelKey);
+    }
+
+    public ConversationContext<E> newEditContext(String labelKey, E e, ConversationCallBack<E> callBack) {
+        return newEditContext(labelKey, e).callBack(callBack);
+    }
+
+    // ----------------------------------------
+    // CREATE SEARCH CONVERSATION CONTEXT
+    // ----------------------------------------
+
+    /**
+     * Helper to construct a new {@link ConversationContext} for search/selection.
+     */
+    public ConversationContext<E> newSearchContext() {
+        return new ConversationContext<E>(getSelectUri());
+    }
+
+    public ConversationContext<E> newSearchContext(String labelKey) {
+        return newSearchContext().labelKey(labelKey);
+    }
+
+    public ConversationContext<E> newSearchContext(String labelKey, ConversationCallBack<E> callBack) {
+        return newSearchContext(labelKey).callBack(callBack);
+    }
+
+    // ----------------------------------------
+    // ACTIONS INVOKED FORM THE VIEW
+    // ----------------------------------------
+
+    public ConversationContext<E> getSelectedContext(E selected) {
+        return newEditContext(getEditUri(), selected);
+    }
+
+    /**
+     * Action to create a new entity.
+     */
+    public String create() {
+        if (!permission.canCreate()) {
+            return getPermissionDenied();
+        }
+        E newEntity = repository.getNewWithDefaults();
+        ConversationContext<E> ctx = getSelectedContext(newEntity).labelKey(getCreateLabelKey());
+        return getCurrentConversation().nextContext(ctx).view();
+    }
+
+    /**
+     * Support for {@link GenericLazyDataModel.#edit()} and {@link GenericLazyDataModel#onRowSelect(org.primefaces.event.SelectEvent)} methods 
+     */
+    public String edit(E entity) {
+        if (!permission.canEdit(entity)) {
+            return getPermissionDenied();
+        }
+        ConversationContext<E> ctx = getSelectedContext(entity).labelKey(getEditLabelKey(), typeAwarePrinter.print(entity));
+        return getCurrentConversation().nextContext(ctx).view();
+    }
+
+    /**
+     * Support for the {@link GenericLazyDataModel.#view()} method
+     */
+    public String view(E entity) {
+        if (!permission.canView(entity)) {
+            return getPermissionDenied();
+        }
+        ConversationContext<E> ctx = getSelectedContext(entity).sub().readonly().labelKey(getViewLabelKey(), typeAwarePrinter.print(entity));
+        return getCurrentConversation().nextContext(ctx).view();
+    }
+
+    /**
+     * Return the print friendly view for the passed entity. I can be invoked directly from the view.
+     */
+    public String print(E entity) {
+        if (!permission.canView(entity)) {
+            return getPermissionDenied();
+        }
+        ConversationContext<E> ctx = getSelectedContext(entity).readonly().print().labelKey(getViewLabelKey(), typeAwarePrinter.print(entity));
+        return getCurrentConversation().nextContext(ctx).view();
+    }
+
+    protected String select(E entity) {
+        if (!permission.canSelect()) {
+            return getPermissionDenied();
+        }
+        return getCurrentConversation() //
+                .<ConversationContext<E>> getCurrentContext() //
+                .getCallBack() //
+                .selected(entity);
+    }
+
+    protected String getSearchLabelKey() {
+        return getLabelName() + "_search";
+    }
+
+    protected String getCreateLabelKey() {
+        return getLabelName() + "_create";
+    }
+
+    protected String getEditLabelKey() {
+        return getLabelName() + "_edit";
+    }
+
+    protected String getViewLabelKey() {
+        return getLabelName() + "_view";
+    }
+
+    protected String getLabelName() {
+        return WordUtils.uncapitalize(getEntityName());
+    }
+
+    private String getEntityName() {
+        return repository.getType().getSimpleName();
+    }
+}
diff --git a/src/main/generated-java/com/h2/demo/web/domain/support/GenericEditForm.java b/src/main/generated-java/com/h2/demo/web/domain/support/GenericEditForm.java
new file mode 100644
index 0000000..efa7d57
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/web/domain/support/GenericEditForm.java
@@ -0,0 +1,257 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-jsf2-spring-conversation:src/main/java/domain/support/GenericEditForm.p.vm.java
+ */
+package com.h2.demo.web.domain.support;
+
+import static com.h2.demo.web.conversation.ConversationHolder.getCurrentConversation;
+
+import java.io.Serializable;
+import java.util.List;
+import java.util.Set;
+
+import javax.annotation.PostConstruct;
+import javax.inject.Inject;
+import javax.persistence.OptimisticLockException;
+
+import org.apache.commons.lang.WordUtils;
+
+import com.h2.demo.domain.Identifiable;
+import com.h2.demo.printer.support.TypeAwarePrinter;
+import com.h2.demo.repository.support.EntityGraphLoader;
+import com.h2.demo.repository.support.GenericRepository;
+import com.h2.demo.repository.support.JpaUniqueUtil;
+import com.h2.demo.repository.support.RepositoryLocator;
+import com.h2.demo.util.ResourcesUtil;
+import com.h2.demo.web.conversation.ConversationCallBack;
+import com.h2.demo.web.conversation.ConversationContext;
+import com.h2.demo.web.util.MessageUtil;
+import com.h2.demo.web.util.TabBean;
+
+/**
+ * Base Edit Form for JPA entities.
+ */
+public abstract class GenericEditForm<E extends Identifiable<PK>, PK extends Serializable> extends CommonAction<E> {
+    private E entity;
+
+    @Inject
+    protected JpaUniqueUtil jpaUniqueUtil;
+    @Inject
+    protected MessageUtil messageUtil;
+    @Inject
+    protected TypeAwarePrinter printer;
+    @Inject
+    protected ResourcesUtil resourcesUtil;
+    @Inject
+    protected RepositoryLocator repositoryLocator;
+
+    protected GenericRepository<E, PK> repository;
+    protected EntityGraphLoader<E, PK> entityGraphLoader;
+
+    public GenericEditForm(GenericRepository<E, PK> repository) {
+        this.repository = repository;
+    }
+
+    public GenericEditForm(GenericRepository<E, PK> repository, EntityGraphLoader<E, PK> entityGraphLoader) {
+        this.repository = repository;
+        this.entityGraphLoader = entityGraphLoader;
+    }
+
+    /**
+     * Retrieves the entity var from the current ConversationContext and
+     * depending on the case merge the entity and load its graph. 
+     */
+    @PostConstruct
+    protected void init() {
+        if (context().getEntity() == null) {
+            throw new IllegalStateException("Could not find any entity. Please fix me");
+        }
+
+        if (context().isNewEntity()) {
+            // no need to merge anything since it is a brand new entity, not yet persisted.
+            entity = context().getEntity();
+        } else if (context().isSub()) {
+            // entity is persistent and we are in sub mode (not the root edit page of the graph)
+            if (entityGraphLoader != null) {
+                try {
+                    // we load the associations to avoid lazylily access exception.
+                    // note: this is a readonly merge (nothing is flushed)
+                    entity = entityGraphLoader.merge(context().getEntity());
+                } catch (OptimisticLockException e) {
+                    getCurrentConversation().setNextContext(newConcurrentModificationContext());
+                    throw e; // Please see ExceptionInRenderPhaseListener
+                }
+            } else {
+                // we can use the entity as is, it does not have any association
+                // or they are eargly loaded.
+                // TODO: probably a repository.readonlyMerge(context().getEntity()); to be consistent
+                // ==> AGAIN this demonstration IMO that we do not need a separated service...                    
+                entity = context().getEntity();
+            }
+        } else {
+            // entity is persistent and we are in the root edit page.
+            if (entityGraphLoader != null) {
+                entity = entityGraphLoader.getById(context().getEntity().getId());
+            } else {
+                // we can use the entity as is, it does not have any association
+                // or they are eargly loaded.
+                // TODO: probably a repository.readonlyMerge(context().getEntity()); to be consistent
+                // ==> AGAIN this demonstration IMO that we do not need a separated service...                  
+                entity = context().getEntity();
+            }
+        }
+
+        if (entity == null) {
+            throw new IllegalStateException("Could not find any entity, after init! Was it deleted?");
+        }
+    }
+
+    protected ConversationCallBack<E> onOptimisticLockCallBack = new ConversationCallBack<E>() {
+        private static final long serialVersionUID = 1L;
+
+        @Override
+        protected void onOk(E entity) {
+            ConversationContext<E> context = getCurrentConversation().nextContext();
+            Identifiable<PK> previousEntity = context.getEntity();
+            E refreshedEntity = repository.getById(previousEntity.getId());
+            context.setEntity(refreshedEntity);
+            init();
+        }
+    };
+
+    protected ConversationContext<E> newConcurrentModificationContext() {
+        ConversationContext<E> ctx = new ConversationContext<E>();
+        ctx.setEntity(context().getEntity());
+        ctx.setViewUri("/concurrentModificationResolution.faces");
+        ctx.setCallBack(onOptimisticLockCallBack);
+        return ctx;
+    }
+
+    /**
+     * Return the entity that this edit form backs.
+     */
+    public E getEntity() {
+        return entity;
+    }
+
+    /**
+     * Return the TabBean used by this form or <code>null</code> if this form
+     * does not use any tab.
+     */
+    public TabBean getTabBean() {
+        return null; // leave it null by default as the view checks for null.
+    }
+
+    // ------------------------------------
+    // Actions
+    // ------------------------------------
+
+    /**
+     * Ok action is used from sub page (non-readonly) to send the data without saving it. 
+     * It is expected to be ajax since we want to display the errors, if any,
+     * without refreshing the page.
+     */
+    public String ok() {
+        return context().getCallBack().ok(getEntity());
+    }
+
+    /**
+     * Close the current edit page, without any dirty data checking.
+     */
+    public String forceClose() {
+        getCurrentConversation().getCurrentContext().clearDependentEntities();
+        return context().getCallBack().notSaved(getEntity());
+    }
+
+    /**
+     * deleteAndClose action is used form modal dialogs in the main edit page.
+     */
+    public String deleteAndClose() {
+        repository.delete(getEntity());
+        messageUtil.infoEntity("status_deleted_ok", getEntity());
+        return context().getCallBack().deleted(getEntity());
+    }
+
+    /**
+     * Save action. Used from main edit page. Expected to be an ajax request.
+     */
+    public String saveAndClose() {
+        try {
+            if (saveAndCloseInternal(getEntity())) {
+                return context().getCallBack().saved(getEntity());
+            }
+
+            return null; // stay on the same page, errors will be displayed.
+        } catch (OptimisticLockException e) {
+            getCurrentConversation().nextContext(newConcurrentModificationContext());
+            return getCurrentConversation().nextView();
+        }
+    }
+
+    @SuppressWarnings({ "unchecked", "rawtypes" })
+    protected boolean saveAndCloseInternal(E entity) {
+        if (!validate(entity)) {
+            return false;
+        }
+
+        this.entity = saveEntity(entity);
+        Set<Identifiable<? extends Serializable>> dependentEntities = getCurrentConversation().getCurrentContext().getDependentEntities();
+        for (Identifiable<? extends Serializable> dependentEntity : dependentEntities) {
+            repositoryLocator.getRepository(dependentEntity).merge((Identifiable) dependentEntity);
+        }
+
+        if (context().isNewEntity()) {
+            // if for some reason, save is invoked again, no need to persist anymore.
+            context().setIsNewEntity(false);
+        }
+
+        messageUtil.infoEntity("status_saved_ok", this.entity);
+        return true;
+    }
+
+    /**
+     * Note: merge work also on new entity (actually it works better with many to many association)
+     * we replace current entity with the merged one so the callback receive the merged one.
+     */
+    protected E saveEntity(E entity) {
+        return repository.merge(entity);
+    }
+
+    public boolean validate(E entity) {
+        List<String> errors = jpaUniqueUtil.validateUniques(entity);
+        for (String error : errors) {
+            messageUtil.error(error);
+        }
+        return errors.isEmpty();
+    }
+
+    protected String getLabelName() {
+        return WordUtils.uncapitalize(repository.getType().getSimpleName());
+    }
+
+    public String getEditKey() {
+        return getLabelName() + "_edit";
+    }
+
+    public String getViewKey() {
+        return getLabelName() + "_view";
+    }
+
+    public String getCreateKey() {
+        return getLabelName() + "_create";
+    }
+
+    public String getTitle() {
+        String key = getEditKey();
+        if (!getEntity().isIdSet()) {
+            key = getCreateKey();
+        } else if (getCurrentConversation().getCurrentContext().isReadOnly()) {
+            key = getViewKey();
+        }
+        return resourcesUtil.getProperty(key, printer.print(entity));
+    }
+}
\ No newline at end of file
diff --git a/src/main/generated-java/com/h2/demo/web/domain/support/GenericEnumController.java b/src/main/generated-java/com/h2/demo/web/domain/support/GenericEnumController.java
new file mode 100644
index 0000000..f279402
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/web/domain/support/GenericEnumController.java
@@ -0,0 +1,35 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-jsf2-spring-conversation:src/main/java/domain/support/GenericEnumController.p.vm.java
+ */
+package com.h2.demo.web.domain.support;
+
+import static com.google.common.collect.Lists.newArrayList;
+import static org.apache.commons.lang.StringUtils.containsIgnoreCase;
+
+import java.util.List;
+
+import com.h2.demo.domain.LabelizedEnum;
+
+public abstract class GenericEnumController<T extends Enum<? extends Enum<?>> & LabelizedEnum> {
+
+    private final T[] values;
+
+    public GenericEnumController(T[] values) {
+        this.values = values;
+    }
+
+    public List<T> complete(String text) {
+        List<T> ret = newArrayList();
+        for (T value : values) {
+            if (containsIgnoreCase(value.name(), text) || containsIgnoreCase(value.getLabel(), text)) {
+                ret.add(value);
+            }
+        }
+        return ret;
+    }
+}
\ No newline at end of file
diff --git a/src/main/generated-java/com/h2/demo/web/domain/support/GenericExcelExporter.java b/src/main/generated-java/com/h2/demo/web/domain/support/GenericExcelExporter.java
new file mode 100644
index 0000000..d889bcb
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/web/domain/support/GenericExcelExporter.java
@@ -0,0 +1,441 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-jsf2-spring-conversation:src/main/java/domain/support/GenericExcelExporter.p.vm.java
+ */
+package com.h2.demo.web.domain.support;
+
+import static com.google.common.base.Throwables.propagate;
+
+import java.io.IOException;
+import java.util.Collection;
+import java.util.Date;
+import java.util.List;
+
+import javax.faces.context.ExternalContext;
+import javax.faces.context.FacesContext;
+import javax.inject.Inject;
+
+import org.apache.poi.hssf.usermodel.HSSFWorkbook;
+import org.apache.poi.ss.usermodel.Cell;
+import org.apache.poi.ss.usermodel.CellStyle;
+import org.apache.poi.ss.usermodel.DataFormat;
+import org.apache.poi.ss.usermodel.Font;
+import org.apache.poi.ss.usermodel.IndexedColors;
+import org.apache.poi.ss.usermodel.Row;
+import org.apache.poi.ss.usermodel.Sheet;
+import org.apache.poi.ss.usermodel.Workbook;
+import org.joda.time.LocalDate;
+import org.joda.time.LocalDateTime;
+
+import com.h2.demo.context.UserContext;
+import com.h2.demo.domain.LabelizedEnum;
+import com.h2.demo.printer.support.TypeAwarePrinter;
+import com.h2.demo.repository.support.PropertySelector;
+import com.h2.demo.repository.support.Range;
+import com.h2.demo.util.ResourcesUtil;
+import com.h2.demo.web.util.DownloadUtil;
+
+public abstract class GenericExcelExporter<E> {
+    private static final String EXCEL_CONTENT_TYPE = "application/vns.ms-excel";
+
+    @Inject
+    protected ResourcesUtil msg;
+
+    @Inject
+    protected TypeAwarePrinter printer;
+
+    protected Workbook wb;
+    protected Sheet results;
+    protected Sheet criteria;
+    protected Sheet activeSheet;
+    protected String[] resultHeaderKeys;
+    protected DataFormat dataFormat;
+    private CellStyle topHeaderStyle;
+    private CellStyle leftHeaderStyle;
+    private CellStyle dateStyle;
+    private CellStyle dateTimeStyle;
+    private CellStyle timeStyle;
+
+    public GenericExcelExporter(String... resultHeaderKeys) {
+        this.resultHeaderKeys = resultHeaderKeys;
+    }
+
+    /**
+     * Lazy resest/init workbook and sheet.
+     */
+    protected void reset() {
+        wb = new HSSFWorkbook();
+        results = wb.createSheet(msg.getProperty("search_results"));
+        criteria = wb.createSheet(msg.getProperty("search_criteria"));
+        activeSheet = null;
+        dataFormat = wb.createDataFormat();
+        topHeaderStyle = null;
+        leftHeaderStyle = null;
+        dateStyle = null;
+        dateTimeStyle = null;
+        timeStyle = null;
+    }
+
+    public void useResultsSheet() {
+        activeSheet = results;
+    }
+
+    public void useCriteriaSheet() {
+        activeSheet = criteria;
+    }
+
+    public Workbook getWorkbook() {
+        return wb;
+    }
+
+    /**
+     * Write the passed search result item at the passed row index.
+     */
+    protected abstract void fillResultItem(int row, E item);
+
+    /**
+     * Write the search criteria, starting at the passed row index.
+     */
+    public abstract void fillSearchCriteria(int row);
+
+    protected int fillCommonSearchCriteria(int totalCount) {
+        useCriteriaSheet();
+        int row = 0;
+        setLeftHeader(row, 0, "search_date");
+        setDateTime(row++, 1, new Date());
+        setLeftHeader(row, 0, "search_by");
+        setValue(row++, 1, UserContext.getUsername());
+        setLeftHeader(row, 0, "search_nb_results");
+        setValue(row++, 1, totalCount);
+        getRow(row++); // leave a blank non null line
+        setLeftHeader(row++, 0, "search_criteria");
+        return row;
+    }
+
+    protected void fillSearchResult(List<E> items) {
+        useResultsSheet();
+
+        // header
+        int col = 0;
+        for (String key : resultHeaderKeys) {
+            setTopHeader(0, col++, key);
+        }
+
+        // data
+        int row = 1;
+        for (E item : items) {
+            fillResultItem(row++, item);
+        }
+    }
+
+    // -----------------------------------------------------
+    // Stream workbook to client
+    // -----------------------------------------------------
+
+    public void onExcel(String filename, List<E> results) {
+        reset();
+
+        FacesContext facesContext = FacesContext.getCurrentInstance();
+        ExternalContext externalContext = facesContext.getExternalContext();
+        externalContext.setResponseContentType(EXCEL_CONTENT_TYPE);
+        externalContext.setResponseHeader("Content-Disposition", "attachement; filename=\"" + filename + "\"");
+        DownloadUtil.forceResponseHeaderForDownload();
+
+        try {
+            int row = fillCommonSearchCriteria(results.size());
+            fillSearchCriteria(row);
+            fillSearchResult(results);
+            autoSizeColumns();
+            wb.write(externalContext.getResponseOutputStream());
+        } catch (IOException e) {
+            throw propagate(e);
+        } finally {
+            facesContext.responseComplete();
+        }
+    }
+
+    // -----------------------------------------------------
+    // Helper to set values in cell
+    // -----------------------------------------------------
+
+    protected void setTopHeader(int row, int col, String headerKey) {
+        setValue(row, col, msg.getProperty(headerKey));
+        getCell(row, col).setCellStyle(getTopHeaderStyle());
+    }
+
+    protected void setLeftHeader(int row, int col, String headerKey) {
+        setValue(row, col, msg.getProperty(headerKey));
+        getCell(row, col).setCellStyle(getLeftHeaderStyle());
+    }
+
+    protected void setSelector(int row, int col, String labelKey, PropertySelector<? super E, ?> selector) {
+        setLeftHeader(row, col++, labelKey);
+
+        if (selector.getSelected() == null) {
+            return;
+        }
+
+        if (selector.isBoolean()) {
+            for (Object o : selector.getSelected()) {
+                if (o == null) {
+                    setValue(row, col++, msg.getProperty("null_value"));
+                } else {
+                    setValue(row, col++, (Boolean) o);
+                }
+            }
+        } else if (selector.isLabelizedEnum()) {
+            for (Object o : selector.getSelected()) {
+                if (o == null) {
+                    setValue(row, col++, msg.getProperty("null_value"));
+                } else {
+                    setValue(row, col++, (LabelizedEnum) o);
+                }
+            }
+        } else if (selector.isString()) {
+            for (Object o : selector.getSelected()) {
+                setValue(row, col++, (String) o);
+            }
+        } else if (selector.isNumber()) {
+            for (Object o : selector.getSelected()) {
+                setValue(row, col++, (Number) o);
+            }
+        } else {
+            throw new IllegalStateException("fix me");
+        }
+    }
+
+    protected void setSelectedEntities(int row, int col, String labelKey, Collection<?> entities) {
+        setLeftHeader(row, col++, labelKey);
+
+        if (entities == null) {
+            return;
+        }
+
+        for (Object entity : entities) {
+            setValue(row, col++, printer.print(entity));
+        }
+    }
+
+    protected void setRangeNumber(int row, int col, String labelKey, Range<? super E, ? extends Number> range) {
+        setRangeNumberHeader(row, col, labelKey);
+        setValue(row, col + 2, range.getFrom());
+        setValue(row, col + 4, range.getTo());
+    }
+
+    protected void setRangeDate(int row, int col, String labelKey, Range<? super E, ? extends Date> range) {
+        setRangeDateHeader(row, col, labelKey);
+        setValue(row, col + 2, range.getFrom());
+        setValue(row, col + 4, range.getTo());
+    }
+
+    protected void setRangeDateTime(int row, int col, String labelKey, Range<? super E, ? extends Date> range) {
+        setRangeDateHeader(row, col, labelKey);
+        setDateTime(row, col + 2, range.getFrom());
+        setDateTime(row, col + 4, range.getTo());
+    }
+
+    protected void setRangeLocalDate(int row, int col, String labelKey, Range<? super E, ? extends LocalDate> range) {
+        setRangeDateHeader(row, col, labelKey);
+        setValue(row, col + 2, range.getFrom());
+        setValue(row, col + 4, range.getTo());
+    }
+
+    protected void setRangeLocalDateTime(int row, int col, String labelKey, Range<? super E, ? extends LocalDateTime> range) {
+        setRangeDateHeader(row, col, labelKey);
+        setValue(row, col + 2, range.getFrom());
+        setValue(row, col + 4, range.getTo());
+    }
+
+    protected void setRangeDateHeader(int row, int col, String labelKey) {
+        setLeftHeader(row, col, labelKey);
+        setLeftHeader(row, col + 1, "date_range_from");
+        setLeftHeader(row, col + 3, "date_range_to");
+    }
+
+    protected void setRangeNumberHeader(int row, int col, String labelKey) {
+        setLeftHeader(row, col, labelKey);
+        setLeftHeader(row, col + 1, "range_from");
+        setLeftHeader(row, col + 3, "range_to");
+    }
+
+    protected void setValue(int row, int col, String value) {
+        if (value != null) {
+            Cell cell = getCell(row, col);
+            cell.setCellValue(value);
+        }
+    }
+
+    protected void setValue(int row, int col, Date value) {
+        if (value != null) {
+            Cell cell = getCell(row, col);
+            cell.setCellValue(value);
+            cell.setCellStyle(getDateStyle());
+        }
+    }
+
+    protected void setDateTime(int row, int col, Date value) {
+        if (value != null) {
+            Cell cell = getCell(row, col);
+            cell.setCellValue(value);
+            cell.setCellStyle(getDateTimeStyle());
+        }
+    }
+
+    protected void setTime(int row, int col, Date value) {
+        if (value != null) {
+            Cell cell = getCell(row, col);
+            cell.setCellValue(value);
+            cell.setCellStyle(getTimeStyle());
+        }
+    }
+
+    protected void setValue(int row, int col, LocalDate value) {
+        if (value != null) {
+            setValue(row, col, value.toDate());
+        }
+    }
+
+    protected void setValue(int row, int col, LocalDateTime value) {
+        if (value != null) {
+            setDateTime(row, col, value.toDate());
+        }
+    }
+
+    protected void setValue(int row, int col, Boolean value) {
+        if (value != null) {
+            getCell(row, col).setCellValue(value);
+        }
+    }
+
+    protected void setValue(int row, int col, Number value) {
+        if (value != null) {
+            getCell(row, col).setCellValue(value.doubleValue());
+        }
+    }
+
+    protected void setValue(int row, int col, LabelizedEnum value) {
+        if (value != null) {
+            getCell(row, col).setCellValue(value.getLabel());
+        }
+    }
+
+    protected void setEntity(int row, int col, Object value) {
+        if (value != null) {
+            getCell(row, col).setCellValue(printer.print(value));
+        }
+    }
+
+    // --------------------------------------------
+    // Cell utils
+    // --------------------------------------------
+
+    protected Row getRow(int index) {
+        Row row = activeSheet.getRow(index);
+        return row == null ? activeSheet.createRow(index) : row;
+    }
+
+    protected Cell getCell(int rowIndex, int col) {
+        Row row = getRow(rowIndex);
+        Cell cell = row.getCell(col);
+        return cell == null ? row.createCell(col) : cell;
+    }
+
+    // --------------------------------------------
+    // Cell Styles
+    // --------------------------------------------
+
+    protected CellStyle getTopHeaderStyle() {
+        if (topHeaderStyle == null) {
+            topHeaderStyle = wb.createCellStyle();
+            applyCommonHeaderStyle(topHeaderStyle);
+            topHeaderStyle.setAlignment(CellStyle.ALIGN_CENTER);
+        }
+
+        return topHeaderStyle;
+    }
+
+    protected CellStyle getLeftHeaderStyle() {
+        if (leftHeaderStyle == null) {
+            leftHeaderStyle = wb.createCellStyle();
+            applyCommonHeaderStyle(leftHeaderStyle);
+        }
+
+        return leftHeaderStyle;
+    }
+
+    protected void applyCommonHeaderStyle(CellStyle style) {
+        // font
+        Font headerFont = wb.createFont();
+        headerFont.setBoldweight(Font.BOLDWEIGHT_BOLD);
+        style.setFont(headerFont);
+
+        // color
+        style.setFillForegroundColor(IndexedColors.GREY_25_PERCENT.getIndex());
+        style.setFillPattern(CellStyle.SOLID_FOREGROUND);
+
+        // border
+        style.setBorderRight(CellStyle.BORDER_THIN);
+        style.setRightBorderColor(IndexedColors.BLACK.getIndex());
+        style.setBorderBottom(CellStyle.BORDER_THIN);
+        style.setBottomBorderColor(IndexedColors.BLACK.getIndex());
+        style.setBorderLeft(CellStyle.BORDER_THIN);
+        style.setLeftBorderColor(IndexedColors.BLACK.getIndex());
+        style.setBorderTop(CellStyle.BORDER_THIN);
+        style.setTopBorderColor(IndexedColors.BLACK.getIndex());
+    }
+
+    protected CellStyle getDateStyle() {
+        if (dateStyle == null) {
+            dateStyle = wb.createCellStyle();
+            dateStyle.setDataFormat(dataFormat.getFormat(msg.getProperty("excel_date_format")));
+        }
+
+        return dateStyle;
+    }
+
+    protected CellStyle getDateTimeStyle() {
+        if (dateTimeStyle == null) {
+            dateTimeStyle = wb.createCellStyle();
+            dateTimeStyle.setDataFormat(dataFormat.getFormat(msg.getProperty("excel_date_time_format")));
+        }
+
+        return dateTimeStyle;
+    }
+
+    protected CellStyle getTimeStyle() {
+        if (timeStyle == null) {
+            timeStyle = wb.createCellStyle();
+            timeStyle.setDataFormat(dataFormat.getFormat(msg.getProperty("excel_time_format")));
+        }
+
+        return timeStyle;
+    }
+
+    protected void autoSizeColumns() {
+        useResultsSheet();
+        int lastCellNum = getRow(0).getLastCellNum();
+        for (int i = 0; i <= lastCellNum; i++) {
+            results.autoSizeColumn(i);
+        }
+
+        useCriteriaSheet();
+        int max = maxCriteriaCellNum();
+        for (int i = 0; i <= max; i++) {
+            criteria.autoSizeColumn(i);
+        }
+    }
+
+    protected int maxCriteriaCellNum() {
+        int max = 0;
+
+        for (int i = criteria.getFirstRowNum(); i <= criteria.getLastRowNum(); i++) {
+            max = Math.max(max, criteria.getRow(i).getLastCellNum());
+        }
+
+        return max;
+    }
+}
\ No newline at end of file
diff --git a/src/main/generated-java/com/h2/demo/web/domain/support/GenericLazyDataModel.java b/src/main/generated-java/com/h2/demo/web/domain/support/GenericLazyDataModel.java
new file mode 100644
index 0000000..0b9b31b
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/web/domain/support/GenericLazyDataModel.java
@@ -0,0 +1,251 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-jsf2-spring-conversation:src/main/java/domain/support/GenericLazyDataModel.p.vm.java
+ */
+package com.h2.demo.web.domain.support;
+
+import static com.h2.demo.web.conversation.ConversationHolder.getCurrentConversation;
+import static org.apache.commons.lang.StringUtils.isNotEmpty;
+
+import java.io.IOException;
+import java.io.Serializable;
+import java.text.SimpleDateFormat;
+import java.util.Date;
+import java.util.List;
+import java.util.Map;
+
+import javax.inject.Inject;
+
+import org.omnifaces.util.Faces;
+import org.primefaces.event.SelectEvent;
+import org.primefaces.model.LazyDataModel;
+import org.primefaces.model.SortOrder;
+
+import com.h2.demo.domain.Identifiable;
+import com.h2.demo.printer.support.TypeAwarePrinter;
+import com.h2.demo.repository.support.GenericRepository;
+import com.h2.demo.repository.support.OrderBy;
+import com.h2.demo.repository.support.OrderByDirection;
+import com.h2.demo.repository.support.SearchParameters;
+import com.h2.demo.util.ResourcesUtil;
+import com.h2.demo.web.conversation.ConversationCallBack;
+import com.h2.demo.web.conversation.ConversationContext;
+import com.h2.demo.web.util.MessageUtil;
+import com.h2.demo.web.util.PrimeFacesUtil;
+
+/**
+ * Extends PrimeFaces {@link LazyDataModel} in order to support server-side pagination, row selection, multi select etc.
+ */
+public abstract class GenericLazyDataModel<E extends Identifiable<PK>, PK extends Serializable, F extends GenericSearchForm<E, PK, F>> extends LazyDataModel<E> {
+    private static final long serialVersionUID = 1L;
+
+    @Inject
+    protected ResourcesUtil resourcesUtil;
+    @Inject
+    protected MessageUtil messageUtil;
+    @Inject
+    protected TypeAwarePrinter printer;
+
+    private E selectedRow;
+    private E[] selectedRows;
+    private boolean bypassFirstOffset = true;
+
+    protected GenericRepository<E, PK> repository;
+    protected GenericController<E, PK> controller;
+    protected GenericSearchForm<E, PK, F> searchForm;
+    protected GenericExcelExporter<E> excelExporter;
+
+    public GenericLazyDataModel(GenericRepository<E, PK> repository, GenericController<E, PK> controller, GenericSearchForm<E, PK, F> searchForm,
+            GenericExcelExporter<E> excelExporter) {
+        this.repository = repository;
+        this.controller = controller;
+        this.searchForm = searchForm;
+        this.excelExporter = excelExporter;
+    }
+
+    @Override
+    public List<E> load(int first, int pageSize, String sortField, SortOrder sortOrder, Map<String, String> filters) {
+        E example = searchForm.getEntity();
+        SearchParameters sp = populateSearchParameters(first, pageSize, sortField, sortOrder, filters);
+        setRowCount(repository.findCount(example, sp));
+        return repository.find(example, sp);
+    }
+
+    /**
+     * _HACK_
+     * Call it from your view when a <code>search</code> event is triggered to bypass offset sent by primefaces paginator.
+     */
+    public void onSearch() {
+        bypassFirstOffset = true;
+    }
+
+    @Override
+    public void setRowCount(int rowCount) {
+        super.setRowCount(rowCount);
+        PrimeFacesUtil.updateSearchResultsRegion(resourcesUtil.getPluralableProperty("search_results_status", rowCount), rowCount);
+    }
+
+    /**
+     * Applies the passed parameters to the passed SearchParameters.
+     * @return the passed searchParameters
+     */
+    protected SearchParameters populateSearchParameters(int first, int pageSize, String sortField, SortOrder sortOrder, Map<String, String> filters) {
+        SearchParameters sp = searchForm.toSearchParameters();
+        sp.setFirst(bypassFirstOffset ? 0 : first);
+        bypassFirstOffset = false;
+        sp.setPageSize(pageSize);
+
+        if (isNotEmpty(sortField)) {
+            return sp.orderBy(new OrderBy(convert(sortOrder), sortField, repository.getType()));
+        } else {
+            return controller.defaultOrder(sp);
+        }
+    }
+
+    // ---------------------
+    // Select row
+    // ---------------------
+
+    /**
+     * Returns the currently selected row.
+     */
+    public E getSelectedRow() {
+        return selectedRow;
+    }
+
+    /**
+     * Set the currently selected row.
+     */
+    public void setSelectedRow(E selectedRow) {
+        this.selectedRow = selectedRow;
+    }
+
+    /**
+     * Set the selectedRow to null.
+     */
+    public void resetSelectedRow() {
+        this.selectedRow = null;
+    }
+
+    // ---------------------
+    // Multi select
+    // ---------------------
+
+    public void setSelectedRows(E[] selectedRows) {
+        this.selectedRows = selectedRows;
+    }
+
+    public E[] getSelectedRows() {
+        return selectedRows;
+    }
+
+    public String multiSelect() {
+        return getCallBack().selected(getSelectedRows());
+    }
+
+    /**
+     * Convert PrimeFaces {@link SortOrder} to our {@link OrderByDirection}.
+     */
+    protected OrderByDirection convert(SortOrder order) {
+        return order == SortOrder.DESCENDING ? OrderByDirection.DESC : OrderByDirection.ASC;
+    }
+
+    // ---------------------
+    // Actions
+    // ---------------------
+
+    /**
+     * Action to create a new entity.
+     */
+    public String create() {
+        return controller.create();
+    }
+
+    /**
+     * Action to edit the selected entity.
+     */
+    public String edit() {
+        return controller.edit(getRowData());
+    }
+
+    /**
+     * Action to view the selected entity.
+     */
+    public String view() {
+        return controller.view(getRowData());
+    }
+
+    /**
+     * Action invoked from sub search pages used to select the target of an association.
+     */
+    public String select() {
+        return select(getRowData());
+    }
+
+    protected String select(E selectedRow) {
+        return getCallBack().selected(selectedRow);
+    }
+
+    /**
+     * React to mouse click and force the navigation depending on the context.
+     * When in sub mode, the select action is invoked otherwise the edit action is invoked.
+     */
+    public void onRowSelect(SelectEvent event) {
+        E selected = getSelectedRow();
+        if (selected != null) {
+            if (getCurrentConversation().getCurrentContext().isSub()) {
+                Faces.navigate(controller.select(selected));
+            } else if (controller.getPermission().canEdit(selected)) {
+                Faces.navigate(controller.edit(selected));
+            } else {
+                Faces.navigate(controller.view(selected));
+            }
+        }
+    }
+
+    /**
+     * Ajax action listener to delete the selected entity.
+     */
+    public void delete() {
+        E selected = getSelectedRow();
+        if (selected != null) {
+            repository.delete(selected);
+            messageUtil.infoEntity("status_deleted_ok", selected);
+            resetSelectedRow();
+        }
+    }
+
+    @Override
+    public String getRowKey(E item) {
+        return String.valueOf(item.hashCode());
+    }
+
+    @SuppressWarnings("unchecked")
+    @Override
+    public E getRowData(String rowKey) {
+        for (E item : ((List<E>) getWrappedData())) {
+            if (rowKey.equals(getRowKey(item))) {
+                return item;
+            }
+        }
+        return null;
+    }
+
+    private ConversationCallBack<E> getCallBack() {
+        return getCurrentConversation() //
+                .<ConversationContext<E>> getCurrentContext() //
+                .getCallBack();
+    }
+
+    public void onExcel() throws IOException {
+        excelExporter.onExcel(getExcelFilename(), repository.find(searchForm.toSearchParameters()));
+    }
+
+    protected String getExcelFilename() {
+        return repository.getType().getSimpleName() + "-" + new SimpleDateFormat("MM-dd-yyyy_HH-mm-ss").format(new Date()) + ".xls";
+    }
+}
\ No newline at end of file
diff --git a/src/main/generated-java/com/h2/demo/web/domain/support/GenericSearchForm.java b/src/main/generated-java/com/h2/demo/web/domain/support/GenericSearchForm.java
new file mode 100644
index 0000000..c3fc253
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/web/domain/support/GenericSearchForm.java
@@ -0,0 +1,156 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-jsf2-spring-conversation:src/main/java/domain/support/GenericSearchForm.p.vm.java
+ */
+package com.h2.demo.web.domain.support;
+
+import static com.google.common.base.Throwables.propagate;
+import static org.apache.commons.io.IOUtils.closeQuietly;
+
+import java.io.ByteArrayInputStream;
+import java.io.ByteArrayOutputStream;
+import java.io.ObjectInputStream;
+import java.io.ObjectOutputStream;
+import java.io.Serializable;
+
+import javax.annotation.PostConstruct;
+import javax.inject.Inject;
+
+import com.h2.demo.domain.Identifiable;
+import com.h2.demo.domain.SavedSearch;
+import com.h2.demo.repository.support.SearchParameters;
+import com.h2.demo.web.conversation.Conversation;
+import com.h2.demo.web.conversation.ConversationContext;
+import com.h2.demo.web.conversation.ConversationManager;
+import com.h2.demo.web.util.MessageUtil;
+
+/**
+ * Base Search Form for JPA entities.
+ */
+public abstract class GenericSearchForm<E extends Identifiable<PK>, PK extends Serializable, F extends GenericSearchForm<E, PK, F>> extends CommonAction<E>
+        implements Serializable {
+    private static final long serialVersionUID = 1L;
+
+    @Inject
+    private transient ConversationManager conversationManager;
+    @Inject
+    private transient MessageUtil messageUtil;
+
+    @SuppressWarnings("unchecked")
+    @PostConstruct
+    public void init() {
+        Conversation currentConversation = conversationManager.getCurrentConversation();
+        if (currentConversation == null) {
+            return;
+        }
+
+        ConversationContext<?> currentContext = currentConversation.getCurrentContext();
+        if (currentContext != null && currentContext.getBean(getPrefilledFormName(), getClass()) != null) {
+            resetWithOther((F) currentContext.getBean(getPrefilledFormName(), getClass()));
+        }
+    }
+
+    public String getPrefilledFormName() {
+        return "_" + this.getClass().getName() + "_prefilled_";
+    }
+
+    /**
+     * Return the entity example used in this search form.
+     */
+    protected abstract E getEntity();
+
+    /**
+     * Always null as we use the setter only to add element.
+     */
+    public SavedSearch getCurrentSavedSearch() {
+        return null;
+    }
+
+    public void setCurrentSavedSearch(SavedSearch savedSearch) {
+        if (savedSearch != null) {
+            messageUtil.info("saved_search_loaded", savedSearch.getName());
+            resetWithOther(fromByteArray(savedSearch.getFormContent()));
+        }
+    }
+
+    protected String searchFormName;
+
+    public String getSearchFormName() {
+        return searchFormName;
+    }
+
+    public void setSearchFormName(String searchFormName) {
+        this.searchFormName = searchFormName;
+    }
+
+    private boolean privateSearch;
+
+    public boolean isPrivateSearch() {
+        return privateSearch;
+    }
+
+    public void setPrivateSearch(boolean privateSearch) {
+        this.privateSearch = privateSearch;
+    }
+
+    /**
+     * Convert all the search inputs into a new @{link SearchParameters}. 
+     */
+    public abstract SearchParameters toSearchParameters();
+
+    /**
+     * default search parameters
+     */
+    public SearchParameters searchParameters() {
+        return new SearchParameters() //
+                .limitBroadSearch() //
+                .distinct() //
+                .anywhere() //
+                .caseInsensitive();
+    }
+
+    // Reset related
+
+    public abstract F newInstance();
+
+    public abstract void resetWithOther(F other);
+
+    public void reset() {
+        messageUtil.info("search_reseted");
+        setSearchFormName(null);
+        resetWithOther(newInstance());
+    }
+
+    protected byte[] toByteArray() {
+        ObjectOutputStream oos = null;
+        ByteArrayOutputStream baos = new ByteArrayOutputStream();
+        try {
+            oos = new ObjectOutputStream(baos);
+            oos.writeObject(this);
+            oos.flush();
+            return baos.toByteArray();
+        } catch (Exception e) {
+            throw propagate(e);
+        } finally {
+            closeQuietly(oos);
+            closeQuietly(baos);
+        }
+    }
+
+    @SuppressWarnings("unchecked")
+    protected F fromByteArray(byte[] bytes) {
+        ObjectInputStream ois = null;
+        try {
+            ois = new ObjectInputStream(new ByteArrayInputStream(bytes));
+            return (F) ois.readObject();
+        } catch (Exception e) {
+            throw propagate(e);
+        } finally {
+            closeQuietly(ois);
+        }
+    }
+}
diff --git a/src/main/generated-java/com/h2/demo/web/domain/support/GenericToManyAssociation.java b/src/main/generated-java/com/h2/demo/web/domain/support/GenericToManyAssociation.java
new file mode 100644
index 0000000..b004c62
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/web/domain/support/GenericToManyAssociation.java
@@ -0,0 +1,226 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-jsf2-spring-conversation:src/main/java/domain/support/GenericToManyAssociation.p.vm.java
+ */
+package com.h2.demo.web.domain.support;
+
+import static com.google.common.base.CaseFormat.LOWER_CAMEL;
+import static com.google.common.base.CaseFormat.UPPER_CAMEL;
+import static com.h2.demo.web.conversation.ConversationHolder.getCurrentConversation;
+
+import java.io.Serializable;
+import java.util.Collection;
+import java.util.List;
+
+import javax.persistence.CascadeType;
+import javax.persistence.metamodel.PluralAttribute;
+
+import org.omnifaces.util.Faces;
+import org.primefaces.event.SelectEvent;
+
+import com.h2.demo.domain.Identifiable;
+import com.h2.demo.repository.support.GenericRepository;
+import com.h2.demo.repository.support.MetamodelUtil;
+import com.h2.demo.web.conversation.ConversationCallBack;
+import com.h2.demo.web.permission.support.GenericPermission;
+import com.h2.demo.web.util.MessageUtil;
+
+/**
+ * Controller that allows you to manage an entity's x-to-many association.
+ */
+public abstract class GenericToManyAssociation<E extends Identifiable<PK>, PK extends Serializable> {
+    protected String labelKey;
+    protected MessageUtil messageUtil;
+    protected GenericController<E, PK> controller;
+    protected GenericPermission<E> permission;
+    protected GenericRepository<E, PK> repository;
+    protected SelectableListDataModel<E> dataModel;
+    protected final Collection<CascadeType> cascades;
+    protected final boolean needEntityRemovalTracking;
+
+    public GenericToManyAssociation(List<E> elements, GenericController<E, PK> controller, PluralAttribute<?, ?, E> attribute) {
+        this.dataModel = new SelectableListDataModel<E>(elements);
+        this.labelKey = buildLabelKey(attribute);
+        this.controller = controller;
+        this.messageUtil = controller.getMessageUtil();
+        this.permission = controller.getPermission();
+        this.repository = controller.getRepository();
+        this.cascades = MetamodelUtil.getInstance().getCascades(attribute);
+        this.needEntityRemovalTracking = !MetamodelUtil.getInstance().isOrphanRemoval(attribute);
+    }
+
+    /**
+     * Return the dataModel used in the datatable component. 
+     */
+    public SelectableListDataModel<E> getModel() {
+        return dataModel;
+    }
+
+    /**
+     * Set the dataModel used in the datatable component. 
+     */
+    public void setModel(SelectableListDataModel<E> dataModel) {
+        this.dataModel = dataModel;
+    }
+
+    /**
+     * Remove the passed entity from the x-to-many association.
+     */
+    protected abstract void remove(E e);
+
+    /**
+     * Add the passed entity to the x-to-many association.
+     */
+    protected abstract void add(E e);
+
+    /**
+     * Instantiate a new entity with a view to adding it to the x-to-many assocation.
+     */
+    protected E create() {
+        E e = repository.getNewWithDefaults();
+        onCreate(e);
+        return e;
+    }
+
+    /**
+     * Override this method if you need to perform additional initialization such as setting
+     * the entity that owns the passed x-t-many association element.
+     * This method is invoked by the create method.
+     * Does nothing by default.
+     */
+    protected void onCreate(E e) {
+    }
+
+    /**
+     * Action to edit the entity corresponding to the selected row.
+     * @return the implicit jsf view.
+     */
+    public String edit() {
+        return controller.editView(labelKey, dataModel.getSelectedRow(), editCallBack, isSubView());
+    }
+
+    protected ConversationCallBack<E> editCallBack = new ConversationCallBack<E>() {
+        private static final long serialVersionUID = 1L;
+
+        @Override
+        protected void onSaved(E e) {
+            E previous = dataModel.getSelectedRow();
+            // 'previous' is not necessarily the same instance as 'e', as 'e' may come form a merge... 
+            // so we replace the old instance with the new one.
+            remove(previous);
+            add(e);
+        }
+
+        @Override
+        protected void onOk(E e) {
+            E previous = dataModel.getSelectedRow();
+            // 'previous' is not necessarily the same instance as 'e', as 'e' may come form a merge... 
+            // so we replace the old instance with the new one.
+            remove(previous);
+            add(e);
+            messageUtil.infoEntity("status_edited_ok", e);
+        }
+    };
+
+    /**
+     * Action to view the entity corresponding to the selected row.
+     * @return the implicit jsf view.
+     */
+    public String view() {
+        return controller.editReadOnlyView(labelKey, dataModel.getSelectedRow(), isSubView());
+    }
+
+    /**
+     * This datatable row selection listener invokes the {@link #edit()} or {@link #view()} action depending on the context
+     * and force the navigation to the returned implicit view.
+     * Use it from a p:ajax event="rowSelect".
+     */
+    public void onRowSelect(SelectEvent event) {
+        if (getCurrentConversation().getCurrentContext().isReadOnly()) {
+            Faces.navigate(view());
+        } else if (permission.canEdit(dataModel.getSelectedRow())) {
+            Faces.navigate(edit());
+        } else {
+            Faces.navigate(view());
+        }
+    }
+
+    /**
+     * Remove the entity corresponding to the selected row from the x-to-many association.
+     */
+    public void remove() {
+        if (!permission.canDelete(dataModel.getSelectedRow())) {
+            messageUtil.error("error_action_denied");
+            return;
+        }
+
+        remove(dataModel.getSelectedRow());
+        if (needEntityRemovalTracking) {
+            getCurrentConversation().getCurrentContext().addDependentEntity(dataModel.getSelectedRow());
+        }
+        messageUtil.infoEntity("status_removed_ok", dataModel.getSelectedRow());
+    }
+
+    /**
+     * Action to create a new entity. The entity is not added a priori to the x-to-many association. It is added
+     * if the <code>ok</code> callback is invoked. 
+     * @return the implicit jsf view.
+     */
+    public String add() {
+        return controller.createView(labelKey, create(), addCallBack, isSubView());
+    }
+
+    protected ConversationCallBack<E> addCallBack = new ConversationCallBack<E>() {
+        private static final long serialVersionUID = 1L;
+
+        @Override
+        protected void onSaved(E e) {
+            add(e);
+        }
+
+        @Override
+        protected void onOk(E e) {
+            add(e);
+            messageUtil.infoEntity("status_added_new_ok", e);
+        }
+    };
+
+    public String search() {
+        return select();
+    }
+
+    public String select() {
+        return controller.multiSelectView(labelKey, selectCallBack, isSubView());
+    }
+
+    protected ConversationCallBack<E> selectCallBack = new ConversationCallBack<E>() {
+        private static final long serialVersionUID = 1L;
+
+        @Override
+        protected void onSelected(E e) {
+            if (!permission.canSelect(e)) {
+                messageUtil.error("error_action_denied");
+                return;
+            }
+
+            remove(e); // in case it was already selected.
+            add(e);
+            messageUtil.infoEntity("status_added_existing_ok", e);
+        }
+    };
+
+    /**
+     * @return <code>true</code> if view is related to a parent and should not be performed any persistance. <code>false</code> otherwise.
+     */
+    private boolean isSubView() {
+        return cascades.contains(CascadeType.ALL) || cascades.contains(CascadeType.PERSIST);
+    }
+
+    private String buildLabelKey(PluralAttribute<?, ?, E> attribute) {
+        return UPPER_CAMEL.to(LOWER_CAMEL, attribute.getDeclaringType().getJavaType().getSimpleName()) + "_" + attribute.getName();
+    }
+}
diff --git a/src/main/generated-java/com/h2/demo/web/domain/support/GenericToOneAssociation.java b/src/main/generated-java/com/h2/demo/web/domain/support/GenericToOneAssociation.java
new file mode 100644
index 0000000..6de39a5
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/web/domain/support/GenericToOneAssociation.java
@@ -0,0 +1,151 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-jsf2-spring-conversation:src/main/java/domain/support/GenericToOneAssociation.p.vm.java
+ */
+package com.h2.demo.web.domain.support;
+
+import static com.google.common.base.CaseFormat.LOWER_CAMEL;
+import static com.google.common.base.CaseFormat.UPPER_CAMEL;
+
+import java.io.Serializable;
+import java.util.Collection;
+
+import javax.persistence.CascadeType;
+import javax.persistence.metamodel.SingularAttribute;
+
+import com.h2.demo.domain.Identifiable;
+import com.h2.demo.repository.support.MetamodelUtil;
+import com.h2.demo.web.conversation.ConversationCallBack;
+import com.h2.demo.web.permission.support.GenericPermission;
+import com.h2.demo.web.util.MessageUtil;
+
+/**
+ * Controller that allows you to manage an entity's x-to-one association.
+ */
+public abstract class GenericToOneAssociation<E extends Identifiable<PK>, PK extends Serializable> {
+    protected GenericController<E, PK> controller;
+    protected GenericPermission<E> permission;
+    protected MessageUtil messageUtil;
+    protected String labelKey;
+    protected Collection<CascadeType> cascades;
+
+    public GenericToOneAssociation(GenericController<E, PK> controller, SingularAttribute<?, E> attribute) {
+        this.labelKey = buildLabelKey(attribute);
+        this.controller = controller;
+        this.messageUtil = controller.getMessageUtil();
+        this.permission = controller.getPermission();
+        this.cascades = MetamodelUtil.getInstance().getCascades(attribute);
+    }
+
+    protected abstract E get();
+
+    protected abstract void set(E e);
+
+    public String view() {
+        return controller.editReadOnlyView(labelKey, get(), isSubView());
+    }
+
+    /**
+     * Helper for the autoComplete component.
+     */
+    public E getSelected() {
+        return get();
+    }
+
+    /**
+     * Handles ajax autoComplete event and regular page postback.
+     */
+    public void setSelected(E selected) {
+        if (controller.shouldReplace(get(), selected)) {
+            set(selected);
+        }
+    }
+
+    public String search() {
+        return select();
+    }
+
+    public String select() {
+        return controller.selectView(labelKey, selectCallBack, isSubView());
+    }
+
+    protected ConversationCallBack<E> selectCallBack = new ConversationCallBack<E>() {
+        private static final long serialVersionUID = 1L;
+
+        @Override
+        protected void onSelected(E e) {
+            if (!permission.canSelect(e)) {
+                messageUtil.error("error_action_denied");
+                return;
+            }
+
+            set(e);
+            messageUtil.infoEntity("status_selected_ok", get());
+        }
+    };
+
+    public String add() {
+        return controller.createView(labelKey, addCallBack, isSubView());
+    }
+
+    protected ConversationCallBack<E> addCallBack = new ConversationCallBack<E>() {
+        private static final long serialVersionUID = 1L;
+
+        @Override
+        protected void onSaved(E e) {
+            if (!permission.canCreate()) {
+                messageUtil.error("error_action_denied");
+                return;
+            }
+
+            set(e);
+        }
+
+        @Override
+        protected void onOk(E e) {
+            if (!permission.canCreate()) {
+                messageUtil.error("error_action_denied");
+                return;
+            }
+
+            set(e);
+            messageUtil.infoEntity("status_selected_new_ok", e);
+        }
+    };
+
+    public String edit() {
+        return controller.editView(labelKey, get(), editCallBack, isSubView());
+    }
+
+    protected ConversationCallBack<E> editCallBack = new ConversationCallBack<E>() {
+        private static final long serialVersionUID = 1L;
+
+        // through this way if sub is false
+        @Override
+        protected void onSaved(E e) {
+            set(e);
+        }
+
+        // callback through this way if sub is true
+        @Override
+        protected void onOk(E e) {
+            set(e);
+            messageUtil.infoEntity("status_edited_ok", e);
+        }
+    };
+
+    /**
+     * @return <code>true</code> if view is related to a parent and should not be performed any persistance. <code>false</code> otherwise.
+     */
+    protected boolean isSubView() {
+        return cascades.contains(CascadeType.PERSIST) || cascades.contains(CascadeType.ALL);
+    }
+
+    private String buildLabelKey(SingularAttribute<?, E> attribute) {
+        return UPPER_CAMEL.to(LOWER_CAMEL, attribute.getDeclaringType().getJavaType().getSimpleName()) + "_" + attribute.getName();
+    }
+}
diff --git a/src/main/generated-java/com/h2/demo/web/domain/support/SavedSearchService.java b/src/main/generated-java/com/h2/demo/web/domain/support/SavedSearchService.java
new file mode 100644
index 0000000..7c40dab
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/web/domain/support/SavedSearchService.java
@@ -0,0 +1,138 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-jsf2-spring-conversation:src/main/java/domain/support/SavedSearchService.p.vm.java
+ */
+package com.h2.demo.web.domain.support;
+
+import static com.google.common.collect.Lists.newArrayList;
+
+import java.util.List;
+
+import javax.inject.Inject;
+import javax.inject.Named;
+import javax.inject.Singleton;
+
+import org.springframework.transaction.annotation.Transactional;
+
+import com.h2.demo.context.UserContext;
+import com.h2.demo.domain.Account;
+import com.h2.demo.domain.SavedSearch;
+import com.h2.demo.domain.SavedSearch_;
+import com.h2.demo.repository.AccountRepository;
+import com.h2.demo.repository.SavedSearchRepository;
+import com.h2.demo.repository.support.SearchParameters;
+import com.h2.demo.web.util.MessageUtil;
+
+/**
+ * Store/Load Search Form Content to db.
+ */
+@Named
+@Singleton
+@SuppressWarnings({ "rawtypes" })
+public class SavedSearchService {
+    @Inject
+    private SavedSearchRepository savedSearchRepository;
+    @Inject
+    private MessageUtil messageUtil;
+    @Inject
+    private AccountRepository accountRepository;
+
+    @Transactional
+    public void save(GenericSearchForm searchForm) {
+        SavedSearch savedSearch = savedSearchRepository.findUniqueOrNone(example(searchForm));
+
+        if (savedSearch == null) {
+            savedSearch = example(searchForm);
+        }
+
+        if (searchForm.isPrivateSearch()) {
+            savedSearch = markSearchPrivate(savedSearch);
+        } else {
+            savedSearch = markSearchPublic(savedSearch);
+        }
+
+        savedSearch.setFormContent(searchForm.toByteArray());
+        savedSearchRepository.save(savedSearch);
+        messageUtil.info("saved_search_saved", savedSearch.getName());
+
+        // manual search form reset : reset only form metadata 
+        searchForm.setSearchFormName(null);
+        searchForm.setPrivateSearch(false);
+    }
+
+    private SavedSearch example(GenericSearchForm searchForm) {
+        SavedSearch savedSearch = new SavedSearch();
+        savedSearch.setName(searchForm.getSearchFormName());
+        savedSearch.setFormClassname(searchForm.getClass().getSimpleName());
+        return savedSearch;
+    }
+
+    /**
+     * @param savedSearch
+     * @return savedSearch marked as private with current account
+     */
+    private SavedSearch markSearchPrivate(SavedSearch savedSearch) {
+        Account currentUser = accountRepository.getById(UserContext.getId());
+        savedSearch.setAccount(currentUser);
+        return savedSearch;
+    }
+
+    private SavedSearch markSearchPublic(SavedSearch savedSearch) {
+        return savedSearch.account(null);
+    }
+
+    private SavedSearch privateExample(GenericSearchForm searchForm) {
+        return markSearchPrivate(example(searchForm));
+    }
+
+    public <F extends GenericSearchForm> Finder finderFor(F searchFrom) {
+        // we use a Finder in order to have the required List<String> find(String) method
+        return new Finder(savedSearchRepository, searchFrom);
+    }
+
+    public class Finder {
+        private SavedSearchRepository savedSearchRepository;
+        private GenericSearchForm searchFrom;
+
+        public Finder(SavedSearchRepository savedSearchRepository, GenericSearchForm searchFrom) {
+            this.savedSearchRepository = savedSearchRepository;
+            this.searchFrom = searchFrom;
+        }
+
+        public List<SavedSearch> find(String name) {
+            List<SavedSearch> searches = newArrayList();
+            searches.addAll(findPrivate(name));
+            searches.addAll(findPublic(name));
+            return searches;
+        }
+
+        private List<SavedSearch> findPublic(String name) {
+            List<SavedSearch> results = newArrayList();
+            SavedSearch example = example(searchFrom).name(name);
+            SearchParameters sp = new SearchParameters() //
+                    .caseInsensitive() //
+                    .anywhere() //
+                    .property(SavedSearch_.account, (Object) null);
+            for (SavedSearch savedSearch : savedSearchRepository.find(example, sp)) {
+                results.add(savedSearch);
+            }
+            return results;
+        }
+
+        private List<SavedSearch> findPrivate(String name) {
+            List<SavedSearch> results = newArrayList();
+            SavedSearch example = privateExample(searchFrom).name(name);
+            SearchParameters anywhere = new SearchParameters() //
+                    .caseInsensitive() //
+                    .anywhere();
+            for (SavedSearch savedSearch : savedSearchRepository.find(example, anywhere)) {
+                results.add(savedSearch);
+            }
+            return results;
+        }
+    }
+}
\ No newline at end of file
diff --git a/src/main/generated-java/com/h2/demo/web/domain/support/SelectableListDataModel.java b/src/main/generated-java/com/h2/demo/web/domain/support/SelectableListDataModel.java
new file mode 100644
index 0000000..365ff69
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/web/domain/support/SelectableListDataModel.java
@@ -0,0 +1,67 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-jsf2-spring-conversation:src/main/java/domain/support/SelectableListDataModel.p.vm.java
+ */
+package com.h2.demo.web.domain.support;
+
+import java.io.Serializable;
+import java.util.List;
+
+import javax.faces.model.ListDataModel;
+
+import org.primefaces.model.SelectableDataModel;
+
+import com.h2.demo.domain.Identifiable;
+
+public class SelectableListDataModel<E extends Identifiable<?>> extends ListDataModel<E> implements SelectableDataModel<E>, Serializable {
+    private static final long serialVersionUID = 1L;
+    private E selectedRow;
+
+    public SelectableListDataModel() {
+    }
+
+    public SelectableListDataModel(List<E> data) {
+        super(data);
+    }
+
+    /**
+     * Returns the currently selected row. To be called from your flow upon a <code>selectXxx</code> transition.
+     */
+    public E getSelectedRow() {
+        return selectedRow;
+    }
+
+    /**
+     * Set the currently selected row. To be called from your dataTable.
+     */
+    public void setSelectedRow(E selectedRow) {
+        this.selectedRow = selectedRow;
+    }
+
+    /**
+     * Set the selectedRow to null. To be called from your flow.
+     */
+    public void resetSelectedRow() {
+        this.selectedRow = null;
+    }
+
+    @SuppressWarnings("unchecked")
+    @Override
+    public E getRowData(String rowKey) {
+        for (E item : (List<E>) getWrappedData()) {
+            if (rowKey.equals(String.valueOf(item.hashCode()))) {
+                return item;
+            }
+        }
+        return null;
+    }
+
+    @Override
+    public Object getRowKey(E item) {
+        return String.valueOf(item.hashCode());
+    }
+}
diff --git a/src/main/generated-java/com/h2/demo/web/faces/ConversationAwareElResolver.java b/src/main/generated-java/com/h2/demo/web/faces/ConversationAwareElResolver.java
new file mode 100644
index 0000000..c05404e
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/web/faces/ConversationAwareElResolver.java
@@ -0,0 +1,57 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-jsf2-spring-conversation:src/main/java/faces/ConversationAwareElResolver.p.vm.java
+ */
+package com.h2.demo.web.faces;
+
+import static com.h2.demo.web.conversation.ConversationHolder.getCurrentConversation;
+
+import javax.el.ELContext;
+import javax.el.ELException;
+
+import org.springframework.web.jsf.el.SpringBeanFacesELResolver;
+
+import com.h2.demo.web.conversation.Conversation;
+
+/**
+ * ConversationAwareElResolver is declared in faces-config.xml.
+ * It tries to find values in the current {@link ConversationContext}. 
+ */
+public class ConversationAwareElResolver extends SpringBeanFacesELResolver {
+
+    @Override
+    public Object getValue(ELContext elContext, Object base, Object property) throws ELException {
+        if (base == null && property != null) {
+            Conversation currentConversation = getCurrentConversation();
+            if (currentConversation != null) {
+                Object result = currentConversation.getVar(property.toString());
+                if (result != null) {
+                    elContext.setPropertyResolved(true);
+                    return result;
+                }
+            }
+        }
+
+        return super.getValue(elContext, base, property);
+    }
+
+    @Override
+    public Class<?> getType(ELContext elContext, Object base, Object property) throws ELException {
+        if (base == null && property != null) {
+            Conversation currentConversation = getCurrentConversation();
+            if (currentConversation != null) {
+                Object value = currentConversation.getVar(property.toString());
+                if (value != null) {
+                    elContext.setPropertyResolved(true);
+                    return value.getClass();
+                }
+            }
+        }
+
+        return super.getType(elContext, base, property);
+    }
+}
diff --git a/src/main/generated-java/com/h2/demo/web/faces/ConversationContextScope.java b/src/main/generated-java/com/h2/demo/web/faces/ConversationContextScope.java
new file mode 100644
index 0000000..d2196b0
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/web/faces/ConversationContextScope.java
@@ -0,0 +1,62 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-jsf2-spring-conversation:src/main/java/faces/ConversationContextScope.p.vm.java
+ */
+package com.h2.demo.web.faces;
+
+import static com.h2.demo.web.conversation.ConversationHolder.getCurrentConversation;
+
+import org.springframework.beans.factory.ObjectFactory;
+import org.springframework.beans.factory.config.Scope;
+
+import com.h2.demo.web.conversation.Conversation;
+import com.h2.demo.web.conversation.ConversationContext;
+
+/**
+ * Beans in the <code>conversationContext</code> scope reside in a {@link Conversation conversation}'s {@link ConversationContext}.
+ * They are <code>visible</code> only when the conversation is bound to the current thread of execution and their 
+ * hosting ConversationContext is on top of the conversation's contextes stack.
+ * <p>
+ * Such a design decision allows a conversation to have 2 <code>conversation scoped</code> beans with 
+ * the same name (they just have to reside in 2 different ConversationContext).
+ * This prevents bean name clash in complex navigation scenario within the same conversation.
+ */
+public class ConversationContextScope implements Scope {
+
+    @Override
+    public String getConversationId() {
+        return getCurrentConversation().getCid();
+    }
+
+    @Override
+    public Object get(String name, ObjectFactory<?> objectFactory) {
+        Conversation currentConversation = getCurrentConversation();
+        Object bean = currentConversation.getCurrentContext().getBean(name, Object.class);
+
+        if (bean == null) {
+            bean = objectFactory.getObject();
+            currentConversation.getCurrentContext().addBean(name, bean);
+        }
+
+        return bean;
+    }
+
+    @Override
+    public Object remove(String name) {
+        throw new UnsupportedOperationException("remove is done during conversation.end");
+    }
+
+    @Override
+    public void registerDestructionCallback(String name, Runnable callback) {
+        // no ops
+    }
+
+    @Override
+    public Object resolveContextualObject(String key) {
+        return getCurrentConversation().getCurrentContext().getVar(key);
+    }
+}
\ No newline at end of file
diff --git a/src/main/generated-java/com/h2/demo/web/faces/ConversationContextScoped.java b/src/main/generated-java/com/h2/demo/web/faces/ConversationContextScoped.java
new file mode 100644
index 0000000..5a09fdd
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/web/faces/ConversationContextScoped.java
@@ -0,0 +1,24 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-jsf2-spring-conversation:src/main/java/faces/ConversationContextScoped.p.vm.java
+ */
+package com.h2.demo.web.faces;
+
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
+
+import org.springframework.context.annotation.Scope;
+
+/**
+ * Beans in the 'conversationContext' scope reside in a {@link Conversation conversation}'s {@link ConversationContext}.
+ * They are 'visible' only when the conversation is bound to the current thread of execution and their 
+ * hosting ConversationContext is on top of the conversation's contextes stack.
+ */
+@Scope("conversationContext")
+@Retention(RetentionPolicy.RUNTIME)
+public @interface ConversationContextScoped {
+}
diff --git a/src/main/generated-java/com/h2/demo/web/faces/ConversationScope.java b/src/main/generated-java/com/h2/demo/web/faces/ConversationScope.java
new file mode 100644
index 0000000..59a7f8c
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/web/faces/ConversationScope.java
@@ -0,0 +1,57 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-jsf2-spring-conversation:src/main/java/faces/ConversationScope.p.vm.java
+ */
+package com.h2.demo.web.faces;
+
+import static com.h2.demo.web.conversation.ConversationHolder.getCurrentConversation;
+
+import org.springframework.beans.factory.ObjectFactory;
+import org.springframework.beans.factory.config.Scope;
+
+import com.h2.demo.web.conversation.Conversation;
+
+/**
+ * Beans in the conversation scope reside in a {@link Conversation conversation}.
+ * They are 'visible' only when the conversation is bound to the current thread of execution.
+ */
+public class ConversationScope implements Scope {
+
+    @Override
+    public String getConversationId() {
+        return getCurrentConversation().getId();
+    }
+
+    @Override
+    public Object get(String name, ObjectFactory<?> objectFactory) {
+        Conversation currentConversation = getCurrentConversation();
+        Object bean = currentConversation.getBean(name);
+
+        if (bean == null) {
+            bean = objectFactory.getObject();
+            currentConversation.addBean(name, bean);
+        }
+
+        return bean;
+    }
+
+    @Override
+    public Object remove(String name) {
+        throw new UnsupportedOperationException("remove is done during conversation.end");
+    }
+
+    @Override
+    public void registerDestructionCallback(String name, Runnable callback) {
+        // no ops
+    }
+
+    @Override
+    public Object resolveContextualObject(String key) {
+        // TODO: is it really required?      
+        throw new UnsupportedOperationException("remove is done during conversation.end");
+    }
+}
\ No newline at end of file
diff --git a/src/main/generated-java/com/h2/demo/web/faces/ConversationScoped.java b/src/main/generated-java/com/h2/demo/web/faces/ConversationScoped.java
new file mode 100644
index 0000000..d7d8dac
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/web/faces/ConversationScoped.java
@@ -0,0 +1,23 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-jsf2-spring-conversation:src/main/java/faces/ConversationScoped.p.vm.java
+ */
+package com.h2.demo.web.faces;
+
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
+
+import org.springframework.context.annotation.Scope;
+
+/**
+ * Beans in the 'conversation' scope reside in a {@link Conversation conversation}.
+ * They are 'visible' only when the conversation is bound to the current thread of execution.
+ */
+@Scope("conversation")
+@Retention(RetentionPolicy.RUNTIME)
+public @interface ConversationScoped {
+}
diff --git a/src/main/generated-java/com/h2/demo/web/faces/CustomExceptionHandler.java b/src/main/generated-java/com/h2/demo/web/faces/CustomExceptionHandler.java
new file mode 100644
index 0000000..b386782
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/web/faces/CustomExceptionHandler.java
@@ -0,0 +1,69 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-jsf2-spring-conversation:src/main/java/faces/CustomExceptionHandler.p.vm.java
+ */
+package com.h2.demo.web.faces;
+
+import java.util.Iterator;
+
+import javax.faces.context.ExceptionHandler;
+import javax.faces.context.ExceptionHandlerWrapper;
+import javax.faces.event.ExceptionQueuedEvent;
+import javax.persistence.OptimisticLockException;
+
+import org.springframework.dao.DataIntegrityViolationException;
+import org.springframework.security.access.AccessDeniedException;
+
+import com.h2.demo.web.util.ExceptionUtil;
+import com.h2.demo.web.util.MessageUtil;
+
+/**
+ * Exception handling is configured here, in web.xml (see error-page tag) and in faces-config.xml.
+ */
+public class CustomExceptionHandler extends ExceptionHandlerWrapper {
+
+    private ExceptionHandler wrapped;
+
+    /**
+     * Construct a new exception handler around the given wrapped exception handler.
+     * @param wrapped The wrapped exception handler.
+     */
+    public CustomExceptionHandler(ExceptionHandler wrapped) {
+        this.wrapped = wrapped;
+    }
+
+    @Override
+    public void handle() {
+        Iterator<ExceptionQueuedEvent> unhandledExceptionQueuedEvents = getUnhandledExceptionQueuedEvents().iterator();
+
+        if (unhandledExceptionQueuedEvents.hasNext()) {
+            Throwable e = unhandledExceptionQueuedEvents.next().getContext().getException();
+
+            // map general purpose exception to error message
+            if (ExceptionUtil.isCausedBy(e, OptimisticLockException.class)) {
+                MessageUtil.getInstance().error("error_concurrent_modification");
+                unhandledExceptionQueuedEvents.remove();
+            } else if (ExceptionUtil.isCausedBy(e, DataIntegrityViolationException.class)) {
+                MessageUtil.getInstance().error("error_data_integrity_violation");
+                unhandledExceptionQueuedEvents.remove();
+            } else if (ExceptionUtil.isCausedBy(e, AccessDeniedException.class)) {
+                // works only if the spring security filter is before the exception filter, 
+                // that is if the exception filter handles the exception first.
+                MessageUtil.getInstance().error("error_access_denied");
+                unhandledExceptionQueuedEvents.remove();
+            }
+            // exception will be handled by the wrapped exception handler.
+        }
+
+        wrapped.handle();
+    }
+
+    @Override
+    public ExceptionHandler getWrapped() {
+        return wrapped;
+    }
+}
diff --git a/src/main/generated-java/com/h2/demo/web/faces/CustomExceptionHandlerFactory.java b/src/main/generated-java/com/h2/demo/web/faces/CustomExceptionHandlerFactory.java
new file mode 100644
index 0000000..9596bd3
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/web/faces/CustomExceptionHandlerFactory.java
@@ -0,0 +1,43 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-jsf2-spring-conversation:src/main/java/faces/CustomExceptionHandlerFactory.p.vm.java
+ */
+package com.h2.demo.web.faces;
+
+import javax.faces.context.ExceptionHandler;
+import javax.faces.context.ExceptionHandlerFactory;
+
+import org.omnifaces.exceptionhandler.FullAjaxExceptionHandler;
+
+public class CustomExceptionHandlerFactory extends ExceptionHandlerFactory {
+
+    private ExceptionHandlerFactory wrapped;
+
+    /**
+     * Construct a new full conversation aware exception handler factory around the given wrapped factory.
+     * @param wrapped The wrapped factory.
+     */
+    public CustomExceptionHandlerFactory(ExceptionHandlerFactory wrapped) {
+        this.wrapped = wrapped;
+    }
+
+    /**
+     * Returns a new instance of {@link CustomExceptionHandler} which wraps the original exception handler.
+     */
+    @Override
+    public ExceptionHandler getExceptionHandler() {
+        return new CustomExceptionHandler(new FullAjaxExceptionHandler(wrapped.getExceptionHandler()));
+    }
+
+    /**
+     * Returns the wrapped factory.
+     */
+    @Override
+    public ExceptionHandlerFactory getWrapped() {
+        return wrapped;
+    }
+}
\ No newline at end of file
diff --git a/src/main/generated-java/com/h2/demo/web/faces/ExceptionInRenderPhaseListener.java b/src/main/generated-java/com/h2/demo/web/faces/ExceptionInRenderPhaseListener.java
new file mode 100644
index 0000000..70c8d12
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/web/faces/ExceptionInRenderPhaseListener.java
@@ -0,0 +1,60 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-jsf2-spring-conversation:src/main/java/faces/ExceptionInRenderPhaseListener.p.vm.java
+ */
+package com.h2.demo.web.faces;
+
+import java.io.IOException;
+
+import javax.faces.context.ExceptionHandler;
+import javax.faces.context.ExternalContext;
+import javax.faces.context.FacesContext;
+import javax.faces.event.PhaseEvent;
+import javax.faces.event.PhaseId;
+
+import org.omnifaces.eventlistener.DefaultPhaseListener;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import com.google.common.collect.Iterables;
+import com.h2.demo.web.conversation.ConversationManager;
+
+/**
+ * Phase listener to handle exception during RENDER_RESPONSE phase.<br>
+ * In other phases, exceptions are handled by factory.exception-handler-factory in faces-config.xml.<br>
+ * The exception handler defined in faces-config.xml is also used in this phase listener.<br>
+ */
+public class ExceptionInRenderPhaseListener extends DefaultPhaseListener {
+    private static final long serialVersionUID = 1L;
+    private static final Logger log = LoggerFactory.getLogger(ExceptionInRenderPhaseListener.class);
+
+    public ExceptionInRenderPhaseListener() {
+        super(PhaseId.RENDER_RESPONSE);
+    }
+
+    @Override
+    public void afterPhase(PhaseEvent event) {
+        ExceptionHandler exceptionHandler = event.getFacesContext().getExceptionHandler();
+        if (Iterables.isEmpty(exceptionHandler.getUnhandledExceptionQueuedEvents())) {
+            return;
+        }
+
+        try {
+            new OptimisticLockExceptionHandler(exceptionHandler).handle();
+
+            FacesContext faces = FacesContext.getCurrentInstance();
+            String nextUrl = ConversationManager.getInstance().getCurrentConversation().nextUrl();
+
+            ExternalContext externalContext = FacesContext.getCurrentInstance().getExternalContext();
+            String url = externalContext.getRequestContextPath() + nextUrl;
+            faces.getExternalContext().redirect(url);
+            faces.responseComplete();
+        } catch (IOException e) {
+            log.error("Failed to redirect to context page in render response phase", e);
+        }
+    }
+}
diff --git a/src/main/generated-java/com/h2/demo/web/faces/LocaleSetterListener.java b/src/main/generated-java/com/h2/demo/web/faces/LocaleSetterListener.java
new file mode 100644
index 0000000..3127302
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/web/faces/LocaleSetterListener.java
@@ -0,0 +1,36 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-jsf2-spring-conversation:src/main/java/faces/LocaleSetterListener.p.vm.java
+ */
+package com.h2.demo.web.faces;
+
+import javax.faces.context.FacesContext;
+import javax.faces.event.PhaseEvent;
+import javax.faces.event.PhaseId;
+
+import org.omnifaces.eventlistener.DefaultPhaseListener;
+
+import com.h2.demo.context.LocaleHolder;
+import com.h2.demo.web.filter.LocaleResolverRequestFilter;
+
+/**
+ * Set the current locale to jsf from the resolver initialized in {@link LocaleResolverRequestFilter} filter.
+ */
+public class LocaleSetterListener extends DefaultPhaseListener {
+    private static final long serialVersionUID = 1L;
+
+    public LocaleSetterListener() {
+        super(PhaseId.RESTORE_VIEW);
+    }
+
+    @Override
+    public void afterPhase(PhaseEvent event) {
+        if (FacesContext.getCurrentInstance().getViewRoot() != null) {
+            FacesContext.getCurrentInstance().getViewRoot().setLocale(LocaleHolder.getLocale());
+        }
+    }
+}
diff --git a/src/main/generated-java/com/h2/demo/web/faces/LogPhaseListener.java b/src/main/generated-java/com/h2/demo/web/faces/LogPhaseListener.java
new file mode 100644
index 0000000..8432ab9
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/web/faces/LogPhaseListener.java
@@ -0,0 +1,39 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-jsf2-spring-conversation:src/main/java/faces/LogPhaseListener.p.vm.java
+ */
+package com.h2.demo.web.faces;
+
+import javax.faces.event.PhaseEvent;
+import javax.faces.event.PhaseId;
+
+import org.omnifaces.eventlistener.DefaultPhaseListener;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+/**
+ * Simple phase listener logger. Convenient when learning/debugging JSF.
+ * Must be activated in faces-config.xml
+ */
+public class LogPhaseListener extends DefaultPhaseListener {
+    private static final long serialVersionUID = 1L;
+    private static final Logger log = LoggerFactory.getLogger(LogPhaseListener.class);
+
+    public LogPhaseListener() {
+        super(PhaseId.ANY_PHASE);
+    }
+
+    @Override
+    public void afterPhase(PhaseEvent event) {
+        log.debug("{}", event.getPhaseId());
+    }
+
+    @Override
+    public void beforePhase(PhaseEvent event) {
+        log.debug("{}", event.getPhaseId());
+    }
+}
diff --git a/src/main/generated-java/com/h2/demo/web/faces/MultiPageMessagesListener.java b/src/main/generated-java/com/h2/demo/web/faces/MultiPageMessagesListener.java
new file mode 100644
index 0000000..a9320ef
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/web/faces/MultiPageMessagesListener.java
@@ -0,0 +1,123 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-jsf2-spring-conversation:src/main/java/faces/MultiPageMessagesListener.p.vm.java
+ */
+package com.h2.demo.web.faces;
+
+import static com.google.common.collect.Lists.newArrayList;
+
+import java.util.Iterator;
+import java.util.List;
+import java.util.Map;
+
+import javax.faces.application.FacesMessage;
+import javax.faces.context.FacesContext;
+import javax.faces.event.PhaseEvent;
+import javax.faces.event.PhaseId;
+import javax.faces.event.PhaseListener;
+
+/**
+ * This code comes from: http://ocpsoft.org/java/persist-and-pass-facesmessages-over-page-redirects/
+ * 
+ * Enables messages to be rendered on different pages from which they were set.
+ * 
+ * After each phase where messages may be added, this moves the messages from the page-scoped FacesContext to the session-scoped session map.
+ * 
+ * Before messages are rendered, this moves the messages from the session-scoped session map back to the page-scoped FacesContext.
+ * 
+ * Only global messages, not associated with a particular component, are moved. Component messages cannot be rendered on pages other than the one on which they
+ * were added.
+ * 
+ * To enable multi-page messages support, add a <code>lifecycle</code> block to your faces-config.xml file. That block should contain a single
+ * <code>phase-listener</code> block containing the fully-qualified classname of this file.
+ * 
+ * @author Jesse Wilson jesse[AT]odel.on.ca
+ * @secondaryAuthor Lincoln Baxter III lincoln[AT]ocpsoft.com
+ */
+public class MultiPageMessagesListener implements PhaseListener {
+
+    private static final long serialVersionUID = 1L;
+    private static final String sessionToken = "MULTI_PAGE_MESSAGES_SUPPORT";
+
+    // the list of messages restored during beforePhase
+    private ThreadLocal<List<FacesMessage>> restoredMessagesHolder = new ThreadLocal<List<FacesMessage>>();
+
+    @Override
+    public PhaseId getPhaseId() {
+        return PhaseId.ANY_PHASE;
+    }
+
+    /*
+     * Check to see if we are "naturally" in the RENDER_RESPONSE phase. If we have arrived here and the response is already complete, then the page is not going
+     * to show up: don't display messages yet.
+     */
+    // TODO: Blog this (MultiPageMessagesSupport)
+    @Override
+    public void beforePhase(final PhaseEvent event) {
+        FacesContext facesContext = event.getFacesContext();
+        this.saveMessages(facesContext);
+
+        if (PhaseId.RENDER_RESPONSE.equals(event.getPhaseId()) && !facesContext.getResponseComplete()) {
+            this.restoreMessages(facesContext);
+        }
+    }
+
+    /*
+     * Save messages into the session after every phase.
+     */
+    @Override
+    public void afterPhase(final PhaseEvent event) {
+        FacesContext facesContext = event.getFacesContext();
+        saveMessages(facesContext);
+    }
+
+    @SuppressWarnings("unchecked")
+    private int saveMessages(final FacesContext facesContext) {
+        List<FacesMessage> messages = newArrayList();
+        for (Iterator<FacesMessage> iter = facesContext.getMessages(null); iter.hasNext();) {
+            messages.add(iter.next());
+            iter.remove();
+        }
+
+        if (messages.isEmpty()) {
+            return 0;
+        }
+
+        // remove previously restored messages during beforePhase
+        List<FacesMessage> restoredMessages = restoredMessagesHolder.get();
+        if (restoredMessages != null) {
+            messages.removeAll(restoredMessages);
+        }
+        restoredMessagesHolder.remove();
+
+        Map<String, Object> sessionMap = facesContext.getExternalContext().getSessionMap();
+        List<FacesMessage> existingMessages = (List<FacesMessage>) sessionMap.get(sessionToken);
+        if (existingMessages != null) {
+            existingMessages.addAll(messages);
+        } else {
+            sessionMap.put(sessionToken, messages);
+        }
+        return messages.size();
+    }
+
+    @SuppressWarnings("unchecked")
+    private int restoreMessages(final FacesContext facesContext) {
+        Map<String, Object> sessionMap = facesContext.getExternalContext().getSessionMap();
+        List<FacesMessage> messages = (List<FacesMessage>) sessionMap.remove(sessionToken);
+        restoredMessagesHolder.set(messages);
+
+        if (messages == null) {
+            return 0;
+        }
+
+        int restoredCount = messages.size();
+        for (Object element : messages) {
+            facesContext.addMessage(null, (FacesMessage) element);
+        }
+        return restoredCount;
+    }
+}
diff --git a/src/main/generated-java/com/h2/demo/web/faces/OptimisticLockExceptionHandler.java b/src/main/generated-java/com/h2/demo/web/faces/OptimisticLockExceptionHandler.java
new file mode 100644
index 0000000..377c3d9
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/web/faces/OptimisticLockExceptionHandler.java
@@ -0,0 +1,62 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-jsf2-spring-conversation:src/main/java/faces/OptimisticLockExceptionHandler.p.vm.java
+ */
+package com.h2.demo.web.faces;
+
+import javax.faces.context.ExceptionHandler;
+import javax.faces.context.ExceptionHandlerWrapper;
+import javax.faces.event.ExceptionQueuedEvent;
+import javax.persistence.OptimisticLockException;
+
+import com.google.common.base.Predicate;
+import com.google.common.base.Predicates;
+import com.google.common.collect.Iterables;
+import com.h2.demo.web.util.ExceptionUtil;
+
+/**
+ * Exception handling is configured here, in web.xml (see error-page tag) and in faces-config.xml.
+ */
+public class OptimisticLockExceptionHandler extends ExceptionHandlerWrapper {
+
+    private ExceptionHandler wrapped;
+
+    /**
+     * Construct a new exception handler around the given wrapped exception handler.
+     * @param wrapped The wrapped exception handler.
+     */
+    public OptimisticLockExceptionHandler(ExceptionHandler wrapped) {
+        this.wrapped = wrapped;
+    }
+
+    @Override
+    public void handle() {
+        Iterable<ExceptionQueuedEvent> optimisticLockEvents = Iterables.filter(getUnhandledExceptionQueuedEvents(), optimisticLockCausePredictate);
+
+        if (!Iterables.isEmpty(optimisticLockEvents)) {
+            Iterables.removeIf(getUnhandledExceptionQueuedEvents(), Predicates.alwaysTrue());
+        }
+
+        wrapped.handle();
+    }
+
+    /**
+     * <code>true</code> if exception cause is of type {@link OptimisticLockException}
+     */
+    private Predicate<ExceptionQueuedEvent> optimisticLockCausePredictate = new Predicate<ExceptionQueuedEvent>() {
+        @Override
+        public boolean apply(ExceptionQueuedEvent event) {
+            Throwable exception = event.getContext().getException();
+            return ExceptionUtil.isCausedBy(exception, OptimisticLockException.class);
+        }
+    };
+
+    @Override
+    public ExceptionHandler getWrapped() {
+        return wrapped;
+    }
+}
diff --git a/src/main/generated-java/com/h2/demo/web/faces/ViewScope.java b/src/main/generated-java/com/h2/demo/web/faces/ViewScope.java
new file mode 100644
index 0000000..3931311
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/web/faces/ViewScope.java
@@ -0,0 +1,64 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-jsf2-spring-conversation:src/main/java/faces/ViewScope.p.vm.java
+ */
+package com.h2.demo.web.faces;
+
+import java.util.Map;
+
+import javax.faces.context.FacesContext;
+
+import org.springframework.beans.factory.ObjectFactory;
+import org.springframework.beans.factory.config.Scope;
+
+public class ViewScope implements Scope {
+    @Override
+    public Object get(String name, ObjectFactory<?> objectFactory) {
+        Map<String, Object> viewMap = getViewMap();
+
+        if (viewMap == null) {
+            return objectFactory.getObject();
+        } else if (viewMap.containsKey(name)) {
+            return viewMap.get(name);
+        } else {
+            Object object = objectFactory.getObject();
+            viewMap.put(name, object);
+            return object;
+        }
+    }
+
+    @Override
+    public Object remove(String name) {
+        Map<String, Object> viewMap = getViewMap();
+        if (viewMap == null) {
+            return null;
+        }
+        return viewMap.remove(name);
+    }
+
+    @Override
+    public String getConversationId() {
+        return null;
+    }
+
+    @Override
+    public void registerDestructionCallback(String name, Runnable callback) {
+    }
+
+    @Override
+    public Object resolveContextualObject(String key) {
+        return null;
+    }
+
+    private Map<String, Object> getViewMap() {
+        FacesContext currentInstance = FacesContext.getCurrentInstance();
+        if (currentInstance != null && currentInstance.getViewRoot() != null) {
+            return currentInstance.getViewRoot().getViewMap();
+        }
+        return null;
+    }
+}
\ No newline at end of file
diff --git a/src/main/generated-java/com/h2/demo/web/faces/ViewScoped.java b/src/main/generated-java/com/h2/demo/web/faces/ViewScoped.java
new file mode 100644
index 0000000..04cd377
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/web/faces/ViewScoped.java
@@ -0,0 +1,19 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-jsf2-spring-conversation:src/main/java/faces/ViewScoped.p.vm.java
+ */
+package com.h2.demo.web.faces;
+
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
+
+import org.springframework.context.annotation.Scope;
+
+@Scope("view")
+@Retention(RetentionPolicy.RUNTIME)
+public @interface ViewScoped {
+}
diff --git a/src/main/generated-java/com/h2/demo/web/filter/LocaleResolverRequestFilter.java b/src/main/generated-java/com/h2/demo/web/filter/LocaleResolverRequestFilter.java
new file mode 100644
index 0000000..a3e4f3a
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/web/filter/LocaleResolverRequestFilter.java
@@ -0,0 +1,71 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-jsf2-spring-conversation:src/main/java/filter/LocaleResolverRequestFilter.p.vm.java
+ */
+package com.h2.demo.web.filter;
+
+import static org.apache.commons.lang.StringUtils.isNotBlank;
+
+import java.io.IOException;
+import java.util.Locale;
+
+import javax.servlet.FilterChain;
+import javax.servlet.ServletException;
+import javax.servlet.http.HttpServletRequest;
+import javax.servlet.http.HttpServletResponse;
+
+import org.apache.commons.lang.LocaleUtils;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+import org.springframework.web.context.WebApplicationContext;
+import org.springframework.web.context.support.WebApplicationContextUtils;
+import org.springframework.web.filter.OncePerRequestFilter;
+import org.springframework.web.servlet.LocaleResolver;
+
+import com.h2.demo.context.LocaleHolder;
+
+/**
+ * Set the current {@link Locale} in the {@link LocaleHolder}
+ */
+public class LocaleResolverRequestFilter extends OncePerRequestFilter {
+    private static final Logger log = LoggerFactory.getLogger(LocaleResolverRequestFilter.class);
+
+    public static final String LOCALE_PARAMETER = "locale";
+
+    private LocaleResolver localeResolver;
+
+    @Override
+    protected void initFilterBean() throws ServletException {
+        WebApplicationContext context = WebApplicationContextUtils.getWebApplicationContext(getServletContext());
+        localeResolver = context.getBean(LocaleResolver.class);
+    }
+
+    @Override
+    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws ServletException, IOException {
+        forceLocaleFromParameter(request, response);
+        try {
+            LocaleHolder.setLocale(localeResolver.resolveLocale(request));
+            filterChain.doFilter(request, response);
+        } finally {
+            LocaleHolder.resetLocaleContext();
+        }
+    }
+
+    private void forceLocaleFromParameter(HttpServletRequest request, HttpServletResponse response) {
+        String localeParameter = null;
+        try {
+            localeParameter = request.getParameter(LOCALE_PARAMETER);
+            if (isNotBlank(localeParameter)) {
+                Locale locale = LocaleUtils.toLocale(localeParameter);
+                log.info("forcing locale to {}", locale.getLanguage());
+                localeResolver.setLocale(request, response, locale);
+            }
+        } catch (IllegalArgumentException e) {
+            log.error("Locale " + localeParameter + " is not valid");
+        }
+    }
+}
diff --git a/src/main/generated-java/com/h2/demo/web/filter/LogContextFilter.java b/src/main/generated-java/com/h2/demo/web/filter/LogContextFilter.java
new file mode 100644
index 0000000..7a175b3
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/web/filter/LogContextFilter.java
@@ -0,0 +1,49 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-jsf2-spring-conversation:src/main/java/filter/LogContextFilter.p.vm.java
+ */
+package com.h2.demo.web.filter;
+
+import java.io.IOException;
+
+import javax.servlet.Filter;
+import javax.servlet.FilterChain;
+import javax.servlet.FilterConfig;
+import javax.servlet.ServletException;
+import javax.servlet.ServletRequest;
+import javax.servlet.ServletResponse;
+import javax.servlet.http.HttpServletRequest;
+import javax.servlet.http.HttpServletResponse;
+
+import com.h2.demo.context.LogContext;
+import com.h2.demo.context.UserContext;
+
+/**
+ * Set the <code>login</code> and <code>sessionId<code> in the {@link LogContext} so they can be used in the log patterns.
+ */
+public class LogContextFilter implements Filter {
+
+    @Override
+    public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws IOException, ServletException {
+        HttpServletRequest request = (HttpServletRequest) servletRequest;
+        HttpServletResponse response = (HttpServletResponse) servletResponse;
+
+        String username = UserContext.getUsername();
+        LogContext.setLogin(username != null ? username : "no username");
+        LogContext.setSessionId(request.getSession().getId());
+
+        filterChain.doFilter(request, response);
+    }
+
+    @Override
+    public void init(FilterConfig filterConfig) throws ServletException {
+    }
+
+    @Override
+    public void destroy() {
+    }
+}
\ No newline at end of file
diff --git a/src/main/generated-java/com/h2/demo/web/filter/NoPageCacheFilter.java b/src/main/generated-java/com/h2/demo/web/filter/NoPageCacheFilter.java
new file mode 100644
index 0000000..030c500
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/web/filter/NoPageCacheFilter.java
@@ -0,0 +1,51 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-jsf2-spring-conversation:src/main/java/filter/NoPageCacheFilter.p.vm.java
+ */
+package com.h2.demo.web.filter;
+
+import java.io.IOException;
+
+import javax.inject.Named;
+import javax.servlet.Filter;
+import javax.servlet.FilterChain;
+import javax.servlet.FilterConfig;
+import javax.servlet.ServletException;
+import javax.servlet.ServletRequest;
+import javax.servlet.ServletResponse;
+import javax.servlet.http.HttpServletRequest;
+import javax.servlet.http.HttpServletResponse;
+
+/**
+ * Make JSF pages non cacheable 
+ * see http://stackoverflow.com/questions/49547/making-sure-a-web-page-is-not-cached-across-all-browsers
+ */
+@Named
+public class NoPageCacheFilter implements Filter {
+
+    @Override
+    public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws IOException, ServletException {
+        HttpServletRequest request = (HttpServletRequest) servletRequest;
+
+        if (!request.getRequestURI().contains("/javax.faces.resource/")) {
+            HttpServletResponse response = (HttpServletResponse) servletResponse;
+
+            response.setHeader("Cache-Control", "no-cache, no-store, must-revalidate"); // HTTP 1.1.
+            response.setHeader("Pragma", "no-cache"); // HTTP 1.0.
+            response.setDateHeader("Expires", 0); // Proxies.
+        }
+        filterChain.doFilter(servletRequest, servletResponse);
+    }
+
+    @Override
+    public void init(FilterConfig filterConfig) throws ServletException {
+    }
+
+    @Override
+    public void destroy() {
+    }
+}
\ No newline at end of file
diff --git a/src/main/generated-java/com/h2/demo/web/filter/SessionExpirationFilter.java b/src/main/generated-java/com/h2/demo/web/filter/SessionExpirationFilter.java
new file mode 100644
index 0000000..f8208b8
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/web/filter/SessionExpirationFilter.java
@@ -0,0 +1,63 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-jsf2-spring-conversation:src/main/java/filter/SessionExpirationFilter.p.vm.java
+ */
+package com.h2.demo.web.filter;
+
+import java.io.IOException;
+
+import javax.inject.Named;
+import javax.servlet.Filter;
+import javax.servlet.FilterChain;
+import javax.servlet.FilterConfig;
+import javax.servlet.ServletException;
+import javax.servlet.ServletRequest;
+import javax.servlet.ServletResponse;
+import javax.servlet.http.HttpServletRequest;
+import javax.servlet.http.HttpServletResponse;
+
+import com.h2.demo.web.util.PrimeFacesUtil;
+
+/**
+ * This filter handles session expiration during ajax request.
+ * IMPORTANT: The spring security filter MUST be placed after this one.
+ *
+ * Note: if you do not use Spring Security filter then you do not need this filter since you can 
+ * handle ViewExpiredException as any other exception (see {@link ConversationAwareExceptionHandler}).
+ */
+@Named
+public class SessionExpirationFilter implements Filter {
+
+    @Override
+    public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws IOException, ServletException {
+        HttpServletRequest request = (HttpServletRequest) servletRequest;
+        HttpServletResponse response = (HttpServletResponse) servletResponse;
+
+        if (PrimeFacesUtil.isAjax(request) && !request.isRequestedSessionIdValid()) {
+            response.getWriter().print(xmlPartialRedirectToPage(request, "/login.faces?session_expired=1"));
+            response.flushBuffer();
+            return;
+        }
+
+        filterChain.doFilter(request, response);
+    }
+
+    private String xmlPartialRedirectToPage(HttpServletRequest request, String page) {
+        return "<?xml version='1.0' encoding='UTF-8'?>" //
+                + "<partial-response>" //
+                + "<redirect url=\"" + request.getContextPath() + page + "\"/>" //
+                + "</partial-response>";
+    }
+
+    @Override
+    public void init(FilterConfig filterConfig) throws ServletException {
+    }
+
+    @Override
+    public void destroy() {
+    }
+}
\ No newline at end of file
diff --git a/src/main/generated-java/com/h2/demo/web/permission/AccountPermission.java b/src/main/generated-java/com/h2/demo/web/permission/AccountPermission.java
new file mode 100644
index 0000000..4237b31
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/web/permission/AccountPermission.java
@@ -0,0 +1,23 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-jsf2-spring-conversation:src/main/java/permission/Permission.e.vm.java
+ */
+package com.h2.demo.web.permission;
+
+import javax.inject.Named;
+import javax.inject.Singleton;
+
+import com.h2.demo.domain.Account;
+import com.h2.demo.web.permission.support.GenericPermission;
+
+@Named
+@Singleton
+public class AccountPermission extends GenericPermission<Account> {
+    public AccountPermission() {
+        super(Account.class);
+    }
+}
\ No newline at end of file
diff --git a/src/main/generated-java/com/h2/demo/web/permission/AddressPermission.java b/src/main/generated-java/com/h2/demo/web/permission/AddressPermission.java
new file mode 100644
index 0000000..d82a0bc
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/web/permission/AddressPermission.java
@@ -0,0 +1,23 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-jsf2-spring-conversation:src/main/java/permission/Permission.e.vm.java
+ */
+package com.h2.demo.web.permission;
+
+import javax.inject.Named;
+import javax.inject.Singleton;
+
+import com.h2.demo.domain.Address;
+import com.h2.demo.web.permission.support.GenericPermission;
+
+@Named
+@Singleton
+public class AddressPermission extends GenericPermission<Address> {
+    public AddressPermission() {
+        super(Address.class);
+    }
+}
\ No newline at end of file
diff --git a/src/main/generated-java/com/h2/demo/web/permission/AuditLogPermission.java b/src/main/generated-java/com/h2/demo/web/permission/AuditLogPermission.java
new file mode 100644
index 0000000..7489b5a
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/web/permission/AuditLogPermission.java
@@ -0,0 +1,23 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-jsf2-spring-conversation:src/main/java/permission/Permission.e.vm.java
+ */
+package com.h2.demo.web.permission;
+
+import javax.inject.Named;
+import javax.inject.Singleton;
+
+import com.h2.demo.domain.AuditLog;
+import com.h2.demo.web.permission.support.GenericPermission;
+
+@Named
+@Singleton
+public class AuditLogPermission extends GenericPermission<AuditLog> {
+    public AuditLogPermission() {
+        super(AuditLog.class);
+    }
+}
\ No newline at end of file
diff --git a/src/main/generated-java/com/h2/demo/web/permission/BookPermission.java b/src/main/generated-java/com/h2/demo/web/permission/BookPermission.java
new file mode 100644
index 0000000..a5aecd8
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/web/permission/BookPermission.java
@@ -0,0 +1,23 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-jsf2-spring-conversation:src/main/java/permission/Permission.e.vm.java
+ */
+package com.h2.demo.web.permission;
+
+import javax.inject.Named;
+import javax.inject.Singleton;
+
+import com.h2.demo.domain.Book;
+import com.h2.demo.web.permission.support.GenericPermission;
+
+@Named
+@Singleton
+public class BookPermission extends GenericPermission<Book> {
+    public BookPermission() {
+        super(Book.class);
+    }
+}
\ No newline at end of file
diff --git a/src/main/generated-java/com/h2/demo/web/permission/DocumentPermission.java b/src/main/generated-java/com/h2/demo/web/permission/DocumentPermission.java
new file mode 100644
index 0000000..c640652
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/web/permission/DocumentPermission.java
@@ -0,0 +1,23 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-jsf2-spring-conversation:src/main/java/permission/Permission.e.vm.java
+ */
+package com.h2.demo.web.permission;
+
+import javax.inject.Named;
+import javax.inject.Singleton;
+
+import com.h2.demo.domain.Document;
+import com.h2.demo.web.permission.support.GenericPermission;
+
+@Named
+@Singleton
+public class DocumentPermission extends GenericPermission<Document> {
+    public DocumentPermission() {
+        super(Document.class);
+    }
+}
\ No newline at end of file
diff --git a/src/main/generated-java/com/h2/demo/web/permission/LegacyPermission.java b/src/main/generated-java/com/h2/demo/web/permission/LegacyPermission.java
new file mode 100644
index 0000000..7452a3e
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/web/permission/LegacyPermission.java
@@ -0,0 +1,23 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-jsf2-spring-conversation:src/main/java/permission/Permission.e.vm.java
+ */
+package com.h2.demo.web.permission;
+
+import javax.inject.Named;
+import javax.inject.Singleton;
+
+import com.h2.demo.domain.Legacy;
+import com.h2.demo.web.permission.support.GenericPermission;
+
+@Named
+@Singleton
+public class LegacyPermission extends GenericPermission<Legacy> {
+    public LegacyPermission() {
+        super(Legacy.class);
+    }
+}
\ No newline at end of file
diff --git a/src/main/generated-java/com/h2/demo/web/permission/MoreTypesDemoPermission.java b/src/main/generated-java/com/h2/demo/web/permission/MoreTypesDemoPermission.java
new file mode 100644
index 0000000..202b708
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/web/permission/MoreTypesDemoPermission.java
@@ -0,0 +1,23 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-jsf2-spring-conversation:src/main/java/permission/Permission.e.vm.java
+ */
+package com.h2.demo.web.permission;
+
+import javax.inject.Named;
+import javax.inject.Singleton;
+
+import com.h2.demo.domain.MoreTypesDemo;
+import com.h2.demo.web.permission.support.GenericPermission;
+
+@Named
+@Singleton
+public class MoreTypesDemoPermission extends GenericPermission<MoreTypesDemo> {
+    public MoreTypesDemoPermission() {
+        super(MoreTypesDemo.class);
+    }
+}
\ No newline at end of file
diff --git a/src/main/generated-java/com/h2/demo/web/permission/RolePermission.java b/src/main/generated-java/com/h2/demo/web/permission/RolePermission.java
new file mode 100644
index 0000000..efe8d2e
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/web/permission/RolePermission.java
@@ -0,0 +1,23 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-jsf2-spring-conversation:src/main/java/permission/Permission.e.vm.java
+ */
+package com.h2.demo.web.permission;
+
+import javax.inject.Named;
+import javax.inject.Singleton;
+
+import com.h2.demo.domain.Role;
+import com.h2.demo.web.permission.support.GenericPermission;
+
+@Named
+@Singleton
+public class RolePermission extends GenericPermission<Role> {
+    public RolePermission() {
+        super(Role.class);
+    }
+}
\ No newline at end of file
diff --git a/src/main/generated-java/com/h2/demo/web/permission/SavedSearchPermission.java b/src/main/generated-java/com/h2/demo/web/permission/SavedSearchPermission.java
new file mode 100644
index 0000000..9ba56ca
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/web/permission/SavedSearchPermission.java
@@ -0,0 +1,23 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-jsf2-spring-conversation:src/main/java/permission/Permission.e.vm.java
+ */
+package com.h2.demo.web.permission;
+
+import javax.inject.Named;
+import javax.inject.Singleton;
+
+import com.h2.demo.domain.SavedSearch;
+import com.h2.demo.web.permission.support.GenericPermission;
+
+@Named
+@Singleton
+public class SavedSearchPermission extends GenericPermission<SavedSearch> {
+    public SavedSearchPermission() {
+        super(SavedSearch.class);
+    }
+}
\ No newline at end of file
diff --git a/src/main/generated-java/com/h2/demo/web/permission/support/GenericPermission.java b/src/main/generated-java/com/h2/demo/web/permission/support/GenericPermission.java
new file mode 100644
index 0000000..7b6546f
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/web/permission/support/GenericPermission.java
@@ -0,0 +1,77 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-jsf2-spring-conversation:src/main/java/permission/support/GenericPermission.p.vm.java
+ */
+package com.h2.demo.web.permission.support;
+
+import java.io.Serializable;
+
+import com.h2.demo.domain.Identifiable;
+
+public abstract class GenericPermission<E extends Identifiable<? extends Serializable>> {
+    private final Class<E> clazz;
+
+    public GenericPermission(Class<E> clazz) {
+        this.clazz = clazz;
+    }
+
+    public Class<E> getTarget() {
+        return clazz;
+    }
+
+    public boolean canCreate() {
+        return true;
+    }
+
+    public boolean canView() {
+        return true;
+    }
+
+    public boolean canView(E e) {
+        return e == null ? false : canView();
+    }
+
+    public boolean canEdit() {
+        return true;
+    }
+
+    public boolean canEdit(E e) {
+        return e == null ? false : canEdit();
+    }
+
+    public boolean canDelete() {
+        return true;
+    }
+
+    public boolean canDelete(E e) {
+        return canDelete();
+    }
+
+    public boolean canSearch() {
+        return canView();
+    }
+
+    public boolean canSearch(E e) {
+        return canSearch();
+    }
+
+    public boolean canSelect() {
+        return canSearch();
+    }
+
+    public boolean canSelect(E e) {
+        return canSelect();
+    }
+
+    public boolean canUse() {
+        return canView() || canSelect() || canDelete() || canEdit();
+    }
+
+    public boolean canUse(E e) {
+        return canView(e) || canSelect(e) || canDelete(e) || canEdit(e);
+    }
+}
diff --git a/src/main/generated-java/com/h2/demo/web/permission/support/TypeAwarePermission.java b/src/main/generated-java/com/h2/demo/web/permission/support/TypeAwarePermission.java
new file mode 100644
index 0000000..ddc84c4
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/web/permission/support/TypeAwarePermission.java
@@ -0,0 +1,76 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-jsf2-spring-conversation:src/main/java/permission/support/TypeAwarePermission.p.vm.java
+ */
+package com.h2.demo.web.permission.support;
+
+import static com.google.common.collect.Maps.newHashMap;
+import static org.hibernate.proxy.HibernateProxyHelper.getClassWithoutInitializingProxy;
+
+import java.io.Serializable;
+import java.util.List;
+import java.util.Map;
+
+import javax.inject.Inject;
+import javax.inject.Named;
+import javax.inject.Singleton;
+
+import com.h2.demo.domain.Identifiable;
+
+/**
+ * Permission service that should be used only in certain cases (e.g. from facelet tags). 
+ * 
+ * @see GenericPermission
+ */
+@Named("permission")
+@Singleton
+@SuppressWarnings("rawtypes")
+public class TypeAwarePermission {
+    private Map<Class, GenericPermission<?>> permissions = newHashMap();
+
+    @Inject
+    void buildCache(List<GenericPermission> registredPermissions) {
+        for (GenericPermission permission : registredPermissions) {
+            permissions.put(permission.getTarget(), permission);
+        }
+    }
+
+    @SuppressWarnings("unchecked")
+    private <E extends Identifiable<? extends Serializable>> GenericPermission<E> getPermission(E entity) {
+        // note: getClassWithoutInitializingProxy expects a non null object
+        // _HACK_ as we depend on hibernate here.
+        return (GenericPermission<E>) permissions.get(getClassWithoutInitializingProxy(entity));
+    }
+
+    // --------------------------------------------------------------
+    // Permission shortcut methods that can be used from facelet tags
+    // --------------------------------------------------------------
+
+    public <E extends Identifiable<?>> boolean canView(E e) {
+        return e == null ? false : getPermission(e).canView(e);
+    }
+
+    public <E extends Identifiable<?>> boolean canEdit(E e) {
+        return e == null ? false : getPermission(e).canEdit(e);
+    }
+
+    public <E extends Identifiable<?>> boolean canDelete(E e) {
+        return e == null ? false : getPermission(e).canDelete(e);
+    }
+
+    public <E extends Identifiable<?>> boolean canSearch(E e) {
+        return e == null ? false : getPermission(e).canSearch(e);
+    }
+
+    public <E extends Identifiable<?>> boolean canSelect(E e) {
+        return e == null ? false : getPermission(e).canSelect(e);
+    }
+
+    public <E extends Identifiable<?>> boolean canUse(E e) {
+        return e == null ? false : getPermission(e).canUse(e);
+    }
+}
\ No newline at end of file
diff --git a/src/main/generated-java/com/h2/demo/web/service/ConcurrentModificationResolver.java b/src/main/generated-java/com/h2/demo/web/service/ConcurrentModificationResolver.java
new file mode 100644
index 0000000..d7ae12b
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/web/service/ConcurrentModificationResolver.java
@@ -0,0 +1,35 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-jsf2-spring-conversation:src/main/java/services/ConcurrentModificationResolver.p.vm.java
+ */
+package com.h2.demo.web.service;
+
+import javax.inject.Inject;
+import javax.inject.Named;
+import javax.inject.Singleton;
+
+import com.h2.demo.web.conversation.ConversationManager;
+
+/**
+ * Simple service used from the concurrentModificationResolution.xhtml view.
+ */
+@Named
+@Singleton
+public class ConcurrentModificationResolver {
+
+    @Inject
+    private ConversationManager conversationManager;
+
+    public String refresh() {
+        return conversationManager.getCurrentConversation().getCurrentContext().getCallBack().ok(null);
+    }
+
+    public String discard() {
+        conversationManager.endCurrentConversation();
+        return "/home.faces?faces-redirect=true";
+    }
+}
\ No newline at end of file
diff --git a/src/main/generated-java/com/h2/demo/web/service/LocaleService.java b/src/main/generated-java/com/h2/demo/web/service/LocaleService.java
new file mode 100644
index 0000000..57765b6
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/web/service/LocaleService.java
@@ -0,0 +1,83 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-jsf2-spring-conversation:src/main/java/services/LocaleService.p.vm.java
+ */
+package com.h2.demo.web.service;
+
+import static com.h2.demo.web.conversation.ConversationHolder.getCurrentConversation;
+import static java.util.Locale.ENGLISH;
+import static java.util.Locale.FRENCH;
+import static org.springframework.web.context.WebApplicationContext.SCOPE_SESSION;
+
+import java.util.Locale;
+
+import javax.faces.context.ExternalContext;
+import javax.faces.context.FacesContext;
+import javax.inject.Inject;
+import javax.inject.Named;
+import javax.servlet.http.HttpServletRequest;
+import javax.servlet.http.HttpServletResponse;
+
+import org.springframework.context.annotation.Scope;
+import org.springframework.web.servlet.LocaleResolver;
+
+import com.h2.demo.context.LocaleHolder;
+import com.h2.demo.web.conversation.Conversation;
+
+@Named
+@Scope(SCOPE_SESSION)
+public class LocaleService {
+    @Inject
+    private LocaleResolver localeResolver;
+
+    public String getLocale() {
+        return LocaleHolder.getLocale().toString();
+    }
+
+    public String getLanguage() {
+        return LocaleHolder.getLocale().getLanguage();
+    }
+
+    public String switchToFrench() {
+        return switchToLocale(FRENCH);
+    }
+
+    public String switchToEnglish() {
+        return switchToLocale(ENGLISH);
+    }
+
+    private String switchToLocale(Locale locale) {
+        updateJsfLocale(locale);
+        updateSpringLocale(locale);
+        return redirectToSelf();
+    }
+
+    private String redirectToSelf() {
+        Conversation currentConversation = getCurrentConversation();
+        String viewId = FacesContext.getCurrentInstance().getViewRoot().getViewId();
+        if (currentConversation != null) {
+            return viewId + "?faces-redirect=true&_cid=" + currentConversation.getCid();
+        } else {
+            return viewId + "?faces-redirect=true";
+        }
+    }
+
+    private void updateJsfLocale(Locale locale) {
+        FacesContext.getCurrentInstance().getViewRoot().setLocale(locale);
+    }
+
+    private void updateSpringLocale(Locale locale) {
+        ExternalContext externalContext = FacesContext.getCurrentInstance().getExternalContext();
+        localeResolver.setLocale((HttpServletRequest) externalContext.getRequest(), (HttpServletResponse) externalContext.getResponse(), locale);
+        LocaleHolder.setLocale(locale);
+    }
+
+    public boolean isFrench() {
+        // check 'fr_FR' or simply 'fr'
+        return FRENCH.equals(LocaleHolder.getLocale()) || FRENCH.getLanguage().equals(getLanguage());
+    }
+}
diff --git a/src/main/generated-java/com/h2/demo/web/service/UserContextService.java b/src/main/generated-java/com/h2/demo/web/service/UserContextService.java
new file mode 100644
index 0000000..d4b0ce1
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/web/service/UserContextService.java
@@ -0,0 +1,44 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-jsf2-spring-conversation:src/main/java/services/UserContextService.p.vm.java
+ */
+package com.h2.demo.web.service;
+
+import java.util.List;
+
+import javax.inject.Named;
+import javax.inject.Singleton;
+
+import com.h2.demo.context.UserContext;
+
+/**
+ * Simple pass over to access static 'userContext' from EL.
+ * @see org.springframework.security.web.authentication.AnonymousAuthenticationFilter
+ */
+@Named
+@Singleton
+public class UserContextService {
+    public String getUsername() {
+        return UserContext.getUsername();
+    }
+
+    public boolean isAnonymousUser() {
+        return UserContext.ANONYMOUS_USER.equalsIgnoreCase(getUsername());
+    }
+
+    public boolean isLoggedIn() {
+        return !isAnonymousUser();
+    }
+
+    public List<String> getRoles() {
+        return UserContext.getRoles();
+    }
+
+    public boolean hasRole(String role) {
+        return UserContext.getRoles().contains(role);
+    }
+}
diff --git a/src/main/generated-java/com/h2/demo/web/util/DownloadUtil.java b/src/main/generated-java/com/h2/demo/web/util/DownloadUtil.java
new file mode 100644
index 0000000..2b21825
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/web/util/DownloadUtil.java
@@ -0,0 +1,31 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-jsf2-spring-conversation:src/main/java/util/DownloadUtil.p.vm.java
+ */
+package com.h2.demo.web.util;
+
+import javax.faces.context.ExternalContext;
+import javax.faces.context.FacesContext;
+
+public final class DownloadUtil {
+
+    private DownloadUtil() {
+    }
+
+    /**
+     * Set the http response header in order to please IE when downloading file over https.
+     * see http://stackoverflow.com/questions/1918840/downloading-an-excel-file-over-https-to-ie-from-a-j2ee-application
+     */
+    public static void forceResponseHeaderForDownload() {
+        FacesContext fc = FacesContext.getCurrentInstance();
+        ExternalContext ec = fc.getExternalContext();
+        ec.setResponseCharacterEncoding("UTF-8");
+        ec.setResponseHeader("Cache-Control", "no-store");
+        ec.setResponseHeader("Pragma", "private");
+        ec.setResponseHeader("Expires", "1");
+    }
+}
diff --git a/src/main/generated-java/com/h2/demo/web/util/ExceptionUtil.java b/src/main/generated-java/com/h2/demo/web/util/ExceptionUtil.java
new file mode 100644
index 0000000..60ff2c1
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/web/util/ExceptionUtil.java
@@ -0,0 +1,41 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-jsf2-spring-conversation:src/main/java/util/ExceptionUtil.p.vm.java
+ */
+package com.h2.demo.web.util;
+
+import javax.inject.Named;
+import javax.inject.Singleton;
+import javax.persistence.OptimisticLockException;
+
+@Named
+@Singleton
+public class ExceptionUtil {
+
+    /**
+     * Use it during development as an action to throw exceptions and thus verify that your
+     * error handling code is correct.
+     */
+    public void throwRuntimeException() {
+        throw new RuntimeException("Just testing RuntimeException from ExceptionUtil ...");
+    }
+
+    public void throwDataAccessException() {
+        throw new OptimisticLockException("Just testing OptimisticLockException from ExceptionUtil ...");
+    }
+
+    public static boolean isCausedBy(Throwable e, Class<?> cause) {
+        Throwable current = e;
+        while (current != null) {
+            if (cause.isAssignableFrom(current.getClass())) {
+                return true;
+            }
+            current = current.getCause();
+        }
+        return false;
+    }
+}
\ No newline at end of file
diff --git a/src/main/generated-java/com/h2/demo/web/util/LoginPageManager.java b/src/main/generated-java/com/h2/demo/web/util/LoginPageManager.java
new file mode 100644
index 0000000..881d1ee
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/web/util/LoginPageManager.java
@@ -0,0 +1,114 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-jsf2-spring-conversation:src/main/java/util/LoginPageManager.p.vm.java
+ */
+package com.h2.demo.web.util;
+
+import javax.faces.context.ExternalContext;
+import javax.faces.context.FacesContext;
+import javax.inject.Inject;
+import javax.inject.Named;
+import javax.servlet.http.HttpServletRequest;
+import javax.servlet.http.HttpServletResponse;
+
+import org.omnifaces.util.Faces;
+import org.springframework.context.ApplicationEventPublisher;
+import org.springframework.context.ApplicationEventPublisherAware;
+import org.springframework.security.authentication.AccountExpiredException;
+import org.springframework.security.authentication.AccountStatusException;
+import org.springframework.security.authentication.BadCredentialsException;
+import org.springframework.security.authentication.CredentialsExpiredException;
+import org.springframework.security.authentication.DisabledException;
+import org.springframework.security.authentication.LockedException;
+import org.springframework.security.authentication.event.InteractiveAuthenticationSuccessEvent;
+import org.springframework.security.core.Authentication;
+import org.springframework.security.core.AuthenticationException;
+import org.springframework.security.core.context.SecurityContext;
+import org.springframework.security.core.context.SecurityContextHolder;
+import org.springframework.security.core.userdetails.UsernameNotFoundException;
+import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;
+import org.springframework.security.web.authentication.session.SessionAuthenticationStrategy;
+import org.springframework.security.web.context.HttpRequestResponseHolder;
+import org.springframework.security.web.context.SecurityContextRepository;
+
+/**
+ * Manages the login page, implementing Spring Security login page with JSF
+ */
+@Named
+public class LoginPageManager implements ApplicationEventPublisherAware {
+
+    @Inject
+    private UsernamePasswordAuthenticationFilter usernamePasswordAuthenticationFilter;
+
+    @Inject
+    private SessionAuthenticationStrategy sessionAuthenticationStrategy;
+
+    @Inject
+    private SecurityContextRepository securityContextRepository;
+
+    @Inject
+    private MessageUtil messageUtil;
+
+    private ApplicationEventPublisher applicationEventPublisher;
+
+    public void setSessionExpired(String value) {
+        messageUtil.warning("session_expired");
+    }
+
+    public String getSessionExpired() {
+        return null;
+    }
+
+    @Override
+    public void setApplicationEventPublisher(ApplicationEventPublisher applicationEventPublisher) {
+        this.applicationEventPublisher = applicationEventPublisher;
+    }
+
+    public void doLogin() {
+        ExternalContext ctx = FacesContext.getCurrentInstance().getExternalContext();
+        HttpServletRequest request = (HttpServletRequest) ctx.getRequest();
+        HttpServletResponse response = (HttpServletResponse) ctx.getResponse();
+        HttpRequestResponseHolder holder = new HttpRequestResponseHolder(request, response);
+        SecurityContext securityContext = securityContextRepository.loadContext(holder);
+        SecurityContextHolder.setContext(securityContext);
+        try {
+            Authentication authResult = usernamePasswordAuthenticationFilter.attemptAuthentication(request, response);
+            if (authResult == null) {
+                messageUtil.error("security_error");
+                return;
+            }
+            sessionAuthenticationStrategy.onAuthentication(authResult, request, response);
+            // below : do the same thing as in AbstractAuthenticationProcessingFilter.successfulAuthentication(),
+            // except for the redirection to the login success URL that is managed by JSF
+            securityContext.setAuthentication(authResult);
+            usernamePasswordAuthenticationFilter.getRememberMeServices().loginSuccess(request, response, authResult);
+            if (applicationEventPublisher != null) {
+                applicationEventPublisher.publishEvent(new InteractiveAuthenticationSuccessEvent(authResult, getClass()));
+            }
+            // redirects to the home page
+            Faces.navigate("/home.faces?faces-redirect=true");
+        } catch (UsernameNotFoundException e) {
+            messageUtil.error("security_username_not_found");
+        } catch (DisabledException e) {
+            messageUtil.error("security_account_disabled");
+        } catch (LockedException e) {
+            messageUtil.error("security_account_locked");
+        } catch (AccountExpiredException e) {
+            messageUtil.error("security_account_expired");
+        } catch (CredentialsExpiredException e) {
+            messageUtil.error("security_account_credentials_expired");
+        } catch (AccountStatusException e) {
+            messageUtil.error("security_account_status_invalid");
+        } catch (BadCredentialsException e) {
+            messageUtil.error("security_bad_credentials");
+        } catch (AuthenticationException e) {
+            messageUtil.error("security_error");
+        } finally {
+            securityContextRepository.saveContext(securityContext, holder.getRequest(), holder.getResponse());
+        }
+    }
+}
diff --git a/src/main/generated-java/com/h2/demo/web/util/Message.java b/src/main/generated-java/com/h2/demo/web/util/Message.java
new file mode 100644
index 0000000..a61dc25
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/web/util/Message.java
@@ -0,0 +1,38 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-jsf2-spring-conversation:src/main/java/util/Message.p.vm.java
+ */
+package com.h2.demo.web.util;
+
+import javax.faces.application.FacesMessage;
+
+/**
+ * Integration _HACK_ : would be nice if jsf was providing the id...
+ * Wrap {@link FacesMessage} along with the id of the associated component.
+ */
+public class Message {
+
+    private String sourceId;
+    private FacesMessage facesMessage;
+
+    public Message(String sourceId, FacesMessage facesMessage) {
+        this.sourceId = sourceId;
+        this.facesMessage = facesMessage;
+    }
+
+    public String getSourceId() {
+        return sourceId;
+    }
+
+    public FacesMessage getFacesMessage() {
+        return facesMessage;
+    }
+
+    public String getSeverity() {
+        return MessageUtil.toCssFriendly(facesMessage.getSeverity());
+    }
+}
diff --git a/src/main/generated-java/com/h2/demo/web/util/MessageBundle.java b/src/main/generated-java/com/h2/demo/web/util/MessageBundle.java
new file mode 100644
index 0000000..0b6ea6b
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/web/util/MessageBundle.java
@@ -0,0 +1,41 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-jsf2-spring-conversation:src/main/java/util/MessageBundle.p.vm.java
+ */
+package com.h2.demo.web.util;
+
+import java.util.Enumeration;
+import java.util.ResourceBundle;
+
+import com.h2.demo.util.ResourcesUtil;
+
+/**
+ * This {@link ResourceBundle} is set in faces-config.xml under <code>msg</code> var.
+ * <p>
+ * Implementation uses Spring {@link MessageSource}.
+ * <p>
+ * From your JSF2 pages, you may use <code>#{msg.property_key}</code>.
+ * <p>
+ * _HACK_ as it is a tricky JSF/Spring integration point.
+ */
+public class MessageBundle extends ResourceBundle {
+
+    private ResourcesUtil resourcesUtil;
+
+    @Override
+    public Enumeration<String> getKeys() {
+        return null;
+    }
+
+    @Override
+    protected Object handleGetObject(String key) {
+        if (resourcesUtil == null) {
+            resourcesUtil = ResourcesUtil.getInstance();
+        }
+        return resourcesUtil.getProperty(key);
+    }
+}
\ No newline at end of file
diff --git a/src/main/generated-java/com/h2/demo/web/util/MessageUtil.java b/src/main/generated-java/com/h2/demo/web/util/MessageUtil.java
new file mode 100644
index 0000000..bb48f8a
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/web/util/MessageUtil.java
@@ -0,0 +1,134 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-jsf2-spring-conversation:src/main/java/util/MessageUtil.p.vm.java
+ */
+package com.h2.demo.web.util;
+
+import static javax.faces.application.FacesMessage.SEVERITY_ERROR;
+import static javax.faces.application.FacesMessage.SEVERITY_FATAL;
+import static javax.faces.application.FacesMessage.SEVERITY_INFO;
+import static javax.faces.application.FacesMessage.SEVERITY_WARN;
+
+import javax.faces.application.FacesMessage;
+import javax.faces.application.FacesMessage.Severity;
+import javax.faces.context.FacesContext;
+import javax.inject.Inject;
+import javax.inject.Named;
+import javax.inject.Singleton;
+
+import org.springframework.context.annotation.Lazy;
+
+import com.h2.demo.domain.Identifiable;
+import com.h2.demo.printer.support.TypeAwarePrinter;
+import com.h2.demo.util.ResourcesUtil;
+
+/**
+ * Convenient bean to create JSF info/warn/error messages.
+
+ * Business exceptions can be mapped to user friendly messages inside the {@link #error(Throwable)} method. 
+ */
+@Named
+@Singleton
+@Lazy(false)
+public class MessageUtil {
+    private static MessageUtil instance;
+
+    public static MessageUtil getInstance() {
+        return instance;
+    }
+
+    public static String toCssFriendly(Severity severity) {
+        if (severity.equals(SEVERITY_INFO)) {
+            return "info";
+        } else if (severity.equals(SEVERITY_WARN)) {
+            return "warn";
+        } else if (severity.equals(SEVERITY_ERROR)) {
+            return "error";
+        } else if (severity.equals(SEVERITY_FATAL)) {
+            return "fatal";
+        }
+
+        throw new IllegalStateException("Unexpected message severity: " + severity.toString());
+    }
+
+    @Inject
+    private ResourcesUtil resourcesUtil;
+    @Inject
+    private TypeAwarePrinter printer;
+
+    public MessageUtil() {
+        instance = this;
+    }
+
+    // -- info
+
+    public void info(String summaryKey, Object... args) {
+        addFacesMessageUsingKey(SEVERITY_INFO, summaryKey, args);
+    }
+
+    public void infoEntity(String summaryKey, Identifiable<?> entity) {
+        addFacesMessageUsingKey(SEVERITY_INFO, summaryKey, printer.print(entity));
+    }
+
+    public FacesMessage newInfo(String summaryKey, Object... args) {
+        return newFacesMessageUsingKey(SEVERITY_INFO, summaryKey, args);
+    }
+
+    // -- warning
+
+    public void warning(String summaryKey, Object... args) {
+        addFacesMessageUsingKey(SEVERITY_WARN, summaryKey, args);
+    }
+
+    public FacesMessage newWarning(String summaryKey, Object... args) {
+        return newFacesMessageUsingKey(SEVERITY_WARN, summaryKey, args);
+    }
+
+    // -- error
+
+    public void error(String summaryKey, Object... args) {
+        addFacesMessageUsingKey(SEVERITY_ERROR, summaryKey, args);
+    }
+
+    public FacesMessage newError(String summaryKey, Object... args) {
+        return newFacesMessageUsingKey(SEVERITY_ERROR, summaryKey, args);
+    }
+
+    // -- fatal
+
+    public void fatal(String summaryKey, Object... args) {
+        addFacesMessageUsingKey(SEVERITY_FATAL, summaryKey, args);
+    }
+
+    public FacesMessage newFatal(String summaryKey, Object... args) {
+        return newFacesMessageUsingKey(SEVERITY_FATAL, summaryKey, args);
+    }
+
+    private void addFacesMessage(FacesMessage fm) {
+        if (fm != null) {
+            FacesContext.getCurrentInstance().addMessage(null, fm);
+        }
+    }
+
+    private void addFacesMessageUsingKey(Severity severity, String summaryKey, Object arg) {
+        addFacesMessageUsingKey(severity, summaryKey, new Object[] { arg });
+    }
+
+    private void addFacesMessageUsingKey(Severity severity, String summaryKey, Object[] args) {
+        addFacesMessage(newFacesMessageUsingKey(severity, summaryKey, args));
+    }
+
+    private FacesMessage newFacesMessageUsingKey(Severity severity, String summaryKey, Object[] args) {
+        return newFacesMessageUsingText(severity, resourcesUtil.getProperty(summaryKey, args));
+    }
+
+    private FacesMessage newFacesMessageUsingText(Severity severity, String text) {
+        FacesMessage fm = new FacesMessage(text);
+        fm.setSeverity(severity);
+        return fm;
+    }
+}
\ No newline at end of file
diff --git a/src/main/generated-java/com/h2/demo/web/util/MessagesHelper.java b/src/main/generated-java/com/h2/demo/web/util/MessagesHelper.java
new file mode 100644
index 0000000..d2f659d
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/web/util/MessagesHelper.java
@@ -0,0 +1,185 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-jsf2-spring-conversation:src/main/java/util/MessagesHelper.p.vm.java
+ */
+package com.h2.demo.web.util;
+
+import static com.google.common.collect.Collections2.filter;
+import static com.google.common.collect.Collections2.transform;
+import static com.google.common.collect.Iterables.getFirst;
+import static com.google.common.collect.Iterables.toArray;
+import static com.google.common.collect.Lists.newArrayList;
+import static com.google.common.collect.Sets.newHashSet;
+import static java.util.Arrays.asList;
+import static java.util.Collections.reverseOrder;
+
+import java.util.Collection;
+import java.util.Collections;
+import java.util.Comparator;
+import java.util.Iterator;
+import java.util.List;
+
+import javax.faces.application.FacesMessage;
+import javax.faces.application.FacesMessage.Severity;
+import javax.faces.context.FacesContext;
+import javax.inject.Inject;
+import javax.inject.Named;
+import javax.inject.Singleton;
+
+import com.google.common.base.Function;
+import com.google.common.base.Predicate;
+import com.h2.demo.util.ResourcesUtil;
+
+/**
+ * Helper used from the <code>appcc:messages</code> composite component.
+ */
+@Named
+@Singleton
+public class MessagesHelper {
+
+    @Inject
+    protected ResourcesUtil resourcesUtil;
+
+    public String getMaxSeverityNonGlobalMessages() {
+        Severity maxSeverity = getFirst(getSeveritiesNonGlobalMessages(), FacesMessage.SEVERITY_INFO);
+        return MessageUtil.toCssFriendly(maxSeverity);
+    }
+
+    public String getCssFriendlySeverity(Severity severity) {
+        return MessageUtil.toCssFriendly(severity);
+    }
+
+    /**
+     * @return sorted list of severities in descending order
+     */
+    public List<Severity> getSeveritiesGlobalMessages() {
+        return getSeverities(asList(getGlobalMessages()));
+    }
+
+    /**
+     * @return sorted list of severities in descending order
+     */
+    public List<Severity> getSeveritiesNonGlobalMessages() {
+        return getSeverities(asList(getNonGlobalMessages()));
+    }
+
+    /**
+     * @return descending sorted and distinct list of severities
+     */
+    protected List<Severity> getSeverities(Collection<Message> messages) {
+        Collection<Severity> severities = transform(messages, messageFunction);
+        List<Severity> sortedSeverities = newArrayList(newHashSet(severities));
+        Collections.sort(sortedSeverities, reverseOrder(severityComparator));
+        return sortedSeverities;
+    }
+
+    private static Function<Message, Severity> messageFunction = new Function<Message, Severity>() {
+        @Override
+        public Severity apply(Message input) {
+            return input.getFacesMessage().getSeverity();
+        }
+    };
+
+    private static Comparator<Severity> severityComparator = new Comparator<Severity>() {
+        @Override
+        public int compare(Severity s1, Severity s2) {
+            return Integer.valueOf(s1.getOrdinal()).compareTo(s2.getOrdinal());
+        }
+    };
+
+    public Message[] getGlobalMessages() {
+        List<Message> res = newArrayList();
+        Iterator<FacesMessage> msgs = FacesContext.getCurrentInstance().getMessages(null);
+        while (msgs.hasNext()) {
+            res.add(new Message(null, msgs.next()));
+        }
+        return toArray(res, Message.class);
+    }
+
+    public Message[] getGlobalMessages(Severity severity) {
+        Collection<Message> res = filter(asList(getGlobalMessages()), newSeverityPredicate(severity));
+        return toArray(res, Message.class);
+    }
+
+    public Message getSingleGlobalMessage(Severity severity) {
+        Message[] messages = getGlobalMessages(severity);
+        return messages != null && messages.length == 1 ? messages[0] : null;
+    }
+
+    private Predicate<Message> newSeverityPredicate(final Severity severity) {
+        return new Predicate<Message>() {
+            @Override
+            public boolean apply(Message input) {
+                return severity == input.getFacesMessage().getSeverity();
+            }
+        };
+    }
+
+    public Message[] getNonGlobalMessages() {
+        List<Message> res = newArrayList();
+
+        Iterator<String> ids = FacesContext.getCurrentInstance().getClientIdsWithMessages();
+        while (ids.hasNext()) {
+            String clientId = ids.next();
+            if (clientId != null && !clientId.equals("null")) { /* the 'null' string is pretty disturbing */
+                Iterator<FacesMessage> msgs = FacesContext.getCurrentInstance().getMessages(clientId);
+                while (msgs.hasNext()) {
+                    res.add(new Message(clientId, msgs.next()));
+                }
+            }
+        }
+
+        return toArray(res, Message.class);
+    }
+
+    public boolean hasGlobalMessages() {
+        return FacesContext.getCurrentInstance().getMessages(null).hasNext();
+    }
+
+    public boolean hasMultipleGlobalMessages(Severity severity) {
+        return getGlobalMessages(severity).length > 1;
+    }
+
+    public boolean hasSingleGlobalMessage(Severity severity) {
+        return getGlobalMessages(severity).length == 1;
+    }
+
+    public boolean hasNonGlobalMessages() {
+        Iterator<String> ids = FacesContext.getCurrentInstance().getClientIdsWithMessages();
+        while (ids.hasNext()) {
+            String clientId = ids.next();
+            if (clientId != null && !clientId.equals("null")) { /* the 'null' string is pretty disturbing */
+                return true;
+            }
+        }
+        return false;
+    }
+
+    public boolean hasNoMessages() {
+        return !(hasGlobalMessages() || hasNonGlobalMessages());
+    }
+
+    public boolean hasOnlyGlobalMessages() {
+        return hasGlobalMessages() && !hasNonGlobalMessages();
+    }
+
+    public String getNonGlobalMessagesIntro() {
+        return resourcesUtil.getPluralableProperty("form_error_status", nonGlobalMessagesCount());
+    }
+
+    public int nonGlobalMessagesCount() {
+        int count = 0;
+        Iterator<String> ids = FacesContext.getCurrentInstance().getClientIdsWithMessages();
+        while (ids.hasNext()) {
+            String clientId = ids.next();
+            if (clientId != null && !clientId.equals("null")) { /* the 'null' string is pretty disturbing */
+                count += FacesContext.getCurrentInstance().getMessageList(clientId).size();
+            }
+        }
+        return count;
+    }
+}
diff --git a/src/main/generated-java/com/h2/demo/web/util/PrimeFacesUtil.java b/src/main/generated-java/com/h2/demo/web/util/PrimeFacesUtil.java
new file mode 100644
index 0000000..25ed58c
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/web/util/PrimeFacesUtil.java
@@ -0,0 +1,39 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-jsf2-spring-conversation:src/main/java/util/PrimeFacesUtil.p.vm.java
+ */
+package com.h2.demo.web.util;
+
+import javax.servlet.http.HttpServletRequest;
+
+import org.primefaces.context.RequestContext;
+
+/**
+ * Use this bean to execute JavaScript on client side.
+ */
+public final class PrimeFacesUtil {
+
+    private PrimeFacesUtil() {
+    }
+
+    /**
+     * Tells the client to update the search results region with the passed text.
+     */
+    public static void updateSearchResultsRegion(String text, int nbResults) {
+        if (RequestContext.getCurrentInstance() != null) {
+            RequestContext.getCurrentInstance().execute("APP.updateSearchResultsRegion(\"" + text + "\"," + nbResults + ")");
+        }
+    }
+
+    public static boolean isAjax(HttpServletRequest request) {
+        return "XMLHttpRequest".equals(request.getHeader("X-Requested-With"));
+    }
+
+    public static void forceClose() {
+        RequestContext.getCurrentInstance().execute("APP.menu.forceClose()");
+    }
+}
diff --git a/src/main/generated-java/com/h2/demo/web/util/TabBean.java b/src/main/generated-java/com/h2/demo/web/util/TabBean.java
new file mode 100644
index 0000000..a944f71
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/web/util/TabBean.java
@@ -0,0 +1,28 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-jsf2-spring-conversation:src/main/java/util/TabBean.p.vm.java
+ */
+package com.h2.demo.web.util;
+
+import java.io.Serializable;
+
+/**
+ * Tracks the <code>p:tabView</code> active index.
+ */
+public class TabBean implements Serializable {
+    private static final long serialVersionUID = 1L;
+
+    private int activeIndex = 0;
+
+    public void setActiveIndex(int activeIndex) {
+        this.activeIndex = activeIndex;
+    }
+
+    public int getActiveIndex() {
+        return activeIndex;
+    }
+}
diff --git a/src/main/generated-java/com/h2/demo/web/validation/ConditionalValidatorUtil.java b/src/main/generated-java/com/h2/demo/web/validation/ConditionalValidatorUtil.java
new file mode 100644
index 0000000..5456216
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/web/validation/ConditionalValidatorUtil.java
@@ -0,0 +1,48 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-jsf2-spring-conversation:src/main/java/validation/ConditionalValidatorUtil.p.vm.java
+ */
+package com.h2.demo.web.validation;
+
+import static com.google.common.collect.Lists.newArrayList;
+
+import java.util.List;
+import java.util.Map;
+
+import javax.faces.context.FacesContext;
+
+/**
+ * Central place for conditional validation policy.
+ */
+public final class ConditionalValidatorUtil {
+    private static final List<String> actionsRequiringValidation = newArrayList( //
+            "form:saveAndClose", // close button present in main form (see saveButton.xml)
+            "form:save", // button present in main form (see saveButton.xml)
+            "form:askForSaveDialogYes", // button present in ask for save dialog
+            "form:ok" // button present in sub-edit (see saveButton.xml)
+
+    );
+
+    private ConditionalValidatorUtil() {
+    }
+
+    /**
+     * Depending on which action was triggered, decides if validation should take place or not.
+     * 
+     * @return true if validation should be performed, false otherwise.
+     */
+    public static boolean doValidation(FacesContext context) {
+        Map<String, String[]> requestParameterValuesMap = context.getExternalContext().getRequestParameterValuesMap();
+
+        for (String action : actionsRequiringValidation) {
+            if (requestParameterValuesMap.containsKey(action)) {
+                return true;
+            }
+        }
+        return false;
+    }
+}
diff --git a/src/main/generated-java/com/h2/demo/web/validation/JpaUniqueValidator.java b/src/main/generated-java/com/h2/demo/web/validation/JpaUniqueValidator.java
new file mode 100644
index 0000000..1adf044
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/web/validation/JpaUniqueValidator.java
@@ -0,0 +1,74 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-jsf2-spring-conversation:src/main/java/validation/JpaUniqueValidator.p.vm.java
+ */
+package com.h2.demo.web.validation;
+
+import static javax.faces.application.FacesMessage.SEVERITY_ERROR;
+import static org.apache.commons.lang.StringUtils.isBlank;
+import static org.springframework.beans.factory.config.BeanDefinition.SCOPE_PROTOTYPE;
+
+import javax.faces.application.FacesMessage;
+import javax.faces.component.UIComponent;
+import javax.faces.context.FacesContext;
+import javax.faces.validator.FacesValidator;
+import javax.faces.validator.Validator;
+import javax.faces.validator.ValidatorException;
+import javax.inject.Inject;
+import javax.inject.Named;
+
+import org.springframework.context.annotation.Scope;
+
+import com.h2.demo.domain.Identifiable;
+import com.h2.demo.repository.support.JpaUniqueUtil;
+import com.h2.demo.util.ResourcesUtil;
+
+@Named
+@Scope(SCOPE_PROTOTYPE)
+@FacesValidator("jpaUniqueValidator")
+public class JpaUniqueValidator implements Validator {
+
+    @Inject
+    private JpaUniqueUtil jpaUniqueUtil;
+    @Inject
+    private ResourcesUtil resourcesUtil;
+
+    @Override
+    public void validate(FacesContext context, UIComponent component, Object value) throws ValidatorException {
+        if (ConditionalValidatorUtil.doValidation(context)) {
+            if (entity == null && isBlank(property)) {
+                return;
+            }
+
+            String errorCode = jpaUniqueUtil.validateSimpleUnique(entity, property, value);
+            if (errorCode != null) {
+                FacesMessage fm = new FacesMessage(resourcesUtil.getProperty(errorCode));
+                fm.setSeverity(SEVERITY_ERROR);
+                throw new ValidatorException(fm);
+            }
+        }
+    }
+
+    private Identifiable<?> entity;
+    private String property;
+
+    public void setEntity(Identifiable<?> entity) {
+        this.entity = entity;
+    }
+
+    public Identifiable<?> getEntity() {
+        return entity;
+    }
+
+    public void setProperty(String property) {
+        this.property = property;
+    }
+
+    public String getProperty() {
+        return property;
+    }
+}
diff --git a/src/main/generated-java/com/h2/demo/web/validation/LenientBeanValidator.java b/src/main/generated-java/com/h2/demo/web/validation/LenientBeanValidator.java
new file mode 100644
index 0000000..7181330
--- /dev/null
+++ b/src/main/generated-java/com/h2/demo/web/validation/LenientBeanValidator.java
@@ -0,0 +1,35 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-jsf2-spring-conversation:src/main/java/validation/LenientBeanValidator.p.vm.java
+ */
+package com.h2.demo.web.validation;
+
+import static org.springframework.beans.factory.config.BeanDefinition.SCOPE_PROTOTYPE;
+
+import javax.faces.component.UIComponent;
+import javax.faces.context.FacesContext;
+import javax.faces.validator.BeanValidator;
+import javax.inject.Named;
+
+import org.springframework.context.annotation.Scope;
+
+/**
+ * Disables validation for certain actions in order to let the user navigate to sub view
+ * without loosing (potentially invalid) data entered in input fields.
+ *
+ * _HACK_ This setting is tricky. It circumvents a JSF limitation.
+ */
+@Named
+@Scope(SCOPE_PROTOTYPE)
+public class LenientBeanValidator extends BeanValidator {
+    @Override
+    public void validate(FacesContext context, UIComponent component, Object value) {
+        if (ConditionalValidatorUtil.doValidation(context)) {
+            super.validate(context, component, value);
+        }
+    }
+}
diff --git a/src/main/resources/META-INF/spring-orm.xml b/src/main/resources/META-INF/spring-orm.xml
new file mode 100644
index 0000000..eecfeb4
--- /dev/null
+++ b/src/main/resources/META-INF/spring-orm.xml
@@ -0,0 +1,69 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!--
+ ! (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ ! Source code generated by Celerio, a Jaxio product
+ ! Want to purchase Celerio ? email us at info@jaxio.com
+ ! Follow us on twitter: @springfuse
+ ! Documentation: http://www.jaxio.com/documentation/celerio/
+ ! Template pack-backend-jpa:src/main/resources/META-INF/spring-orm.p.vm.xml
+-->
+<entity-mappings xmlns="http://java.sun.com/xml/ns/persistence/orm" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+    xsi:schemaLocation="http://java.sun.com/xml/ns/persistence/orm http://java.sun.com/xml/ns/persistence/orm_2_0.xsd" version="2.0">
+	<description><![CDATA[
+		NOTE: You may override the JPA annotations of your Java entities in this file.
+		This is also the standard place to declare your named queries.
+
+		********************************************
+		* ABOUT NAMED QUERIES and SearchParameters *
+		********************************************
+
+		Named query integration is almost transparent, it is done using
+		the generated services and searchParameters.
+
+		To execute a named query
+		========================
+		* Define a named query in this file (some example are provided) or via an annotation in your Entity class.
+
+		* Pass the named query's name and the parameters, if any, to the searchParameters:
+			searchParameters.setNamedQuery("myNamedQuery");
+			searchParameters.addParameter("paramName", paramValue);
+
+		* Use the xxxRepository that handles the Xxx entity that the named query should return.
+			 For example:
+				xxxRepository.find(searchParameters) or
+				xxxRepository.find(xxxModel, searchParameters)
+
+				xxxRepository.findCount(searchParameters)
+				xxxRepository.findCount(xxxModel, searchParameters)
+
+		* When you define your named query the parameters will be replaced with either
+			- the value of xxxModel.get<parameterName>()
+			- the value returned by searchParameters.getParameters().get("<parameterName>")
+
+		Dynamic order By support:
+		=========================
+		If the hint 'dynamic' is present and set to 'true'
+		the query will be dynamically modified to take into account the orderBy
+		information carried by the searchParameters.
+		This is extremely usefuf when rendering sortable data to the view.
+		NOTE: When dynamic is true YOU MUST declare a 'query' hint having exactly the same value as the query tag.
+
+		Dynamic Select count support:
+		=============================
+		Note that if you call xxxRepository.findCount(searchParameters) and that your
+		named query starts with "from" instead of "select", the "select count(*) "
+		will be dynamically appended so it returns what you expect.
+	]]></description>
+	<entity metadata-complete="false" class="com.h2.demo.domain.Account">
+		<!-- basic example with dynamic ordering support -->
+		<named-query name="Account.selectAll">
+			<query>from com.h2.demo.domain.Account</query>
+			<hint name="dynamic" value="true" />
+			<hint name="query" value="from com.h2.demo.domain.Account" />
+			<hint name="org.hibernate.cacheable" value="true" />
+		</named-query>
+		<named-native-query name="Account.selectAll.native" result-class="com.h2.demo.domain.Account">
+			<query>select * from ACCOUNT</query>
+		</named-native-query>
+	</entity>
+</entity-mappings>
\ No newline at end of file
diff --git a/src/main/resources/META-INF/spring-persistence.xml b/src/main/resources/META-INF/spring-persistence.xml
new file mode 100644
index 0000000..108fa55
--- /dev/null
+++ b/src/main/resources/META-INF/spring-persistence.xml
@@ -0,0 +1,29 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!--
+ ! (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ ! Source code generated by Celerio, a Jaxio product
+ ! Want to purchase Celerio ? email us at info@jaxio.com
+ ! Follow us on twitter: @springfuse
+ ! Documentation: http://www.jaxio.com/documentation/celerio/
+ ! Template pack-backend-jpa:src/main/resources/META-INF/spring-persistence.p.vm.xml
+-->
+<persistence xmlns="http://java.sun.com/xml/ns/persistence" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+	xsi:schemaLocation="http://java.sun.com/xml/ns/persistence http://java.sun.com/xml/ns/persistence/persistence_2_0.xsd" version="2.0">
+	<persistence-unit name="h2projectPU" transaction-type="RESOURCE_LOCAL">
+		<description><![CDATA[
+			Main persistence unit.
+			It is named spring-persistence.xml to prevent JBoss from picking it automatically, which would create a mess as we use Spring.
+			With JBoss/Spring it is required to list the classes explicitly.
+		]]></description>
+		<mapping-file>META-INF/spring-orm.xml</mapping-file>
+		<class>com.h2.demo.domain.Account</class>
+		<class>com.h2.demo.domain.Address</class>
+		<class>com.h2.demo.domain.AuditLog</class>
+		<class>com.h2.demo.domain.Book</class>
+		<class>com.h2.demo.domain.Document</class>
+		<class>com.h2.demo.domain.Legacy</class>
+		<class>com.h2.demo.domain.MoreTypesDemo</class>
+		<class>com.h2.demo.domain.Role</class>
+		<class>com.h2.demo.domain.SavedSearch</class>
+	</persistence-unit>
+</persistence>
\ No newline at end of file
diff --git a/src/main/resources/ValidationMessages.properties b/src/main/resources/ValidationMessages.properties
new file mode 100644
index 0000000..7f4a541
--- /dev/null
+++ b/src/main/resources/ValidationMessages.properties
@@ -0,0 +1,21 @@
+#
+# (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+# Source code generated by Celerio, a Jaxio product
+# Want to purchase Celerio ? email us at info@jaxio.com
+# Follow us on twitter: @springfuse
+# Documentation: http://www.jaxio.com/documentation/celerio/
+# Template pack-backend-jpa:src/main/resources/ValidationMessages.p.vm.properties
+#
+## IMPORTANT NOTE: This file MUST be located at the classpath's root in order to be picked up by hibernate validator
+
+##  Default project specific constraints localization
+com.h2.demo.validation.CheckCase.message=should be {value}
+com.h2.demo.validation.FixedLength.message=should be {length} characters
+com.h2.demo.validation.JpaUnique.message=is already used
+
+## required as we override french version
+org.hibernate.validator.constraints.Email.message=Invalid email address
+
+## {0} is replaced with the Bean Validation message and {1} is replaced with the JSF component label.
+javax.faces.validator.BeanValidator.MESSAGE={1}: {0}
+javax.faces.validator.BeanValidator.MESSAGE_detail={0}
diff --git a/src/main/resources/ValidationMessages_en.properties b/src/main/resources/ValidationMessages_en.properties
new file mode 100644
index 0000000..b6a578d
--- /dev/null
+++ b/src/main/resources/ValidationMessages_en.properties
@@ -0,0 +1,10 @@
+#
+# (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+# Source code generated by Celerio, a Jaxio product
+# Want to purchase Celerio ? email us at info@jaxio.com
+# Follow us on twitter: @springfuse
+# Documentation: http://www.jaxio.com/documentation/celerio/
+# Template pack-backend-jpa:src/main/resources/ValidationMessages_en.p.vm.properties
+#
+## This file is intentionally left empty (see ValidationMessage_en.properties in hibernate validator's jar)
+## IMPORTANT NOTE: This file MUST be located at the classpath's root in order to be picked up by hibernate validator
diff --git a/src/main/resources/ValidationMessages_fr.properties b/src/main/resources/ValidationMessages_fr.properties
new file mode 100644
index 0000000..9ef473a
--- /dev/null
+++ b/src/main/resources/ValidationMessages_fr.properties
@@ -0,0 +1,21 @@
+#
+# (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+# Source code generated by Celerio, a Jaxio product
+# Want to purchase Celerio ? email us at info@jaxio.com
+# Follow us on twitter: @springfuse
+# Documentation: http://www.jaxio.com/documentation/celerio/
+# Template pack-backend-jpa:src/main/resources/ValidationMessages_fr.p.vm.properties
+#
+## IMPORTANT NOTE: This file MUST be located at the classpath's root in order to be picked up by hibernate validator
+
+## French locale project specific constraints localization
+com.h2.demo.validation.CheckCase.message=devrait \u00EAtre {value}
+com.h2.demo.validation.FixedLength.message=doit avoir une taille de {length}
+com.h2.demo.validation.JpaUnique.message=est d\u00E9j\u00E0� utilis\u00E9
+
+## Corrige une typo (Address avec 2 d...) pr�sente dans le fichier de ressources hibernate validator
+org.hibernate.validator.constraints.Email.message=Adresse email mal form\u00E9e
+
+## {0} is replaced with the Bean Validation message and {1} is replaced with the JSF component label.
+javax.faces.validator.BeanValidator.MESSAGE={1}: {0}
+javax.faces.validator.BeanValidator.MESSAGE_detail={0}
diff --git a/src/main/resources/app-version.properties b/src/main/resources/app-version.properties
new file mode 100644
index 0000000..f686701
--- /dev/null
+++ b/src/main/resources/app-version.properties
@@ -0,0 +1,11 @@
+#
+# (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+# Source code generated by Celerio, a Jaxio product
+# Want to purchase Celerio ? email us at info@jaxio.com
+# Follow us on twitter: @springfuse
+# Documentation: http://www.jaxio.com/documentation/celerio/
+# Template pack-backend-jpa:src/main/resources/app-version.p.vm.properties
+#
+
+build.version=@application.version@
+build.svnrevision=@buildNumber@
diff --git a/src/main/resources/database.properties b/src/main/resources/database.properties
new file mode 100644
index 0000000..77e2897
--- /dev/null
+++ b/src/main/resources/database.properties
@@ -0,0 +1,17 @@
+#
+# (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+# Source code generated by Celerio, a Jaxio product
+# Want to purchase Celerio ? email us at info@jaxio.com
+# Follow us on twitter: @springfuse
+# Documentation: http://www.jaxio.com/documentation/celerio/
+# Template pack-backend-jpa:src/main/resources/database.p.vm.properties
+#
+
+#----------------------
+# DATABASE PROPERTIES
+#----------------------
+
+jdbc.driver=@jdbc.driver@
+jdbc.url=@jdbc.url@
+jdbc.user=@jdbc.user@
+jdbc.password=@jdbc.password@
diff --git a/src/main/resources/ehcache-distributed.xml b/src/main/resources/ehcache-distributed.xml
new file mode 100644
index 0000000..25adb1e
--- /dev/null
+++ b/src/main/resources/ehcache-distributed.xml
@@ -0,0 +1,123 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!--
+ ! (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ ! Source code generated by Celerio, a Jaxio product
+ ! Want to purchase Celerio ? email us at info@jaxio.com
+ ! Follow us on twitter: @springfuse
+ ! Documentation: http://www.jaxio.com/documentation/celerio/
+ ! Template pack-backend-jpa:src/main/resources/ehcache-distributed.p.vm.xml
+-->
+<ehcache>
+	<!-- see ehcache/ehcache.xml for local caching -->
+
+	<!-- Sets the path to the directory where cache .data files are created.
+
+		If the path is a Java System Property it is replaced by
+		its value in the running VM.
+
+		The following properties are translated:
+		user.home - User's home directory
+		user.dir - User's current working directory
+		java.io.tmpdir - Default temp file path -->
+
+	<diskStore path="java.io.tmpdir" />
+
+	<!--
+		for automatic peer discovery see http://ehcache.sourceforge.net/EhcacheUserGuide.html#id.s20.2.1
+		for manual peer discovery see  http://ehcache.sourceforge.net/EhcacheUserGuide.html#id.s20.2.2
+
+		!! please note that timeToLive has a specific meaning with multicast adresses
+	-->
+	<cacheManagerPeerProviderFactory
+		class="net.sf.ehcache.distribution.RMICacheManagerPeerProviderFactory"
+		properties="peerDiscovery=automatic, multicastGroupAddress=230.0.0.1, multicastGroupPort=4446, timeToLive=1" />
+
+	<cacheManagerPeerListenerFactory class="net.sf.ehcache.distribution.RMICacheManagerPeerListenerFactory" />
+
+	<!--
+		Default Cache configuration. These will applied to caches programmatically created through
+		the CacheManager.
+
+		The following attributes are required for defaultCache:
+
+		maxInMemory	   - Sets the maximum number of objects that will be created in memory
+		eternal		   - Sets whether elements are eternal. If eternal,  timeouts are ignored and the element
+		is never expired.
+		timeToIdleSeconds - Sets the time to idle for an element before it expires.
+		i.e. The maximum amount of time between accesses before an element expires
+		Is only used if the element is not eternal.
+		Optional attribute. A value of 0 means that an Element can idle for infinity
+		timeToLiveSeconds - Sets the time to live for an element before it expires.
+		i.e. The maximum time between creation time and when an element expires.
+		Is only used if the element is not eternal.
+		Optional attribute. A value of 0 means that and Element can live for infinity
+		overflowToDisk	- Sets whether elements can overflow to disk when the in-memory cache
+		has reached the maxInMemory limit.
+	-->
+
+	<defaultCache
+		maxElementsInMemory="20000"
+		eternal="false"
+		timeToIdleSeconds="6000"
+		timeToLiveSeconds="6000"
+		overflowToDisk="false"
+		memoryStoreEvictionPolicy="LFU">
+	</defaultCache>
+
+	<cache  name="org.hibernate.cache.StandardQueryCache"
+		maxElementsInMemory="10000"
+		eternal="false"
+		timeToIdleSeconds="86400"
+		timeToLiveSeconds="86400"
+		overflowToDisk="false"
+		memoryStoreEvictionPolicy="LFU">
+		<cacheEventListenerFactory
+			class="net.sf.ehcache.distribution.RMICacheReplicatorFactory"
+			properties="replicateAsynchronously=true,replicatePuts=false,replicateUpdates=true,replicateUpdatesViaCopy=false,replicateRemovals=true" />
+	</cache>
+
+	<!-- mandatory if you want to distribute the query cache -->
+	<cache  name="org.hibernate.cache.UpdateTimestampsCache"
+		maxElementsInMemory="400000"
+		eternal="true"
+		overflowToDisk="false"
+		memoryStoreEvictionPolicy="LFU">
+		<!-- please note the mandatory replicateUpdatesViaCopy=true -->
+		<cacheEventListenerFactory
+			class="net.sf.ehcache.distribution.RMICacheReplicatorFactory"
+			properties="replicateAsynchronously=true,replicatePuts=true,replicateUpdates=true,replicateUpdatesViaCopy=true,replicateRemovals=true" />
+	</cache>
+
+	<!--
+		You can override cache configuration given a cache name the following way:
+
+		!! If you choose to distribute a specific entity please remember to distribute also the collection that contains such entities too !!
+
+		The following cache may be used
+
+		# hibernate related
+		org.hibernate.cache.internal.StandardQueryCache
+		org.hibernate.cache.spi.UpdateTimestampsCache
+
+		# database related
+		com.h2.demo.domain.Account
+		com.h2.demo.domain.Account.roles
+
+		com.h2.demo.domain.Address
+
+		com.h2.demo.domain.AuditLog
+
+		com.h2.demo.domain.Book
+
+		com.h2.demo.domain.Document
+
+		com.h2.demo.domain.Legacy
+
+		com.h2.demo.domain.MoreTypesDemo
+
+		com.h2.demo.domain.Role
+
+		com.h2.demo.domain.SavedSearch
+
+	-->
+</ehcache>
diff --git a/src/main/resources/ehcache.xml b/src/main/resources/ehcache.xml
new file mode 100644
index 0000000..bb47480
--- /dev/null
+++ b/src/main/resources/ehcache.xml
@@ -0,0 +1,91 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!--
+ ! (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ ! Source code generated by Celerio, a Jaxio product
+ ! Want to purchase Celerio ? email us at info@jaxio.com
+ ! Follow us on twitter: @springfuse
+ ! Documentation: http://www.jaxio.com/documentation/celerio/
+ ! Template pack-backend-jpa:src/main/resources/ehcache.p.vm.xml
+-->
+<ehcache>
+	<!-- see cache/ehcache-distributed.xml for hibernate distributed caching -->
+
+	<!-- Sets the path to the directory where cache .data files are created.
+
+		If the path is a Java System Property it is replaced by
+		its value in the running VM.
+
+		The following properties are translated:
+		user.home - User's home directory
+		user.dir - User's current working directory
+		java.io.tmpdir - Default temp file path -->
+	<diskStore path="java.io.tmpdir" />
+
+	<!--Default Cache configuration. These will applied to caches programmatically created through
+		the CacheManager.
+
+		The following attributes are required for defaultCache:
+
+		maxInMemory	   - Sets the maximum number of objects that will be created in memory
+		eternal		   - Sets whether elements are eternal. If eternal,  timeouts are ignored and the element
+		is never expired.
+		timeToIdleSeconds - Sets the time to idle for an element before it expires.
+		i.e. The maximum amount of time between accesses before an element expires
+		Is only used if the element is not eternal.
+		Optional attribute. A value of 0 means that an Element can idle for infinity
+		timeToLiveSeconds - Sets the time to live for an element before it expires.
+		i.e. The maximum time between creation time and when an element expires.
+		Is only used if the element is not eternal.
+		Optional attribute. A value of 0 means that and Element can live for infinity
+		overflowToDisk	- Sets whether elements can overflow to disk when the in-memory cache
+		has reached the maxInMemory limit.
+
+	-->
+	<defaultCache maxElementsInMemory="2000" eternal="false"
+		timeToIdleSeconds="6000" timeToLiveSeconds="6000"
+		overflowToDisk="false" memoryStoreEvictionPolicy="LFU">
+	</defaultCache>
+
+	<cache name="org.hibernate.cache.internal.StandardQueryCache"
+		maxElementsInMemory="10000" eternal="false" timeToIdleSeconds="86400"
+		timeToLiveSeconds="86400" overflowToDisk="false"
+		memoryStoreEvictionPolicy="LFU">
+	</cache>
+
+	<cache name="org.hibernate.cache.spi.UpdateTimestampsCache"
+		maxElementsInMemory="400000" eternal="true" overflowToDisk="false"
+		memoryStoreEvictionPolicy="LFU">
+	</cache>
+
+	<!--
+
+		You can override cache configuration given a cache name the following way:
+
+		The following cache may be used
+
+		# hibernate related
+		org.hibernate.cache.internal.StandardQueryCache
+		org.hibernate.cache.spi.UpdateTimestampsCache
+
+		# database related
+		com.h2.demo.domain.Account
+		com.h2.demo.domain.Account.roles
+
+		com.h2.demo.domain.Address
+
+		com.h2.demo.domain.AuditLog
+
+		com.h2.demo.domain.Book
+
+		com.h2.demo.domain.Document
+
+		com.h2.demo.domain.Legacy
+
+		com.h2.demo.domain.MoreTypesDemo
+
+		com.h2.demo.domain.Role
+
+		com.h2.demo.domain.SavedSearch
+
+	-->
+</ehcache>
diff --git a/src/main/resources/hibernate.properties b/src/main/resources/hibernate.properties
new file mode 100644
index 0000000..0ab25b3
--- /dev/null
+++ b/src/main/resources/hibernate.properties
@@ -0,0 +1,49 @@
+#
+# (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+# Source code generated by Celerio, a Jaxio product
+# Want to purchase Celerio ? email us at info@jaxio.com
+# Follow us on twitter: @springfuse
+# Documentation: http://www.jaxio.com/documentation/celerio/
+# Template pack-backend-jpa:src/main/resources/hibernate.p.vm.properties
+#
+
+#-----------------------
+# HIBERNATE PROPERTIES
+#-----------------------
+
+hibernate.dialect=@hibernate.dialect@
+hibernate.connection.useUnicode=true
+hibernate.connection.charSet=UTF-8
+
+# 2d level cache
+hibernate.cache.use_query_cache=@hibernate.use.query.cache@
+hibernate.cache.use_second_level_cache=@hibernate.use.second.level.cache@
+hibernate.cache.provider_class=org.hibernate.cache.EhCacheProvider
+hibernate.cache.region.factory_class=org.hibernate.cache.ehcache.EhCacheRegionFactory
+hibernate.cache.provider_configuration_file_resource_path=@hibernate.ehcache.configuration.file@
+
+# search
+hibernate.search.default.directory_provider=ram
+#hibernate.search.default.indexBase=target
+#hibernate.search.default.directory_provider=filesystem
+hibernate.search.worker.execution=async
+hibernate.search.worker.thread_pool.size=3
+
+# connection management
+hibernate.connection.release_mode=after_transaction
+
+# misc
+hibernate.bytecode.use_reflection_optimizer=true
+hibernate.jdbc.use_scrollable_resultset=false
+hibernate.jdbc.use_streams_for_binary=true
+hibernate.jdbc.fetch_size=300
+hibernate.jdbc.batch_size=50
+
+# logging debug information
+hibernate.show_sql=@hibernate.show.sql@
+hibernate.format_sql=@hibernate.format.sql@
+hibernate.generate_statistics=@hibernate.generate_statistics@
+hibernate.use_sql_comments=@hibernate.use_sql_comments@
+
+# If needed, please uncomment and set it properly
+# hibernate.default_schema=
\ No newline at end of file
diff --git a/src/main/resources/localization/application.xml b/src/main/resources/localization/application.xml
new file mode 100644
index 0000000..8e0e678
--- /dev/null
+++ b/src/main/resources/localization/application.xml
@@ -0,0 +1,13 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!--
+ ! (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ ! Source code generated by Celerio, a Jaxio product
+ ! Want to purchase Celerio ? email us at info@jaxio.com
+ ! Follow us on twitter: @springfuse
+ ! Documentation: http://www.jaxio.com/documentation/celerio/
+ ! Template pack-backend-jpa:src/main/resources/localization/application.p.vm.xml
+-->
+<!DOCTYPE properties SYSTEM "http://java.sun.com/dtd/properties.dtd">
+<properties>
+	<comment>Add your application specific properties in this file.</comment>
+</properties>
\ No newline at end of file
diff --git a/src/main/resources/localization/application_fr.xml b/src/main/resources/localization/application_fr.xml
new file mode 100644
index 0000000..f193c2e
--- /dev/null
+++ b/src/main/resources/localization/application_fr.xml
@@ -0,0 +1,13 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!--
+ ! (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ ! Source code generated by Celerio, a Jaxio product
+ ! Want to purchase Celerio ? email us at info@jaxio.com
+ ! Follow us on twitter: @springfuse
+ ! Documentation: http://www.jaxio.com/documentation/celerio/
+ ! Template pack-backend-jpa:src/main/resources/localization/application_fr.p.vm.xml
+-->
+<!DOCTYPE properties SYSTEM "http://java.sun.com/dtd/properties.dtd">
+<properties>
+	<comment>Add your application specific properties for the french locale in this file.</comment>
+</properties>
\ No newline at end of file
diff --git a/src/main/resources/localization/domain/Account.xml b/src/main/resources/localization/domain/Account.xml
new file mode 100644
index 0000000..ddf25b3
--- /dev/null
+++ b/src/main/resources/localization/domain/Account.xml
@@ -0,0 +1,48 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!--
+ ! (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ ! Source code generated by Celerio, a Jaxio product
+ ! Want to purchase Celerio ? email us at info@jaxio.com
+ ! Follow us on twitter: @springfuse
+ ! Documentation: http://www.jaxio.com/documentation/celerio/
+ ! Template pack-backend-jpa:src/main/resources/localization/domain/domain.e.vm.xml
+-->
+<!DOCTYPE properties SYSTEM "http://java.sun.com/dtd/properties.dtd">
+<properties>
+	<comment>Domain resources for Account</comment>
+
+	<entry key="account">Account</entry>
+	<entry key="account_search">Search Account</entry>
+	<entry key="account_create">Create Account</entry>
+	<entry key="account_edit">Edit {0}</entry>
+	<entry key="account_view">View {0}</entry>
+
+	<!-- attributes -->
+	<entry key="account_id">Id</entry>
+	<entry key="account_login">Login</entry>
+	<entry key="account_password">Password</entry>
+	<entry key="account_email">Email</entry>
+	<entry key="account_isEnabled">Is Enabled?</entry>
+	<entry key="account_civility">Civility</entry>
+	<entry key="account_firstName">First Name</entry>
+	<entry key="account_lastName">Last Name</entry>
+	<entry key="account_birthDate">Birth Date</entry>
+	<entry key="account_description">Description</entry>
+	<entry key="account_addressId">Address Id</entry>
+	<entry key="account_creationDate">Creation Date</entry>
+	<entry key="account_creationAuthor">Creation Author</entry>
+	<entry key="account_lastModificationDate">Last Modification Date</entry>
+	<entry key="account_lastModificationAuthor">Last Modification Author</entry>
+	<entry key="account_version">Version</entry>
+
+	<!-- x-to-one -->
+	<entry key="account_address">Address</entry>
+
+	<!-- many-to-many -->
+	<entry key="account_roles">Roles</entry>
+
+	<!-- uniques -->
+	<entry key="account_login_already_exists">Login already exists</entry>
+	<entry key="account_email_already_exists">Email already exists</entry>
+	<entry key="account_composite_unique_constraint_error">A composite unique constraint has failed on Account</entry>
+</properties>
\ No newline at end of file
diff --git a/src/main/resources/localization/domain/Account_fr.xml b/src/main/resources/localization/domain/Account_fr.xml
new file mode 100644
index 0000000..5a21d22
--- /dev/null
+++ b/src/main/resources/localization/domain/Account_fr.xml
@@ -0,0 +1,48 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!--
+ ! (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ ! Source code generated by Celerio, a Jaxio product
+ ! Want to purchase Celerio ? email us at info@jaxio.com
+ ! Follow us on twitter: @springfuse
+ ! Documentation: http://www.jaxio.com/documentation/celerio/
+ ! Template pack-backend-jpa:src/main/resources/localization/domain/domain_fr.e.vm.xml
+-->
+<!DOCTYPE properties SYSTEM "http://java.sun.com/dtd/properties.dtd">
+<properties>
+	<comment>Domain resources for Account for the french locale</comment>
+
+	<entry key="account">Account</entry>
+	<entry key="account_search">Recherche de Account</entry>
+	<entry key="account_create">Création de Account</entry>
+	<entry key="account_edit">Édition de {0}</entry>
+	<entry key="account_view">Affichage de {0}</entry>
+
+	<!-- attributes -->
+	<entry key="account_id">Id</entry>
+	<entry key="account_login">Login</entry>
+	<entry key="account_password">Password</entry>
+	<entry key="account_email">Email</entry>
+	<entry key="account_isEnabled">Is Enabled?</entry>
+	<entry key="account_civility">Civility</entry>
+	<entry key="account_firstName">First Name</entry>
+	<entry key="account_lastName">Last Name</entry>
+	<entry key="account_birthDate">Birth Date</entry>
+	<entry key="account_description">Description</entry>
+	<entry key="account_addressId">Address Id</entry>
+	<entry key="account_creationDate">Creation Date</entry>
+	<entry key="account_creationAuthor">Creation Author</entry>
+	<entry key="account_lastModificationDate">Last Modification Date</entry>
+	<entry key="account_lastModificationAuthor">Last Modification Author</entry>
+	<entry key="account_version">Version</entry>
+
+	<!-- x-to-one -->
+	<entry key="account_address">Address</entry>
+
+	<!-- many-to-many -->
+	<entry key="account_roles">Roles</entry>
+
+	<!-- uniques -->
+	<entry key="account_login_already_exists">Login existe déjà</entry>
+	<entry key="account_email_already_exists">Email existe déjà</entry>
+	<entry key="account_composite_unique_constraint_error">Une contrainte d'unicité multiple n'est pas respectée sur Account</entry>
+</properties>
\ No newline at end of file
diff --git a/src/main/resources/localization/domain/Address.xml b/src/main/resources/localization/domain/Address.xml
new file mode 100644
index 0000000..425d7ad
--- /dev/null
+++ b/src/main/resources/localization/domain/Address.xml
@@ -0,0 +1,28 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!--
+ ! (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ ! Source code generated by Celerio, a Jaxio product
+ ! Want to purchase Celerio ? email us at info@jaxio.com
+ ! Follow us on twitter: @springfuse
+ ! Documentation: http://www.jaxio.com/documentation/celerio/
+ ! Template pack-backend-jpa:src/main/resources/localization/domain/domain.e.vm.xml
+-->
+<!DOCTYPE properties SYSTEM "http://java.sun.com/dtd/properties.dtd">
+<properties>
+	<comment>Domain resources for Address</comment>
+
+	<entry key="address">Address</entry>
+	<entry key="address_search">Search Address</entry>
+	<entry key="address_create">Create Address</entry>
+	<entry key="address_edit">Edit {0}</entry>
+	<entry key="address_view">View {0}</entry>
+
+	<!-- attributes -->
+	<entry key="address_id">Id</entry>
+	<entry key="address_streetName">Street Name</entry>
+	<entry key="address_city">City</entry>
+	<entry key="address_version">Version</entry>
+
+	<!-- uniques -->
+	<entry key="address_composite_unique_constraint_error">A composite unique constraint has failed on Address</entry>
+</properties>
\ No newline at end of file
diff --git a/src/main/resources/localization/domain/Address_fr.xml b/src/main/resources/localization/domain/Address_fr.xml
new file mode 100644
index 0000000..6ec5228
--- /dev/null
+++ b/src/main/resources/localization/domain/Address_fr.xml
@@ -0,0 +1,28 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!--
+ ! (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ ! Source code generated by Celerio, a Jaxio product
+ ! Want to purchase Celerio ? email us at info@jaxio.com
+ ! Follow us on twitter: @springfuse
+ ! Documentation: http://www.jaxio.com/documentation/celerio/
+ ! Template pack-backend-jpa:src/main/resources/localization/domain/domain_fr.e.vm.xml
+-->
+<!DOCTYPE properties SYSTEM "http://java.sun.com/dtd/properties.dtd">
+<properties>
+	<comment>Domain resources for Address for the french locale</comment>
+
+	<entry key="address">Address</entry>
+	<entry key="address_search">Recherche de Address</entry>
+	<entry key="address_create">Création de Address</entry>
+	<entry key="address_edit">Édition de {0}</entry>
+	<entry key="address_view">Affichage de {0}</entry>
+
+	<!-- attributes -->
+	<entry key="address_id">Id</entry>
+	<entry key="address_streetName">Street Name</entry>
+	<entry key="address_city">City</entry>
+	<entry key="address_version">Version</entry>
+
+	<!-- uniques -->
+	<entry key="address_composite_unique_constraint_error">Une contrainte d'unicité multiple n'est pas respectée sur Address</entry>
+</properties>
\ No newline at end of file
diff --git a/src/main/resources/localization/domain/AuditLog.xml b/src/main/resources/localization/domain/AuditLog.xml
new file mode 100644
index 0000000..29232b2
--- /dev/null
+++ b/src/main/resources/localization/domain/AuditLog.xml
@@ -0,0 +1,31 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!--
+ ! (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ ! Source code generated by Celerio, a Jaxio product
+ ! Want to purchase Celerio ? email us at info@jaxio.com
+ ! Follow us on twitter: @springfuse
+ ! Documentation: http://www.jaxio.com/documentation/celerio/
+ ! Template pack-backend-jpa:src/main/resources/localization/domain/domain.e.vm.xml
+-->
+<!DOCTYPE properties SYSTEM "http://java.sun.com/dtd/properties.dtd">
+<properties>
+	<comment>Domain resources for AuditLog</comment>
+
+	<entry key="auditLog">Audit Log</entry>
+	<entry key="auditLog_search">Search Audit Log</entry>
+	<entry key="auditLog_create">Create Audit Log</entry>
+	<entry key="auditLog_edit">Edit {0}</entry>
+	<entry key="auditLog_view">View {0}</entry>
+
+	<!-- attributes -->
+	<entry key="auditLog_id">Id</entry>
+	<entry key="auditLog_author">Author</entry>
+	<entry key="auditLog_event">Event</entry>
+	<entry key="auditLog_eventDate">Event Date</entry>
+	<entry key="auditLog_stringAttribute1">String Attribute1</entry>
+	<entry key="auditLog_stringAttribute2">String Attribute2</entry>
+	<entry key="auditLog_stringAttribute3">String Attribute3</entry>
+
+	<!-- uniques -->
+	<entry key="auditLog_composite_unique_constraint_error">A composite unique constraint has failed on Audit Log</entry>
+</properties>
\ No newline at end of file
diff --git a/src/main/resources/localization/domain/AuditLog_fr.xml b/src/main/resources/localization/domain/AuditLog_fr.xml
new file mode 100644
index 0000000..3d44662
--- /dev/null
+++ b/src/main/resources/localization/domain/AuditLog_fr.xml
@@ -0,0 +1,31 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!--
+ ! (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ ! Source code generated by Celerio, a Jaxio product
+ ! Want to purchase Celerio ? email us at info@jaxio.com
+ ! Follow us on twitter: @springfuse
+ ! Documentation: http://www.jaxio.com/documentation/celerio/
+ ! Template pack-backend-jpa:src/main/resources/localization/domain/domain_fr.e.vm.xml
+-->
+<!DOCTYPE properties SYSTEM "http://java.sun.com/dtd/properties.dtd">
+<properties>
+	<comment>Domain resources for AuditLog for the french locale</comment>
+
+	<entry key="auditLog">Audit Log</entry>
+	<entry key="auditLog_search">Recherche de Audit Log</entry>
+	<entry key="auditLog_create">Création de Audit Log</entry>
+	<entry key="auditLog_edit">Édition de {0}</entry>
+	<entry key="auditLog_view">Affichage de {0}</entry>
+
+	<!-- attributes -->
+	<entry key="auditLog_id">Id</entry>
+	<entry key="auditLog_author">Author</entry>
+	<entry key="auditLog_event">Event</entry>
+	<entry key="auditLog_eventDate">Event Date</entry>
+	<entry key="auditLog_stringAttribute1">String Attribute1</entry>
+	<entry key="auditLog_stringAttribute2">String Attribute2</entry>
+	<entry key="auditLog_stringAttribute3">String Attribute3</entry>
+
+	<!-- uniques -->
+	<entry key="auditLog_composite_unique_constraint_error">Une contrainte d'unicité multiple n'est pas respectée sur Audit Log</entry>
+</properties>
\ No newline at end of file
diff --git a/src/main/resources/localization/domain/Book.xml b/src/main/resources/localization/domain/Book.xml
new file mode 100644
index 0000000..c77d1f6
--- /dev/null
+++ b/src/main/resources/localization/domain/Book.xml
@@ -0,0 +1,32 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!--
+ ! (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ ! Source code generated by Celerio, a Jaxio product
+ ! Want to purchase Celerio ? email us at info@jaxio.com
+ ! Follow us on twitter: @springfuse
+ ! Documentation: http://www.jaxio.com/documentation/celerio/
+ ! Template pack-backend-jpa:src/main/resources/localization/domain/domain.e.vm.xml
+-->
+<!DOCTYPE properties SYSTEM "http://java.sun.com/dtd/properties.dtd">
+<properties>
+	<comment>Domain resources for Book</comment>
+
+	<entry key="book">Book</entry>
+	<entry key="book_search">Search Book</entry>
+	<entry key="book_create">Create Book</entry>
+	<entry key="book_edit">Edit {0}</entry>
+	<entry key="book_view">View {0}</entry>
+
+	<!-- attributes -->
+	<entry key="book_id">Id</entry>
+	<entry key="book_accountId">Account Id</entry>
+	<entry key="book_title">Title</entry>
+	<entry key="book_numberOfPages">Number Of Pages</entry>
+	<entry key="book_version">Version</entry>
+
+	<!-- x-to-one -->
+	<entry key="book_account">Account</entry>
+
+	<!-- uniques -->
+	<entry key="book_composite_unique_constraint_error">A composite unique constraint has failed on Book</entry>
+</properties>
\ No newline at end of file
diff --git a/src/main/resources/localization/domain/Book_fr.xml b/src/main/resources/localization/domain/Book_fr.xml
new file mode 100644
index 0000000..c76e183
--- /dev/null
+++ b/src/main/resources/localization/domain/Book_fr.xml
@@ -0,0 +1,32 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!--
+ ! (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ ! Source code generated by Celerio, a Jaxio product
+ ! Want to purchase Celerio ? email us at info@jaxio.com
+ ! Follow us on twitter: @springfuse
+ ! Documentation: http://www.jaxio.com/documentation/celerio/
+ ! Template pack-backend-jpa:src/main/resources/localization/domain/domain_fr.e.vm.xml
+-->
+<!DOCTYPE properties SYSTEM "http://java.sun.com/dtd/properties.dtd">
+<properties>
+	<comment>Domain resources for Book for the french locale</comment>
+
+	<entry key="book">Book</entry>
+	<entry key="book_search">Recherche de Book</entry>
+	<entry key="book_create">Création de Book</entry>
+	<entry key="book_edit">Édition de {0}</entry>
+	<entry key="book_view">Affichage de {0}</entry>
+
+	<!-- attributes -->
+	<entry key="book_id">Id</entry>
+	<entry key="book_accountId">Account Id</entry>
+	<entry key="book_title">Title</entry>
+	<entry key="book_numberOfPages">Number Of Pages</entry>
+	<entry key="book_version">Version</entry>
+
+	<!-- x-to-one -->
+	<entry key="book_account">Account</entry>
+
+	<!-- uniques -->
+	<entry key="book_composite_unique_constraint_error">Une contrainte d'unicité multiple n'est pas respectée sur Book</entry>
+</properties>
\ No newline at end of file
diff --git a/src/main/resources/localization/domain/Document.xml b/src/main/resources/localization/domain/Document.xml
new file mode 100644
index 0000000..51e4f90
--- /dev/null
+++ b/src/main/resources/localization/domain/Document.xml
@@ -0,0 +1,34 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!--
+ ! (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ ! Source code generated by Celerio, a Jaxio product
+ ! Want to purchase Celerio ? email us at info@jaxio.com
+ ! Follow us on twitter: @springfuse
+ ! Documentation: http://www.jaxio.com/documentation/celerio/
+ ! Template pack-backend-jpa:src/main/resources/localization/domain/domain.e.vm.xml
+-->
+<!DOCTYPE properties SYSTEM "http://java.sun.com/dtd/properties.dtd">
+<properties>
+	<comment>Domain resources for Document</comment>
+
+	<entry key="document">Document</entry>
+	<entry key="document_search">Search Document</entry>
+	<entry key="document_create">Create Document</entry>
+	<entry key="document_edit">Edit {0}</entry>
+	<entry key="document_view">View {0}</entry>
+
+	<!-- attributes -->
+	<entry key="document_id">Id</entry>
+	<entry key="document_accountId">Account Id</entry>
+	<entry key="document_documentBinary">Document Binary</entry>
+	<entry key="document_documentFileName">Document File Name</entry>
+	<entry key="document_documentContentType">Document Content Type</entry>
+	<entry key="document_documentSize">Document Size</entry>
+	<entry key="document_version">Version</entry>
+
+	<!-- x-to-one -->
+	<entry key="document_account">Account</entry>
+
+	<!-- uniques -->
+	<entry key="document_composite_unique_constraint_error">A composite unique constraint has failed on Document</entry>
+</properties>
\ No newline at end of file
diff --git a/src/main/resources/localization/domain/Document_fr.xml b/src/main/resources/localization/domain/Document_fr.xml
new file mode 100644
index 0000000..3f8cfaa
--- /dev/null
+++ b/src/main/resources/localization/domain/Document_fr.xml
@@ -0,0 +1,34 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!--
+ ! (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ ! Source code generated by Celerio, a Jaxio product
+ ! Want to purchase Celerio ? email us at info@jaxio.com
+ ! Follow us on twitter: @springfuse
+ ! Documentation: http://www.jaxio.com/documentation/celerio/
+ ! Template pack-backend-jpa:src/main/resources/localization/domain/domain_fr.e.vm.xml
+-->
+<!DOCTYPE properties SYSTEM "http://java.sun.com/dtd/properties.dtd">
+<properties>
+	<comment>Domain resources for Document for the french locale</comment>
+
+	<entry key="document">Document</entry>
+	<entry key="document_search">Recherche de Document</entry>
+	<entry key="document_create">Création de Document</entry>
+	<entry key="document_edit">Édition de {0}</entry>
+	<entry key="document_view">Affichage de {0}</entry>
+
+	<!-- attributes -->
+	<entry key="document_id">Id</entry>
+	<entry key="document_accountId">Account Id</entry>
+	<entry key="document_documentBinary">Document Binary</entry>
+	<entry key="document_documentFileName">Document File Name</entry>
+	<entry key="document_documentContentType">Document Content Type</entry>
+	<entry key="document_documentSize">Document Size</entry>
+	<entry key="document_version">Version</entry>
+
+	<!-- x-to-one -->
+	<entry key="document_account">Account</entry>
+
+	<!-- uniques -->
+	<entry key="document_composite_unique_constraint_error">Une contrainte d'unicité multiple n'est pas respectée sur Document</entry>
+</properties>
\ No newline at end of file
diff --git a/src/main/resources/localization/domain/Legacy.xml b/src/main/resources/localization/domain/Legacy.xml
new file mode 100644
index 0000000..f487ecf
--- /dev/null
+++ b/src/main/resources/localization/domain/Legacy.xml
@@ -0,0 +1,29 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!--
+ ! (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ ! Source code generated by Celerio, a Jaxio product
+ ! Want to purchase Celerio ? email us at info@jaxio.com
+ ! Follow us on twitter: @springfuse
+ ! Documentation: http://www.jaxio.com/documentation/celerio/
+ ! Template pack-backend-jpa:src/main/resources/localization/domain/domain.e.vm.xml
+-->
+<!DOCTYPE properties SYSTEM "http://java.sun.com/dtd/properties.dtd">
+<properties>
+	<comment>Domain resources for Legacy</comment>
+
+	<entry key="legacy">Legacy</entry>
+	<entry key="legacy_search">Search Legacy</entry>
+	<entry key="legacy_create">Create Legacy</entry>
+	<entry key="legacy_edit">Edit {0}</entry>
+	<entry key="legacy_view">View {0}</entry>
+
+	<!-- attributes -->
+	<entry key="legacy_name">Name</entry>
+	<entry key="legacy_code">Code</entry>
+	<entry key="legacy_dept">Dept</entry>
+	<entry key="legacy_extraInfo">Extra Info</entry>
+
+	<!-- uniques -->
+	<entry key="legacy_primary_key_8">Legacy primary_key_8 constraint violation</entry>
+	<entry key="legacy_composite_unique_constraint_error">A composite unique constraint has failed on Legacy</entry>
+</properties>
\ No newline at end of file
diff --git a/src/main/resources/localization/domain/Legacy_fr.xml b/src/main/resources/localization/domain/Legacy_fr.xml
new file mode 100644
index 0000000..42a6ebf
--- /dev/null
+++ b/src/main/resources/localization/domain/Legacy_fr.xml
@@ -0,0 +1,29 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!--
+ ! (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ ! Source code generated by Celerio, a Jaxio product
+ ! Want to purchase Celerio ? email us at info@jaxio.com
+ ! Follow us on twitter: @springfuse
+ ! Documentation: http://www.jaxio.com/documentation/celerio/
+ ! Template pack-backend-jpa:src/main/resources/localization/domain/domain_fr.e.vm.xml
+-->
+<!DOCTYPE properties SYSTEM "http://java.sun.com/dtd/properties.dtd">
+<properties>
+	<comment>Domain resources for Legacy for the french locale</comment>
+
+	<entry key="legacy">Legacy</entry>
+	<entry key="legacy_search">Recherche de Legacy</entry>
+	<entry key="legacy_create">Création de Legacy</entry>
+	<entry key="legacy_edit">Édition de {0}</entry>
+	<entry key="legacy_view">Affichage de {0}</entry>
+
+	<!-- attributes -->
+	<entry key="legacy_name">Name</entry>
+	<entry key="legacy_code">Code</entry>
+	<entry key="legacy_dept">Dept</entry>
+	<entry key="legacy_extraInfo">Extra Info</entry>
+
+	<!-- uniques -->
+	<entry key="legacy_primary_key_8">Legacy violation de contrainte unique primary_key_8 </entry>
+	<entry key="legacy_composite_unique_constraint_error">Une contrainte d'unicité multiple n'est pas respectée sur Legacy</entry>
+</properties>
\ No newline at end of file
diff --git a/src/main/resources/localization/domain/MoreTypesDemo.xml b/src/main/resources/localization/domain/MoreTypesDemo.xml
new file mode 100644
index 0000000..1699dad
--- /dev/null
+++ b/src/main/resources/localization/domain/MoreTypesDemo.xml
@@ -0,0 +1,36 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!--
+ ! (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ ! Source code generated by Celerio, a Jaxio product
+ ! Want to purchase Celerio ? email us at info@jaxio.com
+ ! Follow us on twitter: @springfuse
+ ! Documentation: http://www.jaxio.com/documentation/celerio/
+ ! Template pack-backend-jpa:src/main/resources/localization/domain/domain.e.vm.xml
+-->
+<!DOCTYPE properties SYSTEM "http://java.sun.com/dtd/properties.dtd">
+<properties>
+	<comment>Domain resources for MoreTypesDemo</comment>
+
+	<entry key="moreTypesDemo">More Types Demo</entry>
+	<entry key="moreTypesDemo_search">Search More Types Demo</entry>
+	<entry key="moreTypesDemo_create">Create More Types Demo</entry>
+	<entry key="moreTypesDemo_edit">Edit {0}</entry>
+	<entry key="moreTypesDemo_view">View {0}</entry>
+
+	<!-- attributes -->
+	<entry key="moreTypesDemo_id">Id</entry>
+	<entry key="moreTypesDemo_numberInt">Number Int</entry>
+	<entry key="moreTypesDemo_numberLong">Number Long</entry>
+	<entry key="moreTypesDemo_numberDouble">Number Double</entry>
+	<entry key="moreTypesDemo_numberFloat">Number Float</entry>
+	<entry key="moreTypesDemo_numberBigInteger">Number Big Integer</entry>
+	<entry key="moreTypesDemo_numberBigDecimal">Number Big Decimal</entry>
+	<entry key="moreTypesDemo_dateJavaTemporalDate">Date Java Temporal Date</entry>
+	<entry key="moreTypesDemo_dateJavaTemporalTimestamp">Date Java Temporal Timestamp</entry>
+	<entry key="moreTypesDemo_dateJoda">Date Joda</entry>
+	<entry key="moreTypesDemo_dateTimeJoda">Date Time Joda</entry>
+	<entry key="moreTypesDemo_version">Version</entry>
+
+	<!-- uniques -->
+	<entry key="moreTypesDemo_composite_unique_constraint_error">A composite unique constraint has failed on More Types Demo</entry>
+</properties>
\ No newline at end of file
diff --git a/src/main/resources/localization/domain/MoreTypesDemo_fr.xml b/src/main/resources/localization/domain/MoreTypesDemo_fr.xml
new file mode 100644
index 0000000..198b69a
--- /dev/null
+++ b/src/main/resources/localization/domain/MoreTypesDemo_fr.xml
@@ -0,0 +1,36 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!--
+ ! (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ ! Source code generated by Celerio, a Jaxio product
+ ! Want to purchase Celerio ? email us at info@jaxio.com
+ ! Follow us on twitter: @springfuse
+ ! Documentation: http://www.jaxio.com/documentation/celerio/
+ ! Template pack-backend-jpa:src/main/resources/localization/domain/domain_fr.e.vm.xml
+-->
+<!DOCTYPE properties SYSTEM "http://java.sun.com/dtd/properties.dtd">
+<properties>
+	<comment>Domain resources for MoreTypesDemo for the french locale</comment>
+
+	<entry key="moreTypesDemo">More Types Demo</entry>
+	<entry key="moreTypesDemo_search">Recherche de More Types Demo</entry>
+	<entry key="moreTypesDemo_create">Création de More Types Demo</entry>
+	<entry key="moreTypesDemo_edit">Édition de {0}</entry>
+	<entry key="moreTypesDemo_view">Affichage de {0}</entry>
+
+	<!-- attributes -->
+	<entry key="moreTypesDemo_id">Id</entry>
+	<entry key="moreTypesDemo_numberInt">Number Int</entry>
+	<entry key="moreTypesDemo_numberLong">Number Long</entry>
+	<entry key="moreTypesDemo_numberDouble">Number Double</entry>
+	<entry key="moreTypesDemo_numberFloat">Number Float</entry>
+	<entry key="moreTypesDemo_numberBigInteger">Number Big Integer</entry>
+	<entry key="moreTypesDemo_numberBigDecimal">Number Big Decimal</entry>
+	<entry key="moreTypesDemo_dateJavaTemporalDate">Date Java Temporal Date</entry>
+	<entry key="moreTypesDemo_dateJavaTemporalTimestamp">Date Java Temporal Timestamp</entry>
+	<entry key="moreTypesDemo_dateJoda">Date Joda</entry>
+	<entry key="moreTypesDemo_dateTimeJoda">Date Time Joda</entry>
+	<entry key="moreTypesDemo_version">Version</entry>
+
+	<!-- uniques -->
+	<entry key="moreTypesDemo_composite_unique_constraint_error">Une contrainte d'unicité multiple n'est pas respectée sur More Types Demo</entry>
+</properties>
\ No newline at end of file
diff --git a/src/main/resources/localization/domain/README.txt b/src/main/resources/localization/domain/README.txt
new file mode 100644
index 0000000..e8432c8
--- /dev/null
+++ b/src/main/resources/localization/domain/README.txt
@@ -0,0 +1,12 @@
+#
+# (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+# Source code generated by Celerio, a Jaxio product
+# Want to purchase Celerio ? email us at info@jaxio.com
+# Follow us on twitter: @springfuse
+# Documentation: http://www.jaxio.com/documentation/celerio/
+# Template pack-backend-jpa:src/main/resources/localization/domain/README.p.vm.txt
+#
+
+
+This folder contains Resources file for entities.
+Note that each base file must be declared in the Spring configuration MessageSourceConfiguration Java class.
diff --git a/src/main/resources/localization/domain/Role.xml b/src/main/resources/localization/domain/Role.xml
new file mode 100644
index 0000000..09d1acc
--- /dev/null
+++ b/src/main/resources/localization/domain/Role.xml
@@ -0,0 +1,27 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!--
+ ! (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ ! Source code generated by Celerio, a Jaxio product
+ ! Want to purchase Celerio ? email us at info@jaxio.com
+ ! Follow us on twitter: @springfuse
+ ! Documentation: http://www.jaxio.com/documentation/celerio/
+ ! Template pack-backend-jpa:src/main/resources/localization/domain/domain.e.vm.xml
+-->
+<!DOCTYPE properties SYSTEM "http://java.sun.com/dtd/properties.dtd">
+<properties>
+	<comment>Domain resources for Role</comment>
+
+	<entry key="role">Role</entry>
+	<entry key="role_search">Search Role</entry>
+	<entry key="role_create">Create Role</entry>
+	<entry key="role_edit">Edit {0}</entry>
+	<entry key="role_view">View {0}</entry>
+
+	<!-- attributes -->
+	<entry key="role_id">Id</entry>
+	<entry key="role_roleName">Role Name</entry>
+
+	<!-- uniques -->
+	<entry key="role_roleName_already_exists">Role Name already exists</entry>
+	<entry key="role_composite_unique_constraint_error">A composite unique constraint has failed on Role</entry>
+</properties>
\ No newline at end of file
diff --git a/src/main/resources/localization/domain/Role_fr.xml b/src/main/resources/localization/domain/Role_fr.xml
new file mode 100644
index 0000000..7e1d01c
--- /dev/null
+++ b/src/main/resources/localization/domain/Role_fr.xml
@@ -0,0 +1,27 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!--
+ ! (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ ! Source code generated by Celerio, a Jaxio product
+ ! Want to purchase Celerio ? email us at info@jaxio.com
+ ! Follow us on twitter: @springfuse
+ ! Documentation: http://www.jaxio.com/documentation/celerio/
+ ! Template pack-backend-jpa:src/main/resources/localization/domain/domain_fr.e.vm.xml
+-->
+<!DOCTYPE properties SYSTEM "http://java.sun.com/dtd/properties.dtd">
+<properties>
+	<comment>Domain resources for Role for the french locale</comment>
+
+	<entry key="role">Role</entry>
+	<entry key="role_search">Recherche de Role</entry>
+	<entry key="role_create">Création de Role</entry>
+	<entry key="role_edit">Édition de {0}</entry>
+	<entry key="role_view">Affichage de {0}</entry>
+
+	<!-- attributes -->
+	<entry key="role_id">Id</entry>
+	<entry key="role_roleName">Role Name</entry>
+
+	<!-- uniques -->
+	<entry key="role_roleName_already_exists">Role Name existe déjà</entry>
+	<entry key="role_composite_unique_constraint_error">Une contrainte d'unicité multiple n'est pas respectée sur Role</entry>
+</properties>
\ No newline at end of file
diff --git a/src/main/resources/localization/domain/SavedSearch.xml b/src/main/resources/localization/domain/SavedSearch.xml
new file mode 100644
index 0000000..28d8a1b
--- /dev/null
+++ b/src/main/resources/localization/domain/SavedSearch.xml
@@ -0,0 +1,32 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!--
+ ! (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ ! Source code generated by Celerio, a Jaxio product
+ ! Want to purchase Celerio ? email us at info@jaxio.com
+ ! Follow us on twitter: @springfuse
+ ! Documentation: http://www.jaxio.com/documentation/celerio/
+ ! Template pack-backend-jpa:src/main/resources/localization/domain/domain.e.vm.xml
+-->
+<!DOCTYPE properties SYSTEM "http://java.sun.com/dtd/properties.dtd">
+<properties>
+	<comment>Domain resources for SavedSearch</comment>
+
+	<entry key="savedSearch">Saved Search</entry>
+	<entry key="savedSearch_search">Search Saved Search</entry>
+	<entry key="savedSearch_create">Create Saved Search</entry>
+	<entry key="savedSearch_edit">Edit {0}</entry>
+	<entry key="savedSearch_view">View {0}</entry>
+
+	<!-- attributes -->
+	<entry key="savedSearch_id">Id</entry>
+	<entry key="savedSearch_name">Name</entry>
+	<entry key="savedSearch_formClassname">Form Classname</entry>
+	<entry key="savedSearch_formContent">Form Content</entry>
+	<entry key="savedSearch_accountId">Account Id</entry>
+
+	<!-- x-to-one -->
+	<entry key="savedSearch_account">Account</entry>
+
+	<!-- uniques -->
+	<entry key="savedSearch_composite_unique_constraint_error">A composite unique constraint has failed on Saved Search</entry>
+</properties>
\ No newline at end of file
diff --git a/src/main/resources/localization/domain/SavedSearch_fr.xml b/src/main/resources/localization/domain/SavedSearch_fr.xml
new file mode 100644
index 0000000..76ade1e
--- /dev/null
+++ b/src/main/resources/localization/domain/SavedSearch_fr.xml
@@ -0,0 +1,32 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!--
+ ! (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ ! Source code generated by Celerio, a Jaxio product
+ ! Want to purchase Celerio ? email us at info@jaxio.com
+ ! Follow us on twitter: @springfuse
+ ! Documentation: http://www.jaxio.com/documentation/celerio/
+ ! Template pack-backend-jpa:src/main/resources/localization/domain/domain_fr.e.vm.xml
+-->
+<!DOCTYPE properties SYSTEM "http://java.sun.com/dtd/properties.dtd">
+<properties>
+	<comment>Domain resources for SavedSearch for the french locale</comment>
+
+	<entry key="savedSearch">Saved Search</entry>
+	<entry key="savedSearch_search">Recherche de Saved Search</entry>
+	<entry key="savedSearch_create">Création de Saved Search</entry>
+	<entry key="savedSearch_edit">Édition de {0}</entry>
+	<entry key="savedSearch_view">Affichage de {0}</entry>
+
+	<!-- attributes -->
+	<entry key="savedSearch_id">Id</entry>
+	<entry key="savedSearch_name">Name</entry>
+	<entry key="savedSearch_formClassname">Form Classname</entry>
+	<entry key="savedSearch_formContent">Form Content</entry>
+	<entry key="savedSearch_accountId">Account Id</entry>
+
+	<!-- x-to-one -->
+	<entry key="savedSearch_account">Account</entry>
+
+	<!-- uniques -->
+	<entry key="savedSearch_composite_unique_constraint_error">Une contrainte d'unicité multiple n'est pas respectée sur Saved Search</entry>
+</properties>
\ No newline at end of file
diff --git a/src/main/resources/localization/messages.properties b/src/main/resources/localization/messages.properties
new file mode 100644
index 0000000..3b28c09
--- /dev/null
+++ b/src/main/resources/localization/messages.properties
@@ -0,0 +1,162 @@
+#
+# (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+# Source code generated by Celerio, a Jaxio product
+# Want to purchase Celerio ? email us at info@jaxio.com
+# Follow us on twitter: @springfuse
+# Documentation: http://www.jaxio.com/documentation/celerio/
+# Template pack-jsf2-spring-conversation:src/main/resources/localization/messages.p.vm.properties
+#
+
+application_name=@application.name@
+main_title=Application @application.name@
+welcome=Welcome
+you_are_connected_to=Congratulations {0}, you are logged into {1}
+
+home=Home
+yes=Yes
+no=No
+
+form_error_status_1=There is one error in the information you submitted
+form_error_status_n=There are {0} errors in the information you submitted
+
+label_required_suffix=*
+
+null_value=Not Set
+null_file_value=No file
+
+# display boolean
+boolean_true=Yes
+boolean_false=No
+
+dialog_ask_for_save=Do you want to save your modifications ?
+dialog_delete_confirm=Do you really want to delete this item?
+dialog_remove_confirm=Do you really want to remove this item?
+
+login=Login
+logout=Logout
+actions=Actions
+
+# Icons
+icon_add=Add {0}
+icon_delete=Delete {0}
+icon_remove=Remove {0}
+icon_select=Select {0}
+icon_multiselect=Select all {0}
+icon_edit=Edit {0}
+icon_search=Search {0}
+icon_view=View {0}
+
+# Menus
+menu_active_flows_1=One conversation
+menu_active_flows_n={0} conversations
+menu_default_display=No value
+menu_open=Open
+menu_new=New
+menu_send=Submit
+menu_save=Save
+menu_save_and_close=Close
+menu_search=Search
+menu_delete_and_close=Delete
+menu_delete=Delete
+menu_remove=Remove
+menu_close=Close
+menu_quit=Quit
+menu_print=Print
+
+# Search
+search_criteria=Search criteria
+search_results=Search results
+search_empty=No matching result
+search_reset=Reset
+search_reseted=Search reseted
+search_save=Save this search query
+search_results=Results
+search_results_status_0=There is no result
+search_results_status_1=There is one result
+search_results_status_n=There are {0} results
+
+# Search full text
+search_full_text_all=All indexed properties
+search_full_text=Full text search
+search_full_text_criteria=Full text search criteria
+
+# Ranges
+date_range_from=From
+date_range_to=To
+range_from=Between
+range_to=And
+
+# Excel export
+search_by=Search by 
+search_date=Results on
+search_nb_results=Number of results
+excel_date_format=m/d/yy
+excel_date_time_format=m/d/yy h:mm
+excel_time_format=h:mm
+
+# Navigation
+submit=Submit
+back=Back
+refresh=Refresh
+discard=Discard the conversation
+
+# Status
+status_saved_ok=Saved {0} successfully in database
+status_deleted_ok=Suppressed {0} successfully from database
+status_selected_ok={0}: Selected existing and set it, but not saved in database
+status_selected_new_ok={0}: Selected existing and set it, but not saved in database
+status_created_ok={0}: Created and set, but not saved in database
+status_removed_ok={0}: Removed, but not saved in database
+status_added_new_ok={0}: Created and added, but not saved in database
+status_added_existing_ok={0}: Selected existing and added it, but not saved in database
+status_edited_ok={0}: Edited, but not saved in database
+status_exception_ko={0}: An error occurred, you should quit this page and try again
+
+# Error
+error_concurrent_modification=We have detected a concurrent modification (optimistic locking). You must quit this page.
+error_data_integrity_violation=Action refused because it violates data integrity.
+error_database_title=Database error
+error_database=Database returned an error.
+error_ajax=An error occurred, login again.
+error_not_found_title=Not found
+error_not_found=Sorry the page you request does not exist.
+error_unknown_title=Error unknown
+error_unknown=An error occurred, please report it to your administrator.
+error_access_denied_title=Access denied
+error_access_denied=You do not have enough privilege to access this resource.
+error_action_denied=You do not have enough privilege to perform this action.
+
+# One to Many or many to many empty collection
+collection_empty=Empty list
+
+# Download
+download=Download
+
+# DatePicker
+year=Year
+month=Month
+day=Day of month
+hour=Hour
+minute=Minute
+
+# Audit
+audit=Audit
+creation_author=Created by
+creation_date=Creation date
+last_modification_author=Last modification by
+last_modification_date=Last modification date 
+
+# Saved search
+saved_search_saved=Search criteria saved as {0}
+saved_search_loaded=Using saved search criteria {0}
+savedSearchName_private=Private ?
+
+# Security
+security_username_not_found=Username not found
+security_account_disabled=Account disabled
+security_account_locked=Account locked
+security_account_expired=Account expired
+security_account_credentials_expired=Account credentials expired
+security_account_status_invalid=Account state cannot allow you to log in
+security_bad_credentials=Invalid credentials
+security_error=You cannot log in
diff --git a/src/main/resources/localization/messages_fr.properties b/src/main/resources/localization/messages_fr.properties
new file mode 100644
index 0000000..bab6e9e
--- /dev/null
+++ b/src/main/resources/localization/messages_fr.properties
@@ -0,0 +1,162 @@
+#
+# (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+# Source code generated by Celerio, a Jaxio product
+# Want to purchase Celerio ? email us at info@jaxio.com
+# Follow us on twitter: @springfuse
+# Documentation: http://www.jaxio.com/documentation/celerio/
+# Template pack-jsf2-spring-conversation:src/main/resources/localization/messages_fr.p.vm.properties
+#
+
+application_name=@application.name@
+main_title=Application @application.name@
+welcome=Bienvenue
+you_are_connected_to=Bravo {0}, vous êtes connecté sur {1}
+
+home=Accueil
+yes=Oui
+no=Non
+
+form_error_status_1=Il y a une erreur dans le formulaire que vous avez soumis
+form_error_status_n=Il y a {0} erreurs dans le formulaire que vous avez soumis
+
+label_required_suffix=*
+
+null_value=Non Renseigné
+null_file_value=Pas de fichier
+
+# display boolean
+boolean_true=Oui
+boolean_false=Non
+
+dialog_ask_for_save=Voulez-vous enregistrer vos éventuelles modifications ?
+dialog_delete_confirm=Voulez-vous vraiment supprimer cet élément ?
+dialog_remove_confirm=Voulez-vous vraiment retirer cet élément ?
+
+login=S'authentifier
+logout=Déconnexion
+actions=Actions
+
+# Icons
+icon_add=Ajouter {0}
+icon_delete=Supprimer {0}
+icon_remove=Enlever {0}
+icon_select=Choisir {0}
+icon_multiselect=Choisir tous les {0}
+icon_edit=Editer {0}
+icon_search=Rechercher {0}
+icon_view=Visualiser {0}
+
+# Menus
+menu_active_flows_1=Une conversation
+menu_active_flows_n={0} conversations
+menu_default_display=Pas de valeur
+menu_open=Ouvrir
+menu_new=Nouveau
+menu_send=Envoyer
+menu_save=Enregistrer
+menu_save_and_close=Fermer
+menu_search=Rechercher
+menu_delete_and_close=Supprimer
+menu_delete=Supprimer
+menu_remove=Retirer
+menu_close=Fermer
+menu_quit=Quitter
+menu_print=Imprimer
+
+# Search
+search_criteria=Critères de recherche
+search_results=Résultats de la recherche
+search_empty=Aucun résultat ne correspond à votre recherche
+search_reset=Réinitialiser
+search_reseted=Recherche réinitialisée
+search_save=Sauvegarder cette recherche
+search_results=Résultats
+search_results_status_0=Aucun résultat trouvé
+search_results_status_1=Il y a un résultat
+search_results_status_n=Il y a {0} résultats
+
+# Search full text
+search_full_text_all=Tout champ indexé
+search_full_text=Full text search
+search_full_text_criteria=Critères de recherche full text
+
+
+# Ranges
+date_range_from=Du
+date_range_to=au
+range_from=Entre
+range_to=et
+
+# Excel export
+search_by=Recherche effectuée par
+search_date=Résultat du
+search_nb_results=Nombre de résultats
+excel_date_format=d/m/yy
+excel_date_time_format=d/m/yy h:mm
+excel_time_format=h:mm
+
+# Navigation
+submit=Envoyer
+back=Retour
+refresh=Rafraîchir
+discard=Terminer la conversation
+
+# Status
+status_saved_ok=Enregistrement en base de données réussi pour {0}
+status_deleted_ok=Suppression de la base de données réussie pour {0}
+status_selected_ok={0}: Sélection et liaison réalisées, mais liaison non enregistrée en base
+status_selected_new_ok={0}: Création et liaison réalisées, mais non enregistrées en base
+status_removed_ok={0}: Retrait réalisé, mais non enregistré en base
+status_added_new_ok={0}: Création et ajout réalisés, mais non enregistrés en base
+status_added_existing_ok={0}: Sélection et ajout réalisés, mais non enregistrés en base
+status_edited_ok={0}: Edition réalisée, mais non enregistrée en base
+status_exception_ko={0}: Une erreur s'est produite, vous devriez quitter cette page et essayer de nouveau
+
+# Error
+error_concurrent_modification=Nous avons détecté une modification concurrente (optimistic locking).
+error_data_integrity_violation=Action rejetée car elle corrompt l'intégrité des données.
+error_database_title=Erreur base de données
+error_database=La base de données a retourné une erreur.
+error_ajax=Une erreur est survenue. Identifiez-vous de nouveau.
+error_not_found_title=Non trouvé
+error_not_found=La ressource demandée n'a pas été trouvée.
+error_unknown_title=Erreur inconnue
+error_unknown=Une erreur est apparue, merci de le signaler.
+error_access_denied_title=Droits insuffisants
+error_access_denied=Vous n'avez pas les droits suffisants pour accéder à cette ressource.
+error_action_denied=Vous n'avez pas les droits suffisants pour effectuer cette action.
+
+# One to Many or many to many empty collection
+collection_empty=Liste vide
+
+# Download
+download=Télécharger
+
+# DatePicker
+year=Année
+month=Mois
+day=Jour
+hour=Heure
+minute=Minute
+
+# Audit
+audit=Audit
+creation_author=Créé par
+creation_date=Date de création 
+last_modification_author=Modifié par
+last_modification_date=Date de modification
+
+# Saved search
+saved_search_saved=Sauvegarde de la recherche {0}
+saved_search_loaded=Utilisation de la recherche {0}
+savedSearchName_private=Privée ?
+
+# Security
+security_username_not_found=Identifiant non connu
+security_account_disabled=Compte désactivé
+security_account_locked=Compte verrouillé
+security_account_expired=Compte expiré
+security_account_credentials_expired=Mot de passe expiré
+security_account_status_invalid=Compte non valide
+security_bad_credentials=Mot de passe invalide
+security_error=Vous ne pouvez pas vous identifier
diff --git a/src/main/resources/localization/pages/concurrentModificationResolution.xml b/src/main/resources/localization/pages/concurrentModificationResolution.xml
new file mode 100644
index 0000000..d4c4328
--- /dev/null
+++ b/src/main/resources/localization/pages/concurrentModificationResolution.xml
@@ -0,0 +1,27 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!--
+ ! (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ ! Source code generated by Celerio, a Jaxio product
+ ! Want to purchase Celerio ? email us at info@jaxio.com
+ ! Follow us on twitter: @springfuse
+ ! Documentation: http://www.jaxio.com/documentation/celerio/
+ ! Template pack-jsf2-spring-conversation:src/main/resources/localization/pages/concurrentModificationResolution.p.vm.xml
+-->
+<!DOCTYPE properties SYSTEM "http://java.sun.com/dtd/properties.dtd">
+<properties>
+	<comment>concurrentModificationResolution</comment>
+	<entry key="concurrentModificationResolution_title">Conflict found</entry>
+	<entry key="concurrentModificationResolution_conflict">Conflict found</entry>
+	<entry key="concurrentModificationResolution_description"><![CDATA[
+		<p>
+			We have detected a concurrent modification (optimistic locking).<br/>
+			You can either :
+			<ul>
+				<li>refresh the values with the latest values from the database. You way loose some of your modifications.</li>
+				<li>terminate this conversation and loose all of your modifications.</li>
+			</ul>
+		</p>
+	]]></entry>
+	<entry key="concurrentModificationResolution_refresh">Refresh</entry>
+	<entry key="concurrentModificationResolution_discard">Discard</entry>
+</properties>
\ No newline at end of file
diff --git a/src/main/resources/localization/pages/concurrentModificationResolution_fr.xml b/src/main/resources/localization/pages/concurrentModificationResolution_fr.xml
new file mode 100644
index 0000000..976af0c
--- /dev/null
+++ b/src/main/resources/localization/pages/concurrentModificationResolution_fr.xml
@@ -0,0 +1,27 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!--
+ ! (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ ! Source code generated by Celerio, a Jaxio product
+ ! Want to purchase Celerio ? email us at info@jaxio.com
+ ! Follow us on twitter: @springfuse
+ ! Documentation: http://www.jaxio.com/documentation/celerio/
+ ! Template pack-jsf2-spring-conversation:src/main/resources/localization/pages/concurrentModificationResolution_fr.p.vm.xml
+-->
+<!DOCTYPE properties SYSTEM "http://java.sun.com/dtd/properties.dtd">
+<properties>
+	<comment>concurrentModificationResolution</comment>
+	<entry key="concurrentModificationResolution_title">Conflit détecté</entry>
+	<entry key="concurrentModificationResolution_conflict">Conflit détecté</entry>
+	<entry key="concurrentModificationResolution_description"><![CDATA[
+		<p>
+			Nous avons détecté une modification concurrente (optimistic locking).<br/>
+			Vous pouvez soit :
+			<ul>
+				<li>rafraichir avec les dernieres données de la base. Vous perdrez alors une partie de vos modifications.</li>
+				<li>terminer la conversation en cours et perdre l'ensemble de vos changements.</li>
+			</ul>
+		</p>
+	]]></entry>
+	<entry key="concurrentModificationResolution_refresh">Rafraîchir</entry>
+	<entry key="concurrentModificationResolution_discard">Annuler</entry>
+</properties>
\ No newline at end of file
diff --git a/src/main/resources/localization/pages/home.xml b/src/main/resources/localization/pages/home.xml
new file mode 100644
index 0000000..2bb6fee
--- /dev/null
+++ b/src/main/resources/localization/pages/home.xml
@@ -0,0 +1,45 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!--
+ ! (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ ! Source code generated by Celerio, a Jaxio product
+ ! Want to purchase Celerio ? email us at info@jaxio.com
+ ! Follow us on twitter: @springfuse
+ ! Documentation: http://www.jaxio.com/documentation/celerio/
+ ! Template pack-jsf2-spring-conversation:src/main/resources/localization/pages/home.p.vm.xml
+-->
+<!DOCTYPE properties SYSTEM "http://java.sun.com/dtd/properties.dtd">
+<properties>
+	<comment>Homepage</comment>
+	<entry key="home_about">About</entry>
+	<entry key="home_generated_by"><![CDATA[
+		<p>This application was generated by <a href="http://www.jaxio.com/en/celerio.html" target="_jaxio">Celerio</a>, a tool developed by <a href="http://www.jaxio.com/en/" target="_jaxio">Jaxio</a>, a company based in Paris, France.</p>
+		
+		<p>If you use the generated code in a commercial activity we encourage you to purchase a Celerio License to benefit from
+		advanced features and support our activity.
+		<br/>
+		<a href="http://www.jaxio.com/en/pricing.html" target="_jaxio">Celerio License and pricing</a>.
+		</p>
+
+		<p>Like this generated application? Have new ideas? Found a bug? Need custom support ?
+		<a href="http://www.jaxio.com/en/contact-us.html" target="_jaxio">please let us know...</a></p>
+	]]></entry>
+	<entry key="home_please_connect_first">Please login first in order to access the application content.</entry>
+	<entry key="home_start_conversation">Start a new conversation</entry>
+	<entry key="home_conversation">Here is the list of generated conversations:</entry>
+	<entry key="home_conversation_search">Search</entry>
+	<entry key="home_conversation_create">Create</entry>
+	<entry key="home_configuration">Fine tuning code generation</entry>
+	<entry key="home_configuration_howto"><![CDATA[
+		<p>You can <a href="http://www.jaxio.com/documentation/celerio/">fine tune the code generation</a> using Celerio configuration file which can be found in the folder
+		"h2project/src/main/config/maven-celerio-plugin".
+		This file allows you to:</p>
+		<ul>
+			<li>Configure bidirectional relations (ie one to many)</li>
+			<li>Configure JPA inheritance</li>
+			<li>Rename your entities or properties</li>
+			<li>Configure packages to group your entities by functional domain</li>
+			<li>Configure number mappings or date mappings</li>
+			<li>etc.</li>
+		</ul>
+	]]></entry>
+</properties>
\ No newline at end of file
diff --git a/src/main/resources/localization/pages/home_fr.xml b/src/main/resources/localization/pages/home_fr.xml
new file mode 100644
index 0000000..9c5eb1c
--- /dev/null
+++ b/src/main/resources/localization/pages/home_fr.xml
@@ -0,0 +1,43 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!--
+ ! (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ ! Source code generated by Celerio, a Jaxio product
+ ! Want to purchase Celerio ? email us at info@jaxio.com
+ ! Follow us on twitter: @springfuse
+ ! Documentation: http://www.jaxio.com/documentation/celerio/
+ ! Template pack-jsf2-spring-conversation:src/main/resources/localization/pages/home_fr.p.vm.xml
+-->
+<!DOCTYPE properties SYSTEM "http://java.sun.com/dtd/properties.dtd">
+<properties>
+	<comment>Homepage</comment>
+	<entry key="home_about">A propos</entry>
+	<entry key="home_generated_by"><![CDATA[
+		<p>Cette application a été générée par <a href="http://www.jaxio.com/celerio.html" target="_jaxio">Celerio</a>,
+		un outil de la société <a href="http://www.jaxio.com/" target="_jaxio">Jaxio</a>, basée à Paris, en France.</p>
+		<p>Si vous faites un usage du code généré dans un cadre professionnel nous vous encourageons à acheter une Licence Celerio,
+		pour bénéficier de fonctionnalités avancées et soutenir notre activité.
+		<br/>
+		<a href="http://www.jaxio.com/licence-utilisation-celerio.html" target="_jaxio">Voir les tarifs Celerio</a>.</p>
+		<p>
+			Pour toute remarque/suggestion/question/bug, <a href="http://www.jaxio.com/nous-contacter.html" target="_jaxio">Contactez-nous...</a>
+		</p>
+	]]></entry>
+	<entry key="home_please_connect_first">Connectez-vous afin d'accéder au contenu.</entry>
+	<entry key="home_start_conversation">Démarrer une nouvelle conversation</entry>
+	<entry key="home_conversation">Voici la liste des conversations générées:</entry>
+	<entry key="home_conversation_search">Liste</entry>
+	<entry key="home_conversation_create">Créer</entry>
+	<entry key="home_configuration">Configurer la génération</entry>
+	<entry key="home_configuration_howto"><![CDATA[
+		<p>Vous pouvez <a href="http://www.jaxio.com/documentation/celerio/">configurer la génération</a> en utilisant le fichier de configuration maven-celerio-plugin.xml qui se trouve
+		dans le répertoire "h2project/src/main/config/maven-celerio-plugin". Ce fichier vous permet par exemple de:</p>
+		<ul>
+			<li>Générer les associations inverses (i.e. one-to-many)</li>
+			<li>Configurer l'héritage JPA</li>
+			<li>Changer le nom de vos entités ou de leurs propriétés</li>
+			<li>Changer le nom du package de chaque entité</li>
+			<li>Customiser les règles de mapping des nombres ou dates</li>
+			<li>etc.</li>
+		</ul>
+	]]></entry>
+</properties>
\ No newline at end of file
diff --git a/src/main/resources/localization/pages/login.xml b/src/main/resources/localization/pages/login.xml
new file mode 100644
index 0000000..66fff18
--- /dev/null
+++ b/src/main/resources/localization/pages/login.xml
@@ -0,0 +1,33 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!--
+ ! (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ ! Source code generated by Celerio, a Jaxio product
+ ! Want to purchase Celerio ? email us at info@jaxio.com
+ ! Follow us on twitter: @springfuse
+ ! Documentation: http://www.jaxio.com/documentation/celerio/
+ ! Template pack-jsf2-spring-conversation:src/main/resources/localization/pages/login.p.vm.xml
+-->
+<!DOCTYPE properties SYSTEM "http://java.sun.com/dtd/properties.dtd">
+<properties>
+	<comment>Login</comment>
+	<entry key="login_title">Login</entry>
+	<entry key="login_header">Login</entry>
+	<entry key="login_login">Username</entry>
+	<entry key="login_password">Password</entry>
+	<entry key="login_rememberme">Remember me on this computer.</entry>
+	<entry key="login_submit">Login</entry>
+	<entry key="login_error">Invalid login or password</entry>
+	<entry key="login_logout">Logout</entry>
+	<entry key="session_expired">Your session has expired... please login again.</entry>
+	<entry key="login_description"><![CDATA[
+		<p>
+			If you used our database schema example or if Celerio could
+			not detect in your database schema the table used to store username/password pairs, you
+			should use:
+		</p>
+		<ul>
+			<li><strong>admin/admin</strong>: can access all data</li>
+			<li>user/user: can access only home page</li>
+		</ul>
+	]]></entry>
+</properties>
\ No newline at end of file
diff --git a/src/main/resources/localization/pages/login_fr.xml b/src/main/resources/localization/pages/login_fr.xml
new file mode 100644
index 0000000..d659de9
--- /dev/null
+++ b/src/main/resources/localization/pages/login_fr.xml
@@ -0,0 +1,32 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!--
+ ! (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ ! Source code generated by Celerio, a Jaxio product
+ ! Want to purchase Celerio ? email us at info@jaxio.com
+ ! Follow us on twitter: @springfuse
+ ! Documentation: http://www.jaxio.com/documentation/celerio/
+ ! Template pack-jsf2-spring-conversation:src/main/resources/localization/pages/login_fr.p.vm.xml
+-->
+<!DOCTYPE properties SYSTEM "http://java.sun.com/dtd/properties.dtd">
+<properties>
+	<comment>Login</comment>
+	<entry key="login_title">Identification</entry>
+	<entry key="login_header">Login</entry>
+	<entry key="login_login">Identifiant</entry>
+	<entry key="login_password">Mot de passe</entry>
+	<entry key="login_rememberme">Mémoriser mes informations sur cet ordinateur.</entry>
+	<entry key="login_submit">S'authentifier</entry>
+	<entry key="login_error">Identifiant ou mot de passe incorrect</entry>
+	<entry key="login_logout">Déconnexion</entry>
+	<entry key="session_expired">Votre session a expirée... merci de vous ré-authentifier</entry>
+	<entry key="login_description"><![CDATA[
+		<p>
+			Si vous utilisez la base de données d'exemple ou si Celerio n'a pas trouvé 
+			la table où sont stockés les login/mots de passe, alors pour vous connecter vous devez utiliser:
+		</p>
+		<ul>
+			<li><strong>admin/admin</strong>: accède à toutes les données</li>
+			<li>user/user:  accède uniquement à la page d'accueil</li>
+		</ul>
+	]]></entry>
+</properties>
\ No newline at end of file
diff --git a/src/main/resources/logback.xml b/src/main/resources/logback.xml
new file mode 100644
index 0000000..5045bf9
--- /dev/null
+++ b/src/main/resources/logback.xml
@@ -0,0 +1,67 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!--
+ ! (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ ! Source code generated by Celerio, a Jaxio product
+ ! Want to purchase Celerio ? email us at info@jaxio.com
+ ! Follow us on twitter: @springfuse
+ ! Documentation: http://www.jaxio.com/documentation/celerio/
+ ! Template pack-backend-jpa:src/main/resources/logback.p.vm.xml
+-->
+<configuration>
+	<appender name="Console" class="ch.qos.logback.core.ConsoleAppender">
+		<encoder>
+			<pattern>%-5level %C{3}.%M %m%n</pattern>
+		</encoder>
+	</appender>
+
+	<appender name="File" class="ch.qos.logback.core.rolling.RollingFileAppender">
+		<file>@log.target@/@project.name@-@project.version@.log</file>
+		<rollingPolicy class="ch.qos.logback.core.rolling.FixedWindowRollingPolicy">
+			<fileNamePattern>@log.target@/@project.name@-@project.version@.%i.log</fileNamePattern>
+			<minIndex>1</minIndex>
+			<maxIndex>5</maxIndex>
+		</rollingPolicy>
+		<triggeringPolicy class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">
+			<maxFileSize>1MB</maxFileSize>
+		</triggeringPolicy>
+		<encoder>
+			<pattern>[%d{ISO8601}] [%-5level] [%X{session_id}] [%X{login}] [%C{3}.%M] %m%n</pattern>
+		</encoder>
+	</appender>
+
+	<!-- Log Hibernate SQL queries to file (log level must be DEBUG to enable it) -->
+	<logger name="org.hibernate.SQL" additivity="false">
+		<level value="@log.sql.queries.level@" />
+		<appender-ref ref="File" />
+	</logger>
+
+	<!-- log the param value in the prepared statement and the query result! (log level must be TRACE to enable it) -->
+	<!--<logger name="org.hibernate.type"> -->
+	<!--<level value="trace" /> -->
+	<!-- <appender-ref ref="File"/> -->
+	<!--</logger> -->
+
+	<logger name="org.hibernate.cache.EhCacheProvider" level="error" />
+	<logger name="org.hibernate" level="warn" />
+	<logger name="org.hibernate.search.impl.SimpleIndexingProgressMonitor" level="@log.level@" />
+	<logger name="org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl" level="error" /> <!-- until hibernate HHH-8210 is resolved -->
+	<logger name="org.springframework.security" level="warn" />
+	<logger name="org.apache.commons" level="warn" />
+	<logger name="org.apache.commons.jexl2.JexlEngine" level="error" />
+	<logger name="org.springframework" level="warn" />
+	<logger name="org.springframework.beans.factory.support" level="warn" />
+
+	<logger name="LOG4J" level="INFO" />
+	<logger name="SLF4J" level="WARN" />
+	<logger name="JCL" level="INFO" />
+
+	<logger name="com.h2.demo" level="@log.level@" />
+	<logger name="com.h2.demo.repository.support.HibernateSearchUtil" level="@log.level@" />
+	<logger name="com.h2.demo.repository" level="warn" />
+
+	<root level="warn">
+		<appender-ref ref="Console" />
+		<appender-ref ref="File" />
+	</root>
+
+</configuration>
\ No newline at end of file
diff --git a/src/main/resources/spring/applicationContext-web.xml b/src/main/resources/spring/applicationContext-web.xml
new file mode 100644
index 0000000..9b74ba9
--- /dev/null
+++ b/src/main/resources/spring/applicationContext-web.xml
@@ -0,0 +1,28 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!--
+ ! (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ ! Source code generated by Celerio, a Jaxio product
+ ! Want to purchase Celerio ? email us at info@jaxio.com
+ ! Follow us on twitter: @springfuse
+ ! Documentation: http://www.jaxio.com/documentation/celerio/
+ ! Template pack-jsf2-spring-conversation:src/main/resources/spring/applicationContext-web.p.vm.xml
+-->
+<beans default-lazy-init="true" xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
+	xmlns:util="http://www.springframework.org/schema/util" xmlns:security="http://www.springframework.org/schema/security" xmlns:tx="http://www.springframework.org/schema/tx"
+	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:p="http://www.springframework.org/schema/p" xmlns:task="http://www.springframework.org/schema/task" xmlns:aop="http://www.springframework.org/schema/aop"
+	xsi:schemaLocation="
+			http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
+			http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
+			http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.2.xsd
+			http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.1.xsd
+			http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
+			http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd
+			http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-3.2.xsd
+			http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd">
+	<description><![CDATA[
+		Main entry point for web spring configuration
+	]]></description>
+	
+	<context:annotation-config />
+	<context:component-scan base-package="com.h2.demo.web"/>
+</beans>
diff --git a/src/main/resources/spring/applicationContext.xml b/src/main/resources/spring/applicationContext.xml
new file mode 100644
index 0000000..312e205
--- /dev/null
+++ b/src/main/resources/spring/applicationContext.xml
@@ -0,0 +1,68 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!--
+ ! (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ ! Source code generated by Celerio, a Jaxio product
+ ! Want to purchase Celerio ? email us at info@jaxio.com
+ ! Follow us on twitter: @springfuse
+ ! Documentation: http://www.jaxio.com/documentation/celerio/
+ ! Template pack-backend-jpa:src/main/resources/spring/applicationContext.p.vm.xml
+-->
+<beans default-lazy-init="true" xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
+	xmlns:util="http://www.springframework.org/schema/util" xmlns:security="http://www.springframework.org/schema/security" xmlns:tx="http://www.springframework.org/schema/tx"
+	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:p="http://www.springframework.org/schema/p" xmlns:task="http://www.springframework.org/schema/task" xmlns:aop="http://www.springframework.org/schema/aop"
+	xsi:schemaLocation="
+			http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
+			http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
+			http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.2.xsd
+			http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.1.xsd
+			http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
+			http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd
+			http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-3.2.xsd
+			http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd">
+	<description><![CDATA[
+		Main entry point for spring configuration
+	]]></description>
+
+	<!-- context -->
+	<context:component-scan base-package="com.h2.demo">
+		<!-- exclude web beans as they live in the web application context -->
+		<!-- Note: this regexp does not work if you try to escape the '.' -->
+		<context:exclude-filter type="regex" expression="com.h2.demo.web.*" />
+	</context:component-scan>
+	<context:property-placeholder location="classpath*:database.properties,classpath*:hibernate.properties,classpath*:app-version.properties" />
+
+	<!-- security -->
+	<security:authentication-manager>
+		<security:authentication-provider user-service-ref="userDetailsService" />
+	</security:authentication-manager>
+	<security:global-method-security jsr250-annotations="enabled" pre-post-annotations="enabled" />
+
+	<!-- task -->
+	<task:annotation-driven executor="myExecutor" scheduler="myScheduler" />
+	<task:executor id="myExecutor" pool-size="5" />
+	<task:scheduler id="myScheduler" pool-size="10" />
+
+	<!-- transaction -->
+	<tx:annotation-driven />
+
+	<!-- datasource -->
+	<bean id="dataSource" class="org.apache.tomcat.jdbc.pool.DataSource" 
+		destroy-method="close" 
+		lazy-init="false" 
+		p:driverClassName="${jdbc.driver}"
+		p:url="${jdbc.url}"
+		p:username="${jdbc.user}" 
+		p:password="${jdbc.password}" 
+		p:initialSize="1" 
+		p:maxActive="50" 
+		p:maxIdle="1" 
+		p:maxWait="1000" 
+		p:defaultAutoCommit="false" 
+		p:removeAbandoned="true" 
+		p:removeAbandonedTimeout="60">
+		<description><![CDATA[
+			Simple datasource. This is a direct access to the datasource that can be used for specific queries that need to bypass JPA functionalities.
+			However, if you need to use JDBC, please look at hibernate SQL-QUERIES, they would most probably be a more elegant way to solve your problem.
+		]]></description>
+	</bean>
+</beans>
diff --git a/src/main/sql/h2/generated/01-create.sql b/src/main/sql/h2/generated/01-create.sql
new file mode 100644
index 0000000..f1f16dd
--- /dev/null
+++ b/src/main/sql/h2/generated/01-create.sql
@@ -0,0 +1,169 @@
+--
+-- (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+-- Source code generated by Celerio, a Jaxio product
+-- Want to purchase Celerio ? email us at info@jaxio.com
+-- Follow us on twitter: @springfuse
+-- Documentation: http://www.jaxio.com/documentation/celerio/
+-- Template pack-backend-jpa:src/main/sql/h2/01-create.p.vm.sql
+--
+
+DROP ALL objects;
+
+
+-- =================================
+-- TABLE ACCOUNT 
+-- =================================
+
+CREATE TABLE ACCOUNT (
+	ID CHAR(36) not null,
+	LOGIN VARCHAR(100) not null,
+	PASSWORD VARCHAR(100) not null,
+	EMAIL VARCHAR(100) not null,
+	IS_ENABLED BOOLEAN(1) not null default 'TRUE',
+	CIVILITY CHAR(2) default 'MR',
+	FIRST_NAME VARCHAR(100),
+	LAST_NAME VARCHAR(100),
+	BIRTH_DATE TIMESTAMP,
+	DESCRIPTION VARCHAR(255),
+	ADDRESS_ID INTEGER(10),
+	CREATION_DATE TIMESTAMP,
+	CREATION_AUTHOR VARCHAR(200),
+	LAST_MODIFICATION_DATE TIMESTAMP,
+	LAST_MODIFICATION_AUTHOR VARCHAR(200),
+	VERSION INTEGER(10) default 0);
+
+CREATE UNIQUE INDEX IF NOT EXISTS ACCOUNT_UNIQUE_1_INDEX_E ON ACCOUNT (LOGIN);
+CREATE UNIQUE INDEX IF NOT EXISTS ACCOUNT_UNIQUE_2_INDEX_E ON ACCOUNT (EMAIL);
+CREATE PRIMARY KEY ON ACCOUNT (ID);
+
+-- =================================
+-- TABLE ACCOUNT_ROLE 
+-- =================================
+
+CREATE TABLE ACCOUNT_ROLE (
+	ACCOUNT_ID CHAR(36) not null,
+	ROLE_ID INTEGER(10) not null);
+
+CREATE PRIMARY KEY ON ACCOUNT_ROLE (ACCOUNT_ID, ROLE_ID);
+
+-- =================================
+-- TABLE ADDRESS 
+-- =================================
+
+CREATE TABLE ADDRESS (
+	ID INTEGER(10) not null,
+	STREET_NAME VARCHAR(100),
+	CITY VARCHAR(100) not null,
+	VERSION INTEGER(10) default 0);
+
+ALTER TABLE ADDRESS ALTER COLUMN ID IDENTITY;
+
+
+-- =================================
+-- TABLE AUDIT_LOG 
+-- =================================
+
+CREATE TABLE AUDIT_LOG (
+	ID INTEGER(10) not null,
+	AUTHOR VARCHAR(256),
+	EVENT VARCHAR(256),
+	EVENT_DATE TIMESTAMP,
+	STRING_ATTRIBUTE_1 VARCHAR(256),
+	STRING_ATTRIBUTE_2 VARCHAR(256),
+	STRING_ATTRIBUTE_3 VARCHAR(256));
+
+ALTER TABLE AUDIT_LOG ALTER COLUMN ID IDENTITY;
+
+
+-- =================================
+-- TABLE BOOK 
+-- =================================
+
+CREATE TABLE BOOK (
+	ID INTEGER(10) not null,
+	ACCOUNT_ID CHAR(36),
+	TITLE VARCHAR(100) not null,
+	NUMBER_OF_PAGES INTEGER(10) not null,
+	VERSION INTEGER(10) default 0);
+
+ALTER TABLE BOOK ALTER COLUMN ID IDENTITY;
+
+
+-- =================================
+-- TABLE DOCUMENT 
+-- =================================
+
+CREATE TABLE DOCUMENT (
+	ID CHAR(36) not null,
+	ACCOUNT_ID CHAR(36) not null,
+	DOCUMENT_BINARY VARBINARY(2147483647),
+	DOCUMENT_FILE_NAME VARCHAR(100) not null,
+	DOCUMENT_CONTENT_TYPE VARCHAR(100) not null,
+	DOCUMENT_SIZE INTEGER(10) not null,
+	VERSION INTEGER(10) default 0);
+
+CREATE PRIMARY KEY ON DOCUMENT (ID);
+
+-- =================================
+-- TABLE LEGACY 
+-- =================================
+
+CREATE TABLE LEGACY (
+	NAME VARCHAR(16) not null,
+	CODE VARCHAR(8) not null,
+	DEPT INTEGER(10) not null,
+	EXTRA_INFO VARCHAR(100) not null);
+
+CREATE PRIMARY KEY ON LEGACY (CODE, DEPT, NAME);
+
+-- =================================
+-- TABLE MORE_TYPES_DEMO 
+-- =================================
+
+CREATE TABLE MORE_TYPES_DEMO (
+	ID DECIMAL(15,5) not null,
+	NUMBER_INT INTEGER(10),
+	NUMBER_LONG BIGINT(19),
+	NUMBER_DOUBLE DOUBLE(17),
+	NUMBER_FLOAT REAL(7),
+	NUMBER_BIG_INTEGER DECIMAL(20),
+	NUMBER_BIG_DECIMAL DECIMAL(20,2),
+	DATE_JAVA_TEMPORAL_DATE DATE,
+	DATE_JAVA_TEMPORAL_TIMESTAMP TIMESTAMP,
+	DATE_JODA DATE,
+	DATE_TIME_JODA TIMESTAMP,
+	VERSION INTEGER(10) default 0);
+
+CREATE PRIMARY KEY ON MORE_TYPES_DEMO (ID);
+
+-- =================================
+-- TABLE ROLE 
+-- =================================
+
+CREATE TABLE ROLE (
+	ID INTEGER(10) not null,
+	ROLE_NAME VARCHAR(100) not null);
+
+CREATE UNIQUE INDEX IF NOT EXISTS ROLE_UNIQUE_1_INDEX_2 ON ROLE (ROLE_NAME);
+ALTER TABLE ROLE ALTER COLUMN ID IDENTITY;
+
+
+-- =================================
+-- TABLE SAVED_SEARCH 
+-- =================================
+
+CREATE TABLE SAVED_SEARCH (
+	ID INTEGER(10) not null,
+	NAME VARCHAR(128) not null,
+	FORM_CLASSNAME VARCHAR(256) not null,
+	FORM_CONTENT VARBINARY(2147483647),
+	ACCOUNT_ID CHAR(36));
+
+ALTER TABLE SAVED_SEARCH ALTER COLUMN ID IDENTITY;
+
+ALTER TABLE ACCOUNT ADD CONSTRAINT ACCOUNT_FK_1 FOREIGN KEY (ADDRESS_ID) REFERENCES ADDRESS (ID);
+ALTER TABLE ACCOUNT_ROLE ADD CONSTRAINT ACCOUNT_ROLE_FK_2 FOREIGN KEY (ROLE_ID) REFERENCES ROLE (ID);
+ALTER TABLE ACCOUNT_ROLE ADD CONSTRAINT ACCOUNT_ROLE_FK_1 FOREIGN KEY (ACCOUNT_ID) REFERENCES ACCOUNT (ID);
+ALTER TABLE BOOK ADD CONSTRAINT BOOK_FK_1 FOREIGN KEY (ACCOUNT_ID) REFERENCES ACCOUNT (ID);
+ALTER TABLE DOCUMENT ADD CONSTRAINT DOCUMENT_FK_1 FOREIGN KEY (ACCOUNT_ID) REFERENCES ACCOUNT (ID);
+ALTER TABLE SAVED_SEARCH ADD CONSTRAINT SAVED_SEARCH_FK_1 FOREIGN KEY (ACCOUNT_ID) REFERENCES ACCOUNT (ID);
\ No newline at end of file
diff --git a/src/main/webapp/WEB-INF/applicationContext-security-http.xml b/src/main/webapp/WEB-INF/applicationContext-security-http.xml
new file mode 100644
index 0000000..cb111d4
--- /dev/null
+++ b/src/main/webapp/WEB-INF/applicationContext-security-http.xml
@@ -0,0 +1,35 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!--
+ ! (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ ! Source code generated by Celerio, a Jaxio product
+ ! Want to purchase Celerio ? email us at info@jaxio.com
+ ! Follow us on twitter: @springfuse
+ ! Documentation: http://www.jaxio.com/documentation/celerio/
+ ! Template pack-jsf2-spring-conversation:src/main/webapp/WEB-INF/applicationContext-security-http.p.vm.xml
+-->
+<beans:beans xmlns="http://www.springframework.org/schema/security" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:beans="http://www.springframework.org/schema/beans"
+	xsi:schemaLocation="
+		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
+		http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.1.xsd">
+
+	<!-- public pages -->
+	<http pattern="/" security="none" />
+	<http pattern="/favicon.ico" security="none" />
+	<http pattern="/resources/*" security="none" />
+	<http pattern="/javax.*/**" security="none" />
+	<http pattern="/login.faces*" security="none" />
+	<http pattern="/error/*" security="none" />
+	
+	<!-- secure pages -->
+	<http auto-config="true" use-expressions="true">
+		<form-login login-page="/login.faces" />
+		<logout logout-url="/logout.faces" logout-success-url="/home.faces" />
+
+		<intercept-url pattern="/home.faces" access="permitAll()" />
+		<intercept-url pattern="/logout*" access="isAuthenticated()" />
+		<intercept-url pattern="/domain/**/*" access="hasRole('ROLE_ADMIN')" />
+		<intercept-url pattern="/monitoring**" access="hasRole('ROLE_MONITORING')" />
+
+		<access-denied-handler error-page="/error/accessdenied.faces" />
+	</http>
+</beans:beans>
diff --git a/src/main/webapp/WEB-INF/faces-config.xml b/src/main/webapp/WEB-INF/faces-config.xml
new file mode 100644
index 0000000..a316b1d
--- /dev/null
+++ b/src/main/webapp/WEB-INF/faces-config.xml
@@ -0,0 +1,35 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!--
+ ! (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ ! Source code generated by Celerio, a Jaxio product
+ ! Want to purchase Celerio ? email us at info@jaxio.com
+ ! Follow us on twitter: @springfuse
+ ! Documentation: http://www.jaxio.com/documentation/celerio/
+ ! Template pack-jsf2-spring-conversation:src/main/webapp/WEB-INF/faces-config.p.vm.xml
+-->
+<faces-config xmlns="http://java.sun.com/xml/ns/javaee"
+	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-facesconfig_2_1.xsd"
+	version="2.1">
+	<application>
+		<locale-config>
+			<supported-locale>en</supported-locale>
+			<supported-locale>fr</supported-locale>
+		</locale-config>
+		<el-resolver>com.h2.demo.web.faces.ConversationAwareElResolver</el-resolver>
+		<message-bundle>com.h2.demo.web.util.MessageBundle</message-bundle>
+		<resource-bundle>
+			<base-name>com.h2.demo.web.util.MessageBundle</base-name>
+			<var>msg</var>
+		</resource-bundle>
+	</application>
+	<factory>
+		<exception-handler-factory>com.h2.demo.web.faces.CustomExceptionHandlerFactory</exception-handler-factory>
+	</factory>
+	<lifecycle>
+		<phase-listener>com.h2.demo.web.faces.LocaleSetterListener</phase-listener>
+		<phase-listener>com.h2.demo.web.faces.LogPhaseListener</phase-listener>
+		<phase-listener>com.h2.demo.web.faces.MultiPageMessagesListener</phase-listener>
+		<phase-listener>com.h2.demo.web.faces.ExceptionInRenderPhaseListener</phase-listener>
+	</lifecycle>
+</faces-config>
\ No newline at end of file
diff --git a/src/main/webapp/WEB-INF/layouts/main.xhtml b/src/main/webapp/WEB-INF/layouts/main.xhtml
new file mode 100644
index 0000000..bbf8622
--- /dev/null
+++ b/src/main/webapp/WEB-INF/layouts/main.xhtml
@@ -0,0 +1,121 @@
+<!--
+ ! (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ ! Source code generated by Celerio, a Jaxio product
+ ! Want to purchase Celerio ? email us at info@jaxio.com
+ ! Follow us on twitter: @springfuse
+ ! Documentation: http://www.jaxio.com/documentation/celerio/
+ ! Template pack-jsf2-spring-conversation:src/main/webapp/WEB-INF/layouts/main.p.vm.xhtml
+-->
+<f:view xmlns="http://www.w3.org/1999/xhtml"
+		xmlns:h="http://java.sun.com/jsf/html"
+		xmlns:ui="http://java.sun.com/jsf/facelets"
+		xmlns:f="http://java.sun.com/jsf/core"
+		xmlns:c="http://java.sun.com/jsp/jstl/core"
+		xmlns:p="http://primefaces.org/ui"
+		xmlns:app="http://springfuse.jaxio.com/app"
+		xmlns:appcc="http://java.sun.com/jsf/composite/components"
+		contentType="text/html" 
+		encoding="UTF-8"
+		lang="#{localeService.locale}">
+	<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="#{localeService.locale}" lang="#{localeService.locale}">
+	<h:head>
+		<f:facet name="first">
+			<meta http-equiv="X-UA-Compatible" content="IE=Edge" />
+			<meta content="text/html; charset=UTF-8" http-equiv="Content-Type"/>
+			<title>#{empty title? msg.main_title : resourcesUtil.getProperty(title)}</title>
+		</f:facet>
+		<f:facet name="last">
+			<h:outputStylesheet name="css/main.css" />
+			<h:outputScript name="js/main.js" />
+			<h:outputScript name="js/primefaces-locale.js" />
+		</f:facet>
+	</h:head>
+	<h:body>
+		<p:growl widgetVar="growlNotificationBar" showDetail="true" sticky="false" life="1500" for="seleniumOnly" />
+		<div class="environment #{environmentService.environment}"/>
+		<h:form id="form" enctype="multipart/form-data; charset=utf-8" prependId="#{empty prependId or prependId}">
+			<!-- regular layout (does not work with chromeshades) -->
+			<p:layout fullPage="true" >
+				<p:layoutUnit id="top" position="north" resizable="false" size="120">
+					<div role="banner">
+						<table width="100%">
+							<tr>
+								<td width="179px">
+									<h:outputLink value="http://www.jaxio.com/" title="Jaxio"><div class="logo"/></h:outputLink>
+								    <h:outputText class="version" value="#{versionService.format()}" />
+								</td>
+								<td width="70%" align="center">
+									<h1>#{empty title? msg.main_title : resourcesUtil.getProperty(title)}</h1>
+								</td>
+								<td class="userInfo">
+									<h:outputText value="#{userContextService.username} #{userContextService.roles}" styleClass="userInfo-username" rendered="#{userContextService.isLoggedIn()}"/>
+									<h:outputLink id="login_link" value="#{facesContext.externalContext.requestContextPath}/login.faces" styleClass="userInfo-user" rendered="#{userContextService.isAnonymousUser()}">#{msg.login}</h:outputLink>
+									<h:outputLink id="logout_link" value="#{facesContext.externalContext.requestContextPath}/logout.faces" styleClass="userInfo-user" rendered="#{userContextService.isLoggedIn()}">#{msg.logout}</h:outputLink>
+									<h:outputLink id="home_link" value="#{facesContext.externalContext.requestContextPath}/home.faces" styleClass="userInfo-welcome">#{msg.home}</h:outputLink>
+									<p:commandLink id="switchToFrench" action="#{localeService.switchToFrench()}" styleClass="userInfo-fr" rendered="#{!localeService.isFrench()}" ajax="false"/>
+									<p:commandLink id="switchToEnglish" action="#{localeService.switchToEnglish()}" styleClass="userInfo-en" rendered="#{localeService.isFrench()}" ajax="false"/>
+									<h:outputLink value="#{facesContext.externalContext.requestContextPath}/monitoring" rendered="#{userContextService.hasRole('ROLE_MONITORING')}">Monitoring</h:outputLink>
+								</td>
+							</tr>
+						</table>
+					</div>
+					<div role="navigation">
+						<p:toolbar>
+							<ui:insert name="toolbarChildren"/>
+							<p:toolbarGroup align="right">
+								<p:menuButton
+									value="#{resourcesUtil.getPluralableProperty('menu_active_flows', conversationManager.nbConversations)}"
+									model="#{conversationMenu.model}" 
+									rendered="#{conversationMenu.render}"/>
+								<p:menuButton value="Domain">
+									<p:menuitem value="#{msg.account}" action="#{accountController.beginSearch()}" rendered="#{accountPermission.canSearch()}" />
+									<p:menuitem value="#{msg.address}" action="#{addressController.beginSearch()}" rendered="#{addressPermission.canSearch()}" />
+									<p:menuitem value="#{msg.auditLog}" action="#{auditLogController.beginSearch()}" rendered="#{auditLogPermission.canSearch()}" />
+									<p:menuitem value="#{msg.book}" action="#{bookController.beginSearch()}" rendered="#{bookPermission.canSearch()}" />
+									<p:menuitem value="#{msg.document}" action="#{documentController.beginSearch()}" rendered="#{documentPermission.canSearch()}" />
+									<p:menuitem value="#{msg.legacy}" action="#{legacyController.beginSearch()}" rendered="#{legacyPermission.canSearch()}" />
+									<p:menuitem value="#{msg.moreTypesDemo}" action="#{moreTypesDemoController.beginSearch()}" rendered="#{moreTypesDemoPermission.canSearch()}" />
+									<p:menuitem value="#{msg.role}" action="#{roleController.beginSearch()}" rendered="#{rolePermission.canSearch()}" />
+									<p:menuitem value="#{msg.savedSearch}" action="#{savedSearchController.beginSearch()}" rendered="#{savedSearchPermission.canSearch()}" />
+								</p:menuButton>
+								<p:menuButton value="Debug" id="debug">
+									<p:menuitem id="throwException" value="Throw exception" action="#{exceptionUtil.throwRuntimeException()}" process="@this" ajax="false" immediate="true" icon="ui-icon ui-icon-alert" />
+									<p:menuitem id="throwAjaxException" value="Throw ajax exception" action="#{exceptionUtil.throwRuntimeException()}" update="messages" process="@this" ajax="true" immediate="true" icon="ui-icon ui-icon-alert" style="width:300px"/>
+									<p:menuitem id="throwDataAccessException" value="Throw data access exception" action="#{exceptionUtil.throwDataAccessException()}" process="@this" ajax="false" immediate="true" icon="ui-icon ui-icon-alert" style="width:350px"/>
+									<p:menuitem id="thowAjaxDataAccessException" value="Throw ajax data access exception" action="#{exceptionUtil.throwDataAccessException()}" update="messages" process="@this" ajax="true" immediate="true" icon="ui-icon ui-icon-alert" style="width:800px"/>
+								</p:menuButton>
+							</p:toolbarGroup>
+						</p:toolbar>
+						<p:outputPanel rendered="#{readonly}">
+							<!-- give focus to cancel to ease keyboard navigation -->
+							<script type="text/javascript">
+								$(function() {
+									setTimeout(function() {
+										APP.focusTo('form:back');
+									}, 200);
+								});
+							</script>
+						</p:outputPanel>
+					</div>
+				</p:layoutUnit>
+				<p:layoutUnit id="center" position="center">
+					<div id="messagesRegion" aria-label="form feedback" aria-live="assertive" aria-relevant="additions">
+						<appcc:messages id="messages" rendered="#{empty disableMessages or not disableMessages}" />
+					</div>
+					<p:focus context="center" rendered="#{messagesHelper.hasNoMessages()}" />
+					<ui:insert name="content"/>
+				</p:layoutUnit>
+				<p:layoutUnit id="bottom" position="south" size="30">
+					<p:outputPanel layout="block" rendered="#{!localeService.isFrench()}">
+						© 2005-2013 <a href="http://www.jaxio.com/" target="blank">JAXIO</a> - Generated by <a href="http://www.jaxio.com/en/celerio.html" target="blank">Celerio</a> - <a href="http://www.jaxio.com/en/contact-us.html" target="blank">Contact us</a> - <a href="http://www.twitter.com/springfuse" target="blank">@springfuse</a>
+					</p:outputPanel>
+					<p:outputPanel layout="block" rendered="#{localeService.isFrench()}">
+						© 2005-2013 <a href="http://www.jaxio.com/" target="blank">JAXIO</a> - Application générée par <a href="http://www.jaxio.com/celerio.html" target="blank">Celerio</a> - <a href="http://www.jaxio.com/nous-contacter.html" target="blank">Contactez-nous</a> - <a href="http://www.twitter.com/springfuse" target="blank">@springfuse</a>
+					</p:outputPanel>
+				</p:layoutUnit>
+			</p:layout>
+			<ui:insert name="dialogs"/>
+		</h:form>
+	</h:body>
+	</html>
+</f:view>
\ No newline at end of file
diff --git a/src/main/webapp/WEB-INF/layouts/print.xhtml b/src/main/webapp/WEB-INF/layouts/print.xhtml
new file mode 100644
index 0000000..57f50e4
--- /dev/null
+++ b/src/main/webapp/WEB-INF/layouts/print.xhtml
@@ -0,0 +1,45 @@
+<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
+<f:view xmlns="http://www.w3.org/1999/xhtml"
+		xmlns:h="http://java.sun.com/jsf/html"
+		xmlns:ui="http://java.sun.com/jsf/facelets"
+		xmlns:f="http://java.sun.com/jsf/core"
+		xmlns:p="http://primefaces.org/ui"
+		contentType="text/html"
+		encoding="UTF-8"
+		lang="#{localeService.locale}">
+	<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="#{localeService.locale}" lang="#{localeService.locale}">
+	<h:head>
+		<ui:insert name="setup" />
+		<f:facet name="first">
+			<meta http-equiv="X-UA-Compatible" content="IE=Edge" />
+			<meta content="text/html; charset=UTF-8" http-equiv="Content-Type"/>
+			<title>#{conversationManager.currentConversation.currentContext.label}</title>
+		</f:facet>
+		<f:facet name="last">
+			<h:outputStylesheet library="css" name="main.css" />
+			<h:outputStylesheet library="css" name="print.css" />
+			<h:outputStylesheet library="css" name="printWatermark.css" media="print" />
+			<h:outputScript library="js" name="main.js" />
+			<h:outputScript library="js" name="primefaces-locale.js" />
+		</f:facet>
+	</h:head>
+	<h:body>
+		<div class="printWatermark"><div><h:graphicImage alt="Confidentiel" library="img" name="printWatermark.png" /></div></div>
+		<h1>#{conversationManager.currentConversation.currentContext.label}</h1>
+		<h:form id="form">
+			<p><p:commandButton id="back" action="#{bean.back()}" process="@none" ajax="false" immediate="true" value="#{msg.back}" icon="ui-icon-arrowreturnthick-1-w"/></p>
+			<p:outputPanel>
+				<!-- give focus to cancel to ease keyboard navigation -->
+				<script type="text/javascript">
+					$(function() {
+						setTimeout(function() {
+							APP.focusTo('form:back');
+						}, 200);
+					});
+				</script>
+			</p:outputPanel>
+			<ui:insert name="content"/>
+		</h:form>
+	</h:body>
+	</html>
+</f:view>
\ No newline at end of file
diff --git a/src/main/webapp/WEB-INF/taglib/autocomplete/autoComplete.xhtml b/src/main/webapp/WEB-INF/taglib/autocomplete/autoComplete.xhtml
new file mode 100644
index 0000000..a1eeee6
--- /dev/null
+++ b/src/main/webapp/WEB-INF/taglib/autocomplete/autoComplete.xhtml
@@ -0,0 +1,32 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<ui:composition xmlns="http://www.w3.org/1999/xhtml"
+	xmlns:ui="http://java.sun.com/jsf/facelets"
+	xmlns:p="http://primefaces.org/ui"
+	xmlns:f="http://java.sun.com/jsf/core"
+	xmlns:h="http://java.sun.com/jsf/html"
+	xmlns:app="http://springfuse.jaxio.com/app">
+	<app:outputLabel for="#{id}_input" value="#{label}" required="#{required}" rendered="#{rendered}" styleClass="#{styleClass}" />
+	<h:panelGroup id="#{id}Grid" styleClass="aria-role-presentation" rendered="#{empty rendered ? true : rendered}">
+		<p:autoComplete id="#{id}" value="#{value}" label="#{resourcesUtil.getProperty(label)}"
+			completeMethod="#{controller[(empty completeMethod) ? 'complete' : completeMethod]}"
+			var="item"
+			itemValue="#{item}"
+			itemLabel="#{printer.print(item)}"
+			converter="#{genericJsfConverter}"
+			minQueryLength="#{empty minQueryLength ? 2 : minQueryLength}"
+			forceSelection="#{empty forceSelection ? true : forceSelection}"
+			size="#{empty size ? 50 : size}"
+			dropdown="true"
+			styleClass="#{styleClass}"
+			rendered="#{not readonly}">
+			<f:validateBean binding="#{lenientBeanValidator}"/>
+			<p:ajax event="itemSelect" update="#{id}Grid"/>
+			<p:ajax event="blur" update="#{id}GridInsert"/>
+			<f:attribute name="completeOnProperties" value="#{completeOnProperties}" />
+		</p:autoComplete>
+		<h:outputText value="#{printer.print(value)}" rendered="#{readonly}"/>
+		<h:panelGroup id="#{id}GridInsert">
+			<ui:insert/>
+		</h:panelGroup>
+	</h:panelGroup>
+</ui:composition>
\ No newline at end of file
diff --git a/src/main/webapp/WEB-INF/taglib/autocomplete/inputMultiAutoComplete.xhtml b/src/main/webapp/WEB-INF/taglib/autocomplete/inputMultiAutoComplete.xhtml
new file mode 100644
index 0000000..22d054d
--- /dev/null
+++ b/src/main/webapp/WEB-INF/taglib/autocomplete/inputMultiAutoComplete.xhtml
@@ -0,0 +1,21 @@
+<ui:composition xmlns="http://www.w3.org/1999/xhtml"
+	xmlns:ui="http://java.sun.com/jsf/facelets"
+	xmlns:p="http://primefaces.org/ui"
+	xmlns:f="http://java.sun.com/jsf/core"
+	xmlns:h="http://java.sun.com/jsf/html"
+	xmlns:app="http://springfuse.jaxio.com/app">
+	<app:outputLabel for="#{id}_input" value="#{label}" required="#{required}" rendered="#{rendered}" styleClass="#{styleClass}" />
+	<h:panelGroup id="#{id}Grid" styleClass="aria-role-presentation" rendered="#{empty rendered ? true : rendered}">
+		<p:autoComplete id="#{id}" value="#{value.selected}" label="#{resourcesUtil.getProperty(label)}"
+			completeMethod="#{controller[(empty completeMethod) ? 'complete' : completeMethod]}"
+			var="item"
+			itemValue="#{item}"
+			itemLabel="#{item}"
+			multiple="true"
+			styleClass="#{styleClass}"
+			forceSelection="false">
+			<f:attribute name="property" value="#{property}" />
+			<ui:insert/>
+		</p:autoComplete>
+	</h:panelGroup>
+</ui:composition>
diff --git a/src/main/webapp/WEB-INF/taglib/autocomplete/inputMultiEnumAutoComplete.xhtml b/src/main/webapp/WEB-INF/taglib/autocomplete/inputMultiEnumAutoComplete.xhtml
new file mode 100644
index 0000000..99c6998
--- /dev/null
+++ b/src/main/webapp/WEB-INF/taglib/autocomplete/inputMultiEnumAutoComplete.xhtml
@@ -0,0 +1,20 @@
+<ui:composition xmlns="http://www.w3.org/1999/xhtml"
+	xmlns:ui="http://java.sun.com/jsf/facelets"
+	xmlns:p="http://primefaces.org/ui"
+	xmlns:f="http://java.sun.com/jsf/core"
+	xmlns:h="http://java.sun.com/jsf/html"
+	xmlns:app="http://springfuse.jaxio.com/app">
+	<app:outputLabel for="#{id}_input" value="#{label}" required="#{required}" rendered="#{rendered}" styleClass="#{styleClass}" />
+	<h:panelGroup id="#{id}Grid" styleClass="aria-role-presentation" rendered="#{empty rendered ? true : rendered}">
+		<p:autoComplete id="#{id}" value="#{value.selected}" label="#{resourcesUtil.getProperty(label)}"
+			completeMethod="#{controller['complete']}"
+			var="item"
+			itemValue="#{item}"
+			itemLabel="#{item}"
+			multiple="true"
+			styleClass="#{styleClass}"
+			forceSelection="false">
+			<ui:insert/>
+		</p:autoComplete>
+	</h:panelGroup>
+</ui:composition>
\ No newline at end of file
diff --git a/src/main/webapp/WEB-INF/taglib/autocomplete/multiAutoComplete.xhtml b/src/main/webapp/WEB-INF/taglib/autocomplete/multiAutoComplete.xhtml
new file mode 100644
index 0000000..cf5fc18
--- /dev/null
+++ b/src/main/webapp/WEB-INF/taglib/autocomplete/multiAutoComplete.xhtml
@@ -0,0 +1,25 @@
+<ui:composition xmlns="http://www.w3.org/1999/xhtml"
+	xmlns:ui="http://java.sun.com/jsf/facelets"
+	xmlns:p="http://primefaces.org/ui"
+	xmlns:f="http://java.sun.com/jsf/core"
+	xmlns:h="http://java.sun.com/jsf/html"
+	xmlns:app="http://springfuse.jaxio.com/app">
+	<app:outputLabel for="#{id}_input" value="#{label}" required="#{required}" rendered="#{rendered}" styleClass="#{styleClass}" />
+	<h:panelGroup id="#{id}Grid" styleClass="aria-role-presentation" rendered="#{empty rendered ? true : rendered}">
+		<p:autoComplete id="#{id}" value="#{value.selected}" label="#{resourcesUtil.getProperty(label)}"
+			completeMethod="#{controller[(empty completeMethod) ? 'complete' : completeMethod]}"
+			var="item"
+			itemValue="#{item}"
+			itemLabel="#{printer.print(item)}"
+			converter="#{genericJsfConverter}"
+			dropdown="true"
+			multiple="true"
+			minQueryLength="#{empty minQueryLength ? 2 : minQueryLength}"
+			forceSelection="#{forceSelection}"
+			styleClass="#{styleClass}"
+			size="#{empty size ? 50 : size}">
+			<f:attribute name="completeOnProperties" value="#{completeOnProperties}" />
+			<ui:insert/>
+		</p:autoComplete>
+	</h:panelGroup>
+</ui:composition>
diff --git a/src/main/webapp/WEB-INF/taglib/button/saveButton.xhtml b/src/main/webapp/WEB-INF/taglib/button/saveButton.xhtml
new file mode 100644
index 0000000..c47a225
--- /dev/null
+++ b/src/main/webapp/WEB-INF/taglib/button/saveButton.xhtml
@@ -0,0 +1,16 @@
+<ui:composition xmlns="http://www.w3.org/1999/xhtml"
+	xmlns:ui="http://java.sun.com/jsf/facelets"
+	xmlns:p="http://primefaces.org/ui">
+	<!-- Display commandButton for 'saveAndClose' or 'ok' action depending on the context -->
+	<p:commandButton id="saveAndClose" action="#{bean.saveAndClose()}" ajax="true" update="messages delete" process="@form"
+		styleClass="aria-save-button default"
+		icon="ui-icon-disk"
+		value="#{msg.menu_save}"
+		title="#{msg.menu_save} #{resourcesUtil.getProperty(title)}"
+		rendered="#{not sub and not readonly}" />
+	<p:commandButton id="ok" action="#{bean.ok()}" process="@form" ajax="true" update="messages"
+		styleClass="default"
+		icon="ui-icon-check"
+		value="${msg.submit}"
+		rendered="#{sub and not readonly}" />
+</ui:composition>
\ No newline at end of file
diff --git a/src/main/webapp/WEB-INF/taglib/components.xml b/src/main/webapp/WEB-INF/taglib/components.xml
new file mode 100644
index 0000000..6a2f08e
--- /dev/null
+++ b/src/main/webapp/WEB-INF/taglib/components.xml
@@ -0,0 +1,292 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!--
+ ! (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ ! Source code generated by Celerio, a Jaxio product
+ ! Want to purchase Celerio ? email us at info@jaxio.com
+ ! Follow us on twitter: @springfuse
+ ! Documentation: http://www.jaxio.com/documentation/celerio/
+ ! Template pack-jsf2-spring-conversation:src/main/webapp/WEB-INF/taglib/components.p.vm.xml
+-->
+<facelet-taglib xmlns="http://java.sun.com/xml/ns/javaee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-facelettaglibrary_2_0.xsd" version="2.0">
+	<namespace>http://springfuse.jaxio.com/app</namespace>
+	<!-- Auto complete -->
+	<tag>
+		<tag-name>autoComplete</tag-name>
+		<source>autocomplete/autoComplete.xhtml</source>
+		<attribute>
+			<description>Unique identifier in for the underlying auto-complete component. This id is also used to build the label id etc.</description>
+			<name>id</name>
+			<required>true</required>
+		</attribute>
+		<attribute>
+			<description>Label to display.</description>
+			<name>label</name>
+			<required>true</required>
+		</attribute>
+		<attribute>
+			<description>Value of the component.</description>
+			<name>value</name>
+			<required>true</required>
+		</attribute>
+	</tag>
+	<tag>
+		<tag-name>multiAutoComplete</tag-name>
+		<source>autocomplete/multiAutoComplete.xhtml</source>
+		<attribute>
+			<description>Unique identifier in for the underlying auto-complete component. This id is also used to build the label id etc.</description>
+			<name>id</name>
+			<required>true</required>
+		</attribute>
+		<attribute>
+			<description>Label to display.</description>
+			<name>label</name>
+			<required>true</required>
+		</attribute>
+		<attribute>
+			<description>Value of the component.</description>
+			<name>value</name>
+			<required>true</required>
+		</attribute>
+	</tag>
+	<tag>
+		<tag-name>inputMultiAutoComplete</tag-name>
+		<source>autocomplete/inputMultiAutoComplete.xhtml</source>
+	</tag>
+	<tag>
+		<tag-name>inputMultiEnumAutoComplete</tag-name>
+		<source>autocomplete/inputMultiEnumAutoComplete.xhtml</source>
+	</tag>
+	<!-- Panels -->
+	<tag>
+		<tag-name>edit</tag-name>
+		<source>panel/edit.xhtml</source>
+	</tag>
+	<tag>
+		<tag-name>search</tag-name>
+		<source>panel/search.xhtml</source>
+	</tag>
+	<!-- Buttons -->
+	<tag>
+		<tag-name>saveButton</tag-name>
+		<source>button/saveButton.xhtml</source>
+	</tag>
+	<!-- Dialogs -->
+	<tag>
+		<tag-name>confirmToManyRemoveDialog</tag-name>
+		<source>dialog/confirmToManyRemoveDialog.xhtml</source>
+	</tag>
+	<!-- Icons -->
+	<tag>
+		<tag-name>iconAdd</tag-name>
+		<source>icon/iconAdd.xhtml</source>
+	</tag>
+	<tag>
+		<tag-name>iconView</tag-name>
+		<source>icon/iconView.xhtml</source>
+	</tag>
+	<tag>
+		<tag-name>iconDelete</tag-name>
+		<source>icon/iconDelete.xhtml</source>
+	</tag>
+	<tag>
+		<tag-name>iconRemove</tag-name>
+		<source>icon/iconRemove.xhtml</source>
+	</tag>
+	<tag>
+		<tag-name>iconEdit</tag-name>
+		<source>icon/iconEdit.xhtml</source>
+	</tag>
+	<tag>
+		<tag-name>iconSearch</tag-name>
+		<source>icon/iconSearch.xhtml</source>
+	</tag>
+	<tag>
+		<tag-name>iconSelect</tag-name>
+		<source>icon/iconSelect.xhtml</source>
+	</tag>
+	<tag>
+		<tag-name>iconMultiSelect</tag-name>
+		<source>icon/iconMultiSelect.xhtml</source>
+	</tag>
+	<!-- tag used in edit form -->
+	<tag>
+		<tag-name>input</tag-name>
+		<source>input/input.xhtml</source>
+	</tag>
+	<tag>
+		<tag-name>inputPassword</tag-name>
+		<source>input/inputPassword.xhtml</source>
+	</tag>
+	<tag>
+		<tag-name>inputEditor</tag-name>
+		<source>input/inputEditor.xhtml</source>
+	</tag>
+	<tag>
+		<tag-name>inputTextArea</tag-name>
+		<source>input/inputTextArea.xhtml</source>
+	</tag>
+	<tag>
+		<tag-name>inputBoolean</tag-name>
+		<source>input/inputBoolean.xhtml</source>
+	</tag>
+	<tag>
+		<tag-name>inputDate</tag-name>
+		<source>input/inputDate.xhtml</source>
+	</tag>
+	<tag>
+		<tag-name>inputDateTime</tag-name>
+		<source>input/inputDateTime.xhtml</source>
+	</tag>
+	<tag>
+		<tag-name>inputLocalDate</tag-name>
+		<source>input/inputLocalDate.xhtml</source>
+	</tag>
+	<tag>
+		<tag-name>inputLocalDateTime</tag-name>
+		<source>input/inputLocalDateTime.xhtml</source>
+	</tag>
+	<tag>
+		<tag-name>inputDateAria</tag-name>
+		<source>input/inputDateAria.xhtml</source>
+	</tag>
+	<tag>
+		<tag-name>inputDateTimeAria</tag-name>
+		<source>input/inputDateTimeAria.xhtml</source>
+	</tag>
+	<tag>
+		<tag-name>inputLocalDateAria</tag-name>
+		<source>input/inputLocalDateAria.xhtml</source>
+	</tag>
+	<tag>
+		<tag-name>inputLocalDateTimeAria</tag-name>
+		<source>input/inputLocalDateTimeAria.xhtml</source>
+	</tag>
+	<tag>
+		<tag-name>inputFile</tag-name>
+		<source>input/inputFile.xhtml</source>
+	</tag>
+	<!-- Output -->
+	<tag>
+		<tag-name>audit</tag-name>
+		<source>output/audit.xhtml</source>
+	</tag>
+	<tag>
+		<tag-name>conversationDebug</tag-name>
+		<source>output/conversationDebug.xhtml</source>
+	</tag>
+	<tag>
+		<tag-name>outputCurrency</tag-name>
+		<source>output/outputCurrency.xhtml</source>
+	</tag>
+	<tag>
+		<tag-name>outputDate</tag-name>
+		<source>output/outputDate.xhtml</source>
+	</tag>
+	<tag>
+		<tag-name>outputDateTime</tag-name>
+		<source>output/outputDateTime.xhtml</source>
+	</tag>
+	<tag>
+		<tag-name>outputDecimal</tag-name>
+		<source>output/outputDecimal.xhtml</source>
+	</tag>
+	<tag>
+		<tag-name>outputFile</tag-name>
+		<source>output/outputFile.xhtml</source>
+	</tag>
+	<tag>
+		<tag-name>outputInteger</tag-name>
+		<source>output/outputInteger.xhtml</source>
+	</tag>
+	<tag>
+		<tag-name>outputLabel</tag-name>
+		<source>output/outputLabel.xhtml</source>
+	</tag>
+	<tag>
+		<tag-name>outputLocalDate</tag-name>
+		<source>output/outputLocalDate.xhtml</source>
+	</tag>
+	<tag>
+		<tag-name>outputLocalDateTime</tag-name>
+		<source>output/outputLocalDateTime.xhtml</source>
+	</tag>
+	<tag>
+		<tag-name>outputTime</tag-name>
+		<source>output/outputTime.xhtml</source>
+	</tag>	
+	<tag>
+		<tag-name>print</tag-name>
+		<source>output/print.xhtml</source>
+	</tag>
+	<!-- Select -->
+	<tag>
+		<tag-name>selectManyBoolean</tag-name>
+		<source>select/selectManyBoolean.xhtml</source>
+	</tag>
+	<tag>
+		<tag-name>selectManyBooleanAria</tag-name>
+		<source>select/selectManyBooleanAria.xhtml</source>
+	</tag>
+	<tag>
+		<tag-name>selectManyEnum</tag-name>
+		<source>select/selectManyEnum.xhtml</source>
+	</tag>
+	<tag>
+		<tag-name>selectManyEnumAria</tag-name>
+		<source>select/selectManyEnumAria.xhtml</source>
+	</tag>
+	<tag>
+		<tag-name>selectOneRadio</tag-name>
+		<source>select/selectOneRadio.xhtml</source>
+	</tag>
+	<tag>
+		<tag-name>selectOneMenu</tag-name>
+		<source>select/selectOneMenu.xhtml</source>
+	</tag>
+	<!-- Ranges -->
+	<tag>
+		<tag-name>rangeDate</tag-name>
+		<source>range/rangeDate.xhtml</source>
+	</tag>
+	<tag>
+		<tag-name>rangeDateAria</tag-name>
+		<source>range/rangeDateAria.xhtml</source>
+	</tag>
+	<tag>
+		<tag-name>rangeDateTime</tag-name>
+		<source>range/rangeDateTime.xhtml</source>
+	</tag>
+	<tag>
+		<tag-name>rangeLocalDate</tag-name>
+		<source>range/rangeLocalDate.xhtml</source>
+	</tag>
+	<tag>
+		<tag-name>rangeLocalDateTime</tag-name>
+		<source>range/rangeLocalDateTime.xhtml</source>
+	</tag>
+	<tag>
+		<tag-name>rangeInt</tag-name>
+		<source>range/rangeInt.xhtml</source>
+	</tag>
+	<tag>
+		<tag-name>rangeLong</tag-name>
+		<source>range/rangeLong.xhtml</source>
+	</tag>
+	<tag>
+		<tag-name>rangeFloat</tag-name>
+		<source>range/rangeFloat.xhtml</source>
+	</tag>
+	<tag>
+		<tag-name>rangeDouble</tag-name>
+		<source>range/rangeDouble.xhtml</source>
+	</tag>
+	<tag>
+		<tag-name>rangeBigInt</tag-name>
+		<source>range/rangeBigInt.xhtml</source>
+	</tag>
+	<tag>
+		<tag-name>rangeBigDec</tag-name>
+		<source>range/rangeBigDec.xhtml</source>
+	</tag>
+</facelet-taglib>
diff --git a/src/main/webapp/WEB-INF/taglib/dialog/confirmToManyRemoveDialog.xhtml b/src/main/webapp/WEB-INF/taglib/dialog/confirmToManyRemoveDialog.xhtml
new file mode 100644
index 0000000..3268193
--- /dev/null
+++ b/src/main/webapp/WEB-INF/taglib/dialog/confirmToManyRemoveDialog.xhtml
@@ -0,0 +1,17 @@
+<ui:composition xmlns="http://www.w3.org/1999/xhtml" 
+	xmlns:ui="http://java.sun.com/jsf/facelets" 
+	xmlns:p="http://primefaces.org/ui"
+	xmlns:f="http://java.sun.com/jsf/core"
+	xmlns:h="http://java.sun.com/jsf/html"
+	xmlns:app="http://springfuse.jaxio.com/app">
+<p:confirmDialog widgetVar="#{widgetVar}" header="#{msg.menu_remove}?" message="#{msg.dialog_remove_confirm}">
+	<h:panelGrid id="#{widgetVar}Content" columns="1" cellpadding="4" style="margin:0 auto;">
+		<app:print value="#{toManyAction.model.selectedRow}" />
+	</h:panelGrid>
+	<p:commandButton id="#{widgetVar}Yes" action="#{toManyAction.remove()}"
+		ajax="true" update="#{update}" oncomplete="#{widgetVar}.hide()"
+		immediate="true" process="@this" value="#{msg.yes}" title="#{msg.dialog_delete_confirm} #{msg.yes}" icon="ui-icon-check" />
+	<p:commandButton id="#{widgetVar}No" value="#{msg.no}" title="#{msg.dialog_remove_confirm} #{msg.no}"
+		onclick="#{widgetVar}.hide(); return false;" icon="ui-icon-cancel"/>
+</p:confirmDialog>
+</ui:composition>
diff --git a/src/main/webapp/WEB-INF/taglib/icon/iconAdd.xhtml b/src/main/webapp/WEB-INF/taglib/icon/iconAdd.xhtml
new file mode 100644
index 0000000..0243c91
--- /dev/null
+++ b/src/main/webapp/WEB-INF/taglib/icon/iconAdd.xhtml
@@ -0,0 +1,15 @@
+<ui:composition xmlns="http://www.w3.org/1999/xhtml"
+	xmlns:ui="http://java.sun.com/jsf/facelets" 
+	xmlns:p="http://primefaces.org/ui">
+	<p:commandLink
+		id="#{id}"
+		ajax="false"
+		action="#{model.add()}"
+		process="@form"
+		styleClass="ui-button"
+		rendered="#{empty rendered ? not readonly and permission.canCreate() : rendered}"
+		title="#{resourcesUtil.getProperty('icon_add', resourcesUtil.getProperty(title))}" >
+		<ui:insert/>
+		<div class="ui-button ui-icon iconAdd"/>
+	</p:commandLink>
+</ui:composition>
\ No newline at end of file
diff --git a/src/main/webapp/WEB-INF/taglib/icon/iconDelete.xhtml b/src/main/webapp/WEB-INF/taglib/icon/iconDelete.xhtml
new file mode 100644
index 0000000..91060c2
--- /dev/null
+++ b/src/main/webapp/WEB-INF/taglib/icon/iconDelete.xhtml
@@ -0,0 +1,16 @@
+<ui:composition xmlns="http://www.w3.org/1999/xhtml" 
+	xmlns:ui="http://java.sun.com/jsf/facelets" 
+	xmlns:f="http://java.sun.com/jsf/core"
+	xmlns:p="http://primefaces.org/ui">
+	<p:commandLink 
+		update=":form:askForDeleteItemDialogContent" 
+		process="@this"
+		immediate="true" 
+		oncomplete="askForDeleteItemDialog.show(); APP.focusTo('form:askForDeleteItemDialogNo');"
+		styleClass="ui-button"
+		rendered="#{empty rendered ? not readonly and permission.canDelete(item) : rendered}"
+		title="#{empty item ? resourcesUtil.getProperty(title) : resourcesUtil.getProperty('icon_delete', printer.print(item))}" >
+		<f:setPropertyActionListener value="#{item}" target="#{model.selectedRow}" />
+		<div class="ui-button ui-icon iconDelete"/>
+	</p:commandLink>
+</ui:composition>
\ No newline at end of file
diff --git a/src/main/webapp/WEB-INF/taglib/icon/iconEdit.xhtml b/src/main/webapp/WEB-INF/taglib/icon/iconEdit.xhtml
new file mode 100644
index 0000000..c7a93c6
--- /dev/null
+++ b/src/main/webapp/WEB-INF/taglib/icon/iconEdit.xhtml
@@ -0,0 +1,15 @@
+<ui:composition xmlns="http://www.w3.org/1999/xhtml" 
+	xmlns:ui="http://java.sun.com/jsf/facelets" 
+	xmlns:p="http://primefaces.org/ui">
+	<p:commandLink 
+		ajax="false"
+		action="#{model.edit()}"
+		process="#{empty process? '@form' : process}"
+		disabled="#{disabled}"
+		styleClass="ui-button"
+		rendered="#{empty rendered ? not readonly and permission.canEdit(item) : rendered}"
+		title="#{empty item ? resourcesUtil.getProperty(title) : resourcesUtil.getProperty('icon_edit', printer.print(item))}">
+		<ui:insert/>
+		<div class="ui-button ui-icon iconEdit"/>
+	</p:commandLink>
+</ui:composition>
\ No newline at end of file
diff --git a/src/main/webapp/WEB-INF/taglib/icon/iconMultiSelect.xhtml b/src/main/webapp/WEB-INF/taglib/icon/iconMultiSelect.xhtml
new file mode 100644
index 0000000..7b7506f
--- /dev/null
+++ b/src/main/webapp/WEB-INF/taglib/icon/iconMultiSelect.xhtml
@@ -0,0 +1,16 @@
+<ui:composition xmlns="http://www.w3.org/1999/xhtml"
+	xmlns:ui="http://java.sun.com/jsf/facelets"
+	xmlns:p="http://primefaces.org/ui">
+	<p:commandLink
+		ajax="false"
+		action="#{model.multiSelect()}"
+		process="@this"
+		disabled="#{readonly}"
+		immediate="#{not empty immediate and immediate}"
+		styleClass="ui-button"
+		rendered="#{empty rendered ? not sub and permission.canSelect() : rendered}"
+		title="#{resourcesUtil.getProperty('icon_multiselect', resourcesUtil.getProperty(title))}" >
+		<ui:insert/>
+		<div class="ui-button ui-icon iconSelect"/>
+	</p:commandLink>
+</ui:composition>
diff --git a/src/main/webapp/WEB-INF/taglib/icon/iconRemove.xhtml b/src/main/webapp/WEB-INF/taglib/icon/iconRemove.xhtml
new file mode 100644
index 0000000..c6a94eb
--- /dev/null
+++ b/src/main/webapp/WEB-INF/taglib/icon/iconRemove.xhtml
@@ -0,0 +1,15 @@
+<ui:composition xmlns="http://www.w3.org/1999/xhtml" 
+	xmlns:ui="http://java.sun.com/jsf/facelets" 
+	xmlns:p="http://primefaces.org/ui">
+	<p:commandLink 
+		update=":form:#{dialogWidgetVar}Content"
+		process="@this"
+		immediate="true"
+		oncomplete="#{dialogWidgetVar}.show(); APP.focusTo('form:#{dialogWidgetVar}No');"
+		styleClass="ui-button"
+		rendered="#{empty rendered ? not readonly and permission.canDelete(item) : rendered}"
+		title="#{empty item ? resourcesUtil.getProperty(title) : resourcesUtil.getProperty('icon_remove', printer.print(item))}">
+		<ui:insert/>
+		<div class="ui-button ui-icon iconDelete"/>
+	</p:commandLink>
+</ui:composition>
diff --git a/src/main/webapp/WEB-INF/taglib/icon/iconSearch.xhtml b/src/main/webapp/WEB-INF/taglib/icon/iconSearch.xhtml
new file mode 100644
index 0000000..5c5e36c
--- /dev/null
+++ b/src/main/webapp/WEB-INF/taglib/icon/iconSearch.xhtml
@@ -0,0 +1,15 @@
+<ui:composition xmlns="http://www.w3.org/1999/xhtml"
+	xmlns:ui="http://java.sun.com/jsf/facelets"
+	xmlns:p="http://primefaces.org/ui">
+	<p:commandLink
+		id="#{id}"
+		ajax="false"
+		action="#{model.search()}"
+		process="@form"
+		styleClass="ui-button"
+		rendered="#{empty rendered ? not readonly and permission.canSearch() : rendered}"
+		title="#{resourcesUtil.getProperty('icon_search', resourcesUtil.getProperty(title))}">
+		<ui:insert/>
+		<div class="ui-button ui-icon iconSearch"/>
+	</p:commandLink>
+</ui:composition>
diff --git a/src/main/webapp/WEB-INF/taglib/icon/iconSelect.xhtml b/src/main/webapp/WEB-INF/taglib/icon/iconSelect.xhtml
new file mode 100644
index 0000000..1d7ea90
--- /dev/null
+++ b/src/main/webapp/WEB-INF/taglib/icon/iconSelect.xhtml
@@ -0,0 +1,16 @@
+<ui:composition xmlns="http://www.w3.org/1999/xhtml"
+	xmlns:ui="http://java.sun.com/jsf/facelets"
+	xmlns:p="http://primefaces.org/ui">
+	<p:commandLink
+		ajax="false"
+		action="#{model.select()}"
+		process="@this"
+		disabled="#{readonly}"
+		immediate="#{not empty immediate and immediate}"
+		styleClass="ui-button"
+		rendered="#{empty rendered ? sub and permission.canSelect(item) : rendered}"
+		title="#{empty item ? resourcesUtil.getProperty(title) : resourcesUtil.getProperty('icon_select', printer.print(item))}" >
+		<ui:insert/>
+		<div class="ui-button ui-icon iconSelect"/>
+	</p:commandLink>
+</ui:composition>
diff --git a/src/main/webapp/WEB-INF/taglib/icon/iconView.xhtml b/src/main/webapp/WEB-INF/taglib/icon/iconView.xhtml
new file mode 100644
index 0000000..9cd5e60
--- /dev/null
+++ b/src/main/webapp/WEB-INF/taglib/icon/iconView.xhtml
@@ -0,0 +1,14 @@
+<ui:composition xmlns="http://www.w3.org/1999/xhtml"
+	xmlns:ui="http://java.sun.com/jsf/facelets"
+	xmlns:p="http://primefaces.org/ui">
+	<p:commandLink 
+		ajax="false"
+		action="#{model.view()}"
+		process="${empty process? '@form' : process}"
+		styleClass="ui-button"
+		rendered="#{empty rendered ? permission.canView(item) : rendered}"
+		title="#{empty item ? resourcesUtil.getProperty(title) : resourcesUtil.getProperty('icon_view', printer.print(item))}" >
+		<ui:insert/>
+		<div class="ui-button ui-icon iconView"/>
+	</p:commandLink>
+</ui:composition>
\ No newline at end of file
diff --git a/src/main/webapp/WEB-INF/taglib/input/input.xhtml b/src/main/webapp/WEB-INF/taglib/input/input.xhtml
new file mode 100644
index 0000000..256444d
--- /dev/null
+++ b/src/main/webapp/WEB-INF/taglib/input/input.xhtml
@@ -0,0 +1,19 @@
+<ui:composition xmlns="http://www.w3.org/1999/xhtml" 
+	xmlns:ui="http://java.sun.com/jsf/facelets" 
+	xmlns:p="http://primefaces.org/ui"
+	xmlns:f="http://java.sun.com/jsf/core"
+	xmlns:h="http://java.sun.com/jsf/html"
+	xmlns:app="http://springfuse.jaxio.com/app">
+	<app:outputLabel for="#{id}" value="#{label}" required="#{required}" rendered="#{rendered}" styleClass="#{styleClass}" />
+	<h:panelGroup rendered="#{(empty readonly or not readonly) and (empty rendered or rendered)}">
+		<p:inputText id="#{id}" label="#{resourcesUtil.getProperty(label)}" value="#{value}" 
+			size="#{empty size ? 50 : (size lt 50 ? size : 50)}" 			
+			maxlength="#{not empty maxlength ? maxlength : (not empty size ? size : 50)}" 
+			styleClass="#{styleClass}">
+			<f:validateBean binding="#{lenientBeanValidator}"/>
+			<ui:insert/>
+		</p:inputText>
+		<p:tooltip for="#{id}" value="#{tooltip}" showEffect="slide" rendered="#{not empty tooltip}"/>
+	</h:panelGroup>
+	<h:outputText value="#{value}" rendered="#{readonly and (empty rendered or rendered)}" />
+</ui:composition>
diff --git a/src/main/webapp/WEB-INF/taglib/input/inputBoolean.xhtml b/src/main/webapp/WEB-INF/taglib/input/inputBoolean.xhtml
new file mode 100644
index 0000000..701a55e
--- /dev/null
+++ b/src/main/webapp/WEB-INF/taglib/input/inputBoolean.xhtml
@@ -0,0 +1,17 @@
+<ui:composition xmlns="http://www.w3.org/1999/xhtml" 
+	xmlns:ui="http://java.sun.com/jsf/facelets" 
+	xmlns:p="http://primefaces.org/ui"
+	xmlns:f="http://java.sun.com/jsf/core"
+	xmlns:h="http://java.sun.com/jsf/html"
+	xmlns:app="http://springfuse.jaxio.com/app"
+	xmlns:appcc="http://java.sun.com/jsf/composite/components">
+	<app:outputLabel for="#{id}" value="#{label}" required="#{required}" rendered="#{rendered}" />
+	<h:panelGroup rendered="#{(empty readonly or not readonly) and (empty rendered or rendered)}">
+		<h:selectBooleanCheckbox id="#{id}" label="#{resourcesUtil.getProperty(label)}" value="#{value}">
+			<f:validateBean binding="#{lenientBeanValidator}"/>
+			<ui:insert/>
+		</h:selectBooleanCheckbox>
+		<p:tooltip for="#{id}" value="#{tooltip}" showEffect="slide" rendered="#{not empty tooltip}"/>
+	</h:panelGroup>
+	<h:outputText value="#{value}" rendered="#{readonly and (empty rendered or rendered)}" />
+</ui:composition>
diff --git a/src/main/webapp/WEB-INF/taglib/input/inputDate.xhtml b/src/main/webapp/WEB-INF/taglib/input/inputDate.xhtml
new file mode 100644
index 0000000..b65b0e0
--- /dev/null
+++ b/src/main/webapp/WEB-INF/taglib/input/inputDate.xhtml
@@ -0,0 +1,19 @@
+<ui:composition xmlns="http://www.w3.org/1999/xhtml" 
+	xmlns:ui="http://java.sun.com/jsf/facelets" 
+	xmlns:p="http://primefaces.org/ui"
+	xmlns:f="http://java.sun.com/jsf/core"
+	xmlns:h="http://java.sun.com/jsf/html"
+	xmlns:app="http://springfuse.jaxio.com/app">
+	<app:outputLabel for="#{id}_input" value="#{label}" required="#{required}" rendered="#{rendered}" />
+	<h:panelGroup rendered="#{(empty readonly or not readonly) and (empty rendered or rendered)}">
+		<p:calendar id="#{id}" value="#{value}" pattern="yyyy-MM-dd" showButtonPanel="true" navigator="true">
+			<f:convertDateTime pattern="yyyy-MM-dd" />
+			<f:validateBean binding="#{lenientBeanValidator}"/>
+			<ui:insert/>
+		</p:calendar>
+		<p:tooltip for="#{id}" value="#{tooltip}" showEffect="slide" rendered="#{not empty tooltip}"/>
+	</h:panelGroup>
+	<h:outputText value="#{value}" rendered="#{readonly and (empty rendered or rendered)}">
+		<f:convertDateTime pattern="yyyy-MM-dd" />
+	</h:outputText>
+</ui:composition>
diff --git a/src/main/webapp/WEB-INF/taglib/input/inputDateAria.xhtml b/src/main/webapp/WEB-INF/taglib/input/inputDateAria.xhtml
new file mode 100644
index 0000000..11105a6
--- /dev/null
+++ b/src/main/webapp/WEB-INF/taglib/input/inputDateAria.xhtml
@@ -0,0 +1,20 @@
+<ui:composition xmlns="http://www.w3.org/1999/xhtml" 
+	xmlns:ui="http://java.sun.com/jsf/facelets" 
+	xmlns:p="http://primefaces.org/ui"
+	xmlns:f="http://java.sun.com/jsf/core"
+	xmlns:h="http://java.sun.com/jsf/html"
+	xmlns:app="http://springfuse.jaxio.com/app"	
+	xmlns:appcc="http://java.sun.com/jsf/composite/components">
+	<app:outputLabel for="#{id}" value="#{label}" required="#{required}" rendered="#{rendered}" />
+	<h:panelGroup rendered="#{(empty readonly or not readonly) and (empty rendered or rendered)}">
+		<appcc:datePicker id="#{id}" label="#{resourcesUtil.getProperty(label)}" value="#{value}">
+			<f:convertDateTime pattern="yyyy-MM-dd" />
+			<f:validateBean binding="#{lenientBeanValidator}"/>
+			<ui:insert/>
+		</appcc:datePicker>
+		<p:tooltip for="#{id}" value="#{tooltip}" showEffect="slide" rendered="#{not empty tooltip}"/>
+	</h:panelGroup>
+	<h:outputText value="#{value}" rendered="#{readonly and (empty rendered or rendered)}">
+		<f:convertDateTime pattern="yyyy-MM-dd" />
+	</h:outputText>
+</ui:composition>
diff --git a/src/main/webapp/WEB-INF/taglib/input/inputDateTime.xhtml b/src/main/webapp/WEB-INF/taglib/input/inputDateTime.xhtml
new file mode 100644
index 0000000..13b9fcf
--- /dev/null
+++ b/src/main/webapp/WEB-INF/taglib/input/inputDateTime.xhtml
@@ -0,0 +1,19 @@
+<ui:composition xmlns="http://www.w3.org/1999/xhtml" 
+	xmlns:ui="http://java.sun.com/jsf/facelets" 
+	xmlns:p="http://primefaces.org/ui"
+	xmlns:f="http://java.sun.com/jsf/core"
+	xmlns:h="http://java.sun.com/jsf/html"
+	xmlns:app="http://springfuse.jaxio.com/app">
+	<app:outputLabel for="#{id}_input" value="#{label}" required="#{required}" rendered="#{rendered}" />
+	<h:panelGroup rendered="#{(empty readonly or not readonly) and (empty rendered or rendered)}">
+		<p:calendar id="#{id}" value="#{value}" pattern="yyyy-MM-dd HH:mm" showButtonPanel="true" navigator="true">
+			<f:convertDateTime pattern="yyyy-MM-dd HH:mm" />
+			<f:validateBean binding="#{lenientBeanValidator}"/>
+			<ui:insert/>
+		</p:calendar>
+		<p:tooltip for="#{id}" value="#{tooltip}" showEffect="slide" rendered="#{not empty tooltip}"/>
+	</h:panelGroup>
+	<h:outputText value="#{value}" rendered="#{readonly and (empty rendered or rendered)}">
+		<f:convertDateTime pattern="yyyy-MM-dd HH:mm" />
+	</h:outputText>
+</ui:composition>
diff --git a/src/main/webapp/WEB-INF/taglib/input/inputDateTimeAria.xhtml b/src/main/webapp/WEB-INF/taglib/input/inputDateTimeAria.xhtml
new file mode 100644
index 0000000..e6207fc
--- /dev/null
+++ b/src/main/webapp/WEB-INF/taglib/input/inputDateTimeAria.xhtml
@@ -0,0 +1,20 @@
+<ui:composition xmlns="http://www.w3.org/1999/xhtml" 
+	xmlns:ui="http://java.sun.com/jsf/facelets" 
+	xmlns:p="http://primefaces.org/ui"
+	xmlns:f="http://java.sun.com/jsf/core"
+	xmlns:h="http://java.sun.com/jsf/html"
+	xmlns:app="http://springfuse.jaxio.com/app"	
+	xmlns:appcc="http://java.sun.com/jsf/composite/components">
+	<app:outputLabel for="#{id}" value="#{label}" required="#{required}" rendered="#{rendered}" />
+	<h:panelGroup rendered="#{(empty readonly or not readonly) and (empty rendered or rendered)}">
+		<appcc:datePicker id="#{id}" label="#{resourcesUtil.getProperty(label)}" value="#{value}" timeRendered="true">
+			<f:convertDateTime pattern="yyyy-MM-dd HH:mm" />
+			<f:validateBean binding="#{lenientBeanValidator}"/>
+			<ui:insert/>
+		</appcc:datePicker>
+		<p:tooltip for="#{id}" value="#{tooltip}" showEffect="slide" rendered="#{not empty tooltip}"/>
+	</h:panelGroup>
+	<h:outputText value="#{value}" rendered="#{readonly and (empty rendered or rendered)}">
+		<f:convertDateTime pattern="yyyy-MM-dd HH:mm" />
+	</h:outputText>
+</ui:composition>
diff --git a/src/main/webapp/WEB-INF/taglib/input/inputEditor.xhtml b/src/main/webapp/WEB-INF/taglib/input/inputEditor.xhtml
new file mode 100644
index 0000000..ebd765e
--- /dev/null
+++ b/src/main/webapp/WEB-INF/taglib/input/inputEditor.xhtml
@@ -0,0 +1,16 @@
+<ui:composition xmlns="http://www.w3.org/1999/xhtml" 
+	xmlns:ui="http://java.sun.com/jsf/facelets" 
+	xmlns:p="http://primefaces.org/ui"
+	xmlns:f="http://java.sun.com/jsf/core"
+	xmlns:h="http://java.sun.com/jsf/html"
+	xmlns:app="http://springfuse.jaxio.com/app">
+	<app:outputLabel for="#{id}" value="#{label}" required="#{required}" rendered="#{rendered}" />
+	<h:panelGroup rendered="#{(empty readonly or not readonly) and (empty rendered or rendered)}">
+		<p:editor id="#{id}" value="#{value}" width="600">
+			<f:validateBean binding="#{lenientBeanValidator}"/>
+			<ui:insert/>
+		</p:editor>
+		<p:tooltip for="#{id}" value="#{tooltip}" showEffect="slide" rendered="#{not empty tooltip}"/>
+	</h:panelGroup>
+	<h:outputText value="#{value}" rendered="#{readonly and (empty rendered or rendered)}" />
+</ui:composition>
\ No newline at end of file
diff --git a/src/main/webapp/WEB-INF/taglib/input/inputFile.xhtml b/src/main/webapp/WEB-INF/taglib/input/inputFile.xhtml
new file mode 100644
index 0000000..d5eb3fd
--- /dev/null
+++ b/src/main/webapp/WEB-INF/taglib/input/inputFile.xhtml
@@ -0,0 +1,20 @@
+<ui:composition xmlns="http://www.w3.org/1999/xhtml" 
+	xmlns:ui="http://java.sun.com/jsf/facelets" 
+	xmlns:p="http://primefaces.org/ui"
+	xmlns:f="http://java.sun.com/jsf/core"
+	xmlns:h="http://java.sun.com/jsf/html"
+	xmlns:app="http://springfuse.jaxio.com/app">
+	<app:outputLabel for="#{id}" value="#{label}" required="#{required}" rendered="#{rendered}" />
+	<h:panelGroup id="#{id}OP" rendered="#{empty rendered or rendered}">
+		<p:fileUpload id="#{id}"
+			fileUploadListener="#{fileupload[action]}"
+			auto="true"
+			update="#{id}OP"
+			sizeLimit="10000000"
+			allowTypes="/(\.|\/)(xml|zip|tgz|html|gif|jpg|jpeg|png|txt|doc|docx|rtf|ppt|pptx|pdf|epub|key|xls|xlsx|number|pages)$/"
+			rendered="#{!readonly}" />
+		<app:outputFile filename="#{object[filename]}" stream="#{stream}" />
+		<h:outputText rendered="#{empty stream}" value="#{resourcesUtil.getProperty('null_file_value')}" />
+		<p:tooltip for="#{id}" value="#{tooltip}" showEffect="slide" rendered="#{not empty tooltip}"/>
+	</h:panelGroup>
+</ui:composition>
\ No newline at end of file
diff --git a/src/main/webapp/WEB-INF/taglib/input/inputLocalDate.xhtml b/src/main/webapp/WEB-INF/taglib/input/inputLocalDate.xhtml
new file mode 100644
index 0000000..6073a9b
--- /dev/null
+++ b/src/main/webapp/WEB-INF/taglib/input/inputLocalDate.xhtml
@@ -0,0 +1,16 @@
+<ui:composition xmlns="http://www.w3.org/1999/xhtml" 
+	xmlns:ui="http://java.sun.com/jsf/facelets" 
+	xmlns:p="http://primefaces.org/ui"
+	xmlns:f="http://java.sun.com/jsf/core"
+	xmlns:h="http://java.sun.com/jsf/html"
+	xmlns:app="http://springfuse.jaxio.com/app">
+	<app:outputLabel for="#{id}_input" value="#{label}" required="#{required}" rendered="#{rendered}" />
+	<h:panelGroup rendered="#{(empty readonly or not readonly) and (empty rendered or rendered)}" navigator="true">
+		<p:calendar id="#{id}" value="#{value}" pattern="yyyy-MM-dd" converter="#{localDateConverter}">
+			<f:validateBean binding="#{lenientBeanValidator}"/>
+			<ui:insert/>
+		</p:calendar>
+		<p:tooltip for="#{id}" value="#{tooltip}" showEffect="slide" rendered="#{not empty tooltip}"/>
+	</h:panelGroup>
+	<h:outputText value="#{value}" rendered="#{readonly and (empty rendered or rendered)}" converter="#{localDateConverter}" />
+</ui:composition>
diff --git a/src/main/webapp/WEB-INF/taglib/input/inputLocalDateAria.xhtml b/src/main/webapp/WEB-INF/taglib/input/inputLocalDateAria.xhtml
new file mode 100644
index 0000000..5b1e657
--- /dev/null
+++ b/src/main/webapp/WEB-INF/taglib/input/inputLocalDateAria.xhtml
@@ -0,0 +1,17 @@
+<ui:composition xmlns="http://www.w3.org/1999/xhtml" 
+	xmlns:ui="http://java.sun.com/jsf/facelets" 
+	xmlns:p="http://primefaces.org/ui"
+	xmlns:f="http://java.sun.com/jsf/core"
+	xmlns:h="http://java.sun.com/jsf/html"
+	xmlns:app="http://springfuse.jaxio.com/app"	
+	xmlns:appcc="http://java.sun.com/jsf/composite/components">
+	<app:outputLabel for="#{id}" value="#{label}" required="#{required}" rendered="#{rendered}" />
+	<h:panelGroup rendered="#{(empty readonly or not readonly) and (empty rendered or rendered)}">
+		<appcc:datePicker id="#{id}" label="#{resourcesUtil.getProperty(label)}" value="#{value}" converter="#{localDateConverter}">
+			<f:validateBean binding="#{lenientBeanValidator}"/>
+			<ui:insert/>
+		</appcc:datePicker>
+		<p:tooltip for="#{id}" value="#{tooltip}" showEffect="slide" rendered="#{not empty tooltip}"/>
+	</h:panelGroup>
+	<h:outputText value="#{value}" rendered="#{readonly and (empty rendered or rendered)}" converter="#{localDateConverter}" />
+</ui:composition>
diff --git a/src/main/webapp/WEB-INF/taglib/input/inputLocalDateTime.xhtml b/src/main/webapp/WEB-INF/taglib/input/inputLocalDateTime.xhtml
new file mode 100644
index 0000000..5106875
--- /dev/null
+++ b/src/main/webapp/WEB-INF/taglib/input/inputLocalDateTime.xhtml
@@ -0,0 +1,16 @@
+<ui:composition xmlns="http://www.w3.org/1999/xhtml" 
+	xmlns:ui="http://java.sun.com/jsf/facelets" 
+	xmlns:p="http://primefaces.org/ui"
+	xmlns:f="http://java.sun.com/jsf/core"
+	xmlns:h="http://java.sun.com/jsf/html"
+	xmlns:app="http://springfuse.jaxio.com/app">
+	<app:outputLabel for="#{id}_input" value="#{label}" required="#{required}" rendered="#{rendered}" />
+	<h:panelGroup rendered="#{(empty readonly or not readonly) and (empty rendered or rendered)}">
+		<p:calendar id="#{id}" value="#{value}" pattern="yyyy-MM-dd HH:mm" navigator="true" converter="#{localDateTimeConverter}">
+			<f:validateBean binding="#{lenientBeanValidator}"/>
+			<ui:insert/>
+		</p:calendar>
+		<p:tooltip for="#{id}" value="#{tooltip}" showEffect="slide" rendered="#{not empty tooltip}"/>
+	</h:panelGroup>
+	<h:outputText value="#{value}" rendered="#{readonly and (empty rendered or rendered)}" converter="#{localDateTimeConverter}" />
+</ui:composition>
diff --git a/src/main/webapp/WEB-INF/taglib/input/inputLocalDateTimeAria.xhtml b/src/main/webapp/WEB-INF/taglib/input/inputLocalDateTimeAria.xhtml
new file mode 100644
index 0000000..aa6f2d9
--- /dev/null
+++ b/src/main/webapp/WEB-INF/taglib/input/inputLocalDateTimeAria.xhtml
@@ -0,0 +1,17 @@
+<ui:composition xmlns="http://www.w3.org/1999/xhtml" 
+	xmlns:ui="http://java.sun.com/jsf/facelets" 
+	xmlns:p="http://primefaces.org/ui"
+	xmlns:f="http://java.sun.com/jsf/core"
+	xmlns:h="http://java.sun.com/jsf/html"
+	xmlns:app="http://springfuse.jaxio.com/app"	
+	xmlns:appcc="http://java.sun.com/jsf/composite/components">
+	<app:outputLabel for="#{id}" value="#{label}" required="#{required}" rendered="#{rendered}" />
+	<h:panelGroup rendered="#{(empty readonly or not readonly) and (empty rendered or rendered)}">
+		<appcc:datePicker id="#{id}" label="#{resourcesUtil.getProperty(label)}" value="#{value}" timeRendered="true" converter="#{localDateTimeConverter}">
+			<f:validateBean binding="#{lenientBeanValidator}"/>
+			<ui:insert/>
+		</appcc:datePicker>
+		<p:tooltip for="#{id}" value="#{tooltip}" showEffect="slide" rendered="#{not empty tooltip}"/>
+	</h:panelGroup>
+	<h:outputText value="#{value}" rendered="#{readonly and (empty rendered or rendered)}" converter="#{localDateTimeConverter}" />
+</ui:composition>
diff --git a/src/main/webapp/WEB-INF/taglib/input/inputPassword.xhtml b/src/main/webapp/WEB-INF/taglib/input/inputPassword.xhtml
new file mode 100644
index 0000000..6965eb9
--- /dev/null
+++ b/src/main/webapp/WEB-INF/taglib/input/inputPassword.xhtml
@@ -0,0 +1,16 @@
+<ui:composition xmlns="http://www.w3.org/1999/xhtml" 
+	xmlns:ui="http://java.sun.com/jsf/facelets" 
+	xmlns:p="http://primefaces.org/ui"
+	xmlns:f="http://java.sun.com/jsf/core"
+	xmlns:h="http://java.sun.com/jsf/html"
+	xmlns:app="http://springfuse.jaxio.com/app">
+	<app:outputLabel for="#{id}" value="#{label}" required="#{required}" rendered="#{rendered}" />
+	<h:panelGroup rendered="#{(empty readonly or not readonly) and (empty rendered or rendered)}">
+		<p:inputText id="#{id}" type="password" label="#{resourcesUtil.getProperty(label)}" value="#{value}" maxlength="#{empty maxlength ? 1000 : maxlength}">
+			<f:validateBean binding="#{lenientBeanValidator}"/>
+			<ui:insert/>
+		</p:inputText>
+		<p:tooltip for="#{id}" value="#{tooltip}" showEffect="slide" rendered="#{not empty tooltip}"/>
+	</h:panelGroup>
+	<h:outputText value="********" rendered="#{readonly and (empty rendered or rendered)}" />
+</ui:composition>
diff --git a/src/main/webapp/WEB-INF/taglib/input/inputTextArea.xhtml b/src/main/webapp/WEB-INF/taglib/input/inputTextArea.xhtml
new file mode 100644
index 0000000..b92b4b3
--- /dev/null
+++ b/src/main/webapp/WEB-INF/taglib/input/inputTextArea.xhtml
@@ -0,0 +1,16 @@
+<ui:composition xmlns="http://www.w3.org/1999/xhtml" 
+	xmlns:ui="http://java.sun.com/jsf/facelets" 
+	xmlns:p="http://primefaces.org/ui"
+	xmlns:f="http://java.sun.com/jsf/core"
+	xmlns:h="http://java.sun.com/jsf/html"
+	xmlns:app="http://springfuse.jaxio.com/app">
+	<app:outputLabel for="#{id}" value="#{label}" required="#{required}" rendered="#{rendered}" />
+	<h:panelGroup rendered="#{(empty readonly or not readonly) and (empty rendered or rendered)}">
+		<p:inputTextarea id="#{id}" value="#{value}" cols="#{empty cols ? 37 : cols}" rows="#{empty rows ? 3 : rows}">
+			<f:validateBean binding="#{lenientBeanValidator}"/>
+			<ui:insert/>
+		</p:inputTextarea>
+		<p:tooltip for="#{id}" value="#{tooltip}" showEffect="slide" rendered="#{not empty tooltip}"/>
+	</h:panelGroup>
+	<h:outputText value="#{value}" rendered="#{readonly and (empty rendered or rendered)}" style="display:block;white-space:pre-line;word-wrap:break-word;width:#{(empty cols ? 37 : cols) * 7}px;" />
+</ui:composition>
\ No newline at end of file
diff --git a/src/main/webapp/WEB-INF/taglib/output/audit.xhtml b/src/main/webapp/WEB-INF/taglib/output/audit.xhtml
new file mode 100644
index 0000000..428b2d3
--- /dev/null
+++ b/src/main/webapp/WEB-INF/taglib/output/audit.xhtml
@@ -0,0 +1,18 @@
+<ui:composition xmlns="http://www.w3.org/1999/xhtml"
+	xmlns:ui="http://java.sun.com/jsf/facelets"
+	xmlns:c="http://java.sun.com/jsp/jstl/core"	
+	xmlns:f="http://java.sun.com/jsf/core"
+	xmlns:h="http://java.sun.com/jsf/html"
+	xmlns:p="http://primefaces.org/ui"
+	xmlns:app="http://springfuse.jaxio.com/app"
+	xmlns:appcc="http://java.sun.com/jsf/composite/components">
+	<c:if test="#{creationAuthor ne null or creationDate ne null or lastModificationAuthor ne null or lastModificationDate ne null}">
+		<app:outputLabel for="audit" value="audit" rendered="#{rendered}" />
+		<h:panelGrid id="audit" rendered="#{empty rendered ? true : rendered}">
+			<h:outputText value="#{msg.creation_author} #{creationAuthor}" rendered="#{not empty creationAuthor}" />
+			<h:outputText value="#{msg.creation_date} #{creationDate}" rendered="#{not empty creationDate}" />
+			<h:outputText value="#{msg.last_modification_author} #{lastModificationAuthor}" rendered="#{not empty lastModificationAuthor}" />
+			<h:outputText value="#{msg.last_modification_date} #{lastModificationDate}" rendered="#{not empty lastModificationDate}" />
+		</h:panelGrid>
+	</c:if>
+</ui:composition>
\ No newline at end of file
diff --git a/src/main/webapp/WEB-INF/taglib/output/conversationDebug.xhtml b/src/main/webapp/WEB-INF/taglib/output/conversationDebug.xhtml
new file mode 100644
index 0000000..296a892
--- /dev/null
+++ b/src/main/webapp/WEB-INF/taglib/output/conversationDebug.xhtml
@@ -0,0 +1,35 @@
+<ui:composition xmlns="http://www.w3.org/1999/xhtml"
+	xmlns:ui="http://java.sun.com/jsf/facelets"
+	xmlns:c="http://java.sun.com/jsf/jstl/core"
+	xmlns:f="http://java.sun.com/jsf/core"
+	xmlns:h="http://java.sun.com/jsf/html"
+	xmlns:p="http://primefaces.org/ui"
+	xmlns:app="http://springfuse.jaxio.com/app"
+	xmlns:appcc="http://java.sun.com/jsf/composite/components">
+	<p:outputPanel
+		rendered="#{not empty conversationManager.currentConversation}">
+		<h3 style="background-color: red; color: yellow; text-align: center">Find
+			below some debug information about the current conversation context</h3>
+		<p:dataTable var="beanEntry"
+			value="#{conversationManager.currentConversation.currentContext.beanEntries}">
+			<p:column headerText="Bean name">
+				<h:outputText value="#{beanEntry.key}" />
+			</p:column>
+
+			<p:column headerText="Bean hashcode">
+				<h:outputText value="#{beanEntry.value.hashCode()}" />
+			</p:column>
+		</p:dataTable>
+
+		<p:dataTable var="varEntry"
+			value="#{conversationManager.currentConversation.currentContext.varEntries}">
+			<p:column headerText="Var name">
+				<h:outputText value="#{varEntry.key}" />
+			</p:column>
+
+			<p:column headerText="Var value">
+				<h:outputText value="#{varEntry.value}" />
+			</p:column>
+		</p:dataTable>
+	</p:outputPanel>
+</ui:composition>
\ No newline at end of file
diff --git a/src/main/webapp/WEB-INF/taglib/output/outputCurrency.xhtml b/src/main/webapp/WEB-INF/taglib/output/outputCurrency.xhtml
new file mode 100644
index 0000000..4efe21b
--- /dev/null
+++ b/src/main/webapp/WEB-INF/taglib/output/outputCurrency.xhtml
@@ -0,0 +1,8 @@
+<ui:composition xmlns="http://www.w3.org/1999/xhtml"
+	xmlns:ui="http://java.sun.com/jsf/facelets"
+	xmlns:f="http://java.sun.com/jsf/core"
+	xmlns:h="http://java.sun.com/jsf/html">	
+	<h:outputText value="#{value}" rendered="#{not empty value and (empty rendered or rendered)}">
+		<f:convertNumber type="currency" />
+	</h:outputText>
+</ui:composition>
\ No newline at end of file
diff --git a/src/main/webapp/WEB-INF/taglib/output/outputDate.xhtml b/src/main/webapp/WEB-INF/taglib/output/outputDate.xhtml
new file mode 100644
index 0000000..9e07a24
--- /dev/null
+++ b/src/main/webapp/WEB-INF/taglib/output/outputDate.xhtml
@@ -0,0 +1,8 @@
+<ui:composition xmlns="http://www.w3.org/1999/xhtml"
+	xmlns:ui="http://java.sun.com/jsf/facelets"
+	xmlns:f="http://java.sun.com/jsf/core"
+	xmlns:h="http://java.sun.com/jsf/html">	
+	<h:outputText value="#{value}" rendered="#{empty rendered or rendered}">
+		<f:convertDateTime />	
+	</h:outputText>
+</ui:composition>
\ No newline at end of file
diff --git a/src/main/webapp/WEB-INF/taglib/output/outputDateTime.xhtml b/src/main/webapp/WEB-INF/taglib/output/outputDateTime.xhtml
new file mode 100644
index 0000000..4792a18
--- /dev/null
+++ b/src/main/webapp/WEB-INF/taglib/output/outputDateTime.xhtml
@@ -0,0 +1,11 @@
+<ui:composition xmlns="http://www.w3.org/1999/xhtml"
+	xmlns:ui="http://java.sun.com/jsf/facelets"
+	xmlns:f="http://java.sun.com/jsf/core"
+	xmlns:h="http://java.sun.com/jsf/html"
+	xmlns:p="http://primefaces.org/ui"
+	xmlns:app="http://springfuse.jaxio.com/app"
+	xmlns:appcc="http://java.sun.com/jsf/composite/components">	
+	<h:outputText value="#{value}" rendered="#{empty rendered or rendered}">
+		<f:convertDateTime type="both" />	
+	</h:outputText>
+</ui:composition>
\ No newline at end of file
diff --git a/src/main/webapp/WEB-INF/taglib/output/outputDecimal.xhtml b/src/main/webapp/WEB-INF/taglib/output/outputDecimal.xhtml
new file mode 100644
index 0000000..7c23f76
--- /dev/null
+++ b/src/main/webapp/WEB-INF/taglib/output/outputDecimal.xhtml
@@ -0,0 +1,8 @@
+<ui:composition xmlns="http://www.w3.org/1999/xhtml"
+	xmlns:ui="http://java.sun.com/jsf/facelets"
+	xmlns:f="http://java.sun.com/jsf/core"
+	xmlns:h="http://java.sun.com/jsf/html">	
+	<h:outputText value="#{value}" rendered="#{not empty value and (empty rendered or rendered)}">
+		<f:convertNumber groupingUsed="true" minFractionDigits="2" />
+	</h:outputText>
+</ui:composition>
\ No newline at end of file
diff --git a/src/main/webapp/WEB-INF/taglib/output/outputFile.xhtml b/src/main/webapp/WEB-INF/taglib/output/outputFile.xhtml
new file mode 100644
index 0000000..3df0c28
--- /dev/null
+++ b/src/main/webapp/WEB-INF/taglib/output/outputFile.xhtml
@@ -0,0 +1,9 @@
+<ui:composition xmlns="http://www.w3.org/1999/xhtml" 
+	xmlns:ui="http://java.sun.com/jsf/facelets" 
+	xmlns:p="http://primefaces.org/ui"
+	xmlns:f="http://java.sun.com/jsf/core"
+	xmlns:h="http://java.sun.com/jsf/html">
+	<h:panelGroup rendered="#{empty rendered ? not empty stream : rendered}">
+		<h:commandLink value="#{empty filename ? resourcesUtil.getProperty('download') : filename}"><p:fileDownload value="#{stream}" /></h:commandLink>
+	</h:panelGroup>
+</ui:composition>
\ No newline at end of file
diff --git a/src/main/webapp/WEB-INF/taglib/output/outputInteger.xhtml b/src/main/webapp/WEB-INF/taglib/output/outputInteger.xhtml
new file mode 100644
index 0000000..a727adc
--- /dev/null
+++ b/src/main/webapp/WEB-INF/taglib/output/outputInteger.xhtml
@@ -0,0 +1,8 @@
+<ui:composition xmlns="http://www.w3.org/1999/xhtml"
+	xmlns:ui="http://java.sun.com/jsf/facelets"
+	xmlns:f="http://java.sun.com/jsf/core"
+	xmlns:h="http://java.sun.com/jsf/html">	
+	<h:outputText value="#{value}" rendered="#{not empty value and (empty rendered or rendered)}">
+		<f:convertNumber groupingUsed="true" minFractionDigits="0" />
+	</h:outputText>
+</ui:composition>
\ No newline at end of file
diff --git a/src/main/webapp/WEB-INF/taglib/output/outputLabel.xhtml b/src/main/webapp/WEB-INF/taglib/output/outputLabel.xhtml
new file mode 100644
index 0000000..df07b82
--- /dev/null
+++ b/src/main/webapp/WEB-INF/taglib/output/outputLabel.xhtml
@@ -0,0 +1,7 @@
+<ui:composition xmlns="http://www.w3.org/1999/xhtml" 
+	xmlns:ui="http://java.sun.com/jsf/facelets" 
+	xmlns:h="http://java.sun.com/jsf/html">
+	<h:panelGrid rendered="#{empty rendered ? true : rendered}">
+		<label for="#{for}" class="#{(required and not (print or readonly)) ? 'required' : ''}#{empty styleClass ? '' : ' '}#{styleClass}"> #{resourcesUtil.getProperty(value)}#{(required and not (print or readonly))  ? msg.label_required_suffix : ''}</label>
+	</h:panelGrid>
+</ui:composition>
\ No newline at end of file
diff --git a/src/main/webapp/WEB-INF/taglib/output/outputLocalDate.xhtml b/src/main/webapp/WEB-INF/taglib/output/outputLocalDate.xhtml
new file mode 100644
index 0000000..cc88cd0
--- /dev/null
+++ b/src/main/webapp/WEB-INF/taglib/output/outputLocalDate.xhtml
@@ -0,0 +1,11 @@
+<ui:composition xmlns="http://www.w3.org/1999/xhtml"
+	xmlns:ui="http://java.sun.com/jsf/facelets"
+	xmlns:f="http://java.sun.com/jsf/core"
+	xmlns:h="http://java.sun.com/jsf/html"
+	xmlns:p="http://primefaces.org/ui"
+	xmlns:app="http://springfuse.jaxio.com/app"
+	xmlns:appcc="http://java.sun.com/jsf/composite/components">	
+	<h:outputText value="#{value.toDate()}" rendered="#{not empty value and (empty rendered or rendered)}">
+		<f:convertDateTime />	
+	</h:outputText>
+</ui:composition>
\ No newline at end of file
diff --git a/src/main/webapp/WEB-INF/taglib/output/outputLocalDateTime.xhtml b/src/main/webapp/WEB-INF/taglib/output/outputLocalDateTime.xhtml
new file mode 100644
index 0000000..176d749
--- /dev/null
+++ b/src/main/webapp/WEB-INF/taglib/output/outputLocalDateTime.xhtml
@@ -0,0 +1,11 @@
+<ui:composition xmlns="http://www.w3.org/1999/xhtml"
+	xmlns:ui="http://java.sun.com/jsf/facelets"
+	xmlns:f="http://java.sun.com/jsf/core"
+	xmlns:h="http://java.sun.com/jsf/html"
+	xmlns:p="http://primefaces.org/ui"
+	xmlns:app="http://springfuse.jaxio.com/app"
+	xmlns:appcc="http://java.sun.com/jsf/composite/components">	
+	<h:outputText value="#{value.toDate()}" rendered="#{not empty value and (empty rendered or rendered)}">
+		<f:convertDateTime type="both" />	
+	</h:outputText>
+</ui:composition>
\ No newline at end of file
diff --git a/src/main/webapp/WEB-INF/taglib/output/outputTime.xhtml b/src/main/webapp/WEB-INF/taglib/output/outputTime.xhtml
new file mode 100644
index 0000000..7d12cc9
--- /dev/null
+++ b/src/main/webapp/WEB-INF/taglib/output/outputTime.xhtml
@@ -0,0 +1,11 @@
+<ui:composition xmlns="http://www.w3.org/1999/xhtml"
+	xmlns:ui="http://java.sun.com/jsf/facelets"
+	xmlns:f="http://java.sun.com/jsf/core"
+	xmlns:h="http://java.sun.com/jsf/html"
+	xmlns:p="http://primefaces.org/ui"
+	xmlns:app="http://springfuse.jaxio.com/app"
+	xmlns:appcc="http://java.sun.com/jsf/composite/components">	
+	<h:outputText value="#{value}" rendered="#{empty rendered or rendered}">
+		<f:convertDateTime type="time"/>	
+	</h:outputText>
+</ui:composition>
\ No newline at end of file
diff --git a/src/main/webapp/WEB-INF/taglib/output/print.xhtml b/src/main/webapp/WEB-INF/taglib/output/print.xhtml
new file mode 100644
index 0000000..9c5628b
--- /dev/null
+++ b/src/main/webapp/WEB-INF/taglib/output/print.xhtml
@@ -0,0 +1,9 @@
+<ui:composition xmlns="http://www.w3.org/1999/xhtml"
+	xmlns:ui="http://java.sun.com/jsf/facelets"
+	xmlns:f="http://java.sun.com/jsf/core"
+	xmlns:h="http://java.sun.com/jsf/html"
+	xmlns:p="http://primefaces.org/ui"
+	xmlns:app="http://springfuse.jaxio.com/app"
+	xmlns:appcc="http://java.sun.com/jsf/composite/components">
+	<h:outputText value="#{printer.print(value)}" style="font-weight:bold" rendered="#{not empty value}" />
+</ui:composition>
\ No newline at end of file
diff --git a/src/main/webapp/WEB-INF/taglib/panel/edit.xhtml b/src/main/webapp/WEB-INF/taglib/panel/edit.xhtml
new file mode 100644
index 0000000..6610617
--- /dev/null
+++ b/src/main/webapp/WEB-INF/taglib/panel/edit.xhtml
@@ -0,0 +1,73 @@
+<ui:composition xmlns="http://www.w3.org/1999/xhtml"
+	xmlns:ui="http://java.sun.com/jsf/facelets"
+	xmlns:h="http://java.sun.com/jsf/html"
+	xmlns:f="http://java.sun.com/jsf/core"
+	xmlns:app="http://springfuse.jaxio.com/app"
+	xmlns:p="http://primefaces.org/ui"
+	template="/WEB-INF/layouts/#{print ? 'print' : 'main'}.xhtml">
+	<ui:define name="toolbarChildren">
+		<p:toolbarGroup>
+			<p:commandButton id="print" value="#{msg.menu_print}" action="#{bean.print()}" rendered="#{bean.entity.idSet}"
+				icon="ui-icon-print" immediate="true" ajax="false" />
+		</p:toolbarGroup>
+		<p:toolbarGroup rendered="#{sub or readonly}">
+			<p:commandButton id="back" action="#{bean.back()}" process="@none" ajax="false" immediate="true"
+				value="#{msg.back}" icon="ui-icon-arrowreturnthick-1-w" />
+		</p:toolbarGroup>
+		<p:toolbarGroup rendered="#{not sub and not readonly}">
+			<p:commandButton id="close" oncomplete="askForSaveDialog.show(); APP.focusAskForSaveDialog();"
+				ajax="true" immediate="true" process="@this"
+				icon="ui-icon-close"
+				value="#{msg.menu_close}"
+				title="#{msg.menu_close} #{resourcesUtil.getProperty(title)}"/>
+			<p:commandButton id="delete" icon="ui-icon-trash"
+				onclick="askForDeleteDialog.show(); APP.focusAskForDeleteDialog();"
+				value="#{msg.menu_delete_and_close}"
+				title="#{msg.menu_delete_and_close} #{resourcesUtil.getProperty(title)}"
+				disabled="#{empty bean.entity.id}"
+				rendered="#{permission.canDelete(bean.entity)}" />
+			<p:separator />
+		</p:toolbarGroup>
+	</ui:define>
+	<ui:define name="content">
+		<p:breadCrumb model="#{conversationBreadCrumb.model}" rendered="#{conversationBreadCrumb.render}" />
+		<p:fieldset id="fieldset">
+			<input type="hidden" name="_cid" value="#{conversationManager.currentConversation.cid}"/>
+			<f:validateBean disabled="true">
+				<h:panelGrid columns="2" styleClass="aria-role-presentation">
+					<ui:insert name="form" />
+				</h:panelGrid>
+				<app:saveButton title="#{title}" bean="#{bean}"/>
+			</f:validateBean>
+		</p:fieldset>
+		<p:tabView id="tabs" activeIndex="#{bean.tabBean.activeIndex}" rendered="#{not empty bean.tabBean and not print}">
+			<p:ajax event="tabChange" />
+			<ui:insert name="tabs"/>
+		</p:tabView>
+		<p:accordionPanel id="tabsPrint" activeIndex="0,1,2,3,4,5,6,7,8,9,10" cache="false" multiple="true" 
+			rendered="#{not empty bean.tabBean and print}">
+			<ui:insert name="tabs"/>
+		</p:accordionPanel>
+	</ui:define>
+	<ui:define name="dialogs">
+		<ui:insert name="custom-dialogs" />
+		<p:confirmDialog widgetVar="askForDeleteDialog" header="#{msg.menu_delete}?" message="#{msg.dialog_delete_confirm}">
+			<h:panelGrid id="askForDeleteDialogContent" columns="1" cellpadding="4" style="margin:0 auto;">
+				<h:outputText value="#{printer.print(bean.entity)}" style="font-weight:bold" />
+			</h:panelGrid>
+			<p:commandButton id="askForDeleteDialogYes" action="#{bean.deleteAndClose()}" ajax="false" immediate="true" process="@none" value="#{msg.yes}" title="#{msg.dialog_delete_confirm} #{msg.yes}" icon="ui-icon-check" />
+			<p:commandButton id="askForDeleteDialogNo" value="#{msg.no}" title="#{msg.dialog_delete_confirm} #{msg.no}" onclick="askForDeleteDialog.hide(); APP.focusTo('form:delete'); return false;" icon="ui-icon-cancel"/>
+		</p:confirmDialog>
+		<p:confirmDialog widgetVar="askForSaveDialog" header="#{msg.menu_save}?" message="#{msg.dialog_ask_for_save}">
+			<p:commandButton id="askForSaveDialogYes" action="#{bean.saveAndClose()}" ajax="true" process="@form" value="#{msg.yes}"
+				title="#{msg.dialog_ask_for_save} #{msg.yes}"
+				onstart="askForSaveDialog.hide()"
+				styleClass="aria-save-button"
+				update="messages" icon="ui-icon-check" />
+			<p:commandButton id="askForSaveDialogNo" action="#{bean.forceClose()}" ajax="false"
+				value="#{msg.no}"
+				title="#{msg.dialog_ask_for_save} #{msg.no}"
+				icon="ui-icon-cancel" immediate="true" process="@none" />
+		</p:confirmDialog>
+	</ui:define>
+</ui:composition>
\ No newline at end of file
diff --git a/src/main/webapp/WEB-INF/taglib/panel/search.xhtml b/src/main/webapp/WEB-INF/taglib/panel/search.xhtml
new file mode 100644
index 0000000..5b63ce3
--- /dev/null
+++ b/src/main/webapp/WEB-INF/taglib/panel/search.xhtml
@@ -0,0 +1,125 @@
+<ui:composition xmlns="http://www.w3.org/1999/xhtml"
+	xmlns:ui="http://java.sun.com/jsf/facelets"
+	xmlns:h="http://java.sun.com/jsf/html"
+	xmlns:f="http://java.sun.com/jsf/core"
+	xmlns:app="http://springfuse.jaxio.com/app"
+	xmlns:p="http://primefaces.org/ui"
+	xmlns:c="http://java.sun.com/jsp/jstl/core"
+	template="/WEB-INF/layouts/main.xhtml">
+	<ui:define name="toolbarChildren">
+		<p:toolbarGroup rendered="#{sub or readonly}">
+			<p:commandButton id="back" action="#{searchForm.back()}" process="@none" ajax="false" immediate="true"
+				value="#{msg.back}" icon="ui-icon-arrowreturnthick-1-w"/>
+		</p:toolbarGroup>
+		<p:toolbarGroup align="left" rendered="#{not sub and not readonly}">
+			<p:commandButton id="quit" action="#{searchForm.quit()}" ajax="false" immediate="true" process="@form"
+				icon="ui-icon-closethick"
+				value="#{msg.menu_quit}"
+				title="#{msg.menu_quit} #{resourcesUtil.getProperty(title)}" />
+			<p:separator />
+			<p:commandButton id="create" action="#{model.create()}" ajax="false" immediate="true" process="@this"
+				icon="ui-icon-document"
+				rendered="#{empty bean and permission.canCreate()}"
+				value="#{msg.menu_new}"
+				title="#{msg.menu_new} #{resourcesUtil.getProperty(title)}" />
+		</p:toolbarGroup>
+	</ui:define>
+	<ui:define name="content">
+		<p:breadCrumb model="#{conversationBreadCrumb.model}" rendered="#{conversationBreadCrumb.render}" />
+		<p:fieldset id="fullTextFieldset" legend="#{msg.search_full_text_criteria}" toggleable="true" rendered="#{fullText}">
+			<h:panelGrid columns="4">
+				<ui:insert name="fullTextFilters" />
+			</h:panelGrid>
+		</p:fieldset>
+		<p:fieldset id="filtersFieldset" legend="#{msg.search_criteria}" toggleable="true">
+			<input type="hidden" name="_cid" value="#{conversationManager.currentConversation.cid}"/>
+			<f:validateBean disabled="true">
+				<h:panelGrid columns="4">
+					<ui:insert name="filters" />
+				</h:panelGrid>
+			</f:validateBean>
+		</p:fieldset>
+		<p:commandButton id="search" actionListener="#{model.onSearch()}" process="@form"
+			icon="iconSearch" styleClass="aria-search-button default"
+			update="messages searchResults" value="#{msg.menu_search}"
+			title="#{msg.menu_search} #{resourcesUtil.getProperty(title)}" />
+		<p:commandButton id="resetSearch" icon="ui-icon-power" value="#{msg.search_reset}"
+			actionListener="#{searchForm.reset()}"
+			update="messages fullTextFieldset filtersFieldset searchResults searchFormName"/>
+		<p:commandButton id="excel" action="#{model.onExcel()}" process="@form"
+			icon="iconExcel" value="Excel" ajax="false" />
+		<h:panelGroup rendered="#{savedSearch}">
+			<p:autoComplete id="searchFormName" rendered="#{savedSearch}"
+				value="#{searchForm.currentSavedSearch}"
+				completeMethod="#{savedSearchService.finderFor(searchForm).find}"
+				var="item" itemValue="#{item}" itemLabel="#{savedSearchPrinter.print(item)}" converter="#{genericJsfConverter}"
+				dropdown="true" size="30">
+				<p:ajax event="itemSelect" update="fullTextFieldset filtersFieldset messages searchResults searchFormName" />
+			</p:autoComplete>
+			<p:commandButton id="displaySavedSearchPanel" rendered="#{savedSearch}" icon="ui-icon-disk" />
+			<p:overlayPanel id="savedSearchPanel" widgetVar="savedSearchPanel" for="displaySavedSearchPanel" hideEffect="fade" dynamic="false">
+				<h:panelGrid columns="2" styleClass="aria-role-presentation">
+					<app:input id="savedSearchName" value="#{searchForm.searchFormName}" label="savedSearch_name" required="true" />
+					<app:inputBoolean id="savedSearchPrivate" label="savedSearchName_private" value="#{searchForm.privateSearch}" />
+				</h:panelGrid>
+				<h:panelGroup>
+					<p:commandButton id="saveSearch" actionListener="#{savedSearchService.save(searchForm)}" process="@form"
+						icon="ui-icon-disk" update="fullTextFieldset filtersFieldset messages searchResults savedSearchPanel"
+						value="#{msg.search_save}" />
+				</h:panelGroup>
+			</p:overlayPanel>
+		</h:panelGroup>
+		<ui:insert name="buttons" />
+		<br />
+		<span style="height: 16px; display: block;">
+			<p:ajaxStatus>
+				<f:facet name="start">
+					<h:graphicImage id="ajaxSearchLoading" name="icons/ajaxloading.gif" alt="Loading..." />
+				</f:facet>
+				<f:facet name="error">
+					<h:outputText id="ajaxSearchError" value="#{msg.error_ajax}" />
+				</f:facet>
+				<f:facet name="success">
+					<h:outputText id="ajaxSearchSuccess" value="" />
+				</f:facet>
+			</p:ajaxStatus>
+		</span>
+		<!-- safari/voiceover requires 'span' (not 'div') for live region-->
+		<span id="searchResultsRegion" aria-label="#{msg.search_results}" aria-live="assertive" aria-relevant="additions">
+		</span>
+		<c:if test="#{empty multiCheckboxSelection or not multiCheckboxSelection}">
+			<p:dataTable id="searchResults"
+				value="#{model}" var="item" lazy="true"
+				paginator="true" paginatorAlwaysVisible="false" paginatorPosition="bottom"
+				rowsPerPageTemplate="10,25,50,100" rows="10"
+				selectionMode="single" selection="#{model.selectedRow}"
+				emptyMessage="#{msg.search_empty}">
+				<ui:insert name="result" />
+			</p:dataTable>
+		</c:if>
+		<c:if test="#{not empty multiCheckboxSelection and multiCheckboxSelection}">
+			<p:dataTable id="searchResults"
+				value="#{model}" var="item" lazy="true"
+				paginator="true" paginatorAlwaysVisible="false" paginatorPosition="bottom"
+				rowsPerPageTemplate="10,25,50,100" rows="10"
+				selection="#{model.selectedRows}"
+				emptyMessage="#{msg.search_empty}">
+				<p:column id="selectAll" selectionMode="multiple" style="width:18px" rendered="#{permission.canSelect()}" />
+				<ui:insert name="result" />
+				<f:facet name="footer">
+					<app:iconMultiSelect model="#{model}" rendered="true" process="@this" />
+				</f:facet>
+			</p:dataTable>
+		</c:if>
+		<script type="text/javascript">APP.updateSearchResultsRegion('#{resourcesUtil.getPluralableProperty("search_results_status", model.rowCount)}', #{model.rowCount});</script>
+	</ui:define>
+	<ui:define name="dialogs">
+		<p:confirmDialog widgetVar="askForDeleteItemDialog" header="#{msg.menu_delete}?" message="#{msg.dialog_delete_confirm}">
+			<h:panelGrid id="askForDeleteItemDialogContent" columns="2" cellpadding="4" style="margin:0 auto;">
+				<h:outputText value="#{printer.print(model.selectedRow)}" style="font-weight:bold" rendered="#{not empty model.selectedRow}"/>
+			</h:panelGrid>
+			<p:commandButton id="askForDeleteItemDialogYes" action="#{model.delete()}" ajax="true" immediate="true" oncomplete="askForDeleteItemDialog.hide();" process="@this" value="#{msg.yes}" title="#{msg.dialog_delete_confirm} #{msg.yes}" icon="ui-icon-check" update=":form:searchResults :form:messages"/>
+			<p:commandButton id="askForDeleteItemDialogNo" value="#{msg.no}" title="#{msg.dialog_delete_confirm} #{msg.no}" onclick="askForDeleteItemDialog.hide(); return false;" icon="ui-icon-cancel"/>
+		</p:confirmDialog>
+	</ui:define>
+</ui:composition >
\ No newline at end of file
diff --git a/src/main/webapp/WEB-INF/taglib/range/rangeBigDec.xhtml b/src/main/webapp/WEB-INF/taglib/range/rangeBigDec.xhtml
new file mode 100644
index 0000000..489a9f7
--- /dev/null
+++ b/src/main/webapp/WEB-INF/taglib/range/rangeBigDec.xhtml
@@ -0,0 +1,13 @@
+<ui:composition xmlns="http://www.w3.org/1999/xhtml" 
+	xmlns:ui="http://java.sun.com/jsf/facelets" 
+	xmlns:p="http://primefaces.org/ui"
+	xmlns:app="http://springfuse.jaxio.com/app"
+	xmlns:h="http://java.sun.com/jsf/html">
+	<app:outputLabel for="#{id}" value="#{label}" required="#{required}" rendered="#{rendered}" />
+	<h:panelGrid columns="4" id="#{id}" styleClass="aria-role-presentation" rendered="#{empty rendered ? true : rendered}">
+		<app:outputLabel for="#{id}RangeFrom" value="range_from" />
+		<p:inputText id="#{id}RangeFrom" value="#{value.from}" label="#{resourcesUtil.getProperty(label)} - #{resourcesUtil.getProperty('range_from')}" converter="javax.faces.BigDecimal"/>
+		<app:outputLabel for="#{id}RangeTo" value="range_to" />
+		<p:inputText id="#{id}RangeTo" value="#{value.to}" label="#{resourcesUtil.getProperty(label)} - #{resourcesUtil.getProperty('range_to')}" converter="javax.faces.BigDecimal"/>
+	</h:panelGrid>
+</ui:composition>
\ No newline at end of file
diff --git a/src/main/webapp/WEB-INF/taglib/range/rangeBigInt.xhtml b/src/main/webapp/WEB-INF/taglib/range/rangeBigInt.xhtml
new file mode 100644
index 0000000..3183c9f
--- /dev/null
+++ b/src/main/webapp/WEB-INF/taglib/range/rangeBigInt.xhtml
@@ -0,0 +1,13 @@
+<ui:composition xmlns="http://www.w3.org/1999/xhtml" 
+	xmlns:ui="http://java.sun.com/jsf/facelets" 
+	xmlns:p="http://primefaces.org/ui"
+	xmlns:app="http://springfuse.jaxio.com/app"
+	xmlns:h="http://java.sun.com/jsf/html">
+	<app:outputLabel for="#{id}" value="#{label}" required="#{required}" rendered="#{rendered}" />
+	<h:panelGrid columns="4" id="#{id}" styleClass="aria-role-presentation" rendered="#{empty rendered ? true : rendered}">
+		<app:outputLabel for="#{id}RangeFrom" value="range_from" />
+		<p:inputText id="#{id}RangeFrom" value="#{value.from}" label="#{resourcesUtil.getProperty(label)} - #{resourcesUtil.getProperty('range_from')}" converter="javax.faces.BigInteger"/>
+		<app:outputLabel for="#{id}RangeTo" value="range_to" />
+		<p:inputText id="#{id}RangeTo" value="#{value.to}" label="#{resourcesUtil.getProperty(label)} - #{resourcesUtil.getProperty('range_to')}" converter="javax.faces.BigInteger"/>
+	</h:panelGrid>
+</ui:composition>
\ No newline at end of file
diff --git a/src/main/webapp/WEB-INF/taglib/range/rangeDate.xhtml b/src/main/webapp/WEB-INF/taglib/range/rangeDate.xhtml
new file mode 100644
index 0000000..42b32d5
--- /dev/null
+++ b/src/main/webapp/WEB-INF/taglib/range/rangeDate.xhtml
@@ -0,0 +1,18 @@
+<ui:composition xmlns="http://www.w3.org/1999/xhtml" 
+	xmlns:ui="http://java.sun.com/jsf/facelets" 
+	xmlns:p="http://primefaces.org/ui"
+	xmlns:app="http://springfuse.jaxio.com/app"
+	xmlns:f="http://java.sun.com/jsf/core"
+	xmlns:h="http://java.sun.com/jsf/html">
+	<app:outputLabel for="#{id}" value="#{label}" required="#{required}" rendered="#{rendered}" />
+	<h:panelGrid columns="4" id="#{id}" styleClass="aria-role-presentation" rendered="#{empty rendered ? true : rendered}">
+		<label for="form:#{id}RangeFrom_input">#{msg.date_range_from}</label>
+		<p:calendar id="#{id}RangeFrom" value="#{value.from}" pattern="yyyy-MM-dd" showButtonPanel="true" navigator="true">
+			<f:convertDateTime pattern="yyyy-MM-dd" />
+		</p:calendar>
+		<label for="form:#{id}RangeTo_input">#{msg.date_range_to}</label>
+		<p:calendar id="#{id}RangeTo" value="#{value.to}" pattern="yyyy-MM-dd" showButtonPanel="true" navigator="true">
+			<f:convertDateTime pattern="yyyy-MM-dd" />
+		</p:calendar>
+	</h:panelGrid>
+</ui:composition>
\ No newline at end of file
diff --git a/src/main/webapp/WEB-INF/taglib/range/rangeDateAria.xhtml b/src/main/webapp/WEB-INF/taglib/range/rangeDateAria.xhtml
new file mode 100644
index 0000000..b492de6
--- /dev/null
+++ b/src/main/webapp/WEB-INF/taglib/range/rangeDateAria.xhtml
@@ -0,0 +1,20 @@
+<ui:composition xmlns="http://www.w3.org/1999/xhtml" 
+	xmlns:ui="http://java.sun.com/jsf/facelets" 
+	xmlns:p="http://primefaces.org/ui"
+	xmlns:f="http://java.sun.com/jsf/core"
+	xmlns:h="http://java.sun.com/jsf/html"
+	xmlns:appcc="http://java.sun.com/jsf/composite/components">
+	<h:outputText value="" />
+	<p:fieldset legend="#{resourcesUtil.getProperty(label)}">
+		<h:panelGrid columns="4" id="#{id}" styleClass="aria-role-presentation" rendered="#{empty rendered ? true : rendered}">
+			<label for="form:#{id}RangeFrom">#{msg.date_range_from}</label>
+			<appcc:datePicker id="#{id}RangeFrom" value="#{value.from}" label="date_range_from">
+				<f:convertDateTime pattern="yyyy-MM-dd" />
+			</appcc:datePicker>
+			<label for="form:#{id}RangeTo">#{msg.date_range_to}</label>
+			<appcc:datePicker id="#{id}RangeTo" value="#{value.to}" label="date_range_to">
+				<f:convertDateTime pattern="yyyy-MM-dd" />
+			</appcc:datePicker>
+		</h:panelGrid>
+	</p:fieldset>
+</ui:composition>
\ No newline at end of file
diff --git a/src/main/webapp/WEB-INF/taglib/range/rangeDateTime.xhtml b/src/main/webapp/WEB-INF/taglib/range/rangeDateTime.xhtml
new file mode 100644
index 0000000..54b436e
--- /dev/null
+++ b/src/main/webapp/WEB-INF/taglib/range/rangeDateTime.xhtml
@@ -0,0 +1,18 @@
+<ui:composition xmlns="http://www.w3.org/1999/xhtml" 
+	xmlns:ui="http://java.sun.com/jsf/facelets" 
+	xmlns:p="http://primefaces.org/ui"
+	xmlns:app="http://springfuse.jaxio.com/app"
+	xmlns:f="http://java.sun.com/jsf/core"
+	xmlns:h="http://java.sun.com/jsf/html">
+	<app:outputLabel for="#{id}" value="#{label}" required="#{required}" rendered="#{rendered}" />
+	<h:panelGrid columns="4" id="#{id}" styleClass="aria-role-presentation" rendered="#{empty rendered ? true : rendered}">
+		<label for="form:#{id}RangeFrom_input">#{msg.date_range_from}</label>
+		<p:calendar id="#{id}RangeFrom" value="#{value.from}" pattern="yyyy-MM-dd HH:mm" showButtonPanel="true" navigator="true">
+			<f:convertDateTime pattern="yyyy-MM-dd HH:mm" />
+		</p:calendar>
+		<label for="form:#{id}RangeTo_input">#{msg.date_range_to}</label>
+		<p:calendar id="#{id}RangeTo" value="#{value.to}" pattern="yyyy-MM-dd HH:mm" showButtonPanel="true" navigator="true">
+			<f:convertDateTime pattern="yyyy-MM-dd HH:mm" />
+		</p:calendar>
+	</h:panelGrid>
+</ui:composition>
\ No newline at end of file
diff --git a/src/main/webapp/WEB-INF/taglib/range/rangeDouble.xhtml b/src/main/webapp/WEB-INF/taglib/range/rangeDouble.xhtml
new file mode 100644
index 0000000..ae79aec
--- /dev/null
+++ b/src/main/webapp/WEB-INF/taglib/range/rangeDouble.xhtml
@@ -0,0 +1,13 @@
+<ui:composition xmlns="http://www.w3.org/1999/xhtml" 
+	xmlns:ui="http://java.sun.com/jsf/facelets" 
+	xmlns:p="http://primefaces.org/ui"
+	xmlns:app="http://springfuse.jaxio.com/app"
+	xmlns:h="http://java.sun.com/jsf/html">
+	<app:outputLabel for="#{id}" value="#{label}" required="#{required}" rendered="#{rendered}" />
+	<h:panelGrid columns="4" id="#{id}" styleClass="aria-role-presentation" rendered="#{empty rendered ? true : rendered}">
+		<app:outputLabel for="#{id}RangeFrom" value="range_from" />
+		<p:inputText id="#{id}RangeFrom" value="#{value.from}" label="#{resourcesUtil.getProperty(label)} - #{resourcesUtil.getProperty('range_from')}" converter="javax.faces.Double"/>
+		<app:outputLabel for="#{id}RangeTo" value="range_to" />
+		<p:inputText id="#{id}RangeTo" value="#{value.to}" label="#{resourcesUtil.getProperty(label)} - #{resourcesUtil.getProperty('range_to')}" converter="javax.faces.Double"/>
+	</h:panelGrid>
+</ui:composition>
\ No newline at end of file
diff --git a/src/main/webapp/WEB-INF/taglib/range/rangeFloat.xhtml b/src/main/webapp/WEB-INF/taglib/range/rangeFloat.xhtml
new file mode 100644
index 0000000..6e8dca1
--- /dev/null
+++ b/src/main/webapp/WEB-INF/taglib/range/rangeFloat.xhtml
@@ -0,0 +1,13 @@
+<ui:composition xmlns="http://www.w3.org/1999/xhtml" 
+	xmlns:ui="http://java.sun.com/jsf/facelets" 
+	xmlns:p="http://primefaces.org/ui"
+	xmlns:app="http://springfuse.jaxio.com/app"
+	xmlns:h="http://java.sun.com/jsf/html">
+	<app:outputLabel for="#{id}" value="#{label}" required="#{required}" rendered="#{rendered}" />
+	<h:panelGrid columns="4" id="#{id}" styleClass="aria-role-presentation" rendered="#{empty rendered ? true : rendered}">
+		<app:outputLabel for="#{id}RangeFrom" value="range_from" />
+		<p:inputText id="#{id}RangeFrom" value="#{value.from}" label="#{resourcesUtil.getProperty(label)} - #{resourcesUtil.getProperty('range_from')}" converter="javax.faces.Float"/>
+		<app:outputLabel for="#{id}RangeTo" value="range_to" />
+		<p:inputText id="#{id}RangeTo" value="#{value.to}" label="#{resourcesUtil.getProperty(label)} - #{resourcesUtil.getProperty('range_to')}" converter="javax.faces.Float"/>
+	</h:panelGrid>
+</ui:composition>
\ No newline at end of file
diff --git a/src/main/webapp/WEB-INF/taglib/range/rangeInt.xhtml b/src/main/webapp/WEB-INF/taglib/range/rangeInt.xhtml
new file mode 100644
index 0000000..bca39e9
--- /dev/null
+++ b/src/main/webapp/WEB-INF/taglib/range/rangeInt.xhtml
@@ -0,0 +1,13 @@
+<ui:composition xmlns="http://www.w3.org/1999/xhtml" 
+	xmlns:ui="http://java.sun.com/jsf/facelets" 
+	xmlns:p="http://primefaces.org/ui"
+	xmlns:app="http://springfuse.jaxio.com/app"
+	xmlns:h="http://java.sun.com/jsf/html">
+	<app:outputLabel for="#{id}" value="#{label}" required="#{required}" rendered="#{rendered}" />
+	<h:panelGrid columns="4" id="#{id}" styleClass="aria-role-presentation" rendered="#{empty rendered ? true : rendered}">
+		<app:outputLabel for="#{id}RangeFrom" value="range_from" />
+		<p:inputText id="#{id}RangeFrom" value="#{value.from}" label="#{resourcesUtil.getProperty(label)} - #{resourcesUtil.getProperty('range_from')}" converter="javax.faces.Integer"/>
+		<app:outputLabel for="#{id}RangeTo" value="range_to" />
+		<p:inputText id="#{id}RangeTo" value="#{value.to}" label="#{resourcesUtil.getProperty(label)} - #{resourcesUtil.getProperty('range_to')}" converter="javax.faces.Integer"/>
+	</h:panelGrid>
+</ui:composition>
\ No newline at end of file
diff --git a/src/main/webapp/WEB-INF/taglib/range/rangeLocalDate.xhtml b/src/main/webapp/WEB-INF/taglib/range/rangeLocalDate.xhtml
new file mode 100644
index 0000000..7344a79
--- /dev/null
+++ b/src/main/webapp/WEB-INF/taglib/range/rangeLocalDate.xhtml
@@ -0,0 +1,14 @@
+<ui:composition xmlns="http://www.w3.org/1999/xhtml" 
+	xmlns:ui="http://java.sun.com/jsf/facelets" 
+	xmlns:p="http://primefaces.org/ui"
+	xmlns:app="http://springfuse.jaxio.com/app"
+	xmlns:f="http://java.sun.com/jsf/core"
+	xmlns:h="http://java.sun.com/jsf/html">
+	<app:outputLabel for="#{id}" value="#{label}" required="#{required}" rendered="#{rendered}" />
+	<h:panelGrid columns="4" id="#{id}" styleClass="aria-role-presentation" rendered="#{empty rendered ? true : rendered}">
+		<label for="form:#{id}RangeFrom_input">#{msg.date_range_from}</label>
+		<p:calendar id="#{id}RangeFrom" value="#{value.from}" pattern="yyyy-MM-dd" navigator="true" converter="#{localDateConverter}" />
+		<label for="form:#{id}RangeTo_input">#{msg.date_range_to}</label>
+		<p:calendar id="#{id}RangeTo" value="#{value.to}" pattern="yyyy-MM-dd" navigator="true" converter="#{localDateConverter}" />
+	</h:panelGrid>
+</ui:composition>
\ No newline at end of file
diff --git a/src/main/webapp/WEB-INF/taglib/range/rangeLocalDateTime.xhtml b/src/main/webapp/WEB-INF/taglib/range/rangeLocalDateTime.xhtml
new file mode 100644
index 0000000..3dd8868
--- /dev/null
+++ b/src/main/webapp/WEB-INF/taglib/range/rangeLocalDateTime.xhtml
@@ -0,0 +1,14 @@
+<ui:composition xmlns="http://www.w3.org/1999/xhtml" 
+	xmlns:ui="http://java.sun.com/jsf/facelets" 
+	xmlns:p="http://primefaces.org/ui"
+	xmlns:app="http://springfuse.jaxio.com/app"
+	xmlns:f="http://java.sun.com/jsf/core"
+	xmlns:h="http://java.sun.com/jsf/html">
+	<app:outputLabel for="#{id}" value="#{label}" required="#{required}" rendered="#{rendered}" />
+	<h:panelGrid columns="4" id="#{id}" styleClass="aria-role-presentation" rendered="#{empty rendered ? true : rendered}">
+		<label for="form:#{id}RangeFrom_input">#{msg.date_range_from}</label>
+		<p:calendar id="#{id}RangeFrom" value="#{value.from}" pattern="yyyy-MM-dd HH:mm" navigator="true" converter="#{localDateTimeConverter}" />
+		<label for="form:#{id}RangeTo_input">#{msg.date_range_to}</label>
+		<p:calendar id="#{id}RangeTo" value="#{value.to}" pattern="yyyy-MM-dd HH:mm" navigator="true" converter="#{localDateTimeConverter}" />
+	</h:panelGrid>
+</ui:composition>
\ No newline at end of file
diff --git a/src/main/webapp/WEB-INF/taglib/range/rangeLong.xhtml b/src/main/webapp/WEB-INF/taglib/range/rangeLong.xhtml
new file mode 100644
index 0000000..ee5676c
--- /dev/null
+++ b/src/main/webapp/WEB-INF/taglib/range/rangeLong.xhtml
@@ -0,0 +1,13 @@
+<ui:composition xmlns="http://www.w3.org/1999/xhtml" 
+	xmlns:ui="http://java.sun.com/jsf/facelets" 
+	xmlns:p="http://primefaces.org/ui"
+	xmlns:app="http://springfuse.jaxio.com/app"
+	xmlns:h="http://java.sun.com/jsf/html">
+	<app:outputLabel for="#{id}" value="#{label}" required="#{required}" rendered="#{rendered}" />
+	<h:panelGrid columns="4" id="#{id}" styleClass="aria-role-presentation" rendered="#{empty rendered ? true : rendered}">
+		<app:outputLabel for="#{id}RangeFrom" value="range_from" />
+		<p:inputText id="#{id}RangeFrom" value="#{value.from}" label="#{resourcesUtil.getProperty(label)} - #{resourcesUtil.getProperty('range_from')}" converter="javax.faces.Long"/>
+		<app:outputLabel for="#{id}RangeTo" value="range_to" />
+		<p:inputText id="#{id}RangeTo" value="#{value.to}" label="#{resourcesUtil.getProperty(label)} - #{resourcesUtil.getProperty('range_to')}" converter="javax.faces.Long"/>
+	</h:panelGrid>
+</ui:composition>
\ No newline at end of file
diff --git a/src/main/webapp/WEB-INF/taglib/select/selectManyBoolean.xhtml b/src/main/webapp/WEB-INF/taglib/select/selectManyBoolean.xhtml
new file mode 100644
index 0000000..a3f866a
--- /dev/null
+++ b/src/main/webapp/WEB-INF/taglib/select/selectManyBoolean.xhtml
@@ -0,0 +1,18 @@
+<ui:composition xmlns="http://www.w3.org/1999/xhtml" 
+	xmlns:ui="http://java.sun.com/jsf/facelets" 
+	xmlns:p="http://primefaces.org/ui"
+	xmlns:f="http://java.sun.com/jsf/core"
+	xmlns:app="http://springfuse.jaxio.com/app">
+	<app:outputLabel for="#{id}" value="#{label}" required="#{required}" rendered="#{(empty rendered or rendered)}" />
+	<p:selectManyCheckbox id="#{id}" value="#{value.selected}" converter="#{booleanConverter}" rendered="#{(empty rendered or rendered) and not nullAllowed}">
+		<f:selectItem itemLabel="#{msg.boolean_true}" itemValue="#{true}" />
+		<f:selectItem itemLabel="#{msg.boolean_false}" itemValue="#{false}" />
+		<ui:insert/>
+	</p:selectManyCheckbox>
+	<p:selectManyCheckbox id="#{id}_null_allowed" value="#{value.selected}" converter="#{booleanConverter}" rendered="#{(empty rendered or rendered) and nullAllowed}">
+		<f:selectItem itemLabel="#{msg.boolean_true}" itemValue="#{true}" />
+		<f:selectItem itemLabel="#{msg.boolean_false}" itemValue="#{false}" />
+		<f:selectItem itemLabel="#{msg.null_value}" itemValue="#{null}" />
+		<ui:insert/>
+	</p:selectManyCheckbox>
+</ui:composition>
\ No newline at end of file
diff --git a/src/main/webapp/WEB-INF/taglib/select/selectManyBooleanAria.xhtml b/src/main/webapp/WEB-INF/taglib/select/selectManyBooleanAria.xhtml
new file mode 100644
index 0000000..e9e6c8e
--- /dev/null
+++ b/src/main/webapp/WEB-INF/taglib/select/selectManyBooleanAria.xhtml
@@ -0,0 +1,21 @@
+<ui:composition xmlns="http://www.w3.org/1999/xhtml" 
+	xmlns:ui="http://java.sun.com/jsf/facelets" 
+	xmlns:p="http://primefaces.org/ui"
+	xmlns:f="http://java.sun.com/jsf/core"
+	xmlns:h="http://java.sun.com/jsf/html">
+	<h:outputText value="" />
+	<p:fieldset legend="#{resourcesUtil.getProperty(label)}">
+		<p:selectManyCheckbox id="#{id}" value="#{value.selected}" converter="#{booleanConverter}" rendered="#{(empty rendered or rendered) and not nullAllowed}">
+			<f:selectItem itemLabel="#{msg.boolean_true}" itemValue="#{true}" />
+			<f:selectItem itemLabel="#{msg.boolean_false}" itemValue="#{false}" />
+			<f:selectItem itemLabel="#{msg.null_value}" itemValue="#{null}" />
+			<ui:insert/>
+		</p:selectManyCheckbox>
+		<p:selectManyCheckbox id="#{id}_null_allowed" value="#{value.selected}" converter="#{booleanConverter}" rendered="#{(empty rendered or rendered) and nullAllowed}">
+			<f:selectItem itemLabel="#{msg.boolean_true}" itemValue="#{true}" />
+			<f:selectItem itemLabel="#{msg.boolean_false}" itemValue="#{false}" />
+			<f:selectItem itemLabel="#{msg.null_value}" itemValue="#{null}" />
+			<ui:insert/>
+		</p:selectManyCheckbox>
+	</p:fieldset>
+</ui:composition>
diff --git a/src/main/webapp/WEB-INF/taglib/select/selectManyEnum.xhtml b/src/main/webapp/WEB-INF/taglib/select/selectManyEnum.xhtml
new file mode 100644
index 0000000..a3cef9e
--- /dev/null
+++ b/src/main/webapp/WEB-INF/taglib/select/selectManyEnum.xhtml
@@ -0,0 +1,18 @@
+<ui:composition xmlns="http://www.w3.org/1999/xhtml" 
+	xmlns:ui="http://java.sun.com/jsf/facelets" 
+	xmlns:p="http://primefaces.org/ui"
+	xmlns:c="http://java.sun.com/jsp/jstl/core"
+	xmlns:h="http://java.sun.com/jsf/html"
+	xmlns:f="http://java.sun.com/jsf/core"
+	xmlns:app="http://springfuse.jaxio.com/app">
+	<app:outputLabel for="#{id}" value="#{label}" required="#{required}" rendered="#{rendered}" />
+	<p:selectManyCheckbox id="#{id}" value="#{value.selected}" rendered="#{empty rendered ? true : rendered}" disabled="#{empty disabled ? false : disabled}"
+		layout="#{items.list.size() lt 5 ? 'lineDirection' : 'pageDirection'}"
+		converter="#{genericJsfConverter}">
+		<f:selectItems value="#{items.list}" />
+		<c:if test="#{not empty nullAllowed and nullAllowed}">
+			<f:selectItem itemLabel="#{msg.null_value}" itemValue="#{null}" />
+		</c:if>
+		<ui:insert/>
+	</p:selectManyCheckbox>
+</ui:composition>
\ No newline at end of file
diff --git a/src/main/webapp/WEB-INF/taglib/select/selectManyEnumAria.xhtml b/src/main/webapp/WEB-INF/taglib/select/selectManyEnumAria.xhtml
new file mode 100644
index 0000000..d9771e6
--- /dev/null
+++ b/src/main/webapp/WEB-INF/taglib/select/selectManyEnumAria.xhtml
@@ -0,0 +1,22 @@
+<ui:composition xmlns="http://www.w3.org/1999/xhtml" 
+	xmlns:ui="http://java.sun.com/jsf/facelets" 
+	xmlns:p="http://primefaces.org/ui"
+	xmlns:f="http://java.sun.com/jsf/core"
+	xmlns:h="http://java.sun.com/jsf/html">
+	<h:outputText value="" />
+	<p:fieldset legend="#{resourcesUtil.getProperty(label)}">
+		<p:selectManyCheckbox id="#{id}" value="#{value.selected}" disabled="#{empty disabled ? false : disabled}"
+			layout="#{items.list.size() lt 5 ? 'lineDirection' : 'pageDirection'}" rendered="#{not nullAllowed}"
+			converter="#{genericJsfConverter}">
+			<f:selectItems value="#{items.list}" />
+			<ui:insert/>
+		</p:selectManyCheckbox>
+		<p:selectManyCheckbox id="#{id}_null_allowed" value="#{value.selected}" disabled="#{empty disabled ? false : disabled}"
+			layout="#{items.list.size() lt 5 ? 'lineDirection' : 'pageDirection'}" rendered="#{nullAllowed}"
+			converter="#{genericJsfConverter}">
+			<f:selectItems value="#{items.list}" />
+			<f:selectItem itemLabel="#{msg.null_value}" itemValue="#{null}" />
+			<ui:insert/>
+		</p:selectManyCheckbox>
+	</p:fieldset>
+</ui:composition>
diff --git a/src/main/webapp/WEB-INF/taglib/select/selectOneMenu.xhtml b/src/main/webapp/WEB-INF/taglib/select/selectOneMenu.xhtml
new file mode 100644
index 0000000..3672a6d
--- /dev/null
+++ b/src/main/webapp/WEB-INF/taglib/select/selectOneMenu.xhtml
@@ -0,0 +1,15 @@
+<ui:composition xmlns="http://www.w3.org/1999/xhtml" 
+	xmlns:ui="http://java.sun.com/jsf/facelets" 
+	xmlns:p="http://primefaces.org/ui"
+	xmlns:f="http://java.sun.com/jsf/core"
+	xmlns:h="http://java.sun.com/jsf/html"
+	xmlns:app="http://springfuse.jaxio.com/app">
+	<app:outputLabel for="#{id}" value="#{label}" required="#{required}" rendered="#{(empty rendered or rendered)}" />
+	<p:selectOneMenu id="#{id}" value="#{value}" label="#{resourcesUtil.getProperty(label)}" rendered="#{(empty rendered or rendered) and not readonly}" disabled="#{empty disabled ? false : disabled}"
+		layout="#{items.list.size() lt 4 ? 'lineDirection' : 'pageDirection'}">
+		<f:selectItems value="#{values}" />
+		<f:validateBean binding="#{lenientBeanValidator}" />
+		<ui:insert/>
+	</p:selectOneMenu>
+	<h:outputText value="#{value}" rendered="#{readonly}" />
+</ui:composition>
diff --git a/src/main/webapp/WEB-INF/taglib/select/selectOneRadio.xhtml b/src/main/webapp/WEB-INF/taglib/select/selectOneRadio.xhtml
new file mode 100644
index 0000000..402b00d
--- /dev/null
+++ b/src/main/webapp/WEB-INF/taglib/select/selectOneRadio.xhtml
@@ -0,0 +1,19 @@
+<ui:composition xmlns="http://www.w3.org/1999/xhtml" 
+	xmlns:ui="http://java.sun.com/jsf/facelets" 
+	xmlns:p="http://primefaces.org/ui"
+	xmlns:c="http://java.sun.com/jsp/jstl/core"
+	xmlns:f="http://java.sun.com/jsf/core"
+	xmlns:h="http://java.sun.com/jsf/html"
+	xmlns:app="http://springfuse.jaxio.com/app">
+	<app:outputLabel for="#{id}" value="#{label}" required="#{required}" rendered="#{(empty rendered or rendered)}" />
+	<p:selectOneRadio id="#{id}" value="#{value}" label="#{resourcesUtil.getProperty(label)}" rendered="#{(empty rendered or rendered) and not readonly}" disabled="#{empty disabled ? false : disabled}"
+		layout="#{empty layout ? (values.size() lt 4 ? 'lineDirection' : 'pageDirection') : layout}">
+		<f:selectItems value="#{values}" />
+		<c:if test="#{not empty nullAllowed and nullAllowed}">
+			<f:selectItem itemLabel="#{msg.null_value}" itemValue="#{null}" />
+		</c:if>
+		<f:validateBean binding="#{lenientBeanValidator}" />
+		<ui:insert/>
+	</p:selectOneRadio>
+	<h:outputText value="#{value}" rendered="#{readonly}" disabled="#{empty disabled ? false : disabled}"/>
+</ui:composition>
diff --git a/src/main/webapp/WEB-INF/taglib/springsecurity.taglib.xml b/src/main/webapp/WEB-INF/taglib/springsecurity.taglib.xml
new file mode 100644
index 0000000..418c1ed
--- /dev/null
+++ b/src/main/webapp/WEB-INF/taglib/springsecurity.taglib.xml
@@ -0,0 +1,28 @@
+<?xml version="1.0" encoding="UTF-8" standalone="no"?>
+<facelet-taglib xmlns="http://java.sun.com/xml/ns/javaee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-facelettaglibrary_2_0.xsd" version="2.0">
+	<namespace>http://www.springframework.org/security/tags</namespace>
+	<tag>
+		<tag-name>authorize</tag-name>
+		<handler-class>org.springframework.faces.security.FaceletsAuthorizeTagHandler</handler-class>
+	</tag>
+	<function>
+		<function-name>areAllGranted</function-name>
+		<function-class>org.springframework.faces.security.FaceletsAuthorizeTagUtils</function-class>
+		<function-signature>boolean areAllGranted(java.lang.String)</function-signature>
+	</function>
+	<function>
+		<function-name>areAnyGranted</function-name>
+		<function-class>org.springframework.faces.security.FaceletsAuthorizeTagUtils</function-class>
+		<function-signature>boolean areAnyGranted(java.lang.String)</function-signature>
+	</function>
+	<function>
+		<function-name>areNotGranted</function-name>
+		<function-class>org.springframework.faces.security.FaceletsAuthorizeTagUtils</function-class>
+		<function-signature>boolean areNotGranted(java.lang.String)</function-signature>
+	</function>
+	<function>
+		<function-name>isAllowed</function-name>
+		<function-class>org.springframework.faces.security.FaceletsAuthorizeTagUtils</function-class>
+		<function-signature>boolean isAllowed(java.lang.String, java.lang.String)</function-signature>
+	</function>
+</facelet-taglib>
\ No newline at end of file
diff --git a/src/main/webapp/WEB-INF/web.xml b/src/main/webapp/WEB-INF/web.xml
new file mode 100644
index 0000000..fe65d07
--- /dev/null
+++ b/src/main/webapp/WEB-INF/web.xml
@@ -0,0 +1,304 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!--
+ ! (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ ! Source code generated by Celerio, a Jaxio product
+ ! Want to purchase Celerio ? email us at info@jaxio.com
+ ! Follow us on twitter: @springfuse
+ ! Documentation: http://www.jaxio.com/documentation/celerio/
+ ! Template pack-jsf2-spring-conversation:src/main/webapp/WEB-INF/web.p.vm.xml
+-->
+<web-app version="3.0" xmlns="http://java.sun.com/xml/ns/javaee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"
+	metadata-complete="true">
+	<!-- Remove classpath scanning (from servlet 3.0) in order to speed web container startup 
+	metadata-complete="true" above + empty absolute ordering below	-->
+	<absolute-ordering>
+		<!-- Empty absolute ordering is necessary to completely disable classpath scanning -->
+	</absolute-ordering>
+	<context-param>
+		<!-- The master configuration file for this Spring web application -->
+		<!-- Context Configuration locations for Spring XML files -->
+		<param-name>contextConfigLocation</param-name>
+		<param-value>
+			classpath:net/bull/javamelody/monitoring-spring-datasource.xml
+			classpath:spring/applicationContext.xml
+			classpath:spring/applicationContext-web.xml
+			WEB-INF/applicationContext-security-http.xml
+		</param-value>
+	</context-param>
+	<!-- listeners -->
+	<listener>
+		<description>Parse JavaServer Faces configuration resources</description>
+		<listener-class>com.sun.faces.config.ConfigureListener</listener-class>
+	</listener>
+	<listener>
+		<description>Bootstrap listener to start up and shut down Spring's root WebApplicationContext</description>
+		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
+	</listener>
+	<listener>
+		<description>Exposes the request to the current thread through both LocaleContextHolder and RequestContextHolder</description>
+		<listener-class>org.springframework.web.context.request.RequestContextListener</listener-class>
+	</listener>
+	<listener>
+		<description>Monitor application</description>
+		<listener-class>net.bull.javamelody.SessionListener</listener-class>
+	</listener>
+	<!-- filters -->
+	<filter>
+		<filter-name>encodingFilter</filter-name>
+		<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
+		<init-param>
+			<param-name>encoding</param-name>
+			<param-value>UTF-8</param-value>
+		</init-param>
+		<init-param>
+			<param-name>forceEncoding</param-name>
+			<param-value>true</param-value>
+		</init-param>
+	</filter>
+	<filter-mapping>
+		<filter-name>encodingFilter</filter-name>
+		<servlet-name>facesServlet</servlet-name>
+	</filter-mapping>
+	<filter>
+		<filter-name>springSecurityFilterChain</filter-name>
+		<filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
+	</filter>
+	<filter-mapping>
+		<filter-name>springSecurityFilterChain</filter-name>
+		<servlet-name>facesServlet</servlet-name>
+	</filter-mapping>
+	<filter-mapping>
+		<filter-name>springSecurityFilterChain</filter-name>
+		<url-pattern>/monitoring*</url-pattern>
+	</filter-mapping>
+	<filter>
+		<filter-name>javamelodyFilter</filter-name>
+		<filter-class>net.bull.javamelody.MonitoringFilter</filter-class>
+		<init-param>
+			<param-name>url-exclude-pattern</param-name>
+			<param-value>/javax\.faces\.resource/.*</param-value>
+		</init-param>
+		<init-param>
+			<param-name>log</param-name>
+			<param-value>true</param-value>
+		</init-param>
+	</filter>
+	<filter-mapping>
+		<filter-name>javamelodyFilter</filter-name>
+		<url-pattern>/*</url-pattern>
+	</filter-mapping>
+	<filter>
+		<filter-name>gzipResponseFilter</filter-name>
+		<filter-class>org.omnifaces.filter.GzipResponseFilter</filter-class>
+	</filter>
+	<filter-mapping>
+		<filter-name>gzipResponseFilter</filter-name>
+		<servlet-name>facesServlet</servlet-name>
+	</filter-mapping>
+	<filter>
+		<filter-name>localeResolverRequestFilter</filter-name>
+		<filter-class>com.h2.demo.web.filter.LocaleResolverRequestFilter</filter-class>
+	</filter>
+	<filter-mapping>
+		<filter-name>localeResolverRequestFilter</filter-name>
+		<servlet-name>facesServlet</servlet-name>
+	</filter-mapping>
+	<filter>
+		<filter-name>logContextFilter</filter-name>
+		<filter-class>com.h2.demo.web.filter.LogContextFilter</filter-class>
+	</filter>
+	<filter-mapping>
+		<filter-name>logContextFilter</filter-name>
+		<servlet-name>facesServlet</servlet-name>
+	</filter-mapping>
+	<filter>
+		<filter-name>fileUploadFilter</filter-name>
+		<filter-class>org.primefaces.webapp.filter.FileUploadFilter</filter-class>
+	</filter>
+	<filter-mapping>
+		<filter-name>fileUploadFilter</filter-name>
+		<servlet-name>facesServlet</servlet-name>
+	</filter-mapping>
+	<filter>
+		<filter-name>sessionExpirationFilter</filter-name>
+		<filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
+	</filter>
+	<filter-mapping>
+		<filter-name>sessionExpirationFilter</filter-name>
+		<servlet-name>facesServlet</servlet-name>
+	</filter-mapping>
+	<filter>
+		<filter-name>conversationFilter</filter-name>
+		<filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
+	</filter>
+	<filter-mapping>
+		<filter-name>conversationFilter</filter-name>
+		<servlet-name>facesServlet</servlet-name>
+	</filter-mapping>
+	<filter>
+		<filter-name>noPageCacheFilter</filter-name>
+		<filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
+	</filter>
+	<filter-mapping>
+		<filter-name>noPageCacheFilter</filter-name>
+		<servlet-name>facesServlet</servlet-name>
+	</filter-mapping>
+	<!-- JSF 2 IMPLEMENTATION -->
+	<context-param>
+		<description>Use JSF view templates saved as *.xhtml, for use with Facelets</description>
+		<param-name>javax.faces.DEFAULT_SUFFIX</param-name>
+		<param-value>.xhtml</param-value>
+	</context-param>
+	<context-param>
+		<description>Ideally the buffer size should be large enough so the largest view can fit in it entirely for exception handling purposes and also performance reason (in bytes)</description>
+		<param-name>javax.faces.FACELETS_BUFFER_SIZE</param-name>
+		<param-value>10240</param-value>
+	</context-param>
+	<context-param>
+		<description>Enables special Facelets debug output during development</description>
+		<param-name>javax.faces.PROJECT_STAGE</param-name>
+		<param-value>Production</param-value>
+	</context-param>
+	<context-param>
+		<description>Causes Facelets to refresh templates during development (in seconds)</description>
+		<param-name>javax.faces.FACELETS_REFRESH_PERIOD</param-name>
+		<param-value>-1</param-value><!-- -1 means disabled -->
+	</context-param>
+	<context-param>
+		<description>Resources cache expiration (in millisec). Enabled only in 'Production' stage</description>
+		<param-name>com.sun.faces.defaultResourceMaxAge</param-name>
+		<param-value>86400000</param-value>
+	</context-param>
+	<context-param>
+		<description>Enable the usage of comments in xhtml pages</description>
+		<param-name>javax.faces.FACELETS_SKIP_COMMENTS</param-name>
+		<param-value>true</param-value>
+	</context-param>
+	<context-param>
+		<param-name>javax.faces.FACELETS_LIBRARIES</param-name>
+		<param-value>/WEB-INF/taglib/components.xml</param-value>
+	</context-param>
+	<context-param>
+		<param-name>com.sun.faces.expressionFactory</param-name>
+		<param-value>org.jboss.el.ExpressionFactoryImpl</param-value>
+	</context-param>
+	<context-param>
+		<param-name>org.apache.myfaces.EXPRESSION_FACTORY</param-name>
+		<param-value>org.jboss.el.ExpressionFactoryImpl</param-value>
+	</context-param>
+	<context-param>
+		<param-name>javax.faces.DATETIMECONVERTER_DEFAULT_TIMEZONE_IS_SYSTEM_TIMEZONE</param-name>
+		<param-value>true</param-value>
+	</context-param>
+	<context-param>
+		<description>Primefaces theme</description>
+		<param-name>primefaces.THEME</param-name>
+		<param-value>bootstrap</param-value>
+	</context-param>
+	<!-- servlet -->
+	<servlet>
+		<servlet-name>facesServlet</servlet-name>
+		<servlet-class>javax.faces.webapp.FacesServlet</servlet-class>
+		<load-on-startup>1</load-on-startup>
+	</servlet>
+	<servlet-mapping>
+		<servlet-name>facesServlet</servlet-name>
+		<url-pattern>*.faces</url-pattern>
+	</servlet-mapping>
+	<!-- Mime types -->
+	<mime-mapping>
+		<extension>css</extension>
+		<mime-type>text/css</mime-type>
+	</mime-mapping>
+	<mime-mapping>
+		<extension>gif</extension>
+		<mime-type>image/gif</mime-type>
+	</mime-mapping>
+	<mime-mapping>
+		<extension>html</extension>
+		<mime-type>text/html</mime-type>
+	</mime-mapping>
+	<mime-mapping>
+		<extension>htm</extension>
+		<mime-type>text/html</mime-type>
+	</mime-mapping>
+	<mime-mapping>
+		<extension>ico</extension>
+		<mime-type>image/x-icon</mime-type>
+	</mime-mapping>
+	<mime-mapping>
+		<extension>jpeg</extension>
+		<mime-type>image/jpeg</mime-type>
+	</mime-mapping>
+	<mime-mapping>
+		<extension>jpg</extension>
+		<mime-type>image/jpeg</mime-type>
+	</mime-mapping>
+	<mime-mapping>
+		<extension>js</extension>
+		<mime-type>application/x-javascript</mime-type>
+	</mime-mapping>
+	<mime-mapping>
+		<extension>png</extension>
+		<mime-type>image/png</mime-type>
+	</mime-mapping>
+	<mime-mapping>
+		<extension>txt</extension>
+		<mime-type>text/plain</mime-type>
+	</mime-mapping>
+	<mime-mapping>
+		<extension>xml</extension>
+		<mime-type>text/xml</mime-type>
+	</mime-mapping>
+	<session-config>
+		<!-- session timeout in minutes -->
+		<session-timeout>10</session-timeout>
+		<tracking-mode>COOKIE</tracking-mode>
+		<cookie-config>
+			<http-only>true</http-only>
+		</cookie-config>
+	</session-config>
+	<!-- Error pages. -->
+	<error-page>
+		<exception-type>javax.faces.application.ViewExpiredException</exception-type>
+		<location>/home.faces?session_expired=true</location>
+	</error-page>
+	<error-page>
+		<exception-type>org.springframework.security.core.AuthenticationException</exception-type>
+		<location>/home.faces?session_expired=true</location>
+	</error-page>
+	<error-page>
+		<exception-type>org.springframework.dao.DataAccessException</exception-type>
+		<location>/error/data-error.faces</location>
+	</error-page>
+	<error-page>
+		<!-- comment it if you use myfaces, otherwise omnifaces will complain severely -->
+		<exception-type>com.sun.faces.context.FacesFileNotFoundException</exception-type>
+		<location>/error/not-found.faces</location>
+	</error-page>
+	<error-page>
+		<exception-type>java.lang.Throwable</exception-type>
+		<location>/error/error.faces</location>
+	</error-page>
+		<error-page>
+		<error-code>500</error-code>
+		<location>/error/error.faces</location>
+	</error-page>
+	<error-page>
+		<error-code>404</error-code>
+		<location>/error/not-found.faces</location>
+	</error-page>
+	<!-- Default page -->
+	<welcome-file-list>
+		<welcome-file>index.html</welcome-file>
+	</welcome-file-list>
+	<security-constraint>
+		<display-name>Restrict direct access to XHTML files</display-name>
+		<web-resource-collection>
+			<web-resource-name>XHTML files</web-resource-name>
+			<url-pattern>*.xhtml</url-pattern>
+		</web-resource-collection>
+		<auth-constraint />
+	</security-constraint>
+</web-app>
\ No newline at end of file
diff --git a/src/main/webapp/concurrentModificationResolution.xhtml b/src/main/webapp/concurrentModificationResolution.xhtml
new file mode 100644
index 0000000..31e18e1
--- /dev/null
+++ b/src/main/webapp/concurrentModificationResolution.xhtml
@@ -0,0 +1,33 @@
+<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
+<ui:composition xmlns="http://www.w3.org/1999/xhtml"
+	xmlns:ui="http://java.sun.com/jsf/facelets"
+	xmlns:c="http://java.sun.com/jsp/jstl/core"	
+	xmlns:f="http://java.sun.com/jsf/core"
+	xmlns:h="http://java.sun.com/jsf/html"
+	xmlns:p="http://primefaces.org/ui"
+	xmlns:appcc="http://java.sun.com/jsf/composite/components"
+	template="/WEB-INF/layouts/main.xhtml">
+	<ui:param name="title" value="concurrentModificationResolution_title" />
+	<ui:define name="content">
+		<p:panel id="refreshPanel" header="#{msg.concurrentModificationResolution_conflict}">
+			<input type="hidden" name="_cid" value="#{conversationManager.currentConversation.cid}"/>
+			<p:outputPanel>
+				<h:outputText value="#{msg.concurrentModificationResolution_description}" escape="false" />
+			</p:outputPanel>
+			<p:commandButton 
+				ajax="false"
+				action="#{concurrentModificationResolver.refresh()}"
+				process="@form"
+				value="#{msg.refresh}"
+				title="#{msg.concurrentModificationResolution_refresh}">
+			</p:commandButton>
+			<p:commandButton 
+				ajax="false"
+				action="#{concurrentModificationResolver.discard()}"
+				process="@form"
+				value="#{msg.discard}"
+				title="#{msg.concurrentModificationResolution_discard}">
+			</p:commandButton>
+		</p:panel>
+	</ui:define>
+</ui:composition>
diff --git a/src/main/webapp/domain/accountEdit.xhtml b/src/main/webapp/domain/accountEdit.xhtml
new file mode 100644
index 0000000..3d09a06
--- /dev/null
+++ b/src/main/webapp/domain/accountEdit.xhtml
@@ -0,0 +1,79 @@
+<!--
+ ! (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ ! Source code generated by Celerio, a Jaxio product
+ ! Want to purchase Celerio ? email us at info@jaxio.com
+ ! Follow us on twitter: @springfuse
+ ! Documentation: http://www.jaxio.com/documentation/celerio/
+ ! Template pack-jsf2-spring-conversation:src/main/webapp/domain/edit.e.vm.xhtml
+-->
+<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
+<ui:composition xmlns="http://www.w3.org/1999/xhtml"
+	xmlns:ui="http://java.sun.com/jsf/facelets"
+	xmlns:c="http://java.sun.com/jsp/jstl/core"
+	xmlns:f="http://java.sun.com/jsf/core"
+	xmlns:h="http://java.sun.com/jsf/html"
+	xmlns:p="http://primefaces.org/ui"
+	xmlns:app="http://springfuse.jaxio.com/app"
+	xmlns:appcc="http://java.sun.com/jsf/composite/components">
+<app:edit bean="#{accountEditForm}" title="#{accountEditForm.title}">
+	<ui:define name="form">
+		<app:input id="login" value="#{accountEditForm.account.login}" size="100" label="account_login" required="true">
+			<f:validateBean binding="#{jpaUniqueValidator}" entity="#{accountEditForm.account}" property="login" />
+		</app:input>
+		<app:inputPassword id="password" value="#{accountEditForm.account.password}" size="100" label="account_password" required="true" />
+		<app:input id="email" value="#{accountEditForm.account.email}" size="100" label="account_email" required="true">
+			<f:validateBean binding="#{jpaUniqueValidator}" entity="#{accountEditForm.account}" property="email" />
+		</app:input>
+		<app:inputBoolean id="isEnabled" value="#{accountEditForm.account.isEnabled}" label="account_isEnabled" required="true" />
+		<app:input id="civility" value="#{accountEditForm.account.civility}" size="2" label="account_civility" />
+		<app:input id="firstName" value="#{accountEditForm.account.firstName}" size="100" label="account_firstName" />
+		<app:input id="lastName" value="#{accountEditForm.account.lastName}" size="100" label="account_lastName" />
+		<app:inputDateTime id="birthDate" value="#{accountEditForm.account.birthDate}" label="account_birthDate" />
+		<app:inputTextArea id="description" value="#{accountEditForm.account.description}" label="account_description" />
+		<app:autoComplete id="address" value="#{accountEditForm.address.selected}" label="account_address" title="account_address" required="false" 
+			model="#{accountEditForm.address}" controller="#{addressController}" permission="#{addressPermission}">
+			<app:iconSearch id="selectAddress" />
+			<app:iconAdd id="addAddress" />
+			<app:iconEdit item="#{accountEditForm.account.address}" />
+			<app:iconView item="#{accountEditForm.account.address}" />
+		</app:autoComplete>
+		<app:audit
+			creationAuthor="#{accountEditForm.account.creationAuthor}"
+			creationDate="#{accountEditForm.account.creationDate}"
+			lastModificationAuthor="#{accountEditForm.account.lastModificationAuthor}"
+			lastModificationDate="#{accountEditForm.account.lastModificationDate}"
+		/>
+	</ui:define>
+	<ui:define name="tabs">
+			<p:tab id="roles" title="#{msg.account_roles}" rendered="#{rolePermission.canUse() and not (print and accountEditForm.account.roles.isEmpty())}">
+				<p:dataTable id="rolesList" var="item" value="#{accountEditForm.roles.model}"
+					paginator="#{not print and accountEditForm.account.roles.size() gt 10}" rows="#{print ? null : 10}"
+					rowsPerPageTemplate="10,25,50,100" paginatorPosition="bottom"
+					selection="#{accountEditForm.roles.model.selectedRow}" selectionMode="single" emptyMessage="#{msg.collection_empty}">
+					<p:ajax event="rowSelect" listener="#{accountEditForm.roles.onRowSelect}" />
+					<p:column id="role_roleName" headerText="#{msg.role_roleName}" sortBy="#{item.roleName}" styleClass="roleName">
+						#{item.roleName}
+					</p:column>
+					<p:column id="actions" styleClass="actions-column" resizable="false">
+						<f:facet name="header">
+							<app:iconSearch id="selectRole" model="#{accountEditForm.roles}" title="account_roles" permission="#{rolePermission}" />
+							<app:iconAdd id="addRole" model="#{accountEditForm.roles}" title="account_roles" permission="#{rolePermission}"/>
+						</f:facet>
+						<app:iconView model="#{accountEditForm.roles}" item="#{item}" permission="#{rolePermission}">
+							<f:setPropertyActionListener value="#{item}" target="#{accountEditForm.roles.model.selectedRow}" />
+						</app:iconView>
+						<app:iconEdit model="#{accountEditForm.roles}" item="#{item}" permission="#{rolePermission}">
+							<f:setPropertyActionListener value="#{item}" target="#{accountEditForm.roles.model.selectedRow}" />
+						</app:iconEdit>
+						<app:iconRemove dialogWidgetVar="askForRemoveRoleDialog" item="#{item}" permission="#{rolePermission}">
+							<f:setPropertyActionListener value="#{item}" target="#{accountEditForm.roles.model.selectedRow}" />
+						</app:iconRemove>
+					</p:column>
+				</p:dataTable>
+			</p:tab>
+	</ui:define>
+	<ui:define name="custom-dialogs">
+		<app:confirmToManyRemoveDialog widgetVar="askForRemoveRoleDialog" toManyAction="#{accountEditForm.roles}" update=":form:tabs:rolesList :form:messages" />
+	</ui:define>
+</app:edit>
+</ui:composition>
diff --git a/src/main/webapp/domain/accountSelect.xhtml b/src/main/webapp/domain/accountSelect.xhtml
new file mode 100644
index 0000000..3d5e627
--- /dev/null
+++ b/src/main/webapp/domain/accountSelect.xhtml
@@ -0,0 +1,65 @@
+<!--
+ ! (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ ! Source code generated by Celerio, a Jaxio product
+ ! Want to purchase Celerio ? email us at info@jaxio.com
+ ! Follow us on twitter: @springfuse
+ ! Documentation: http://www.jaxio.com/documentation/celerio/
+ ! Template pack-jsf2-spring-conversation:src/main/webapp/domain/select.e.vm.xhtml
+-->
+<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
+<ui:composition xmlns="http://www.w3.org/1999/xhtml"
+	xmlns:ui="http://java.sun.com/jsf/facelets"
+	xmlns:c="http://java.sun.com/jsp/jstl/core"
+	xmlns:f="http://java.sun.com/jsf/core"
+	xmlns:h="http://java.sun.com/jsf/html"
+	xmlns:p="http://primefaces.org/ui"
+	xmlns:app="http://springfuse.jaxio.com/app"
+	xmlns:appcc="http://java.sun.com/jsf/composite/components">
+	<app:search title="account_search" model="#{accountLazyDataModel}" searchForm="#{accountSearchForm}"
+		controller="#{accountController}" permission="#{accountPermission}" savedSearch="true">
+		<ui:define name="filters">
+			<app:inputMultiAutoComplete id="login" value="#{accountSearchForm.loginSelector}" label="account_login" completeMethod="completeProperty" property="login" />
+			<app:inputMultiAutoComplete id="password" value="#{accountSearchForm.passwordSelector}" label="account_password" completeMethod="completeSame" />
+			<app:inputMultiAutoComplete id="email" value="#{accountSearchForm.emailSelector}" label="account_email" completeMethod="completeProperty" property="email" />
+			<app:selectManyBoolean id="isEnabled" value="#{accountSearchForm.isEnabledSelector}" label="account_isEnabled" />
+			<app:inputMultiAutoComplete id="civility" value="#{accountSearchForm.civilitySelector}" label="account_civility" completeMethod="completeProperty" property="civility" />
+			<app:inputMultiAutoComplete id="firstName" value="#{accountSearchForm.firstNameSelector}" label="account_firstName" completeMethod="completeProperty" property="firstName" />
+			<app:inputMultiAutoComplete id="lastName" value="#{accountSearchForm.lastNameSelector}" label="account_lastName" completeMethod="completeProperty" property="lastName" />
+			<app:rangeDateTime id="birthDate" value="#{accountSearchForm.birthDateRange}" label="account_birthDate" />
+			<app:inputMultiAutoComplete id="description" value="#{accountSearchForm.descriptionSelector}" label="account_description" completeMethod="completeProperty" property="description" />
+			<app:multiAutoComplete id="addressSelector" value="#{accountSearchForm.addressSelector}" label="account_address" 
+				controller="#{addressController}" permission="#{addressPermission}"/>
+			<app:multiAutoComplete id="rolesSelector" value="#{accountSearchForm.rolesSelector}" label="account_roles" 
+				controller="#{roleController}" permission="#{rolePermission}"/>
+		</ui:define>
+		<ui:define name="result">
+			<c:if test="#{not multiCheckboxSelection}">
+				<p:ajax event="rowSelect" listener="#{accountLazyDataModel.onRowSelect}" />
+			</c:if>
+			<p:column id="account_login" headerText="#{msg.account_login}" sortBy="#{item.login}" styleClass="login">
+				#{item.login}
+			</p:column>
+			<p:column id="account_password" headerText="#{msg.account_password}" sortBy="#{item.password}" styleClass="password">
+				#{item.password}
+			</p:column>
+			<p:column id="account_email" headerText="#{msg.account_email}" sortBy="#{item.email}" styleClass="email">
+				#{item.email}
+			</p:column>
+			<p:column id="account_isEnabled" headerText="#{msg.account_isEnabled}" sortBy="#{item.isEnabled}" styleClass="isEnabled">
+				<appcc:outputBoolean value="#{item.isEnabled}" />
+			</p:column>
+			<p:column id="account_civility" headerText="#{msg.account_civility}" sortBy="#{item.civility}" styleClass="civility">
+				#{item.civility}
+			</p:column>
+			<p:column id="account_firstName" headerText="#{msg.account_firstName}" sortBy="#{item.firstName}" styleClass="firstName">
+				#{item.firstName}
+			</p:column>
+			<p:column id="actions" headerText="#{msg.actions}" styleClass="actions-column" resizable="false">
+				<app:iconSelect item="#{item}" />
+				<app:iconEdit item="#{item}" />
+				<app:iconView item="#{item}" />
+				<app:iconDelete item="#{item}" />
+			</p:column>
+		</ui:define>
+	</app:search>
+</ui:composition>
\ No newline at end of file
diff --git a/src/main/webapp/domain/addressEdit.xhtml b/src/main/webapp/domain/addressEdit.xhtml
new file mode 100644
index 0000000..ae998eb
--- /dev/null
+++ b/src/main/webapp/domain/addressEdit.xhtml
@@ -0,0 +1,24 @@
+<!--
+ ! (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ ! Source code generated by Celerio, a Jaxio product
+ ! Want to purchase Celerio ? email us at info@jaxio.com
+ ! Follow us on twitter: @springfuse
+ ! Documentation: http://www.jaxio.com/documentation/celerio/
+ ! Template pack-jsf2-spring-conversation:src/main/webapp/domain/edit.e.vm.xhtml
+-->
+<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
+<ui:composition xmlns="http://www.w3.org/1999/xhtml"
+	xmlns:ui="http://java.sun.com/jsf/facelets"
+	xmlns:c="http://java.sun.com/jsp/jstl/core"
+	xmlns:f="http://java.sun.com/jsf/core"
+	xmlns:h="http://java.sun.com/jsf/html"
+	xmlns:p="http://primefaces.org/ui"
+	xmlns:app="http://springfuse.jaxio.com/app"
+	xmlns:appcc="http://java.sun.com/jsf/composite/components">
+<app:edit bean="#{addressEditForm}" title="#{addressEditForm.title}">
+	<ui:define name="form">
+		<app:input id="streetName" value="#{addressEditForm.address.streetName}" size="100" label="address_streetName" />
+		<app:input id="city" value="#{addressEditForm.address.city}" size="100" label="address_city" required="true" />
+	</ui:define>
+</app:edit>
+</ui:composition>
diff --git a/src/main/webapp/domain/addressSelect.xhtml b/src/main/webapp/domain/addressSelect.xhtml
new file mode 100644
index 0000000..8fc3fc1
--- /dev/null
+++ b/src/main/webapp/domain/addressSelect.xhtml
@@ -0,0 +1,42 @@
+<!--
+ ! (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ ! Source code generated by Celerio, a Jaxio product
+ ! Want to purchase Celerio ? email us at info@jaxio.com
+ ! Follow us on twitter: @springfuse
+ ! Documentation: http://www.jaxio.com/documentation/celerio/
+ ! Template pack-jsf2-spring-conversation:src/main/webapp/domain/select.e.vm.xhtml
+-->
+<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
+<ui:composition xmlns="http://www.w3.org/1999/xhtml"
+	xmlns:ui="http://java.sun.com/jsf/facelets"
+	xmlns:c="http://java.sun.com/jsp/jstl/core"
+	xmlns:f="http://java.sun.com/jsf/core"
+	xmlns:h="http://java.sun.com/jsf/html"
+	xmlns:p="http://primefaces.org/ui"
+	xmlns:app="http://springfuse.jaxio.com/app"
+	xmlns:appcc="http://java.sun.com/jsf/composite/components">
+	<app:search title="address_search" model="#{addressLazyDataModel}" searchForm="#{addressSearchForm}"
+		controller="#{addressController}" permission="#{addressPermission}" savedSearch="true">
+		<ui:define name="filters">
+			<app:inputMultiAutoComplete id="streetName" value="#{addressSearchForm.streetNameSelector}" label="address_streetName" completeMethod="completeProperty" property="streetName" />
+			<app:inputMultiAutoComplete id="city" value="#{addressSearchForm.citySelector}" label="address_city" completeMethod="completeProperty" property="city" />
+		</ui:define>
+		<ui:define name="result">
+			<c:if test="#{not multiCheckboxSelection}">
+				<p:ajax event="rowSelect" listener="#{addressLazyDataModel.onRowSelect}" />
+			</c:if>
+			<p:column id="address_streetName" headerText="#{msg.address_streetName}" sortBy="#{item.streetName}" styleClass="streetName">
+				#{item.streetName}
+			</p:column>
+			<p:column id="address_city" headerText="#{msg.address_city}" sortBy="#{item.city}" styleClass="city">
+				#{item.city}
+			</p:column>
+			<p:column id="actions" headerText="#{msg.actions}" styleClass="actions-column" resizable="false">
+				<app:iconSelect item="#{item}" />
+				<app:iconEdit item="#{item}" />
+				<app:iconView item="#{item}" />
+				<app:iconDelete item="#{item}" />
+			</p:column>
+		</ui:define>
+	</app:search>
+</ui:composition>
\ No newline at end of file
diff --git a/src/main/webapp/domain/auditLogEdit.xhtml b/src/main/webapp/domain/auditLogEdit.xhtml
new file mode 100644
index 0000000..fc09ee7
--- /dev/null
+++ b/src/main/webapp/domain/auditLogEdit.xhtml
@@ -0,0 +1,28 @@
+<!--
+ ! (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ ! Source code generated by Celerio, a Jaxio product
+ ! Want to purchase Celerio ? email us at info@jaxio.com
+ ! Follow us on twitter: @springfuse
+ ! Documentation: http://www.jaxio.com/documentation/celerio/
+ ! Template pack-jsf2-spring-conversation:src/main/webapp/domain/edit.e.vm.xhtml
+-->
+<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
+<ui:composition xmlns="http://www.w3.org/1999/xhtml"
+	xmlns:ui="http://java.sun.com/jsf/facelets"
+	xmlns:c="http://java.sun.com/jsp/jstl/core"
+	xmlns:f="http://java.sun.com/jsf/core"
+	xmlns:h="http://java.sun.com/jsf/html"
+	xmlns:p="http://primefaces.org/ui"
+	xmlns:app="http://springfuse.jaxio.com/app"
+	xmlns:appcc="http://java.sun.com/jsf/composite/components">
+<app:edit bean="#{auditLogEditForm}" title="#{auditLogEditForm.title}">
+	<ui:define name="form">
+		<app:inputTextArea id="author" value="#{auditLogEditForm.auditLog.author}" label="auditLog_author" />
+		<app:inputTextArea id="event" value="#{auditLogEditForm.auditLog.event}" label="auditLog_event" />
+		<app:inputDateTime id="eventDate" value="#{auditLogEditForm.auditLog.eventDate}" label="auditLog_eventDate" />
+		<app:inputTextArea id="stringAttribute1" value="#{auditLogEditForm.auditLog.stringAttribute1}" label="auditLog_stringAttribute1" />
+		<app:inputTextArea id="stringAttribute2" value="#{auditLogEditForm.auditLog.stringAttribute2}" label="auditLog_stringAttribute2" />
+		<app:inputTextArea id="stringAttribute3" value="#{auditLogEditForm.auditLog.stringAttribute3}" label="auditLog_stringAttribute3" />
+	</ui:define>
+</app:edit>
+</ui:composition>
diff --git a/src/main/webapp/domain/auditLogSelect.xhtml b/src/main/webapp/domain/auditLogSelect.xhtml
new file mode 100644
index 0000000..90d8c44
--- /dev/null
+++ b/src/main/webapp/domain/auditLogSelect.xhtml
@@ -0,0 +1,58 @@
+<!--
+ ! (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ ! Source code generated by Celerio, a Jaxio product
+ ! Want to purchase Celerio ? email us at info@jaxio.com
+ ! Follow us on twitter: @springfuse
+ ! Documentation: http://www.jaxio.com/documentation/celerio/
+ ! Template pack-jsf2-spring-conversation:src/main/webapp/domain/select.e.vm.xhtml
+-->
+<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
+<ui:composition xmlns="http://www.w3.org/1999/xhtml"
+	xmlns:ui="http://java.sun.com/jsf/facelets"
+	xmlns:c="http://java.sun.com/jsp/jstl/core"
+	xmlns:f="http://java.sun.com/jsf/core"
+	xmlns:h="http://java.sun.com/jsf/html"
+	xmlns:p="http://primefaces.org/ui"
+	xmlns:app="http://springfuse.jaxio.com/app"
+	xmlns:appcc="http://java.sun.com/jsf/composite/components">
+	<app:search title="auditLog_search" model="#{auditLogLazyDataModel}" searchForm="#{auditLogSearchForm}"
+		controller="#{auditLogController}" permission="#{auditLogPermission}" savedSearch="true">
+		<ui:define name="filters">
+			<app:inputMultiAutoComplete id="author" value="#{auditLogSearchForm.authorSelector}" label="auditLog_author" completeMethod="completeProperty" property="author" />
+			<app:inputMultiAutoComplete id="event" value="#{auditLogSearchForm.eventSelector}" label="auditLog_event" completeMethod="completeProperty" property="event" />
+			<app:rangeDateTime id="eventDate" value="#{auditLogSearchForm.eventDateRange}" label="auditLog_eventDate" />
+			<app:inputMultiAutoComplete id="stringAttribute1" value="#{auditLogSearchForm.stringAttribute1Selector}" label="auditLog_stringAttribute1" completeMethod="completeProperty" property="stringAttribute1" />
+			<app:inputMultiAutoComplete id="stringAttribute2" value="#{auditLogSearchForm.stringAttribute2Selector}" label="auditLog_stringAttribute2" completeMethod="completeProperty" property="stringAttribute2" />
+			<app:inputMultiAutoComplete id="stringAttribute3" value="#{auditLogSearchForm.stringAttribute3Selector}" label="auditLog_stringAttribute3" completeMethod="completeProperty" property="stringAttribute3" />
+		</ui:define>
+		<ui:define name="result">
+			<c:if test="#{not multiCheckboxSelection}">
+				<p:ajax event="rowSelect" listener="#{auditLogLazyDataModel.onRowSelect}" />
+			</c:if>
+			<p:column id="auditLog_author" headerText="#{msg.auditLog_author}" sortBy="#{item.author}" styleClass="author">
+				#{item.author}
+			</p:column>
+			<p:column id="auditLog_event" headerText="#{msg.auditLog_event}" sortBy="#{item.event}" styleClass="event">
+				#{item.event}
+			</p:column>
+			<p:column id="auditLog_eventDate" headerText="#{msg.auditLog_eventDate}" sortBy="#{item.eventDate}" styleClass="eventDate">
+				<app:outputDateTime value="#{item.eventDate}" />
+			</p:column>
+			<p:column id="auditLog_stringAttribute1" headerText="#{msg.auditLog_stringAttribute1}" sortBy="#{item.stringAttribute1}" styleClass="stringAttribute1">
+				#{item.stringAttribute1}
+			</p:column>
+			<p:column id="auditLog_stringAttribute2" headerText="#{msg.auditLog_stringAttribute2}" sortBy="#{item.stringAttribute2}" styleClass="stringAttribute2">
+				#{item.stringAttribute2}
+			</p:column>
+			<p:column id="auditLog_stringAttribute3" headerText="#{msg.auditLog_stringAttribute3}" sortBy="#{item.stringAttribute3}" styleClass="stringAttribute3">
+				#{item.stringAttribute3}
+			</p:column>
+			<p:column id="actions" headerText="#{msg.actions}" styleClass="actions-column" resizable="false">
+				<app:iconSelect item="#{item}" />
+				<app:iconEdit item="#{item}" />
+				<app:iconView item="#{item}" />
+				<app:iconDelete item="#{item}" />
+			</p:column>
+		</ui:define>
+	</app:search>
+</ui:composition>
\ No newline at end of file
diff --git a/src/main/webapp/domain/bookEdit.xhtml b/src/main/webapp/domain/bookEdit.xhtml
new file mode 100644
index 0000000..d193f34
--- /dev/null
+++ b/src/main/webapp/domain/bookEdit.xhtml
@@ -0,0 +1,31 @@
+<!--
+ ! (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ ! Source code generated by Celerio, a Jaxio product
+ ! Want to purchase Celerio ? email us at info@jaxio.com
+ ! Follow us on twitter: @springfuse
+ ! Documentation: http://www.jaxio.com/documentation/celerio/
+ ! Template pack-jsf2-spring-conversation:src/main/webapp/domain/edit.e.vm.xhtml
+-->
+<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
+<ui:composition xmlns="http://www.w3.org/1999/xhtml"
+	xmlns:ui="http://java.sun.com/jsf/facelets"
+	xmlns:c="http://java.sun.com/jsp/jstl/core"
+	xmlns:f="http://java.sun.com/jsf/core"
+	xmlns:h="http://java.sun.com/jsf/html"
+	xmlns:p="http://primefaces.org/ui"
+	xmlns:app="http://springfuse.jaxio.com/app"
+	xmlns:appcc="http://java.sun.com/jsf/composite/components">
+<app:edit bean="#{bookEditForm}" title="#{bookEditForm.title}">
+	<ui:define name="form">
+		<app:autoComplete id="account" value="#{bookEditForm.account.selected}" label="book_account" title="book_account" required="false" 
+			model="#{bookEditForm.account}" controller="#{accountController}" permission="#{accountPermission}">
+			<app:iconSearch id="selectAccount" />
+			<app:iconAdd id="addAccount" />
+			<app:iconEdit item="#{bookEditForm.book.account}" />
+			<app:iconView item="#{bookEditForm.book.account}" />
+		</app:autoComplete>
+		<app:input id="title" value="#{bookEditForm.book.title}" size="100" label="book_title" required="true" />
+		<app:input id="numberOfPages" value="#{bookEditForm.book.numberOfPages}" label="book_numberOfPages" size="10" required="true" />
+	</ui:define>
+</app:edit>
+</ui:composition>
diff --git a/src/main/webapp/domain/bookSelect.xhtml b/src/main/webapp/domain/bookSelect.xhtml
new file mode 100644
index 0000000..59ca615
--- /dev/null
+++ b/src/main/webapp/domain/bookSelect.xhtml
@@ -0,0 +1,44 @@
+<!--
+ ! (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ ! Source code generated by Celerio, a Jaxio product
+ ! Want to purchase Celerio ? email us at info@jaxio.com
+ ! Follow us on twitter: @springfuse
+ ! Documentation: http://www.jaxio.com/documentation/celerio/
+ ! Template pack-jsf2-spring-conversation:src/main/webapp/domain/select.e.vm.xhtml
+-->
+<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
+<ui:composition xmlns="http://www.w3.org/1999/xhtml"
+	xmlns:ui="http://java.sun.com/jsf/facelets"
+	xmlns:c="http://java.sun.com/jsp/jstl/core"
+	xmlns:f="http://java.sun.com/jsf/core"
+	xmlns:h="http://java.sun.com/jsf/html"
+	xmlns:p="http://primefaces.org/ui"
+	xmlns:app="http://springfuse.jaxio.com/app"
+	xmlns:appcc="http://java.sun.com/jsf/composite/components">
+	<app:search title="book_search" model="#{bookLazyDataModel}" searchForm="#{bookSearchForm}"
+		controller="#{bookController}" permission="#{bookPermission}" savedSearch="true">
+		<ui:define name="filters">
+			<app:multiAutoComplete id="accountSelector" value="#{bookSearchForm.accountSelector}" label="book_account" 
+				controller="#{accountController}" permission="#{accountPermission}"/>
+			<app:inputMultiAutoComplete id="title" value="#{bookSearchForm.titleSelector}" label="book_title" completeMethod="completeProperty" property="title" />
+			<app:rangeInt id="numberOfPages" value="#{bookSearchForm.numberOfPagesRange}" label="book_numberOfPages"/>
+		</ui:define>
+		<ui:define name="result">
+			<c:if test="#{not multiCheckboxSelection}">
+				<p:ajax event="rowSelect" listener="#{bookLazyDataModel.onRowSelect}" />
+			</c:if>
+			<p:column id="book_title" headerText="#{msg.book_title}" sortBy="#{item.title}" styleClass="title">
+				#{item.title}
+			</p:column>
+			<p:column id="book_numberOfPages" headerText="#{msg.book_numberOfPages}" sortBy="#{item.numberOfPages}" styleClass="numberOfPages numeric">
+				<app:outputInteger value="#{item.numberOfPages}" />
+			</p:column>
+			<p:column id="actions" headerText="#{msg.actions}" styleClass="actions-column" resizable="false">
+				<app:iconSelect item="#{item}" />
+				<app:iconEdit item="#{item}" />
+				<app:iconView item="#{item}" />
+				<app:iconDelete item="#{item}" />
+			</p:column>
+		</ui:define>
+	</app:search>
+</ui:composition>
\ No newline at end of file
diff --git a/src/main/webapp/domain/documentEdit.xhtml b/src/main/webapp/domain/documentEdit.xhtml
new file mode 100644
index 0000000..132ce5f
--- /dev/null
+++ b/src/main/webapp/domain/documentEdit.xhtml
@@ -0,0 +1,32 @@
+<!--
+ ! (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ ! Source code generated by Celerio, a Jaxio product
+ ! Want to purchase Celerio ? email us at info@jaxio.com
+ ! Follow us on twitter: @springfuse
+ ! Documentation: http://www.jaxio.com/documentation/celerio/
+ ! Template pack-jsf2-spring-conversation:src/main/webapp/domain/edit.e.vm.xhtml
+-->
+<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
+<ui:composition xmlns="http://www.w3.org/1999/xhtml"
+	xmlns:ui="http://java.sun.com/jsf/facelets"
+	xmlns:c="http://java.sun.com/jsp/jstl/core"
+	xmlns:f="http://java.sun.com/jsf/core"
+	xmlns:h="http://java.sun.com/jsf/html"
+	xmlns:p="http://primefaces.org/ui"
+	xmlns:app="http://springfuse.jaxio.com/app"
+	xmlns:appcc="http://java.sun.com/jsf/composite/components">
+<app:edit bean="#{documentEditForm}" title="#{documentEditForm.title}">
+	<ui:define name="form">
+		<app:autoComplete id="account" value="#{documentEditForm.account.selected}" label="document_account" title="document_account" required="true" 
+			model="#{documentEditForm.account}" controller="#{accountController}" permission="#{accountPermission}">
+			<app:iconSearch id="selectAccount" />
+			<app:iconAdd id="addAccount" />
+			<app:iconEdit item="#{documentEditForm.document.account}" />
+			<app:iconView item="#{documentEditForm.document.account}" />
+		</app:autoComplete>
+		<app:inputFile id="documentBinary" label="document_documentBinary" object="#{documentEditForm.document}"
+			fileupload="#{documentController.getDocumentFileUpload(documentEditForm.document)}" stream="#{documentFileDownload.getDocumentBinaryStream(documentEditForm.document)}" 
+			action="onDocumentBinaryFileUpload" filename="documentFileName" />
+	</ui:define>
+</app:edit>
+</ui:composition>
diff --git a/src/main/webapp/domain/documentSelect.xhtml b/src/main/webapp/domain/documentSelect.xhtml
new file mode 100644
index 0000000..62a4491
--- /dev/null
+++ b/src/main/webapp/domain/documentSelect.xhtml
@@ -0,0 +1,39 @@
+<!--
+ ! (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ ! Source code generated by Celerio, a Jaxio product
+ ! Want to purchase Celerio ? email us at info@jaxio.com
+ ! Follow us on twitter: @springfuse
+ ! Documentation: http://www.jaxio.com/documentation/celerio/
+ ! Template pack-jsf2-spring-conversation:src/main/webapp/domain/select.e.vm.xhtml
+-->
+<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
+<ui:composition xmlns="http://www.w3.org/1999/xhtml"
+	xmlns:ui="http://java.sun.com/jsf/facelets"
+	xmlns:c="http://java.sun.com/jsp/jstl/core"
+	xmlns:f="http://java.sun.com/jsf/core"
+	xmlns:h="http://java.sun.com/jsf/html"
+	xmlns:p="http://primefaces.org/ui"
+	xmlns:app="http://springfuse.jaxio.com/app"
+	xmlns:appcc="http://java.sun.com/jsf/composite/components">
+	<app:search title="document_search" model="#{documentLazyDataModel}" searchForm="#{documentSearchForm}"
+		controller="#{documentController}" permission="#{documentPermission}" savedSearch="true">
+		<ui:define name="filters">
+			<app:multiAutoComplete id="accountSelector" value="#{documentSearchForm.accountSelector}" label="document_account" 
+				controller="#{accountController}" permission="#{accountPermission}"/>
+		</ui:define>
+		<ui:define name="result">
+			<c:if test="#{not multiCheckboxSelection}">
+				<p:ajax event="rowSelect" listener="#{documentLazyDataModel.onRowSelect}" />
+			</c:if>
+			<p:column id="document_documentFileName" headerText="#{msg.document_documentFileName}" sortBy="#{item.documentFileName}" styleClass="documentFileName">
+				<app:outputFile filename="#{item.documentFileName}" stream="#{documentFileDownload.getDocumentBinaryStream(item)}"/>
+			</p:column>
+			<p:column id="actions" headerText="#{msg.actions}" styleClass="actions-column" resizable="false">
+				<app:iconSelect item="#{item}" />
+				<app:iconEdit item="#{item}" />
+				<app:iconView item="#{item}" />
+				<app:iconDelete item="#{item}" />
+			</p:column>
+		</ui:define>
+	</app:search>
+</ui:composition>
\ No newline at end of file
diff --git a/src/main/webapp/domain/legacyEdit.xhtml b/src/main/webapp/domain/legacyEdit.xhtml
new file mode 100644
index 0000000..01ea131
--- /dev/null
+++ b/src/main/webapp/domain/legacyEdit.xhtml
@@ -0,0 +1,26 @@
+<!--
+ ! (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ ! Source code generated by Celerio, a Jaxio product
+ ! Want to purchase Celerio ? email us at info@jaxio.com
+ ! Follow us on twitter: @springfuse
+ ! Documentation: http://www.jaxio.com/documentation/celerio/
+ ! Template pack-jsf2-spring-conversation:src/main/webapp/domain/edit.e.vm.xhtml
+-->
+<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
+<ui:composition xmlns="http://www.w3.org/1999/xhtml"
+	xmlns:ui="http://java.sun.com/jsf/facelets"
+	xmlns:c="http://java.sun.com/jsp/jstl/core"
+	xmlns:f="http://java.sun.com/jsf/core"
+	xmlns:h="http://java.sun.com/jsf/html"
+	xmlns:p="http://primefaces.org/ui"
+	xmlns:app="http://springfuse.jaxio.com/app"
+	xmlns:appcc="http://java.sun.com/jsf/composite/components">
+<app:edit bean="#{legacyEditForm}" title="#{legacyEditForm.title}">
+	<ui:define name="form">
+		<app:input id="name" value="#{legacyEditForm.legacy.id.name}" size="16" label="legacy_name" required="true" />
+		<app:input id="code" value="#{legacyEditForm.legacy.id.code}" size="8" label="legacy_code" required="true" />
+		<app:input id="dept" value="#{legacyEditForm.legacy.id.dept}" label="legacy_dept" size="10" required="true" />
+		<app:input id="extraInfo" value="#{legacyEditForm.legacy.extraInfo}" size="100" label="legacy_extraInfo" required="true" />
+	</ui:define>
+</app:edit>
+</ui:composition>
diff --git a/src/main/webapp/domain/legacySelect.xhtml b/src/main/webapp/domain/legacySelect.xhtml
new file mode 100644
index 0000000..25c70fa
--- /dev/null
+++ b/src/main/webapp/domain/legacySelect.xhtml
@@ -0,0 +1,50 @@
+<!--
+ ! (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ ! Source code generated by Celerio, a Jaxio product
+ ! Want to purchase Celerio ? email us at info@jaxio.com
+ ! Follow us on twitter: @springfuse
+ ! Documentation: http://www.jaxio.com/documentation/celerio/
+ ! Template pack-jsf2-spring-conversation:src/main/webapp/domain/select.e.vm.xhtml
+-->
+<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
+<ui:composition xmlns="http://www.w3.org/1999/xhtml"
+	xmlns:ui="http://java.sun.com/jsf/facelets"
+	xmlns:c="http://java.sun.com/jsp/jstl/core"
+	xmlns:f="http://java.sun.com/jsf/core"
+	xmlns:h="http://java.sun.com/jsf/html"
+	xmlns:p="http://primefaces.org/ui"
+	xmlns:app="http://springfuse.jaxio.com/app"
+	xmlns:appcc="http://java.sun.com/jsf/composite/components">
+	<app:search title="legacy_search" model="#{legacyLazyDataModel}" searchForm="#{legacySearchForm}"
+		controller="#{legacyController}" permission="#{legacyPermission}" savedSearch="true">
+		<ui:define name="filters">
+			<app:input id="name" value="#{legacySearchForm.legacy.id.name}" label="legacy_name"/>
+			<app:input id="code" value="#{legacySearchForm.legacy.id.code}" label="legacy_code"/>
+			<app:input id="dept" value="#{legacySearchForm.legacy.id.dept}" label="legacy_dept"/>
+			<app:inputMultiAutoComplete id="extraInfo" value="#{legacySearchForm.extraInfoSelector}" label="legacy_extraInfo" completeMethod="completeProperty" property="extraInfo" />
+		</ui:define>
+		<ui:define name="result">
+			<c:if test="#{not multiCheckboxSelection}">
+				<p:ajax event="rowSelect" listener="#{legacyLazyDataModel.onRowSelect}" />
+			</c:if>
+			<p:column id="legacy_name" headerText="#{msg.legacy_name}" sortBy="#{item.name}" styleClass="name">
+				#{item.id.name}
+			</p:column>
+			<p:column id="legacy_code" headerText="#{msg.legacy_code}" sortBy="#{item.code}" styleClass="code">
+				#{item.id.code}
+			</p:column>
+			<p:column id="legacy_dept" headerText="#{msg.legacy_dept}" sortBy="#{item.dept}" styleClass="dept numeric">
+				#{item.id.dept}
+			</p:column>
+			<p:column id="legacy_extraInfo" headerText="#{msg.legacy_extraInfo}" sortBy="#{item.extraInfo}" styleClass="extraInfo">
+				#{item.extraInfo}
+			</p:column>
+			<p:column id="actions" headerText="#{msg.actions}" styleClass="actions-column" resizable="false">
+				<app:iconSelect item="#{item}" />
+				<app:iconEdit item="#{item}" />
+				<app:iconView item="#{item}" />
+				<app:iconDelete item="#{item}" />
+			</p:column>
+		</ui:define>
+	</app:search>
+</ui:composition>
\ No newline at end of file
diff --git a/src/main/webapp/domain/moreTypesDemoEdit.xhtml b/src/main/webapp/domain/moreTypesDemoEdit.xhtml
new file mode 100644
index 0000000..4d02b44
--- /dev/null
+++ b/src/main/webapp/domain/moreTypesDemoEdit.xhtml
@@ -0,0 +1,32 @@
+<!--
+ ! (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ ! Source code generated by Celerio, a Jaxio product
+ ! Want to purchase Celerio ? email us at info@jaxio.com
+ ! Follow us on twitter: @springfuse
+ ! Documentation: http://www.jaxio.com/documentation/celerio/
+ ! Template pack-jsf2-spring-conversation:src/main/webapp/domain/edit.e.vm.xhtml
+-->
+<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
+<ui:composition xmlns="http://www.w3.org/1999/xhtml"
+	xmlns:ui="http://java.sun.com/jsf/facelets"
+	xmlns:c="http://java.sun.com/jsp/jstl/core"
+	xmlns:f="http://java.sun.com/jsf/core"
+	xmlns:h="http://java.sun.com/jsf/html"
+	xmlns:p="http://primefaces.org/ui"
+	xmlns:app="http://springfuse.jaxio.com/app"
+	xmlns:appcc="http://java.sun.com/jsf/composite/components">
+<app:edit bean="#{moreTypesDemoEditForm}" title="#{moreTypesDemoEditForm.title}">
+	<ui:define name="form">
+		<app:input id="numberInt" value="#{moreTypesDemoEditForm.moreTypesDemo.numberInt}" label="moreTypesDemo_numberInt" size="10" />
+		<app:input id="numberLong" value="#{moreTypesDemoEditForm.moreTypesDemo.numberLong}" label="moreTypesDemo_numberLong" size="19" />
+		<app:input id="numberDouble" value="#{moreTypesDemoEditForm.moreTypesDemo.numberDouble}" label="moreTypesDemo_numberDouble" size="17" />
+		<app:input id="numberFloat" value="#{moreTypesDemoEditForm.moreTypesDemo.numberFloat}" label="moreTypesDemo_numberFloat" size="7" />
+		<app:input id="numberBigInteger" value="#{moreTypesDemoEditForm.moreTypesDemo.numberBigInteger}" label="moreTypesDemo_numberBigInteger" size="20" />
+		<app:input id="numberBigDecimal" value="#{moreTypesDemoEditForm.moreTypesDemo.numberBigDecimal}" label="moreTypesDemo_numberBigDecimal" size="20" />
+		<app:inputDate id="dateJavaTemporalDate" value="#{moreTypesDemoEditForm.moreTypesDemo.dateJavaTemporalDate}" label="moreTypesDemo_dateJavaTemporalDate" />
+		<app:inputDateTime id="dateJavaTemporalTimestamp" value="#{moreTypesDemoEditForm.moreTypesDemo.dateJavaTemporalTimestamp}" label="moreTypesDemo_dateJavaTemporalTimestamp" />
+		<app:inputDate id="dateJoda" value="#{moreTypesDemoEditForm.moreTypesDemo.dateJoda}" label="moreTypesDemo_dateJoda" />
+		<app:inputDateTime id="dateTimeJoda" value="#{moreTypesDemoEditForm.moreTypesDemo.dateTimeJoda}" label="moreTypesDemo_dateTimeJoda" />
+	</ui:define>
+</app:edit>
+</ui:composition>
diff --git a/src/main/webapp/domain/moreTypesDemoSelect.xhtml b/src/main/webapp/domain/moreTypesDemoSelect.xhtml
new file mode 100644
index 0000000..fd90434
--- /dev/null
+++ b/src/main/webapp/domain/moreTypesDemoSelect.xhtml
@@ -0,0 +1,62 @@
+<!--
+ ! (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ ! Source code generated by Celerio, a Jaxio product
+ ! Want to purchase Celerio ? email us at info@jaxio.com
+ ! Follow us on twitter: @springfuse
+ ! Documentation: http://www.jaxio.com/documentation/celerio/
+ ! Template pack-jsf2-spring-conversation:src/main/webapp/domain/select.e.vm.xhtml
+-->
+<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
+<ui:composition xmlns="http://www.w3.org/1999/xhtml"
+	xmlns:ui="http://java.sun.com/jsf/facelets"
+	xmlns:c="http://java.sun.com/jsp/jstl/core"
+	xmlns:f="http://java.sun.com/jsf/core"
+	xmlns:h="http://java.sun.com/jsf/html"
+	xmlns:p="http://primefaces.org/ui"
+	xmlns:app="http://springfuse.jaxio.com/app"
+	xmlns:appcc="http://java.sun.com/jsf/composite/components">
+	<app:search title="moreTypesDemo_search" model="#{moreTypesDemoLazyDataModel}" searchForm="#{moreTypesDemoSearchForm}"
+		controller="#{moreTypesDemoController}" permission="#{moreTypesDemoPermission}" savedSearch="true">
+		<ui:define name="filters">
+			<app:rangeInt id="numberInt" value="#{moreTypesDemoSearchForm.numberIntRange}" label="moreTypesDemo_numberInt"/>
+			<app:rangeLong id="numberLong" value="#{moreTypesDemoSearchForm.numberLongRange}" label="moreTypesDemo_numberLong"/>
+			<app:rangeDouble id="numberDouble" value="#{moreTypesDemoSearchForm.numberDoubleRange}" label="moreTypesDemo_numberDouble" />
+			<app:rangeFloat id="numberFloat" value="#{moreTypesDemoSearchForm.numberFloatRange}" label="moreTypesDemo_numberFloat" />
+			<app:rangeBigInt id="numberBigInteger" value="#{moreTypesDemoSearchForm.numberBigIntegerRange}" label="moreTypesDemo_numberBigInteger" />
+			<app:rangeBigDec id="numberBigDecimal" value="#{moreTypesDemoSearchForm.numberBigDecimalRange}" label="moreTypesDemo_numberBigDecimal" />
+			<app:rangeDate id="dateJavaTemporalDate" value="#{moreTypesDemoSearchForm.dateJavaTemporalDateRange}" label="moreTypesDemo_dateJavaTemporalDate" />
+			<app:rangeDateTime id="dateJavaTemporalTimestamp" value="#{moreTypesDemoSearchForm.dateJavaTemporalTimestampRange}" label="moreTypesDemo_dateJavaTemporalTimestamp" />
+			<app:rangeDate id="dateJoda" value="#{moreTypesDemoSearchForm.dateJodaRange}" label="moreTypesDemo_dateJoda" />
+			<app:rangeDateTime id="dateTimeJoda" value="#{moreTypesDemoSearchForm.dateTimeJodaRange}" label="moreTypesDemo_dateTimeJoda" />
+		</ui:define>
+		<ui:define name="result">
+			<c:if test="#{not multiCheckboxSelection}">
+				<p:ajax event="rowSelect" listener="#{moreTypesDemoLazyDataModel.onRowSelect}" />
+			</c:if>
+			<p:column id="moreTypesDemo_numberInt" headerText="#{msg.moreTypesDemo_numberInt}" sortBy="#{item.numberInt}" styleClass="numberInt numeric">
+				<app:outputInteger value="#{item.numberInt}" />
+			</p:column>
+			<p:column id="moreTypesDemo_numberLong" headerText="#{msg.moreTypesDemo_numberLong}" sortBy="#{item.numberLong}" styleClass="numberLong numeric">
+				<app:outputInteger value="#{item.numberLong}" />
+			</p:column>
+			<p:column id="moreTypesDemo_numberDouble" headerText="#{msg.moreTypesDemo_numberDouble}" sortBy="#{item.numberDouble}" styleClass="numberDouble numeric">
+				<app:outputDecimal value="#{item.numberDouble}" />
+			</p:column>
+			<p:column id="moreTypesDemo_numberFloat" headerText="#{msg.moreTypesDemo_numberFloat}" sortBy="#{item.numberFloat}" styleClass="numberFloat numeric">
+				<app:outputDecimal value="#{item.numberFloat}" />
+			</p:column>
+			<p:column id="moreTypesDemo_numberBigInteger" headerText="#{msg.moreTypesDemo_numberBigInteger}" sortBy="#{item.numberBigInteger}" styleClass="numberBigInteger numeric">
+				<app:outputInteger value="#{item.numberBigInteger}" />
+			</p:column>
+			<p:column id="moreTypesDemo_numberBigDecimal" headerText="#{msg.moreTypesDemo_numberBigDecimal}" sortBy="#{item.numberBigDecimal}" styleClass="numberBigDecimal numeric">
+				<app:outputDecimal value="#{item.numberBigDecimal}" />
+			</p:column>
+			<p:column id="actions" headerText="#{msg.actions}" styleClass="actions-column" resizable="false">
+				<app:iconSelect item="#{item}" />
+				<app:iconEdit item="#{item}" />
+				<app:iconView item="#{item}" />
+				<app:iconDelete item="#{item}" />
+			</p:column>
+		</ui:define>
+	</app:search>
+</ui:composition>
\ No newline at end of file
diff --git a/src/main/webapp/domain/roleEdit.xhtml b/src/main/webapp/domain/roleEdit.xhtml
new file mode 100644
index 0000000..1162c1f
--- /dev/null
+++ b/src/main/webapp/domain/roleEdit.xhtml
@@ -0,0 +1,25 @@
+<!--
+ ! (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ ! Source code generated by Celerio, a Jaxio product
+ ! Want to purchase Celerio ? email us at info@jaxio.com
+ ! Follow us on twitter: @springfuse
+ ! Documentation: http://www.jaxio.com/documentation/celerio/
+ ! Template pack-jsf2-spring-conversation:src/main/webapp/domain/edit.e.vm.xhtml
+-->
+<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
+<ui:composition xmlns="http://www.w3.org/1999/xhtml"
+	xmlns:ui="http://java.sun.com/jsf/facelets"
+	xmlns:c="http://java.sun.com/jsp/jstl/core"
+	xmlns:f="http://java.sun.com/jsf/core"
+	xmlns:h="http://java.sun.com/jsf/html"
+	xmlns:p="http://primefaces.org/ui"
+	xmlns:app="http://springfuse.jaxio.com/app"
+	xmlns:appcc="http://java.sun.com/jsf/composite/components">
+<app:edit bean="#{roleEditForm}" title="#{roleEditForm.title}">
+	<ui:define name="form">
+		<app:input id="roleName" value="#{roleEditForm.role.roleName}" size="100" label="role_roleName" required="true">
+			<f:validateBean binding="#{jpaUniqueValidator}" entity="#{roleEditForm.role}" property="roleName" />
+		</app:input>
+	</ui:define>
+</app:edit>
+</ui:composition>
diff --git a/src/main/webapp/domain/roleSelect.xhtml b/src/main/webapp/domain/roleSelect.xhtml
new file mode 100644
index 0000000..efaf682
--- /dev/null
+++ b/src/main/webapp/domain/roleSelect.xhtml
@@ -0,0 +1,38 @@
+<!--
+ ! (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ ! Source code generated by Celerio, a Jaxio product
+ ! Want to purchase Celerio ? email us at info@jaxio.com
+ ! Follow us on twitter: @springfuse
+ ! Documentation: http://www.jaxio.com/documentation/celerio/
+ ! Template pack-jsf2-spring-conversation:src/main/webapp/domain/select.e.vm.xhtml
+-->
+<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
+<ui:composition xmlns="http://www.w3.org/1999/xhtml"
+	xmlns:ui="http://java.sun.com/jsf/facelets"
+	xmlns:c="http://java.sun.com/jsp/jstl/core"
+	xmlns:f="http://java.sun.com/jsf/core"
+	xmlns:h="http://java.sun.com/jsf/html"
+	xmlns:p="http://primefaces.org/ui"
+	xmlns:app="http://springfuse.jaxio.com/app"
+	xmlns:appcc="http://java.sun.com/jsf/composite/components">
+	<app:search title="role_search" model="#{roleLazyDataModel}" searchForm="#{roleSearchForm}"
+		controller="#{roleController}" permission="#{rolePermission}" savedSearch="true">
+		<ui:define name="filters">
+			<app:inputMultiAutoComplete id="roleName" value="#{roleSearchForm.roleNameSelector}" label="role_roleName" completeMethod="completeProperty" property="roleName" />
+		</ui:define>
+		<ui:define name="result">
+			<c:if test="#{not multiCheckboxSelection}">
+				<p:ajax event="rowSelect" listener="#{roleLazyDataModel.onRowSelect}" />
+			</c:if>
+			<p:column id="role_roleName" headerText="#{msg.role_roleName}" sortBy="#{item.roleName}" styleClass="roleName">
+				#{item.roleName}
+			</p:column>
+			<p:column id="actions" headerText="#{msg.actions}" styleClass="actions-column" resizable="false">
+				<app:iconSelect item="#{item}" />
+				<app:iconEdit item="#{item}" />
+				<app:iconView item="#{item}" />
+				<app:iconDelete item="#{item}" />
+			</p:column>
+		</ui:define>
+	</app:search>
+</ui:composition>
\ No newline at end of file
diff --git a/src/main/webapp/domain/savedSearchEdit.xhtml b/src/main/webapp/domain/savedSearchEdit.xhtml
new file mode 100644
index 0000000..0761b91
--- /dev/null
+++ b/src/main/webapp/domain/savedSearchEdit.xhtml
@@ -0,0 +1,34 @@
+<!--
+ ! (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ ! Source code generated by Celerio, a Jaxio product
+ ! Want to purchase Celerio ? email us at info@jaxio.com
+ ! Follow us on twitter: @springfuse
+ ! Documentation: http://www.jaxio.com/documentation/celerio/
+ ! Template pack-jsf2-spring-conversation:src/main/webapp/domain/edit.e.vm.xhtml
+-->
+<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
+<ui:composition xmlns="http://www.w3.org/1999/xhtml"
+	xmlns:ui="http://java.sun.com/jsf/facelets"
+	xmlns:c="http://java.sun.com/jsp/jstl/core"
+	xmlns:f="http://java.sun.com/jsf/core"
+	xmlns:h="http://java.sun.com/jsf/html"
+	xmlns:p="http://primefaces.org/ui"
+	xmlns:app="http://springfuse.jaxio.com/app"
+	xmlns:appcc="http://java.sun.com/jsf/composite/components">
+<app:edit bean="#{savedSearchEditForm}" title="#{savedSearchEditForm.title}">
+	<ui:define name="form">
+		<app:input id="name" value="#{savedSearchEditForm.savedSearch.name}" size="128" label="savedSearch_name" required="true" />
+		<app:inputTextArea id="formClassname" value="#{savedSearchEditForm.savedSearch.formClassname}" label="savedSearch_formClassname" required="true" />
+		<app:inputFile id="formContent" label="savedSearch_formContent" object="#{savedSearchEditForm.savedSearch}"
+			fileupload="#{savedSearchController.getSavedSearchFileUpload(savedSearchEditForm.savedSearch)}" stream="#{savedSearchFileDownload.getFormContentStream(savedSearchEditForm.savedSearch)}" 
+			action="onFormContentFileUpload" />
+		<app:autoComplete id="account" value="#{savedSearchEditForm.account.selected}" label="savedSearch_account" title="savedSearch_account" required="false" 
+			model="#{savedSearchEditForm.account}" controller="#{accountController}" permission="#{accountPermission}">
+			<app:iconSearch id="selectAccount" />
+			<app:iconAdd id="addAccount" />
+			<app:iconEdit item="#{savedSearchEditForm.savedSearch.account}" />
+			<app:iconView item="#{savedSearchEditForm.savedSearch.account}" />
+		</app:autoComplete>
+	</ui:define>
+</app:edit>
+</ui:composition>
diff --git a/src/main/webapp/domain/savedSearchSelect.xhtml b/src/main/webapp/domain/savedSearchSelect.xhtml
new file mode 100644
index 0000000..c9b6b2e
--- /dev/null
+++ b/src/main/webapp/domain/savedSearchSelect.xhtml
@@ -0,0 +1,44 @@
+<!--
+ ! (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ ! Source code generated by Celerio, a Jaxio product
+ ! Want to purchase Celerio ? email us at info@jaxio.com
+ ! Follow us on twitter: @springfuse
+ ! Documentation: http://www.jaxio.com/documentation/celerio/
+ ! Template pack-jsf2-spring-conversation:src/main/webapp/domain/select.e.vm.xhtml
+-->
+<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
+<ui:composition xmlns="http://www.w3.org/1999/xhtml"
+	xmlns:ui="http://java.sun.com/jsf/facelets"
+	xmlns:c="http://java.sun.com/jsp/jstl/core"
+	xmlns:f="http://java.sun.com/jsf/core"
+	xmlns:h="http://java.sun.com/jsf/html"
+	xmlns:p="http://primefaces.org/ui"
+	xmlns:app="http://springfuse.jaxio.com/app"
+	xmlns:appcc="http://java.sun.com/jsf/composite/components">
+	<app:search title="savedSearch_search" model="#{savedSearchLazyDataModel}" searchForm="#{savedSearchSearchForm}"
+		controller="#{savedSearchController}" permission="#{savedSearchPermission}" savedSearch="true">
+		<ui:define name="filters">
+			<app:inputMultiAutoComplete id="name" value="#{savedSearchSearchForm.nameSelector}" label="savedSearch_name" completeMethod="completeProperty" property="name" />
+			<app:inputMultiAutoComplete id="formClassname" value="#{savedSearchSearchForm.formClassnameSelector}" label="savedSearch_formClassname" completeMethod="completeProperty" property="formClassname" />
+			<app:multiAutoComplete id="accountSelector" value="#{savedSearchSearchForm.accountSelector}" label="savedSearch_account" 
+				controller="#{accountController}" permission="#{accountPermission}"/>
+		</ui:define>
+		<ui:define name="result">
+			<c:if test="#{not multiCheckboxSelection}">
+				<p:ajax event="rowSelect" listener="#{savedSearchLazyDataModel.onRowSelect}" />
+			</c:if>
+			<p:column id="savedSearch_name" headerText="#{msg.savedSearch_name}" sortBy="#{item.name}" styleClass="name">
+				#{item.name}
+			</p:column>
+			<p:column id="savedSearch_formClassname" headerText="#{msg.savedSearch_formClassname}" sortBy="#{item.formClassname}" styleClass="formClassname">
+				#{item.formClassname}
+			</p:column>
+			<p:column id="actions" headerText="#{msg.actions}" styleClass="actions-column" resizable="false">
+				<app:iconSelect item="#{item}" />
+				<app:iconEdit item="#{item}" />
+				<app:iconView item="#{item}" />
+				<app:iconDelete item="#{item}" />
+			</p:column>
+		</ui:define>
+	</app:search>
+</ui:composition>
\ No newline at end of file
diff --git a/src/main/webapp/error/accessdenied.xhtml b/src/main/webapp/error/accessdenied.xhtml
new file mode 100644
index 0000000..e648da3
--- /dev/null
+++ b/src/main/webapp/error/accessdenied.xhtml
@@ -0,0 +1,14 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
+<ui:composition xmlns="http://www.w3.org/1999/xhtml"
+	xmlns:app="http://springfuse.jaxio.com/app"
+	xmlns:f="http://java.sun.com/jsf/core"
+	xmlns:h="http://java.sun.com/jsf/html"
+	xmlns:p="http://primefaces.org/ui" 
+	xmlns:ui="http://java.sun.com/jsf/facelets"
+	template="/WEB-INF/layouts/main.xhtml">
+	<ui:param name="title" value="error_access_denied_title" />
+	<ui:define name="content">
+		<h2>${msg.error_access_denied}</h2>
+	</ui:define>
+</ui:composition>
\ No newline at end of file
diff --git a/src/main/webapp/error/data-error.xhtml b/src/main/webapp/error/data-error.xhtml
new file mode 100644
index 0000000..d234c21
--- /dev/null
+++ b/src/main/webapp/error/data-error.xhtml
@@ -0,0 +1,21 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
+<ui:composition xmlns="http://www.w3.org/1999/xhtml"
+	xmlns:app="http://springfuse.jaxio.com/app"
+	xmlns:f="http://java.sun.com/jsf/core"
+	xmlns:h="http://java.sun.com/jsf/html"
+	xmlns:p="http://primefaces.org/ui" 
+	xmlns:ui="http://java.sun.com/jsf/facelets"
+	xmlns:fn="http://java.sun.com/jsp/jstl/functions"
+	xmlns:of="http://omnifaces.org/functions"	
+	template="/WEB-INF/layouts/main.xhtml">
+	<ui:param name="title" value="error_database_title" />
+	<ui:define name="content">
+		<h2>${msg.error_database}</h2>
+		<h:panelGrid columns="2">
+			<h:outputText value="Date/time" /> <h:outputText value="#{of:formatDate(now, 'yyyy-MM-dd HH:mm:ss')}" />
+			<h:outputText value="Exception type" /> <h:outputText value="#{requestScope['javax.servlet.error.exception_type']}" />
+			<h:outputText value="Exception message" /> <h:outputText value="#{requestScope['javax.servlet.error.message']}" />
+		</h:panelGrid>
+	</ui:define>
+</ui:composition>
\ No newline at end of file
diff --git a/src/main/webapp/error/error.xhtml b/src/main/webapp/error/error.xhtml
new file mode 100644
index 0000000..3ee9799
--- /dev/null
+++ b/src/main/webapp/error/error.xhtml
@@ -0,0 +1,28 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
+<ui:composition xmlns="http://www.w3.org/1999/xhtml"
+	xmlns:app="http://springfuse.jaxio.com/app"
+	xmlns:f="http://java.sun.com/jsf/core"
+	xmlns:h="http://java.sun.com/jsf/html"
+	xmlns:p="http://primefaces.org/ui" 
+	xmlns:ui="http://java.sun.com/jsf/facelets"
+	xmlns:fn="http://java.sun.com/jsp/jstl/functions"
+	xmlns:of="http://omnifaces.org/functions"	
+	template="/WEB-INF/layouts/main.xhtml">
+	<ui:param name="title" value="error_unknown_title" />
+	<ui:define name="content">
+		<p:panel header="${msg.error_unknown}">
+		<h:panelGrid columns="2">
+			<h:outputText value="Date/time:" /> <h:outputText value="#{of:formatDate(now, 'yyyy-MM-dd HH:mm:ss')}" />
+			<h:outputText value="User agent" /> <h:outputText value="#{header['user-agent']}" />
+			<h:outputText value="User IP" /> <h:outputText value="#{empty header['x-forwarded-for'] ? request.remoteAddr : fn:split(header['x-forwarded-for'], ',')[0]}" />
+			<h:outputText value="Request URI:" /> <a href="#{requestScope['javax.servlet.error.request_uri']}">#{requestScope['javax.servlet.error.request_uri']}</a>
+			<h:outputText value="Ajax request" /> <h:outputText value="#{facesContext.partialViewContext.ajaxRequest ? 'Yes' : 'No'}" />
+			<h:outputText value="Status code" /> <h:outputText value="#{requestScope['javax.servlet.error.status_code']}" />
+			<h:outputText value="Exception type" /> <h:outputText value="#{requestScope['javax.servlet.error.exception_type']}" />
+			<h:outputText value="Exception message" /> <h:outputText value="#{requestScope['javax.servlet.error.message']}" />
+			<h:outputText value="Stack trace" /> <pre><code>#{of:printStackTrace(requestScope['javax.servlet.error.exception'])}</code></pre>
+		</h:panelGrid>
+		</p:panel>
+	</ui:define>
+</ui:composition>
diff --git a/src/main/webapp/error/not-found.xhtml b/src/main/webapp/error/not-found.xhtml
new file mode 100644
index 0000000..08d200a
--- /dev/null
+++ b/src/main/webapp/error/not-found.xhtml
@@ -0,0 +1,16 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
+<ui:composition xmlns="http://www.w3.org/1999/xhtml"
+	xmlns:app="http://springfuse.jaxio.com/app"
+	xmlns:f="http://java.sun.com/jsf/core"
+	xmlns:h="http://java.sun.com/jsf/html"
+	xmlns:p="http://primefaces.org/ui" 
+	xmlns:ui="http://java.sun.com/jsf/facelets"
+	xmlns:fn="http://java.sun.com/jsp/jstl/functions"
+	xmlns:of="http://omnifaces.org/functions"	
+	template="/WEB-INF/layouts/main.xhtml">
+	<ui:param name="title" value="error_not_found_title" />
+	<ui:define name="content">
+		<h2>${msg.error_not_found}</h2>
+	</ui:define>
+</ui:composition>
diff --git a/src/main/webapp/home.xhtml b/src/main/webapp/home.xhtml
new file mode 100644
index 0000000..309c7b9
--- /dev/null
+++ b/src/main/webapp/home.xhtml
@@ -0,0 +1,141 @@
+<!--
+ ! (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ ! Source code generated by Celerio, a Jaxio product
+ ! Want to purchase Celerio ? email us at info@jaxio.com
+ ! Follow us on twitter: @springfuse
+ ! Documentation: http://www.jaxio.com/documentation/celerio/
+ ! Template pack-jsf2-spring-conversation:src/main/webapp/home.p.vm.xhtml
+-->
+<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
+<ui:composition xmlns="http://www.w3.org/1999/xhtml"
+	xmlns:ui="http://java.sun.com/jsf/facelets"
+	xmlns:h="http://java.sun.com/jsf/html"
+	xmlns:f="http://java.sun.com/jsf/core"
+	xmlns:p="http://primefaces.org/ui"
+	xmlns:app="http://springfuse.jaxio.com/app"
+	xmlns:appcc="http://java.sun.com/jsf/composite/components"
+	template="/WEB-INF/layouts/main.xhtml">
+	<ui:define name="content">
+		<p:panel header="#{msg.home_about}">
+			<h:outputText value="#{msg.home_generated_by}" escape="false"/>
+		</p:panel>
+		<p:panel header="#{msg.welcome}">
+			<p>
+				<h:outputFormat value="#{msg.you_are_connected_to}" rendered="#{userContextService.isLoggedIn()}">
+					<f:param value="#{userContextService.username}"/>
+					<f:param value="#{msg.application_name}"/>
+				</h:outputFormat>
+				<p:outputPanel rendered="#{userContextService.isAnonymousUser()}">
+					<h:outputLink value="login.faces">#{msg.home_please_connect_first}</h:outputLink>
+				</p:outputPanel>
+			</p>
+			<!-- give focus to first link to ease keyboard navigation -->
+			<script type="text/javascript">
+				$(function() {
+					setTimeout(function() {
+						APP.focusTo('form:logo_link');
+					}, 200);
+				});
+			</script>
+		</p:panel>
+
+		<p:panel header="#{msg.home_start_conversation}">
+			<p>#{msg.home_conversation}</p>
+			<ul>
+				<li>
+					<h:outputText value="#{msg.account} " />
+					<h:commandLink id="selectAccounts" action="#{accountController.beginSearch()}" rendered="#{accountPermission.canSearch()}" ajax="false" immediate="true">
+						<h:outputText value="#{msg.home_conversation_search}"/>
+					</h:commandLink>
+					<h:outputText value=" " />
+					<h:commandLink id="newAccounts" action="#{accountController.beginCreate()}" rendered="#{accountPermission.canCreate()}" ajax="false" immediate="true">
+						<h:outputText value="#{msg.home_conversation_create}"/>
+					</h:commandLink>
+				</li>
+				<li>
+					<h:outputText value="#{msg.address} " />
+					<h:commandLink id="selectAddresses" action="#{addressController.beginSearch()}" rendered="#{addressPermission.canSearch()}" ajax="false" immediate="true">
+						<h:outputText value="#{msg.home_conversation_search}"/>
+					</h:commandLink>
+					<h:outputText value=" " />
+					<h:commandLink id="newAddresses" action="#{addressController.beginCreate()}" rendered="#{addressPermission.canCreate()}" ajax="false" immediate="true">
+						<h:outputText value="#{msg.home_conversation_create}"/>
+					</h:commandLink>
+				</li>
+				<li>
+					<h:outputText value="#{msg.auditLog} " />
+					<h:commandLink id="selectAuditLogs" action="#{auditLogController.beginSearch()}" rendered="#{auditLogPermission.canSearch()}" ajax="false" immediate="true">
+						<h:outputText value="#{msg.home_conversation_search}"/>
+					</h:commandLink>
+					<h:outputText value=" " />
+					<h:commandLink id="newAuditLogs" action="#{auditLogController.beginCreate()}" rendered="#{auditLogPermission.canCreate()}" ajax="false" immediate="true">
+						<h:outputText value="#{msg.home_conversation_create}"/>
+					</h:commandLink>
+				</li>
+				<li>
+					<h:outputText value="#{msg.book} " />
+					<h:commandLink id="selectBooks" action="#{bookController.beginSearch()}" rendered="#{bookPermission.canSearch()}" ajax="false" immediate="true">
+						<h:outputText value="#{msg.home_conversation_search}"/>
+					</h:commandLink>
+					<h:outputText value=" " />
+					<h:commandLink id="newBooks" action="#{bookController.beginCreate()}" rendered="#{bookPermission.canCreate()}" ajax="false" immediate="true">
+						<h:outputText value="#{msg.home_conversation_create}"/>
+					</h:commandLink>
+				</li>
+				<li>
+					<h:outputText value="#{msg.document} " />
+					<h:commandLink id="selectDocuments" action="#{documentController.beginSearch()}" rendered="#{documentPermission.canSearch()}" ajax="false" immediate="true">
+						<h:outputText value="#{msg.home_conversation_search}"/>
+					</h:commandLink>
+					<h:outputText value=" " />
+					<h:commandLink id="newDocuments" action="#{documentController.beginCreate()}" rendered="#{documentPermission.canCreate()}" ajax="false" immediate="true">
+						<h:outputText value="#{msg.home_conversation_create}"/>
+					</h:commandLink>
+				</li>
+				<li>
+					<h:outputText value="#{msg.legacy} " />
+					<h:commandLink id="selectLegacies" action="#{legacyController.beginSearch()}" rendered="#{legacyPermission.canSearch()}" ajax="false" immediate="true">
+						<h:outputText value="#{msg.home_conversation_search}"/>
+					</h:commandLink>
+					<h:outputText value=" " />
+					<h:commandLink id="newLegacies" action="#{legacyController.beginCreate()}" rendered="#{legacyPermission.canCreate()}" ajax="false" immediate="true">
+						<h:outputText value="#{msg.home_conversation_create}"/>
+					</h:commandLink>
+				</li>
+				<li>
+					<h:outputText value="#{msg.moreTypesDemo} " />
+					<h:commandLink id="selectMoreTypesDemos" action="#{moreTypesDemoController.beginSearch()}" rendered="#{moreTypesDemoPermission.canSearch()}" ajax="false" immediate="true">
+						<h:outputText value="#{msg.home_conversation_search}"/>
+					</h:commandLink>
+					<h:outputText value=" " />
+					<h:commandLink id="newMoreTypesDemos" action="#{moreTypesDemoController.beginCreate()}" rendered="#{moreTypesDemoPermission.canCreate()}" ajax="false" immediate="true">
+						<h:outputText value="#{msg.home_conversation_create}"/>
+					</h:commandLink>
+				</li>
+				<li>
+					<h:outputText value="#{msg.role} " />
+					<h:commandLink id="selectRoles" action="#{roleController.beginSearch()}" rendered="#{rolePermission.canSearch()}" ajax="false" immediate="true">
+						<h:outputText value="#{msg.home_conversation_search}"/>
+					</h:commandLink>
+					<h:outputText value=" " />
+					<h:commandLink id="newRoles" action="#{roleController.beginCreate()}" rendered="#{rolePermission.canCreate()}" ajax="false" immediate="true">
+						<h:outputText value="#{msg.home_conversation_create}"/>
+					</h:commandLink>
+				</li>
+				<li>
+					<h:outputText value="#{msg.savedSearch} " />
+					<h:commandLink id="selectSavedSearchs" action="#{savedSearchController.beginSearch()}" rendered="#{savedSearchPermission.canSearch()}" ajax="false" immediate="true">
+						<h:outputText value="#{msg.home_conversation_search}"/>
+					</h:commandLink>
+					<h:outputText value=" " />
+					<h:commandLink id="newSavedSearchs" action="#{savedSearchController.beginCreate()}" rendered="#{savedSearchPermission.canCreate()}" ajax="false" immediate="true">
+						<h:outputText value="#{msg.home_conversation_create}"/>
+					</h:commandLink>
+				</li>
+			</ul>
+		</p:panel>
+		<p:panel header="#{msg.home_configuration}">
+			<h:outputText value="#{msg.home_configuration_howto}" escape="false" />
+		</p:panel>
+	</ui:define>
+</ui:composition>
\ No newline at end of file
diff --git a/src/main/webapp/index.html b/src/main/webapp/index.html
new file mode 100644
index 0000000..434af11
--- /dev/null
+++ b/src/main/webapp/index.html
@@ -0,0 +1,5 @@
+<html>
+	<head>
+		<meta http-equiv="Refresh" content="0; URL=home.faces">
+	</head>
+</html>
diff --git a/src/main/webapp/login.xhtml b/src/main/webapp/login.xhtml
new file mode 100644
index 0000000..ccabbcd
--- /dev/null
+++ b/src/main/webapp/login.xhtml
@@ -0,0 +1,34 @@
+<?xml version="1.0" encoding="UTF-8" ?>
+<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
+<ui:composition xmlns="http://www.w3.org/1999/xhtml"
+	xmlns:ui="http://java.sun.com/jsf/facelets"
+	xmlns:c="http://java.sun.com/jsp/jstl/core"	
+	xmlns:f="http://java.sun.com/jsf/core"
+	xmlns:h="http://java.sun.com/jsf/html"
+	xmlns:p="http://primefaces.org/ui"
+	xmlns:appcc="http://java.sun.com/jsf/composite/components"	
+	template="/WEB-INF/layouts/main.xhtml">
+	<ui:param name="title" value="login_title" />
+	<ui:param name="prependId" value="false" />
+	<ui:param name="disableMessages" value="true" />
+	<f:metadata>
+		<f:viewParam name="session_expired" value="#{loginPageManager.sessionExpired}" />
+	</f:metadata>
+	<ui:define name="content">
+		<p:panel id="loginPanel" header="#{msg.login_header}" styleClass="loginBox">
+			<p:focus context="loginPanel"/>
+			<h:outputText value="#{msg.login_description}" />
+			<h:panelGrid columns="1">
+				<appcc:messages id="loginMessages" />
+			</h:panelGrid>
+			<h:panelGrid columns="2">
+				<h:outputLabel for="j_username" value="#{msg.login_login}" styleClass="required" />
+				<h:inputText id="j_username" label="#{msg.login_login}" required="true" />
+				<h:outputLabel for="j_password" value="#{msg.login_password}" styleClass="required" />
+				<h:inputSecret id="j_password" label="#{msg.login_password}" required="true" />
+				<p:spacer/>
+				<p:commandButton id="login" value="#{msg.login_submit}" action="#{loginPageManager.doLogin()}" icon="ui-icon-circle-check" update="loginMessages" />
+			</h:panelGrid>
+		</p:panel>
+	</ui:define>
+</ui:composition>
diff --git a/src/main/webapp/resources/components/datePicker.xhtml b/src/main/webapp/resources/components/datePicker.xhtml
new file mode 100644
index 0000000..c7f1ce7
--- /dev/null
+++ b/src/main/webapp/resources/components/datePicker.xhtml
@@ -0,0 +1,68 @@
+<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
+<html xmlns="http://www.w3.org/1999/xhtml"
+	xmlns:f="http://java.sun.com/jsf/core"
+	xmlns:h="http://java.sun.com/jsf/html"
+	xmlns:p="http://primefaces.org/ui"
+	xmlns:c="http://java.sun.com/jsp/jstl/core"
+	xmlns:composite="http://java.sun.com/jsf/composite">
+<!-- 
+	To learn more about JSF Composite Component, please read
+	http://stackoverflow.com/questions/6822000/when-to-use-uiinclude-tag-files-composite-components-and-or-custom-componen
+	http://balusc.blogspot.de/2013/01/composite-component-with-multiple-input.html
+ -->
+<head>
+	<title>
+		Accessible date picker.
+		Edit date as 3 separated fields or more if time is used. See also ...web.component.DatePicker java class.
+		Note that bean validation works!
+		It was inspired from http://weblogs.java.net/blog/cayhorstmann/archive/2010/01/30/composite-input-components-jsf
+	</title>
+</head>
+<body>
+	<composite:interface componentType="components.DatePicker">
+		<composite:attribute name="value" required="true" />
+		<composite:attribute name="label" required="true" />
+		<composite:attribute name="yearMin" required="false" default="1999" type="int" />
+		<composite:attribute name="yearMax" required="false" default="2015" type="int" />
+		<composite:attribute name="showDayOfWeek" required="false" default="false" type="boolean" />
+		<composite:attribute name="timeRendered" required="false" default="false" type="boolean" />
+		<composite:attribute name="disabled" required="false" default="false" type="boolean" />
+	</composite:interface>
+
+	<composite:implementation>
+		<div id="#{cc.clientId}:div">
+			<a id="#{cc.clientId}"  onfocus="APP.focusTo('#{cc.clientId}:day')" style="display: none"/>
+			<h:selectOneMenu id="day" title="${msg.day} ${resourcesUtil.getProperty(cc.attrs.label)}" disabled="#{cc.attrs.disabled}">
+				<f:selectItem itemLabel="${msg.day}" noSelectionOption="true" />
+				<f:selectItems value="#{datePickerHelper.getDays(cc.clientId, cc.attrs.showDayOfWeek)}" />
+				<f:ajax event="change" />
+			</h:selectOneMenu>
+
+			<h:selectOneMenu id="month" title="${msg.month} ${resourcesUtil.getProperty(cc.attrs.label)}" disabled="#{cc.attrs.disabled}">
+				<f:selectItem itemLabel="${msg.month}" noSelectionOption="true" />
+				<f:selectItems value="#{datePickerHelper.getMonths()}" />
+				<f:ajax event="change" render="day" />
+			</h:selectOneMenu>
+
+			<h:selectOneMenu id="year" title="${msg.year} ${resourcesUtil.getProperty(cc.attrs.label)}" disabled="#{cc.attrs.disabled}">
+				<f:selectItem itemLabel="${msg.year}" noSelectionOption="true" />
+				<f:selectItems
+					value="#{datePickerHelper.getYears(cc.attrs.yearMin, cc.attrs.yearMax)}" />
+				<f:ajax event="change" render="day" />
+			</h:selectOneMenu>
+
+			<h:outputText value=" : " rendered="#{cc.attrs.timeRendered}"/>
+
+			<h:selectOneMenu id="hour" title="${msg.hour} ${resourcesUtil.getProperty(cc.attrs.label)}" rendered="#{cc.attrs.timeRendered}" disabled="#{cc.attrs.disabled}">
+				<f:selectItem itemLabel="${msg.hour}" noSelectionOption="true" />
+				<f:selectItems value="#{datePickerHelper.getHours()}" />
+			</h:selectOneMenu>
+
+			<h:selectOneMenu id="minute" title="${msg.minute} ${resourcesUtil.getProperty(cc.attrs.label)}" rendered="#{cc.attrs.timeRendered}" disabled="#{cc.attrs.disabled}">
+				<f:selectItem itemLabel="${msg.minute}" noSelectionOption="true" />
+				<f:selectItems value="#{datePickerHelper.getMinutes()}" />
+			</h:selectOneMenu>
+		</div>
+	</composite:implementation>
+</body>
+</html>
\ No newline at end of file
diff --git a/src/main/webapp/resources/components/messages.xhtml b/src/main/webapp/resources/components/messages.xhtml
new file mode 100644
index 0000000..b3d18ce
--- /dev/null
+++ b/src/main/webapp/resources/components/messages.xhtml
@@ -0,0 +1,82 @@
+<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
+<html xmlns="http://www.w3.org/1999/xhtml"
+	xmlns:h="http://java.sun.com/jsf/html"
+	xmlns:f="http://java.sun.com/jsf/core"
+	xmlns:ui="http://java.sun.com/jsf/facelets"
+	xmlns:p="http://primefaces.org/ui"
+	xmlns:composite="http://java.sun.com/jsf/composite">
+<!-- 
+	To learn more about JSF Composite Component, please read
+	http://stackoverflow.com/questions/6822000/when-to-use-uiinclude-tag-files-composite-components-and-or-custom-componen
+	http://balusc.blogspot.de/2013/01/composite-component-with-multiple-input.html
+ -->
+<head>
+	<title>Displays error messages in an accessible fashion.</title>
+</head>
+<body>
+	<composite:interface>
+	</composite:interface>
+
+	<composite:implementation>
+		<div id="#{cc.clientId}">
+			<ui:repeat var="severity" value="${messagesHelper.severitiesGlobalMessages}" varStatus="severityStatus">
+				<p:outputPanel layout="block" styleClass="ui-messages-${messagesHelper.getCssFriendlySeverity(severity)} ui-corner-all" rendered="${messagesHelper.hasMultipleGlobalMessages(severity)}">
+					<a href="#" class="ui-messages-close" style="float: right;" onclick="$(this).parent().slideUp();return false;"><span class="ui-icon ui-icon-close"></span></a>
+					<span class="ui-messages-${messagesHelper.getCssFriendlySeverity(severity)}-icon"></span>
+					<ul>
+						<ui:repeat var="item" value="${messagesHelper.getGlobalMessages(severity)}" varStatus="status">
+							<li><span class="ui-messages-${item.severity}-summary"><a id="${messagesHelper.getCssFriendlySeverity(severity)}-gMsgNo${status.index}" href="javascript:void" 
+							onclick="PrimeFaces.focus(null, 'form:center');" >${item.facesMessage.summary}</a></span></li>
+						</ui:repeat>
+					</ul>
+					<script type="text/javascript">
+						$(function() {
+							setTimeout(function() {
+								PrimeFaces.scrollTo('${messagesHelper.getCssFriendlySeverity(severity)}-gMsgNo0');
+								APP.focusTo('${messagesHelper.getCssFriendlySeverity(severity)}-gMsgNo0');
+							}, 400);
+						});
+					</script>
+				</p:outputPanel>
+				<p:outputPanel layout="block" styleClass="ui-messages-${messagesHelper.getCssFriendlySeverity(severity)} ui-corner-all" rendered="${messagesHelper.hasSingleGlobalMessage(severity)}">
+					<a href="#" class="ui-messages-close" style="float: right;" onclick="$(this).parent().slideUp();return false;"><span class="ui-icon ui-icon-close"></span></a>
+					<span class="ui-messages-${messagesHelper.getCssFriendlySeverity(severity)}-icon"></span>
+					<span class="ui-messages-${messagesHelper.getCssFriendlySeverity(severity)}-summary"><a id="${messagesHelper.getCssFriendlySeverity(severity)}-gMsgNo0" href="javascript:void" 
+							onclick="PrimeFaces.focus(null, 'form:center');" >${messagesHelper.getSingleGlobalMessage(severity).facesMessage.summary}</a></span>
+					<script type="text/javascript">
+						$(function() {
+							setTimeout(function() {
+								PrimeFaces.scrollTo('${messagesHelper.getCssFriendlySeverity(severity)}-gMsgNo0');
+								APP.focusTo('${messagesHelper.getCssFriendlySeverity(severity)}-gMsgNo0');
+							}, 400);
+						});
+					</script>
+				</p:outputPanel>
+			</ui:repeat>
+			
+			<p:outputPanel layout="block" styleClass="ui-messages-${messagesHelper.maxSeverityNonGlobalMessages} ui-corner-all" rendered="${messagesHelper.hasNonGlobalMessages()}">
+				<a href="#" class="ui-messages-close" style="float: right;" onclick="$(this).parent().slideUp();return false;"><span class="ui-icon ui-icon-close"></span></a>
+				<span class="ui-messages-${messagesHelper.maxSeverityNonGlobalMessages}-icon"></span>
+				<span class="ui-messages-${messagesHelper.maxSeverityNonGlobalMessages}-summary">
+					<a id="errorPresent" href="javascript:void" onclick="APP.focusTo('errorMsgNo0'); return false;">
+						<h:outputText value="${messagesHelper.nonGlobalMessagesIntro}" />
+					</a>
+				</span>
+				<ol>
+					<ui:repeat var="item" value="${messagesHelper.getNonGlobalMessages()}" varStatus="status">
+						<li><a id="errorMsgNo${status.index}" href="#" onclick="APP.focusTo('${item.sourceId}'); return false;">${item.facesMessage.summary}</a></li>
+					</ui:repeat>
+				</ol>
+				<script type="text/javascript">
+					$(function() {
+						setTimeout(function() {
+							PrimeFaces.scrollTo('errorPresent');
+							APP.focusTo('errorPresent');
+						}, 500);
+					});
+				</script>
+			</p:outputPanel>
+		</div>
+	</composite:implementation>
+</body>
+</html>
\ No newline at end of file
diff --git a/src/main/webapp/resources/components/outputBoolean.xhtml b/src/main/webapp/resources/components/outputBoolean.xhtml
new file mode 100644
index 0000000..b7ffd66
--- /dev/null
+++ b/src/main/webapp/resources/components/outputBoolean.xhtml
@@ -0,0 +1,23 @@
+<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
+<html xmlns="http://www.w3.org/1999/xhtml"
+	xmlns:h="http://java.sun.com/jsf/html"
+	xmlns:composite="http://java.sun.com/jsf/composite">
+<!-- 
+	To learn more about JSF Composite Component, please read
+	http://stackoverflow.com/questions/6822000/when-to-use-uiinclude-tag-files-composite-components-and-or-custom-componen
+	http://balusc.blogspot.de/2013/01/composite-component-with-multiple-input.html
+ -->
+<head>
+	<title>Display boolean value as an image</title>
+</head>
+<body>
+	<composite:interface>
+		<composite:attribute name="value" required="true" />
+	</composite:interface>
+
+	<composite:implementation>
+		<h:graphicImage name="icons/tick.png" width="16" height="16" alt="true" rendered="#{cc.attrs.value}" />
+		<h:graphicImage name="icons/cross.png" width="16" height="16" alt="false" rendered="#{not empty cc.attrs.value and not cc.attrs.value}" />
+	</composite:implementation>
+</body>
+</html>
\ No newline at end of file
diff --git a/src/main/webapp/resources/css/main.css b/src/main/webapp/resources/css/main.css
new file mode 100644
index 0000000..d6d3215
--- /dev/null
+++ b/src/main/webapp/resources/css/main.css
@@ -0,0 +1,415 @@
+body {
+	font-family: Verdana, Arial, Helvetica, sans-serif;
+	font-size: 12px;
+	min-width:1200px;	
+	background-color : #d0d3dc;
+}
+
+/* LABEL */
+form label.required {
+	font-weight: bold;
+}
+
+form .required-pseudo-label {
+	font-weight: bold;
+}
+
+div .ui-menu.ui-menubar {
+	background-color:transparent;
+	background: rgb(129,127,126); /* Old browsers */
+	background: -moz-linear-gradient(top, rgba(129,127,126,1) 0%, rgba(84,82,80,1) 65%, rgba(84,82,80,1) 100%) ; /* FF3.6+ */
+	background: -webkit-gradient(linear, left top, left bottom, color-stop(0%,rgba(129,127,126,1)), color-stop(65%,rgba(84,82,80,1)), color-stop(100%,rgba(84,82,80,1))) ; /* Chrome,Safari4+ */
+	background: -webkit-linear-gradient(top, rgba(129,127,126,1) 0%,rgba(84,82,80,1) 65%,rgba(84,82,80,1) 100%); /* Chrome10+,Safari5.1+ */
+	background: -o-linear-gradient(top, rgba(129,127,126,1) 0%,rgba(84,82,80,1) 65%,rgba(84,82,80,1) 100%); /* Opera 11.10+ */
+	background: -ms-linear-gradient(top, rgba(129,127,126,1) 0%,rgba(84,82,80,1) 65%,rgba(84,82,80,1) 100%); /* IE10+ */
+	background: linear-gradient(to bottom, rgba(129,127,126,1) 0%,rgba(84,82,80,1) 65%,rgba(84,82,80,1) 100%); /* W3C */
+	filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#817f7e', endColorstr='#545250',GradientType=0 ); /* IE6-9 */
+	border:none;
+	border-radius:0px;
+	-moz-border-radius:0px;
+	-webkit-border-radius:0px;
+}
+
+/*only apply to topmenu entries */
+li.topmenu>a>.ui-menuitem-text,
+a.topmenu>.ui-menuitem-text { 
+	color:#ffffff ;
+}
+
+a .ui-menuitem-text {
+	color:#000000;
+	font-weight:bold;
+	margin-right:5px;
+}
+
+.ui-autocomplete-panel {
+	max-height: 200px;
+}
+/* fix menu child width */
+.ui-menu .ui-menu-parent .ui-menu-child {
+	width:auto !important;
+}
+
+/* usability: right align labels */
+.ui-fieldset-content td label {
+	display: block;
+	text-align: right;
+}
+
+.ui-fieldset-content td td label {
+	text-align: left;
+}
+
+/* usability */
+.ui-button {
+	margin-right: 0em !important;
+}
+
+.ui-menubutton .ui-button {
+	margin-top: 1px !important;
+	margin-bottom: 1px !important;
+}
+
+/* action column in datatable */
+
+.actions-column {
+	width: 110px !important;
+}
+
+/* error messages */
+.ui-error-message {
+	display: inline-block;
+}
+
+/* info message */
+div .ui-messages-info {
+	background-color: #ddffdd;
+	border-color:#aaddaa;
+}
+
+div.searchResult {
+	background-color:#f5f5f5;
+	border:#bbb solid 1px;
+	padding:5px;
+	margin:10px 0px;
+}
+
+/* aria live region for search results */
+#searchResultsRegion {
+	margin:5px;
+	display: inline-block;
+	font-weight:bold;
+	font-size:110%;
+	color:#003b7d;
+}
+
+/* alternate dataTable row color */
+.ui-datatable-odd {
+	background: none repeat scroll 0 0 #F2F5F9;
+}
+
+/* change dataTable row color when mouse goes over it and keep the selected line text black */
+.ui-datatable tr.ui-datatable-even:hover, .ui-datatable tr.ui-datatable-odd:hover {
+	background: #BDE5F8;
+	color: black !important;
+}
+
+.ui-datatable .ui-datatable-footer {
+	text-align: left !important;
+}
+
+/* ICONS for p:commandButon. Note the usage of JSF2 resource facility */
+.iconView { 
+	background-image: url("#{resource['icons/eye.png']}") !important;
+}
+.iconEdit { 
+	background-image: url("#{resource['icons/pencil.png']}") !important;
+}
+.iconDelete { 
+	background-image: url("#{resource['icons/cross.png']}") !important;
+}
+.iconSelect { 
+	background-image: url("#{resource['icons/accept.png']}") !important;
+}
+.iconSearch { 
+	background-image: url("#{resource['icons/find.png']}") !important;
+}
+.iconAdd { 
+	background-image: url("#{resource['icons/add.png']}") !important;
+}
+.iconExcel { 
+	background-image: url("#{resource['icons/excel.png']}") !important;
+}
+
+/* p:fieldSet */
+.ui-fieldset {
+	text-align: left;
+	margin:10px 0px;
+	background-color:#f5f5f5;
+}
+
+html body .ui-state-error {
+	color:black;
+	background: #ffeeee ;
+	border: 1px solid #CD0A0A ;
+}
+
+/* tabs */
+
+div.ui-layout-unit div.ui-tabs {
+	margin-bottom:10px;	
+}
+
+div.ui-tabs ul.ui-widget-header.ui-tabs-nav {
+	padding: 0px 0px 1px 0px;
+}
+
+div.ui-tabs ul.ui-widget-header.ui-tabs-nav li a,
+div.ui-tabs ul.ui-widget-header.ui-tabs-nav li.ui-state-active a {
+	border:#bbb solid 1px;
+	border-bottom:none;
+	font-weight:bold;
+	color:#003b7d;
+	padding:5px 10px;
+}
+
+div.ui-tabs div.ui-tabs-panel {
+	background-color:#f5f5f5;
+	border:#bbb solid 1px;
+	border-top:none;
+}
+
+/* p:dataTable */
+.ui-datatable .ui-datatable-data td,
+.ui-datatable .ui-datatable-data-empty td {
+	text-align: center;
+}
+
+/* right align numbers in p:dataTable */
+.ui-datatable .ui-datatable-data td.numeric {
+	text-align: right;
+}
+
+.ui-datatable th.ui-sortable-column div.ui-dt-c {
+	padding: 4px 15px;
+}
+.ui-datatable th.ui-state-default {
+	border: 1px solid #b3b3b3;
+	color:white;
+	background:#777;
+	box-shadow: none;
+	text-shadow: none;
+	border-radius:0px;
+	-moz-border-radius:0px;
+	-webkit-border-radius:0px;
+}
+
+/* p:layout*/
+.ui-layout-north {
+	z-index:20 !important;
+	overflow:visible !important;
+}
+
+.ui-layout-north .ui-layout-unit-content {
+	overflow:visible !important;
+}
+
+.ui-layout-south .ui-layout-unit-content {
+	text-align: center;
+}
+
+.ui-layout, .ui-layout-doc, .ui-layout-unit, .ui-layout-wrap, .ui-layout-bd, .ui-layout-hd {
+	border: none;
+}
+
+/* p:panel */
+.ui-panel {
+	margin-bottom: 0.6em;
+}
+
+.ui-panel-content {
+	width: 98%; 
+	margin:5px auto;
+}
+
+/* header */
+.userInfo {
+	float: right;
+}
+.userInfo-username {
+	margin-right: 5px;
+}
+.userInfo-welcome {
+	background: transparent url("#{resource['icons/home.png']}") no-repeat center left;
+	padding: 5px 5px 5px 20px;
+}
+.userInfo-user {
+	background: transparent url("#{resource['icons/login.png']}") no-repeat center left;
+	padding : 5px 5px 5px 20px;
+}
+.userInfo-fr {
+	background: transparent url("#{resource['icons/fr.gif']}") no-repeat center left;
+	padding : 5px 5px 5px 20px;
+}
+.userInfo-en {
+	background: transparent url("#{resource['icons/us.gif']}") no-repeat center left;
+	padding : 5px 5px 5px 20px;
+}
+
+.message_alert {
+	color : red;
+	font-weight: bold;
+}
+
+/* login page */
+.loginBox {
+	width:600px;
+	margin:50px auto;
+}
+
+.environment {
+	position: fixed;
+	top: 0px;
+	left: 0px;
+	width: 58px;
+	height: 58px; 
+	z-index: 1000;
+}
+
+.Development {
+	background: transparent url("#{resource['icons/environment/development.gif']}") no-repeat center left;
+}
+.Integration {
+	background: transparent url("#{resource['icons/environment/integration.gif']}") no-repeat center left;
+}
+.Production {
+	background: transparent url("#{resource['icons/environment/production.gif']}") no-repeat center left;
+}
+
+.logo {
+	background: transparent url("#{resource['img/logo.png']}") no-repeat center left;
+	width: 179px;
+	height: 63px;
+}
+
+.version {
+	position: fixed;
+	left: 170px; 
+	top: 5px;
+	font-size: 10px;
+	font-weight: bold;
+	z-index: 1;
+}
+
+.title {
+	white-space: pre-line;
+	text-align: center;
+}
+
+.navigation {
+	position: fixed;
+	left:0;
+	top: 82px;
+	height: 28px;
+	width: 100%;
+}
+
+div.ui-layout-north td {
+	vertical-align:top;
+}
+
+div.ui-layout-center {
+	padding:0px;
+	background-color: #d0d3dc;
+}
+
+div.ui-layout-center div.ui-layout-unit-content {
+	padding-left:15px;
+	padding-right:15px;
+	background-color: transparent;
+}
+
+div.ui-layout-center div.ui-layout-unit-content div.ui-toolbar {
+	background-color:#eaeaea;
+	background-image:none;
+	border: #bbb solid 1px;
+}
+
+div.ui-layout-center div.ui-layout-unit-content div.ui-toolbar button.ui-button {
+	background: rgb(136,181,202); /* Old browsers */
+	background: -moz-linear-gradient(top, rgba(184,212,255,1) 0%,rgba(145,185,201,1) 100%); /* FF3.6+ */
+	background: -webkit-gradient(linear, left top, left bottom, color-stop(0%,rgba(184,212,255,1)), color-stop(100%,rgba(145,185,201,1))); /* Chrome,Safari4+ */
+	background: -webkit-linear-gradient(top, rgba(184,212,255,1) 0%,rgba(145,185,201,1) 100%); /* Chrome10+,Safari5.1+ */
+	background: -o-linear-gradient(top, rgba(184,212,255,1) 0%,rgba(145,185,201,1) 100%); /* Opera 11.10+ */
+	background: -ms-linear-gradient(top, rgba(184,212,255,1) 0%,rgba(145,185,201,1) 100%); /* IE10+ */
+	background: linear-gradient(to bottom, rgba(184,212,255,1) 0%,rgba(145,185,201,1) 100%); /* W3C */
+	filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#B8D4FF', endColorstr='#91B9C9',GradientType=0 ); /* IE6-9 */
+	border:#eee outset 1px;
+	margin:0px 3px;
+	font-weight:bold;
+}
+
+div.ui-layout-center div.ui-layout-unit-content div.ui-toolbar button.ui-button.ui-state-hover,
+div.ui-layout-center div.ui-layout-unit-content div.ui-toolbar button.ui-button:hover {
+	background: rgb(255,114,0); /* Old browsers */
+	background: -moz-linear-gradient(top, rgba(255,114,0,1) 0%, rgba(255,151,51,1) 100%); /* FF3.6+ */
+	background: -webkit-gradient(linear, left top, left bottom, color-stop(0%,rgba(255,114,0,1)), color-stop(100%,rgba(255,151,51,1))); /* Chrome,Safari4+ */
+	background: -webkit-linear-gradient(top, rgba(255,114,0,1) 0%,rgba(255,151,51,1) 100%); /* Chrome10+,Safari5.1+ */
+	background: -o-linear-gradient(top, rgba(255,114,0,1) 0%,rgba(255,151,51,1) 100%); /* Opera 11.10+ */
+	background: -ms-linear-gradient(top, rgba(255,114,0,1) 0%,rgba(255,151,51,1) 100%); /* IE10+ */
+	background: linear-gradient(to bottom, rgba(255,114,0,1) 0%,rgba(255,151,51,1) 100%); /* W3C */
+	filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#ff7200', endColorstr='#ff9733',GradientType=0 ); /* IE6-9 */
+	border:#eee inset 1px;
+}
+
+.ui-state-highlight .ui-icon {
+	background-image: url("#{resource['primefaces-bootstrap:images/ui-icons_333333_256x240.png']}");
+}
+
+
+.ui-autocomplete-panel {
+	max-height: 200px;
+}
+
+/* Autocomplete multiple*/
+.ui-autocomplete-multiple  {
+	width :400px !important;
+}
+
+.ui-autocomplete-multiple ul{
+	display:inline-block;
+	width:90% !important;
+}
+.ui-autocomplete-multiple .ui-button{
+	display:inline-block;
+	vertical-align:top;
+}
+.ui-autocomplete-multiple .ui-button .ui-button-text{
+	line-height:1.1;
+}
+
+/* Autocomplete multiple : extend text zone in which the user types */
+.ui-autocomplete-input-token {
+	width: 100% !important;
+}
+.ui-autocomplete-input-token input {
+	width: 100% !important;
+}
+
+/* Autocomplete multiple : if all selected elements are too big, make sure the button to remove them is visible and clickable */
+.ui-autocomplete-token {
+	max-width:100%;
+}
+
+.ui-row-editor {
+	display: inline-block;
+}
+
+.ui-cell-editor {
+	margin-right: 25px;
+}
+
+.ui-cell-editor-input {
+	margin-left: 10px;
+	margin-right: 10px;
+}
diff --git a/src/main/webapp/resources/css/print.css b/src/main/webapp/resources/css/print.css
new file mode 100644
index 0000000..0b8c48e
--- /dev/null
+++ b/src/main/webapp/resources/css/print.css
@@ -0,0 +1,45 @@
+.printWatermark {
+	display: none;
+}
+
+/* background is made transparent */
+body,
+div.ui-layout-center,
+div.ui-layout-center div.ui-layout-unit-content div.ui-toolbar,
+.ui-fieldset,
+.ui-breadcrumb,
+div.ui-tabs div.ui-tabs-panel,
+div.searchResult,
+.ui-datatable th.ui-state-default,
+.ui-widget-content,
+.ui-datatable tr.ui-state-highlight,
+.ui-tabs .ui-tabs-nav.ui-widget-header li.ui-state-active a
+{
+	background-color: transparent;
+	background-image: none;
+}
+
+/* force char color to black */
+.ui-datatable th.ui-state-default,
+.ui-widget-content,
+#searchResultsRegion,
+div.ui-tabs ul.ui-widget-header.ui-tabs-nav li a,
+div.ui-tabs ul.ui-widget-header.ui-tabs-nav li.ui-state-active a,
+.ui-accordion .ui-accordion-header.ui-state-default a,
+.ui-datatable tr.ui-state-highlight
+{
+	color: black;
+}
+
+/* remove some navigation element */
+.environment,
+div.ui-breadcrumb,
+div.ui-toolbar,
+a.ui-button,
+span.ui-button,
+#form\3Atop,#form\3Atop div,
+#form\3Atop-toolbar,
+.actions-column
+{
+	display: none;
+}
diff --git a/src/main/webapp/resources/css/printWatermark.css b/src/main/webapp/resources/css/printWatermark.css
new file mode 100644
index 0000000..fab9015
--- /dev/null
+++ b/src/main/webapp/resources/css/printWatermark.css
@@ -0,0 +1,24 @@
+div.printWatermark {
+	display:block;
+	position:fixed;
+	z-index:-1;
+	width:100%;
+	height:100%;
+}
+
+div.printWatermark div {
+	position:absolute;
+	left:0;
+	width:100%;
+	top: 10%;
+	bottom: 10%;
+}
+
+div.printWatermark img {
+	width: 100%;
+	height: 80%;
+}
+
+button.ui-button {
+	display: none;
+}
\ No newline at end of file
diff --git a/src/main/webapp/resources/icons/accept.png b/src/main/webapp/resources/icons/accept.png
new file mode 100644
index 0000000..89c8129
Binary files /dev/null and b/src/main/webapp/resources/icons/accept.png differ
diff --git a/src/main/webapp/resources/icons/add.png b/src/main/webapp/resources/icons/add.png
new file mode 100644
index 0000000..6332fef
Binary files /dev/null and b/src/main/webapp/resources/icons/add.png differ
diff --git a/src/main/webapp/resources/icons/ajaxloading.gif b/src/main/webapp/resources/icons/ajaxloading.gif
new file mode 100644
index 0000000..7837be0
Binary files /dev/null and b/src/main/webapp/resources/icons/ajaxloading.gif differ
diff --git a/src/main/webapp/resources/icons/cross.png b/src/main/webapp/resources/icons/cross.png
new file mode 100644
index 0000000..1514d51
Binary files /dev/null and b/src/main/webapp/resources/icons/cross.png differ
diff --git a/src/main/webapp/resources/icons/environment/development.gif b/src/main/webapp/resources/icons/environment/development.gif
new file mode 100644
index 0000000..21695a1
Binary files /dev/null and b/src/main/webapp/resources/icons/environment/development.gif differ
diff --git a/src/main/webapp/resources/icons/environment/integration.gif b/src/main/webapp/resources/icons/environment/integration.gif
new file mode 100644
index 0000000..2516fcf
Binary files /dev/null and b/src/main/webapp/resources/icons/environment/integration.gif differ
diff --git a/src/main/webapp/resources/icons/environment/production.gif b/src/main/webapp/resources/icons/environment/production.gif
new file mode 100644
index 0000000..6e289ce
Binary files /dev/null and b/src/main/webapp/resources/icons/environment/production.gif differ
diff --git a/src/main/webapp/resources/icons/environment/recette.gif b/src/main/webapp/resources/icons/environment/recette.gif
new file mode 100644
index 0000000..b3047c2
Binary files /dev/null and b/src/main/webapp/resources/icons/environment/recette.gif differ
diff --git a/src/main/webapp/resources/icons/excel.png b/src/main/webapp/resources/icons/excel.png
new file mode 100644
index 0000000..6bb6cef
Binary files /dev/null and b/src/main/webapp/resources/icons/excel.png differ
diff --git a/src/main/webapp/resources/icons/eye.png b/src/main/webapp/resources/icons/eye.png
new file mode 100644
index 0000000..564a1a9
Binary files /dev/null and b/src/main/webapp/resources/icons/eye.png differ
diff --git a/src/main/webapp/resources/icons/find.png b/src/main/webapp/resources/icons/find.png
new file mode 100644
index 0000000..1547479
Binary files /dev/null and b/src/main/webapp/resources/icons/find.png differ
diff --git a/src/main/webapp/resources/icons/fr.gif b/src/main/webapp/resources/icons/fr.gif
new file mode 100644
index 0000000..75a2345
Binary files /dev/null and b/src/main/webapp/resources/icons/fr.gif differ
diff --git a/src/main/webapp/resources/icons/home.png b/src/main/webapp/resources/icons/home.png
new file mode 100644
index 0000000..b2c9d0a
Binary files /dev/null and b/src/main/webapp/resources/icons/home.png differ
diff --git a/src/main/webapp/resources/icons/login.png b/src/main/webapp/resources/icons/login.png
new file mode 100644
index 0000000..368b65b
Binary files /dev/null and b/src/main/webapp/resources/icons/login.png differ
diff --git a/src/main/webapp/resources/icons/pencil.png b/src/main/webapp/resources/icons/pencil.png
new file mode 100644
index 0000000..0bfecd5
Binary files /dev/null and b/src/main/webapp/resources/icons/pencil.png differ
diff --git a/src/main/webapp/resources/icons/tick.png b/src/main/webapp/resources/icons/tick.png
new file mode 100644
index 0000000..a9925a0
Binary files /dev/null and b/src/main/webapp/resources/icons/tick.png differ
diff --git a/src/main/webapp/resources/icons/us.gif b/src/main/webapp/resources/icons/us.gif
new file mode 100644
index 0000000..130052f
Binary files /dev/null and b/src/main/webapp/resources/icons/us.gif differ
diff --git a/src/main/webapp/resources/img/jaxio_logo.png b/src/main/webapp/resources/img/jaxio_logo.png
new file mode 100644
index 0000000..fd70d7a
Binary files /dev/null and b/src/main/webapp/resources/img/jaxio_logo.png differ
diff --git a/src/main/webapp/resources/img/logo.png b/src/main/webapp/resources/img/logo.png
new file mode 100644
index 0000000..8dff20a
Binary files /dev/null and b/src/main/webapp/resources/img/logo.png differ
diff --git a/src/main/webapp/resources/img/logo_header.png b/src/main/webapp/resources/img/logo_header.png
new file mode 100644
index 0000000..47dd4ed
Binary files /dev/null and b/src/main/webapp/resources/img/logo_header.png differ
diff --git a/src/main/webapp/resources/img/printWatermark.png b/src/main/webapp/resources/img/printWatermark.png
new file mode 100644
index 0000000..c63e9ee
Binary files /dev/null and b/src/main/webapp/resources/img/printWatermark.png differ
diff --git a/src/main/webapp/resources/js/main.js b/src/main/webapp/resources/js/main.js
new file mode 100644
index 0000000..83d805d
--- /dev/null
+++ b/src/main/webapp/resources/js/main.js
@@ -0,0 +1,114 @@
+jQuery(function() {
+
+	// HACK to make p:layout work with chromeshades (we just add the !important)
+	$(PrimeFaces.escapeClientId('form:top')).css("display","block !important");
+	$(PrimeFaces.escapeClientId('form:center')).css("display","block !important");
+	$(PrimeFaces.escapeClientId('form:bottom')).css("display","block !important");
+
+	// Add some ARIA role here
+	$(PrimeFaces.escapeClientId('form:center')).attr("role","main");
+	$(PrimeFaces.escapeClientId('form:bottom')).attr("role","contentinfo");
+	$(".aria-role-presentation").attr("role", "presentation");
+	$(".aria-search-button").attr("aria-controls", "searchResultsRegion");
+	$(".aria-save-button").attr("aria-controls", "messagesRegion");
+	
+	/* temporary fix for keyboard menu navigation */
+	$('.ui-menuitem-link').focus(function() { jQuery(this).parent().toggleClass('ui-state-focus');})
+						  .blur(function() { jQuery(this).parent().removeClass('ui-state-focus');});
+
+	/* Set the default button when user press enter */
+	$("form input, form select").on("keypress", function (e) {
+		if ($(this).parents("form").find("button[type=submit].default").length <= 0) {
+			return true;
+		}
+		
+		if ((e.which && e.which == 13) || (e.keyCode && e.keyCode == 13)) {
+			$(this).parents("form").find("button[type=submit].default").click();
+			return false;
+		} else {
+			return true;
+		}
+	});
+
+	/* keep focus inside askForDeleteDialog */
+	$(PrimeFaces.escapeClientId('form:askForDeleteDialogNo')).on('keydown', function(e) { 
+		if ((!e.shiftKey) && ((e.which && e.which == 9) || (e.keyCode && e.keyCode == 9))) {
+			if (e.preventDefault) {
+				e.preventDefault();
+			}
+			jQuery(PrimeFaces.escapeClientId('form:askForDeleteDialogYes')).focus();
+		}
+	});
+	$(PrimeFaces.escapeClientId('form:askForDeleteDialogYes')).on('keydown', function(e) { 
+		if ((e.shiftKey) && ((e.which && e.which == 9) || (e.keyCode && e.keyCode == 9))) {
+			if (e.preventDefault) {
+				e.preventDefault();
+			}
+			jQuery(PrimeFaces.escapeClientId('form:askForDeleteDialogNo')).focus();
+		}
+	});
+
+	/* keep focus inside askForSaveDialog */
+	$(PrimeFaces.escapeClientId('form:askForSaveDialogNo')).on('keydown', function(e) { 
+		if ((!e.shiftKey) && ((e.which && e.which == 9) || (e.keyCode && e.keyCode == 9))) {
+			if (e.preventDefault) {
+				e.preventDefault();
+			}
+			jQuery(PrimeFaces.escapeClientId('form:askForSaveDialogYes')).focus();
+		}
+	});
+	$(PrimeFaces.escapeClientId('form:askForSaveDialogYes')).on('keydown', function(e) { 
+		if ((e.shiftKey) && ((e.which && e.which == 9) || (e.keyCode && e.keyCode == 9))) {
+			if (e.preventDefault) {
+				e.preventDefault();
+			}
+			jQuery(PrimeFaces.escapeClientId('form:askForSaveDialogNo')).focus();
+		}
+	});
+});
+
+APP = {};
+
+//-------------------------------------
+// Gain focus on dialog
+//-------------------------------------
+APP.focusAskForDeleteDialog = function() {
+	jQuery(PrimeFaces.escapeClientId('form:askForDeleteDialogNo')).focus();
+};
+
+APP.focusAskForSaveDialog = function() {
+	jQuery(PrimeFaces.escapeClientId('form:askForSaveDialogYes')).focus();
+};
+
+APP.focusTo = function(jsfId) {
+	if (jQuery(PrimeFaces.escapeClientId(jsfId +"_input")).length == 1) { // target the input of the autocomplete
+		jQuery(PrimeFaces.escapeClientId(jsfId + "_input")).focus();
+	} else {
+		jQuery(PrimeFaces.escapeClientId(jsfId)).focus();
+	}
+};	
+
+//---------------------------------------
+// Aria live region related
+//---------------------------------------
+/* todo: localization */
+APP.updateSearchResultsRegion = function(text, nbResults) {
+	jQuery("#searchResultsRegion").text(text);
+	jQuery("#searchResultsRegion").attr("nb-results", nbResults);
+};	
+
+//-------------------------------------
+//Menu shortcuts
+//-------------------------------------
+
+APP.menu = {};
+APP.menu.call = function(idToClick) {
+	jQuery(PrimeFaces.escapeClientId(idToClick)).click();	
+	return false;
+};
+APP.menu.cancel = function() {
+	return APP.menu.call('form:cancel');
+};
+APP.menu.back = function() {
+	return APP.menu.call('form:back');
+};
diff --git a/src/main/webapp/resources/js/primefaces-locale.js b/src/main/webapp/resources/js/primefaces-locale.js
new file mode 100644
index 0000000..52a1ff8
--- /dev/null
+++ b/src/main/webapp/resources/js/primefaces-locale.js
@@ -0,0 +1,29 @@
+//Primefaces doesn't include translation anymore, 
+//here we customize FrenchLocale according to 
+// http://code.google.com/p/primefaces/wiki/PrimeFacesLocales
+PrimeFaces.locales ['fr'] = {
+    closeText: 'Fermer',
+    prevText: 'Précédent',
+    nextText: 'Suivant',
+    monthNames: ['Janvier', 'Février', 'Mars', 'Avril', 'Mai', 'Juin', 'Juillet', 'Août', 'Septembre', 'Octobre', 'Novembre', 'Décembre' ],
+    monthNamesShort: ['Jan', 'Fév', 'Mar', 'Avr', 'Mai', 'Jun', 'Jul', 'Aoû', 'Sep', 'Oct', 'Nov', 'Déc' ],
+    dayNames: ['Dimanche', 'Lundi', 'Mardi', 'Mercredi', 'Jeudi', 'Vendredi', 'Samedi'],
+    dayNamesShort: ['Dim', 'Lun', 'Mar', 'Mer', 'Jeu', 'Ven', 'Sam'],
+    dayNamesMin: ['D', 'L', 'M', 'M', 'J', 'V', 'S'],
+    weekHeader: 'Semaine',
+    firstDay: 1,
+    isRTL: false,
+    showMonthAfterYear: false,
+    yearSuffix:'',
+    timeOnlyTitle: 'Choisir l\'heure',
+    timeText: 'Heure',
+    hourText: 'Heures',
+    minuteText: 'Minutes',
+    secondText: 'Secondes',
+    currentText: 'Maintenant',
+    ampm: false,
+    month: 'Mois',
+    week: 'Semaine',
+    day: 'Jour',
+    allDayText: 'Toute la journée'
+};
\ No newline at end of file
diff --git a/src/test/generated-java/com/h2/demo/domain/AccountTest.java b/src/test/generated-java/com/h2/demo/domain/AccountTest.java
new file mode 100644
index 0000000..88dccc9
--- /dev/null
+++ b/src/test/generated-java/com/h2/demo/domain/AccountTest.java
@@ -0,0 +1,99 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-backend-jpa:src/test/java/domain/ModelTest.e.vm.java
+ */
+package com.h2.demo.domain;
+
+import static org.fest.assertions.Assertions.assertThat;
+
+import java.io.*;
+import java.util.*;
+
+import org.junit.Test;
+
+import com.h2.demo.util.ValueGenerator;
+
+/**
+ * Basic tests for Account
+ */
+@SuppressWarnings("unused")
+public class AccountTest {
+
+    // test unique primary key
+    @Test
+    public void newInstanceHasNoPrimaryKey() {
+        Account model = new Account();
+        assertThat(model.isIdSet()).isFalse();
+    }
+
+    @Test
+    public void isIdSetReturnsTrue() {
+        Account model = new Account();
+        model.setId(ValueGenerator.getUniqueString(36));
+        assertThat(model.getId()).isNotNull();
+        assertThat(model.isIdSet()).isTrue();
+    }
+
+    //-------------------------------------------------------------
+    // Many to One:  Account.address ==> Address.id
+    //-------------------------------------------------------------
+
+    @Test
+    public void manyToOne_setAddress() {
+        Account many = new Account();
+
+        // init
+        Address one = new Address();
+        one.setId(ValueGenerator.getUniqueInteger());
+        many.setAddress(one);
+
+        // make sure it is propagated properly
+        assertThat(many.getAddress()).isEqualTo(one);
+
+        // now set it to back to null
+        many.setAddress(null);
+
+        // make sure null is propagated properly
+        assertThat(many.getAddress()).isNull();
+    }
+
+    //-------------------------------------------------------------
+    // Pure Many to Many
+    //-------------------------------------------------------------
+
+    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
+    // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
+
+    @Test
+    public void manyToMany_addRole() {
+        Account many1 = new Account();
+        Role many2 = new Role();
+
+        // add it
+        many1.addRole(many2);
+
+        // check it is propagated
+        assertThat(many1.getRoles()).contains(many2);
+        // now let's remove it
+        many1.removeRole(many2);
+
+        // check it is propagated
+        assertThat(many1.getRoles().contains(many2)).isFalse();
+    }
+
+    @Test
+    public void equalsUsingBusinessKey() {
+        Account model1 = new Account();
+        Account model2 = new Account();
+        String login = ValueGenerator.getUniqueString(100);
+        model1.setLogin(login);
+        model2.setLogin(login);
+        assertThat(model1).isEqualTo(model2);
+        assertThat(model2).isEqualTo(model1);
+        assertThat(model1.hashCode()).isEqualTo(model2.hashCode());
+    }
+}
\ No newline at end of file
diff --git a/src/test/generated-java/com/h2/demo/domain/AddressTest.java b/src/test/generated-java/com/h2/demo/domain/AddressTest.java
new file mode 100644
index 0000000..9ff010d
--- /dev/null
+++ b/src/test/generated-java/com/h2/demo/domain/AddressTest.java
@@ -0,0 +1,65 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-backend-jpa:src/test/java/domain/ModelTest.e.vm.java
+ */
+package com.h2.demo.domain;
+
+import static org.fest.assertions.Assertions.assertThat;
+
+import java.io.*;
+import java.util.*;
+
+import org.junit.Test;
+
+import com.h2.demo.util.ValueGenerator;
+
+/**
+ * Basic tests for Address
+ */
+@SuppressWarnings("unused")
+public class AddressTest {
+
+    // test unique primary key
+    @Test
+    public void newInstanceHasNoPrimaryKey() {
+        Address model = new Address();
+        assertThat(model.isIdSet()).isFalse();
+    }
+
+    @Test
+    public void isIdSetReturnsTrue() {
+        Address model = new Address();
+        model.setId(ValueGenerator.getUniqueInteger());
+        assertThat(model.getId()).isNotNull();
+        assertThat(model.isIdSet()).isTrue();
+    }
+
+    /*
+     public void equalsUsingPk() {
+     Address model1 = new Address();
+     Address model2 = new Address();
+
+     Integer id = ValueGenerator.getUniqueInteger();
+     model1.setId(id);
+     model2.setId(id);
+
+     model1.setStreetName("a");
+     model2.setStreetName("a");
+
+     model1.setCity("a");
+     model2.setCity("a");
+
+     model1.setVersion(1);
+     model2.setVersion(1);
+     assertThat(model1.isIdSet()).isTrue();
+     assertThat(model2.isIdSet()).isTrue();
+     assertThat(model1.hashCode()).isEqualTo(model2.hashCode());
+     assertThat(model1).isEqualTo(model2);
+     assertThat(model2).isEqualTo(model1);
+     }
+     */
+}
\ No newline at end of file
diff --git a/src/test/generated-java/com/h2/demo/domain/AuditLogTest.java b/src/test/generated-java/com/h2/demo/domain/AuditLogTest.java
new file mode 100644
index 0000000..efef647
--- /dev/null
+++ b/src/test/generated-java/com/h2/demo/domain/AuditLogTest.java
@@ -0,0 +1,74 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-backend-jpa:src/test/java/domain/ModelTest.e.vm.java
+ */
+package com.h2.demo.domain;
+
+import static org.fest.assertions.Assertions.assertThat;
+
+import java.io.*;
+import java.util.*;
+
+import org.junit.Test;
+
+import com.h2.demo.util.ValueGenerator;
+
+/**
+ * Basic tests for AuditLog
+ */
+@SuppressWarnings("unused")
+public class AuditLogTest {
+
+    // test unique primary key
+    @Test
+    public void newInstanceHasNoPrimaryKey() {
+        AuditLog model = new AuditLog();
+        assertThat(model.isIdSet()).isFalse();
+    }
+
+    @Test
+    public void isIdSetReturnsTrue() {
+        AuditLog model = new AuditLog();
+        model.setId(ValueGenerator.getUniqueInteger());
+        assertThat(model.getId()).isNotNull();
+        assertThat(model.isIdSet()).isTrue();
+    }
+
+    /*
+     public void equalsUsingPk() {
+     AuditLog model1 = new AuditLog();
+     AuditLog model2 = new AuditLog();
+
+     Integer id = ValueGenerator.getUniqueInteger();
+     model1.setId(id);
+     model2.setId(id);
+
+     model1.setAuthor("a");
+     model2.setAuthor("a");
+
+     model1.setEvent("a");
+     model2.setEvent("a");
+
+     model1.setEventDate(new Date());
+     model2.setEventDate(new Date());
+
+     model1.setStringAttribute1("a");
+     model2.setStringAttribute1("a");
+
+     model1.setStringAttribute2("a");
+     model2.setStringAttribute2("a");
+
+     model1.setStringAttribute3("a");
+     model2.setStringAttribute3("a");
+     assertThat(model1.isIdSet()).isTrue();
+     assertThat(model2.isIdSet()).isTrue();
+     assertThat(model1.hashCode()).isEqualTo(model2.hashCode());
+     assertThat(model1).isEqualTo(model2);
+     assertThat(model2).isEqualTo(model1);
+     }
+     */
+}
\ No newline at end of file
diff --git a/src/test/generated-java/com/h2/demo/domain/BookTest.java b/src/test/generated-java/com/h2/demo/domain/BookTest.java
new file mode 100644
index 0000000..89fdee0
--- /dev/null
+++ b/src/test/generated-java/com/h2/demo/domain/BookTest.java
@@ -0,0 +1,88 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-backend-jpa:src/test/java/domain/ModelTest.e.vm.java
+ */
+package com.h2.demo.domain;
+
+import static org.fest.assertions.Assertions.assertThat;
+
+import java.io.*;
+import java.util.*;
+
+import org.junit.Test;
+
+import com.h2.demo.util.ValueGenerator;
+
+/**
+ * Basic tests for Book
+ */
+@SuppressWarnings("unused")
+public class BookTest {
+
+    // test unique primary key
+    @Test
+    public void newInstanceHasNoPrimaryKey() {
+        Book model = new Book();
+        assertThat(model.isIdSet()).isFalse();
+    }
+
+    @Test
+    public void isIdSetReturnsTrue() {
+        Book model = new Book();
+        model.setId(ValueGenerator.getUniqueInteger());
+        assertThat(model.getId()).isNotNull();
+        assertThat(model.isIdSet()).isTrue();
+    }
+
+    //-------------------------------------------------------------
+    // Many to One:  Book.account ==> Account.id
+    //-------------------------------------------------------------
+
+    @Test
+    public void manyToOne_setAccount() {
+        Book many = new Book();
+
+        // init
+        Account one = new Account();
+        one.setId(ValueGenerator.getUniqueString(36));
+        many.setAccount(one);
+
+        // make sure it is propagated properly
+        assertThat(many.getAccount()).isEqualTo(one);
+
+        // now set it to back to null
+        many.setAccount(null);
+
+        // make sure null is propagated properly
+        assertThat(many.getAccount()).isNull();
+    }
+
+    /*
+     public void equalsUsingPk() {
+     Book model1 = new Book();
+     Book model2 = new Book();
+
+     Integer id = ValueGenerator.getUniqueInteger();
+     model1.setId(id);
+     model2.setId(id);
+
+     model1.setTitle("a");
+     model2.setTitle("a");
+
+     model1.setNumberOfPages(1);
+     model2.setNumberOfPages(1);
+
+     model1.setVersion(1);
+     model2.setVersion(1);
+     assertThat(model1.isIdSet()).isTrue();
+     assertThat(model2.isIdSet()).isTrue();
+     assertThat(model1.hashCode()).isEqualTo(model2.hashCode());
+     assertThat(model1).isEqualTo(model2);
+     assertThat(model2).isEqualTo(model1);
+     }
+     */
+}
\ No newline at end of file
diff --git a/src/test/generated-java/com/h2/demo/domain/DocumentTest.java b/src/test/generated-java/com/h2/demo/domain/DocumentTest.java
new file mode 100644
index 0000000..8aa9954
--- /dev/null
+++ b/src/test/generated-java/com/h2/demo/domain/DocumentTest.java
@@ -0,0 +1,94 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-backend-jpa:src/test/java/domain/ModelTest.e.vm.java
+ */
+package com.h2.demo.domain;
+
+import static org.fest.assertions.Assertions.assertThat;
+
+import java.io.*;
+import java.util.*;
+
+import org.junit.Test;
+
+import com.h2.demo.util.ValueGenerator;
+
+/**
+ * Basic tests for Document
+ */
+@SuppressWarnings("unused")
+public class DocumentTest {
+
+    // test unique primary key
+    @Test
+    public void newInstanceHasNoPrimaryKey() {
+        Document model = new Document();
+        assertThat(model.isIdSet()).isFalse();
+    }
+
+    @Test
+    public void isIdSetReturnsTrue() {
+        Document model = new Document();
+        model.setId(ValueGenerator.getUniqueString(36));
+        assertThat(model.getId()).isNotNull();
+        assertThat(model.isIdSet()).isTrue();
+    }
+
+    //-------------------------------------------------------------
+    // Many to One:  Document.account ==> Account.id
+    //-------------------------------------------------------------
+
+    @Test
+    public void manyToOne_setAccount() {
+        Document many = new Document();
+
+        // init
+        Account one = new Account();
+        one.setId(ValueGenerator.getUniqueString(36));
+        many.setAccount(one);
+
+        // make sure it is propagated properly
+        assertThat(many.getAccount()).isEqualTo(one);
+
+        // now set it to back to null
+        many.setAccount(null);
+
+        // make sure null is propagated properly
+        assertThat(many.getAccount()).isNull();
+    }
+
+    /*
+     public void equalsUsingPk() {
+     Document model1 = new Document();
+     Document model2 = new Document();
+
+     String id = ValueGenerator.getUniqueString(36);
+     model1.setId(id);
+     model2.setId(id);
+
+     model1.setDocumentBinary("dummy".getBytes());
+     model2.setDocumentBinary("dummy".getBytes());
+
+     model1.setDocumentFileName("dummy.txt");
+     model2.setDocumentFileName("dummy.txt");
+
+     model1.setDocumentContentType("application/text");
+     model2.setDocumentContentType("application/text");
+
+     model1.setDocumentSize(1);
+     model2.setDocumentSize(1);
+
+     model1.setVersion(1);
+     model2.setVersion(1);
+     assertThat(model1.isIdSet()).isTrue();
+     assertThat(model2.isIdSet()).isTrue();
+     assertThat(model1.hashCode()).isEqualTo(model2.hashCode());
+     assertThat(model1).isEqualTo(model2);
+     assertThat(model2).isEqualTo(model1);
+     }
+     */
+}
\ No newline at end of file
diff --git a/src/test/generated-java/com/h2/demo/domain/LegacyPkTest.java b/src/test/generated-java/com/h2/demo/domain/LegacyPkTest.java
new file mode 100644
index 0000000..3963fc4
--- /dev/null
+++ b/src/test/generated-java/com/h2/demo/domain/LegacyPkTest.java
@@ -0,0 +1,140 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-backend-jpa:src/test/java/domain/CompositePkTest.cpk.vm.java
+ */
+package com.h2.demo.domain;
+
+import com.h2.demo.util.ValueGenerator;
+
+import static org.fest.assertions.Assertions.assertThat;
+import org.junit.Test;
+
+/**
+ * Basic tests for LegacyPk
+ */
+public class LegacyPkTest {
+    @Test
+    public void compositePrimaryKeycode_test1() {
+        LegacyPk cpk = new LegacyPk();
+        assertThat(cpk.isCodeSet()).isFalse();
+        assertThat(cpk.getCode()).isNull();
+        assertThat(cpk.isEmpty()).isTrue();
+    }
+
+    @Test
+    public void compositePrimaryKeycode_test2() {
+        LegacyPk cpk = new LegacyPk().code(ValueGenerator.getUniqueString(8));
+
+        assertThat(cpk.isCodeSet()).isTrue();
+        assertThat(cpk.getCode()).isNotNull();
+        assertThat(cpk.isEmpty()).isFalse();
+    }
+
+    @Test
+    public void compositePrimaryKeydept_test1() {
+        LegacyPk cpk = new LegacyPk();
+        assertThat(cpk.isDeptSet()).isFalse();
+        assertThat(cpk.getDept()).isNull();
+        assertThat(cpk.isEmpty()).isTrue();
+    }
+
+    @Test
+    public void compositePrimaryKeydept_test2() {
+        LegacyPk cpk = new LegacyPk().dept(ValueGenerator.getUniqueInteger());
+
+        assertThat(cpk.isDeptSet()).isTrue();
+        assertThat(cpk.getDept()).isNotNull();
+        assertThat(cpk.isEmpty()).isFalse();
+    }
+
+    @Test
+    public void compositePrimaryKeyname_test1() {
+        LegacyPk cpk = new LegacyPk();
+        assertThat(cpk.isNameSet()).isFalse();
+        assertThat(cpk.getName()).isNull();
+        assertThat(cpk.isEmpty()).isTrue();
+    }
+
+    @Test
+    public void compositePrimaryKeyname_test2() {
+        LegacyPk cpk = new LegacyPk().name(ValueGenerator.getUniqueString(16));
+
+        assertThat(cpk.isNameSet()).isTrue();
+        assertThat(cpk.getName()).isNotNull();
+        assertThat(cpk.isEmpty()).isFalse();
+    }
+
+    @Test
+    public void isEmptyTrue() {
+        LegacyPk cpk = new LegacyPk();
+        assertThat(cpk.isEmpty()).isTrue();
+    }
+
+    @Test
+    public void isEmptyFalse() {
+        LegacyPk cpk = new LegacyPk();
+        cpk.setCode(ValueGenerator.getUniqueString(8));
+        cpk.setDept(ValueGenerator.getUniqueInteger());
+        cpk.setName(ValueGenerator.getUniqueString(16));
+        assertThat(cpk.isEmpty()).isFalse();
+    }
+
+    @Test
+    public void toStringNotNullWhenNew() {
+        LegacyPk cpk = new LegacyPk();
+        assertThat(cpk.toString()).isNotNull();
+    }
+
+    @Test
+    public void toStringHasLength() {
+        LegacyPk cpk = new LegacyPk();
+        cpk.setCode(ValueGenerator.getUniqueString(8));
+        cpk.setDept(ValueGenerator.getUniqueInteger());
+        cpk.setName(ValueGenerator.getUniqueString(16));
+        assertThat(cpk.toString()).isNotNull();
+        assertThat(cpk.toString().isEmpty()).isFalse();
+    }
+
+    @Test
+    public void equality_test1() {
+        LegacyPk cpk = new LegacyPk();
+        assertThat(cpk).isEqualTo(cpk);
+        assertThat(cpk.hashCode()).isEqualTo(cpk.hashCode());
+        assertThat(cpk.compareTo(cpk)).isZero();
+    }
+
+    @Test
+    public void equality_test2() {
+        LegacyPk cpk = new LegacyPk();
+        assertThat(cpk.equals(null)).isFalse();
+        assertThat(cpk.compareTo(null)).isEqualTo(-1);
+    }
+
+    @Test
+    public void equality_test3() {
+        LegacyPk cpk1 = new LegacyPk();
+        LegacyPk cpk2 = new LegacyPk();
+
+        String code = ValueGenerator.getUniqueString(8);
+        cpk1.setCode(code);
+        cpk2.setCode(code);
+
+        Integer dept = ValueGenerator.getUniqueInteger();
+        cpk1.setDept(dept);
+        cpk2.setDept(dept);
+
+        String name = ValueGenerator.getUniqueString(16);
+        cpk1.setName(name);
+        cpk2.setName(name);
+
+        assertThat(cpk1.hashCode()).isEqualTo(cpk2.hashCode());
+        assertThat(cpk1.equals(cpk2)).isTrue();
+        assertThat(cpk2.equals(cpk1)).isTrue();
+        assertThat(cpk1.compareTo(cpk2)).isZero();
+        assertThat(cpk2.compareTo(cpk1)).isZero();
+    }
+}
\ No newline at end of file
diff --git a/src/test/generated-java/com/h2/demo/domain/LegacyTest.java b/src/test/generated-java/com/h2/demo/domain/LegacyTest.java
new file mode 100644
index 0000000..f0f3ba9
--- /dev/null
+++ b/src/test/generated-java/com/h2/demo/domain/LegacyTest.java
@@ -0,0 +1,82 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-backend-jpa:src/test/java/domain/ModelTest.e.vm.java
+ */
+package com.h2.demo.domain;
+
+import static org.fest.assertions.Assertions.assertThat;
+
+import java.io.*;
+import java.util.*;
+
+import org.junit.Test;
+
+import com.h2.demo.util.ValueGenerator;
+
+/**
+ * Basic tests for Legacy
+ */
+@SuppressWarnings("unused")
+public class LegacyTest {
+    // test composite primary key
+
+    @Test
+    public void newInstanceHasNoPrimaryKey() {
+        Legacy model = new Legacy();
+        assertThat(model.getId()).isNotNull();
+        assertThat(model.isIdSet()).isFalse();
+    }
+
+    @Test
+    public void setEmptyCompositePrimaryKey() {
+        Legacy model = new Legacy();
+        LegacyPk pk = new LegacyPk();
+        model.setId(pk);
+        assertThat(model.isIdSet()).isFalse();
+        assertThat(model.getId()).isSameAs(pk);
+    }
+
+    @Test
+    public void setValidCompositePrimaryKey() {
+        Legacy model = new Legacy();
+        LegacyPk pk = new LegacyPk();
+        pk.setCode(ValueGenerator.getUniqueString(8));
+        pk.setDept(ValueGenerator.getUniqueInteger());
+        pk.setName(ValueGenerator.getUniqueString(16));
+        model.setId(pk);
+
+        assertThat(model.isIdSet()).isTrue();
+        assertThat(model.getId()).isSameAs(pk);
+    }
+
+    /*
+     public void equalsUsingPk() {
+     Legacy model1 = new Legacy();
+     Legacy model2 = new Legacy();
+
+     String name = ValueGenerator.getUniqueString(16);
+     model1.setName(name);
+     model2.setName(name);
+
+     String code = ValueGenerator.getUniqueString(8);
+     model1.setCode(code);
+     model2.setCode(code);
+
+     Integer dept = ValueGenerator.getUniqueInteger();
+     model1.setDept(dept);
+     model2.setDept(dept);
+
+     model1.setExtraInfo("a");
+     model2.setExtraInfo("a");
+     assertThat(model1.isIdSet()).isTrue();
+     assertThat(model2.isIdSet()).isTrue();
+     assertThat(model1.hashCode()).isEqualTo(model2.hashCode());
+     assertThat(model1).isEqualTo(model2);
+     assertThat(model2).isEqualTo(model1);
+     }
+     */
+}
\ No newline at end of file
diff --git a/src/test/generated-java/com/h2/demo/domain/MoreTypesDemoTest.java b/src/test/generated-java/com/h2/demo/domain/MoreTypesDemoTest.java
new file mode 100644
index 0000000..83074e6
--- /dev/null
+++ b/src/test/generated-java/com/h2/demo/domain/MoreTypesDemoTest.java
@@ -0,0 +1,89 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-backend-jpa:src/test/java/domain/ModelTest.e.vm.java
+ */
+package com.h2.demo.domain;
+
+import static org.fest.assertions.Assertions.assertThat;
+
+import java.io.*;
+import java.util.*;
+
+import org.junit.Test;
+
+import com.h2.demo.util.ValueGenerator;
+
+/**
+ * Basic tests for MoreTypesDemo
+ */
+@SuppressWarnings("unused")
+public class MoreTypesDemoTest {
+
+    // test unique primary key
+    @Test
+    public void newInstanceHasNoPrimaryKey() {
+        MoreTypesDemo model = new MoreTypesDemo();
+        assertThat(model.isIdSet()).isFalse();
+    }
+
+    @Test
+    public void isIdSetReturnsTrue() {
+        MoreTypesDemo model = new MoreTypesDemo();
+        model.setId(ValueGenerator.getUniqueBigDecimal());
+        assertThat(model.getId()).isNotNull();
+        assertThat(model.isIdSet()).isTrue();
+    }
+
+    /*
+     public void equalsUsingPk() {
+     MoreTypesDemo model1 = new MoreTypesDemo();
+     MoreTypesDemo model2 = new MoreTypesDemo();
+
+     BigDecimal id = ValueGenerator.getUniqueBigDecimal();
+     model1.setId(id);
+     model2.setId(id);
+
+     model1.setNumberInt(1);
+     model2.setNumberInt(1);
+
+     model1.setNumberLong(1l);
+     model2.setNumberLong(1l);
+
+     model1.setNumberDouble(1d);
+     model2.setNumberDouble(1d);
+
+     model1.setNumberFloat(1f);
+     model2.setNumberFloat(1f);
+
+     model1.setNumberBigInteger(BigInteger.ONE);
+     model2.setNumberBigInteger(BigInteger.ONE);
+
+     model1.setNumberBigDecimal(BigDecimal.ONE);
+     model2.setNumberBigDecimal(BigDecimal.ONE);
+
+     model1.setDateJavaTemporalDate(new Date());
+     model2.setDateJavaTemporalDate(new Date());
+
+     model1.setDateJavaTemporalTimestamp(new Date());
+     model2.setDateJavaTemporalTimestamp(new Date());
+
+     model1.setDateJoda(new Date());
+     model2.setDateJoda(new Date());
+
+     model1.setDateTimeJoda(new Date());
+     model2.setDateTimeJoda(new Date());
+
+     model1.setVersion(1);
+     model2.setVersion(1);
+     assertThat(model1.isIdSet()).isTrue();
+     assertThat(model2.isIdSet()).isTrue();
+     assertThat(model1.hashCode()).isEqualTo(model2.hashCode());
+     assertThat(model1).isEqualTo(model2);
+     assertThat(model2).isEqualTo(model1);
+     }
+     */
+}
\ No newline at end of file
diff --git a/src/test/generated-java/com/h2/demo/domain/RoleTest.java b/src/test/generated-java/com/h2/demo/domain/RoleTest.java
new file mode 100644
index 0000000..be78083
--- /dev/null
+++ b/src/test/generated-java/com/h2/demo/domain/RoleTest.java
@@ -0,0 +1,52 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-backend-jpa:src/test/java/domain/ModelTest.e.vm.java
+ */
+package com.h2.demo.domain;
+
+import static org.fest.assertions.Assertions.assertThat;
+
+import java.io.*;
+import java.util.*;
+
+import org.junit.Test;
+
+import com.h2.demo.util.ValueGenerator;
+
+/**
+ * Basic tests for Role
+ */
+@SuppressWarnings("unused")
+public class RoleTest {
+
+    // test unique primary key
+    @Test
+    public void newInstanceHasNoPrimaryKey() {
+        Role model = new Role();
+        assertThat(model.isIdSet()).isFalse();
+    }
+
+    @Test
+    public void isIdSetReturnsTrue() {
+        Role model = new Role();
+        model.setId(ValueGenerator.getUniqueInteger());
+        assertThat(model.getId()).isNotNull();
+        assertThat(model.isIdSet()).isTrue();
+    }
+
+    @Test
+    public void equalsUsingBusinessKey() {
+        Role model1 = new Role();
+        Role model2 = new Role();
+        String roleName = ValueGenerator.getUniqueString(100);
+        model1.setRoleName(roleName);
+        model2.setRoleName(roleName);
+        assertThat(model1).isEqualTo(model2);
+        assertThat(model2).isEqualTo(model1);
+        assertThat(model1.hashCode()).isEqualTo(model2.hashCode());
+    }
+}
\ No newline at end of file
diff --git a/src/test/generated-java/com/h2/demo/domain/SavedSearchTest.java b/src/test/generated-java/com/h2/demo/domain/SavedSearchTest.java
new file mode 100644
index 0000000..96cc00e
--- /dev/null
+++ b/src/test/generated-java/com/h2/demo/domain/SavedSearchTest.java
@@ -0,0 +1,88 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-backend-jpa:src/test/java/domain/ModelTest.e.vm.java
+ */
+package com.h2.demo.domain;
+
+import static org.fest.assertions.Assertions.assertThat;
+
+import java.io.*;
+import java.util.*;
+
+import org.junit.Test;
+
+import com.h2.demo.util.ValueGenerator;
+
+/**
+ * Basic tests for SavedSearch
+ */
+@SuppressWarnings("unused")
+public class SavedSearchTest {
+
+    // test unique primary key
+    @Test
+    public void newInstanceHasNoPrimaryKey() {
+        SavedSearch model = new SavedSearch();
+        assertThat(model.isIdSet()).isFalse();
+    }
+
+    @Test
+    public void isIdSetReturnsTrue() {
+        SavedSearch model = new SavedSearch();
+        model.setId(ValueGenerator.getUniqueInteger());
+        assertThat(model.getId()).isNotNull();
+        assertThat(model.isIdSet()).isTrue();
+    }
+
+    //-------------------------------------------------------------
+    // Many to One:  SavedSearch.account ==> Account.id
+    //-------------------------------------------------------------
+
+    @Test
+    public void manyToOne_setAccount() {
+        SavedSearch many = new SavedSearch();
+
+        // init
+        Account one = new Account();
+        one.setId(ValueGenerator.getUniqueString(36));
+        many.setAccount(one);
+
+        // make sure it is propagated properly
+        assertThat(many.getAccount()).isEqualTo(one);
+
+        // now set it to back to null
+        many.setAccount(null);
+
+        // make sure null is propagated properly
+        assertThat(many.getAccount()).isNull();
+    }
+
+    /*
+     public void equalsUsingPk() {
+     SavedSearch model1 = new SavedSearch();
+     SavedSearch model2 = new SavedSearch();
+
+     Integer id = ValueGenerator.getUniqueInteger();
+     model1.setId(id);
+     model2.setId(id);
+
+     model1.setName("a");
+     model2.setName("a");
+
+     model1.setFormClassname("a");
+     model2.setFormClassname("a");
+
+     model1.setFormContent("dummy".getBytes());
+     model2.setFormContent("dummy".getBytes());
+     assertThat(model1.isIdSet()).isTrue();
+     assertThat(model2.isIdSet()).isTrue();
+     assertThat(model1.hashCode()).isEqualTo(model2.hashCode());
+     assertThat(model1).isEqualTo(model2);
+     assertThat(model2).isEqualTo(model1);
+     }
+     */
+}
\ No newline at end of file
diff --git a/src/test/generated-java/com/h2/demo/repository/AccountGenerator.java b/src/test/generated-java/com/h2/demo/repository/AccountGenerator.java
new file mode 100644
index 0000000..8ee3cf4
--- /dev/null
+++ b/src/test/generated-java/com/h2/demo/repository/AccountGenerator.java
@@ -0,0 +1,50 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-backend-jpa:src/test/java/service/ModelGenerator.e.vm.java
+ */
+package com.h2.demo.repository;
+
+import java.util.Date;
+
+import javax.inject.Named;
+import javax.inject.Singleton;
+
+import com.h2.demo.domain.Account;
+import com.h2.demo.util.ValueGenerator;
+
+/**
+ * Helper class to create transient entities instance for testing purposes.
+ * Simple properties are pre-filled with random values.
+ */
+@Named
+@Singleton
+public class AccountGenerator {
+
+    /**
+     * Returns a new Account instance filled with random values.
+     */
+    public Account getAccount() {
+        Account account = new Account();
+
+        // simple attributes follows
+        account.setLogin(ValueGenerator.getUniqueString(100));
+        account.setPassword("a");
+        account.setEmail(ValueGenerator.getUniqueEmail());
+        account.setIsEnabled(true);
+        account.setCivility("dd");
+        account.setFirstName("a");
+        account.setLastName("a");
+        account.setBirthDate(new Date());
+        account.setDescription("a");
+        account.setCreationDate(new Date());
+        account.setCreationAuthor("a");
+        account.setLastModificationDate(new Date());
+        account.setLastModificationAuthor("a");
+        return account;
+    }
+
+}
\ No newline at end of file
diff --git a/src/test/generated-java/com/h2/demo/repository/AccountRepositoryIT.java b/src/test/generated-java/com/h2/demo/repository/AccountRepositoryIT.java
new file mode 100644
index 0000000..a5dd748
--- /dev/null
+++ b/src/test/generated-java/com/h2/demo/repository/AccountRepositoryIT.java
@@ -0,0 +1,145 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-backend-jpa:src/test/java/service/RepositoryIT.e.vm.java
+ */
+package com.h2.demo.repository;
+
+import static com.google.common.collect.Sets.newHashSet;
+import static com.h2.demo.repository.support.PropertySelector.newPropertySelector;
+import static org.fest.assertions.Assertions.assertThat;
+import static org.junit.Assert.fail;
+
+import java.io.ByteArrayInputStream;
+import java.io.ByteArrayOutputStream;
+import java.util.List;
+import java.util.Set;
+
+import javax.inject.Inject;
+import javax.persistence.EntityManager;
+import javax.persistence.PersistenceContext;
+
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+import org.springframework.core.serializer.DefaultDeserializer;
+import org.springframework.core.serializer.DefaultSerializer;
+import org.springframework.test.annotation.Rollback;
+import org.springframework.test.context.ContextConfiguration;
+import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
+import org.springframework.transaction.annotation.Transactional;
+
+import com.h2.demo.domain.Account;
+import com.h2.demo.domain.Account_;
+import com.h2.demo.repository.support.SearchParameters;
+
+/**
+ * Integration test on AccountRepository
+ */
+@RunWith(SpringJUnit4ClassRunner.class)
+@ContextConfiguration(locations = { "classpath*:spring/applicationContext-test.xml" })
+@Transactional
+public class AccountRepositoryIT {
+    @SuppressWarnings("unused")
+    private static final Logger log = LoggerFactory.getLogger(AccountRepositoryIT.class);
+
+    @PersistenceContext
+    private EntityManager entityManager;
+
+    @Inject
+    private AccountRepository accountRepository;
+
+    @Inject
+    private AccountGenerator accountGenerator;
+
+    @Test
+    @Rollback
+    public void saveAndGet() {
+        Account account = accountGenerator.getAccount();
+
+        // add it to a Set before saving (force equals/hashcode)
+        Set<Account> set = newHashSet(account, account);
+        assertThat(set).hasSize(1);
+
+        accountRepository.save(account);
+        entityManager.flush();
+
+        // reload it from cache and check equality
+        Account model = new Account();
+        model.setId(account.getId());
+        assertThat(account).isEqualTo(accountRepository.get(model));
+
+        // clear cache to force reload from db
+        entityManager.clear();
+
+        // since you use a business key, equality must be preserved.
+        assertThat(account).isEqualTo(accountRepository.get(model));
+    }
+
+    @Test
+    @Rollback
+    public void saveAndGetWithPropertySelector() {
+        Account account = accountGenerator.getAccount();
+
+        // add it to a Set before saving (force equals/hashcode)
+        Set<Account> set = newHashSet(account, account);
+        assertThat(set).hasSize(1);
+
+        accountRepository.save(account);
+        entityManager.flush();
+
+        // reload it from cache and check equality
+        SearchParameters searchParameters = new SearchParameters();
+        searchParameters.property(newPropertySelector(Account_.id).selected(account.getId()));
+
+        // clear cache to force reload from db
+        entityManager.clear();
+
+        SearchParameters ser = null;
+        try {
+            ByteArrayOutputStream stream = new ByteArrayOutputStream();
+            new DefaultSerializer().serialize(searchParameters, stream);
+            byte[] bytes = stream.toByteArray();
+            ser = (SearchParameters) new DefaultDeserializer().deserialize(new ByteArrayInputStream(bytes));
+        } catch (Exception e) {
+            fail();
+        }
+
+        // pk are equals...
+        assertThat(account).isEqualTo(accountRepository.findUnique(ser));
+    }
+
+    @Test
+    @Rollback
+    public void saveAndGetWithExplicitNullPropertySelector() {
+        Account account = accountGenerator.getAccount();
+
+        // add it to a Set before saving (force equals/hashcode)
+        Set<Account> set = newHashSet(account, account);
+        assertThat(set).hasSize(1);
+
+        // explicitly set toOne relationship to null
+        account.setAddress(null);
+
+        accountRepository.save(account);
+        entityManager.flush();
+
+        // clear cache to force reload from db
+        entityManager.clear();
+
+        SearchParameters searchParameters = new SearchParameters() //
+                .caseInsensitive() //
+                .anywhere() //
+                .property(Account_.address, (Object) null);
+
+        List<Account> elements = accountRepository.find(searchParameters);
+        assertThat(elements).isNotEmpty();
+        for (Account element : elements) {
+            assertThat(element.getAddress()).isNull();
+        }
+    }
+}
\ No newline at end of file
diff --git a/src/test/generated-java/com/h2/demo/repository/AddressGenerator.java b/src/test/generated-java/com/h2/demo/repository/AddressGenerator.java
new file mode 100644
index 0000000..205246e
--- /dev/null
+++ b/src/test/generated-java/com/h2/demo/repository/AddressGenerator.java
@@ -0,0 +1,36 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-backend-jpa:src/test/java/service/ModelGenerator.e.vm.java
+ */
+package com.h2.demo.repository;
+
+import javax.inject.Named;
+import javax.inject.Singleton;
+
+import com.h2.demo.domain.Address;
+
+/**
+ * Helper class to create transient entities instance for testing purposes.
+ * Simple properties are pre-filled with random values.
+ */
+@Named
+@Singleton
+public class AddressGenerator {
+
+    /**
+     * Returns a new Address instance filled with random values.
+     */
+    public Address getAddress() {
+        Address address = new Address();
+
+        // simple attributes follows
+        address.setStreetName("a");
+        address.setCity("a");
+        return address;
+    }
+
+}
\ No newline at end of file
diff --git a/src/test/generated-java/com/h2/demo/repository/AddressRepositoryIT.java b/src/test/generated-java/com/h2/demo/repository/AddressRepositoryIT.java
new file mode 100644
index 0000000..6892e3a
--- /dev/null
+++ b/src/test/generated-java/com/h2/demo/repository/AddressRepositoryIT.java
@@ -0,0 +1,77 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-backend-jpa:src/test/java/service/RepositoryIT.e.vm.java
+ */
+package com.h2.demo.repository;
+
+import static com.google.common.collect.Sets.newHashSet;
+import static org.fest.assertions.Assertions.assertThat;
+
+import java.util.Set;
+
+import javax.inject.Inject;
+import javax.persistence.EntityManager;
+import javax.persistence.PersistenceContext;
+
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+import org.springframework.test.annotation.Rollback;
+import org.springframework.test.context.ContextConfiguration;
+import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
+import org.springframework.transaction.annotation.Transactional;
+
+import com.h2.demo.domain.Address;
+
+/**
+ * Integration test on AddressRepository
+ */
+@RunWith(SpringJUnit4ClassRunner.class)
+@ContextConfiguration(locations = { "classpath*:spring/applicationContext-test.xml" })
+@Transactional
+public class AddressRepositoryIT {
+    @SuppressWarnings("unused")
+    private static final Logger log = LoggerFactory.getLogger(AddressRepositoryIT.class);
+
+    @PersistenceContext
+    private EntityManager entityManager;
+
+    @Inject
+    private AddressRepository addressRepository;
+
+    @Inject
+    private AddressGenerator addressGenerator;
+
+    @Test
+    @Rollback
+    public void saveAndGet() {
+        Address address = addressGenerator.getAddress();
+
+        // add it to a Set before saving (force equals/hashcode)
+        Set<Address> set = newHashSet(address, address);
+        assertThat(set).hasSize(1);
+
+        addressRepository.save(address);
+        entityManager.flush();
+
+        // reload it from cache and check equality
+        Address model = new Address();
+        model.setId(address.getId());
+        assertThat(address).isEqualTo(addressRepository.get(model));
+
+        // clear cache to force reload from db
+        entityManager.clear();
+
+        // pk are equals...
+        assertThat(address.getId()).isEqualTo(addressRepository.get(model).getId());
+
+        // but since you do not use a business key, equality is lost.
+        assertThat(address).isNotEqualTo(addressRepository.get(model));
+    }
+
+}
\ No newline at end of file
diff --git a/src/test/generated-java/com/h2/demo/repository/AuditLogGenerator.java b/src/test/generated-java/com/h2/demo/repository/AuditLogGenerator.java
new file mode 100644
index 0000000..87c7719
--- /dev/null
+++ b/src/test/generated-java/com/h2/demo/repository/AuditLogGenerator.java
@@ -0,0 +1,42 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-backend-jpa:src/test/java/service/ModelGenerator.e.vm.java
+ */
+package com.h2.demo.repository;
+
+import java.util.Date;
+
+import javax.inject.Named;
+import javax.inject.Singleton;
+
+import com.h2.demo.domain.AuditLog;
+
+/**
+ * Helper class to create transient entities instance for testing purposes.
+ * Simple properties are pre-filled with random values.
+ */
+@Named
+@Singleton
+public class AuditLogGenerator {
+
+    /**
+     * Returns a new AuditLog instance filled with random values.
+     */
+    public AuditLog getAuditLog() {
+        AuditLog auditLog = new AuditLog();
+
+        // simple attributes follows
+        auditLog.setAuthor("a");
+        auditLog.setEvent("a");
+        auditLog.setEventDate(new Date());
+        auditLog.setStringAttribute1("a");
+        auditLog.setStringAttribute2("a");
+        auditLog.setStringAttribute3("a");
+        return auditLog;
+    }
+
+}
\ No newline at end of file
diff --git a/src/test/generated-java/com/h2/demo/repository/AuditLogRepositoryIT.java b/src/test/generated-java/com/h2/demo/repository/AuditLogRepositoryIT.java
new file mode 100644
index 0000000..38a2a9a
--- /dev/null
+++ b/src/test/generated-java/com/h2/demo/repository/AuditLogRepositoryIT.java
@@ -0,0 +1,77 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-backend-jpa:src/test/java/service/RepositoryIT.e.vm.java
+ */
+package com.h2.demo.repository;
+
+import static com.google.common.collect.Sets.newHashSet;
+import static org.fest.assertions.Assertions.assertThat;
+
+import java.util.Set;
+
+import javax.inject.Inject;
+import javax.persistence.EntityManager;
+import javax.persistence.PersistenceContext;
+
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+import org.springframework.test.annotation.Rollback;
+import org.springframework.test.context.ContextConfiguration;
+import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
+import org.springframework.transaction.annotation.Transactional;
+
+import com.h2.demo.domain.AuditLog;
+
+/**
+ * Integration test on AuditLogRepository
+ */
+@RunWith(SpringJUnit4ClassRunner.class)
+@ContextConfiguration(locations = { "classpath*:spring/applicationContext-test.xml" })
+@Transactional
+public class AuditLogRepositoryIT {
+    @SuppressWarnings("unused")
+    private static final Logger log = LoggerFactory.getLogger(AuditLogRepositoryIT.class);
+
+    @PersistenceContext
+    private EntityManager entityManager;
+
+    @Inject
+    private AuditLogRepository auditLogRepository;
+
+    @Inject
+    private AuditLogGenerator auditLogGenerator;
+
+    @Test
+    @Rollback
+    public void saveAndGet() {
+        AuditLog auditLog = auditLogGenerator.getAuditLog();
+
+        // add it to a Set before saving (force equals/hashcode)
+        Set<AuditLog> set = newHashSet(auditLog, auditLog);
+        assertThat(set).hasSize(1);
+
+        auditLogRepository.save(auditLog);
+        entityManager.flush();
+
+        // reload it from cache and check equality
+        AuditLog model = new AuditLog();
+        model.setId(auditLog.getId());
+        assertThat(auditLog).isEqualTo(auditLogRepository.get(model));
+
+        // clear cache to force reload from db
+        entityManager.clear();
+
+        // pk are equals...
+        assertThat(auditLog.getId()).isEqualTo(auditLogRepository.get(model).getId());
+
+        // but since you do not use a business key, equality is lost.
+        assertThat(auditLog).isNotEqualTo(auditLogRepository.get(model));
+    }
+
+}
\ No newline at end of file
diff --git a/src/test/generated-java/com/h2/demo/repository/BookGenerator.java b/src/test/generated-java/com/h2/demo/repository/BookGenerator.java
new file mode 100644
index 0000000..70c50ba
--- /dev/null
+++ b/src/test/generated-java/com/h2/demo/repository/BookGenerator.java
@@ -0,0 +1,36 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-backend-jpa:src/test/java/service/ModelGenerator.e.vm.java
+ */
+package com.h2.demo.repository;
+
+import javax.inject.Named;
+import javax.inject.Singleton;
+
+import com.h2.demo.domain.Book;
+
+/**
+ * Helper class to create transient entities instance for testing purposes.
+ * Simple properties are pre-filled with random values.
+ */
+@Named
+@Singleton
+public class BookGenerator {
+
+    /**
+     * Returns a new Book instance filled with random values.
+     */
+    public Book getBook() {
+        Book book = new Book();
+
+        // simple attributes follows
+        book.setTitle("a");
+        book.setNumberOfPages(1);
+        return book;
+    }
+
+}
\ No newline at end of file
diff --git a/src/test/generated-java/com/h2/demo/repository/BookRepositoryIT.java b/src/test/generated-java/com/h2/demo/repository/BookRepositoryIT.java
new file mode 100644
index 0000000..49c23cd
--- /dev/null
+++ b/src/test/generated-java/com/h2/demo/repository/BookRepositoryIT.java
@@ -0,0 +1,109 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-backend-jpa:src/test/java/service/RepositoryIT.e.vm.java
+ */
+package com.h2.demo.repository;
+
+import static com.google.common.collect.Sets.newHashSet;
+import static org.fest.assertions.Assertions.assertThat;
+
+import java.util.List;
+import java.util.Set;
+
+import javax.inject.Inject;
+import javax.persistence.EntityManager;
+import javax.persistence.PersistenceContext;
+
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+import org.springframework.test.annotation.Rollback;
+import org.springframework.test.context.ContextConfiguration;
+import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
+import org.springframework.transaction.annotation.Transactional;
+
+import com.h2.demo.domain.Book;
+import com.h2.demo.domain.Book_;
+import com.h2.demo.repository.support.SearchParameters;
+
+/**
+ * Integration test on BookRepository
+ */
+@RunWith(SpringJUnit4ClassRunner.class)
+@ContextConfiguration(locations = { "classpath*:spring/applicationContext-test.xml" })
+@Transactional
+public class BookRepositoryIT {
+    @SuppressWarnings("unused")
+    private static final Logger log = LoggerFactory.getLogger(BookRepositoryIT.class);
+
+    @PersistenceContext
+    private EntityManager entityManager;
+
+    @Inject
+    private BookRepository bookRepository;
+
+    @Inject
+    private BookGenerator bookGenerator;
+
+    @Test
+    @Rollback
+    public void saveAndGet() {
+        Book book = bookGenerator.getBook();
+
+        // add it to a Set before saving (force equals/hashcode)
+        Set<Book> set = newHashSet(book, book);
+        assertThat(set).hasSize(1);
+
+        bookRepository.save(book);
+        entityManager.flush();
+
+        // reload it from cache and check equality
+        Book model = new Book();
+        model.setId(book.getId());
+        assertThat(book).isEqualTo(bookRepository.get(model));
+
+        // clear cache to force reload from db
+        entityManager.clear();
+
+        // pk are equals...
+        assertThat(book.getId()).isEqualTo(bookRepository.get(model).getId());
+
+        // but since you do not use a business key, equality is lost.
+        assertThat(book).isNotEqualTo(bookRepository.get(model));
+    }
+
+    @Test
+    @Rollback
+    public void saveAndGetWithExplicitNullPropertySelector() {
+        Book book = bookGenerator.getBook();
+
+        // add it to a Set before saving (force equals/hashcode)
+        Set<Book> set = newHashSet(book, book);
+        assertThat(set).hasSize(1);
+
+        // explicitly set toOne relationship to null
+        book.setAccount(null);
+
+        bookRepository.save(book);
+        entityManager.flush();
+
+        // clear cache to force reload from db
+        entityManager.clear();
+
+        SearchParameters searchParameters = new SearchParameters() //
+                .caseInsensitive() //
+                .anywhere() //
+                .property(Book_.account, (Object) null);
+
+        List<Book> elements = bookRepository.find(searchParameters);
+        assertThat(elements).isNotEmpty();
+        for (Book element : elements) {
+            assertThat(element.getAccount()).isNull();
+        }
+    }
+}
\ No newline at end of file
diff --git a/src/test/generated-java/com/h2/demo/repository/DocumentGenerator.java b/src/test/generated-java/com/h2/demo/repository/DocumentGenerator.java
new file mode 100644
index 0000000..01f67b6
--- /dev/null
+++ b/src/test/generated-java/com/h2/demo/repository/DocumentGenerator.java
@@ -0,0 +1,48 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-backend-jpa:src/test/java/service/ModelGenerator.e.vm.java
+ */
+package com.h2.demo.repository;
+
+import javax.inject.Inject;
+import javax.inject.Named;
+import javax.inject.Singleton;
+
+import com.h2.demo.domain.Account;
+import com.h2.demo.domain.Document;
+
+/**
+ * Helper class to create transient entities instance for testing purposes.
+ * Simple properties are pre-filled with random values.
+ */
+@Named
+@Singleton
+public class DocumentGenerator {
+
+    /**
+     * Returns a new Document instance filled with random values.
+     */
+    public Document getDocument() {
+        Document document = new Document();
+
+        // simple attributes follows
+        document.setDocumentBinary("dummy".getBytes());
+        document.setDocumentFileName("dummy.txt");
+        document.setDocumentContentType("application/text");
+        document.setDocumentSize(1);
+        // mandatory relation
+        Account account = accountGenerator.getAccount();
+        accountRepository.save(account);
+        document.setAccount(account);
+        return document;
+    }
+
+    @Inject
+    private AccountRepository accountRepository;
+    @Inject
+    private AccountGenerator accountGenerator;
+}
\ No newline at end of file
diff --git a/src/test/generated-java/com/h2/demo/repository/DocumentRepositoryIT.java b/src/test/generated-java/com/h2/demo/repository/DocumentRepositoryIT.java
new file mode 100644
index 0000000..54e6c60
--- /dev/null
+++ b/src/test/generated-java/com/h2/demo/repository/DocumentRepositoryIT.java
@@ -0,0 +1,77 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-backend-jpa:src/test/java/service/RepositoryIT.e.vm.java
+ */
+package com.h2.demo.repository;
+
+import static com.google.common.collect.Sets.newHashSet;
+import static org.fest.assertions.Assertions.assertThat;
+
+import java.util.Set;
+
+import javax.inject.Inject;
+import javax.persistence.EntityManager;
+import javax.persistence.PersistenceContext;
+
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+import org.springframework.test.annotation.Rollback;
+import org.springframework.test.context.ContextConfiguration;
+import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
+import org.springframework.transaction.annotation.Transactional;
+
+import com.h2.demo.domain.Document;
+
+/**
+ * Integration test on DocumentRepository
+ */
+@RunWith(SpringJUnit4ClassRunner.class)
+@ContextConfiguration(locations = { "classpath*:spring/applicationContext-test.xml" })
+@Transactional
+public class DocumentRepositoryIT {
+    @SuppressWarnings("unused")
+    private static final Logger log = LoggerFactory.getLogger(DocumentRepositoryIT.class);
+
+    @PersistenceContext
+    private EntityManager entityManager;
+
+    @Inject
+    private DocumentRepository documentRepository;
+
+    @Inject
+    private DocumentGenerator documentGenerator;
+
+    @Test
+    @Rollback
+    public void saveAndGet() {
+        Document document = documentGenerator.getDocument();
+
+        // add it to a Set before saving (force equals/hashcode)
+        Set<Document> set = newHashSet(document, document);
+        assertThat(set).hasSize(1);
+
+        documentRepository.save(document);
+        entityManager.flush();
+
+        // reload it from cache and check equality
+        Document model = new Document();
+        model.setId(document.getId());
+        assertThat(document).isEqualTo(documentRepository.get(model));
+
+        // clear cache to force reload from db
+        entityManager.clear();
+
+        // pk are equals...
+        assertThat(document.getId()).isEqualTo(documentRepository.get(model).getId());
+
+        // but since you do not use a business key, equality is lost.
+        assertThat(document).isNotEqualTo(documentRepository.get(model));
+    }
+
+}
\ No newline at end of file
diff --git a/src/test/generated-java/com/h2/demo/repository/LegacyGenerator.java b/src/test/generated-java/com/h2/demo/repository/LegacyGenerator.java
new file mode 100644
index 0000000..38c03cb
--- /dev/null
+++ b/src/test/generated-java/com/h2/demo/repository/LegacyGenerator.java
@@ -0,0 +1,39 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-backend-jpa:src/test/java/service/ModelGenerator.e.vm.java
+ */
+package com.h2.demo.repository;
+
+import javax.inject.Named;
+import javax.inject.Singleton;
+
+import com.h2.demo.domain.Legacy;
+import com.h2.demo.util.ValueGenerator;
+
+/**
+ * Helper class to create transient entities instance for testing purposes.
+ * Simple properties are pre-filled with random values.
+ */
+@Named
+@Singleton
+public class LegacyGenerator {
+
+    /**
+     * Returns a new Legacy instance filled with random values.
+     */
+    public Legacy getLegacy() {
+        Legacy legacy = new Legacy();
+
+        legacy.getId().setCode(ValueGenerator.getUniqueString(8));
+        legacy.getId().setDept(ValueGenerator.getUniqueInteger());
+        legacy.getId().setName(ValueGenerator.getUniqueString(16));
+        // simple attributes follows
+        legacy.setExtraInfo("a");
+        return legacy;
+    }
+
+}
\ No newline at end of file
diff --git a/src/test/generated-java/com/h2/demo/repository/LegacyRepositoryIT.java b/src/test/generated-java/com/h2/demo/repository/LegacyRepositoryIT.java
new file mode 100644
index 0000000..fbed08e
--- /dev/null
+++ b/src/test/generated-java/com/h2/demo/repository/LegacyRepositoryIT.java
@@ -0,0 +1,74 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-backend-jpa:src/test/java/service/RepositoryIT.e.vm.java
+ */
+package com.h2.demo.repository;
+
+import static com.google.common.collect.Sets.newHashSet;
+import static org.fest.assertions.Assertions.assertThat;
+
+import java.util.Set;
+
+import javax.inject.Inject;
+import javax.persistence.EntityManager;
+import javax.persistence.PersistenceContext;
+
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+import org.springframework.test.annotation.Rollback;
+import org.springframework.test.context.ContextConfiguration;
+import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
+import org.springframework.transaction.annotation.Transactional;
+
+import com.h2.demo.domain.Legacy;
+
+/**
+ * Integration test on LegacyRepository
+ */
+@RunWith(SpringJUnit4ClassRunner.class)
+@ContextConfiguration(locations = { "classpath*:spring/applicationContext-test.xml" })
+@Transactional
+public class LegacyRepositoryIT {
+    @SuppressWarnings("unused")
+    private static final Logger log = LoggerFactory.getLogger(LegacyRepositoryIT.class);
+
+    @PersistenceContext
+    private EntityManager entityManager;
+
+    @Inject
+    private LegacyRepository legacyRepository;
+
+    @Inject
+    private LegacyGenerator legacyGenerator;
+
+    @Test
+    @Rollback
+    public void saveAndGet() {
+        Legacy legacy = legacyGenerator.getLegacy();
+
+        // add it to a Set before saving (force equals/hashcode)
+        Set<Legacy> set = newHashSet(legacy, legacy);
+        assertThat(set).hasSize(1);
+
+        legacyRepository.save(legacy);
+        entityManager.flush();
+
+        // reload it from cache and check equality
+        Legacy model = new Legacy();
+        model.setId(legacy.getId());
+        assertThat(legacy).isEqualTo(legacyRepository.get(model));
+
+        // clear cache to force reload from db
+        entityManager.clear();
+
+        // since you use a business key, equality must be preserved.
+        assertThat(legacy).isEqualTo(legacyRepository.get(model));
+    }
+
+}
\ No newline at end of file
diff --git a/src/test/generated-java/com/h2/demo/repository/MoreTypesDemoGenerator.java b/src/test/generated-java/com/h2/demo/repository/MoreTypesDemoGenerator.java
new file mode 100644
index 0000000..2aa8780
--- /dev/null
+++ b/src/test/generated-java/com/h2/demo/repository/MoreTypesDemoGenerator.java
@@ -0,0 +1,48 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-backend-jpa:src/test/java/service/ModelGenerator.e.vm.java
+ */
+package com.h2.demo.repository;
+
+import java.math.BigDecimal;
+import java.math.BigInteger;
+import java.util.Date;
+
+import javax.inject.Named;
+import javax.inject.Singleton;
+
+import com.h2.demo.domain.MoreTypesDemo;
+
+/**
+ * Helper class to create transient entities instance for testing purposes.
+ * Simple properties are pre-filled with random values.
+ */
+@Named
+@Singleton
+public class MoreTypesDemoGenerator {
+
+    /**
+     * Returns a new MoreTypesDemo instance filled with random values.
+     */
+    public MoreTypesDemo getMoreTypesDemo() {
+        MoreTypesDemo moreTypesDemo = new MoreTypesDemo();
+
+        // simple attributes follows
+        moreTypesDemo.setNumberInt(1);
+        moreTypesDemo.setNumberLong(1l);
+        moreTypesDemo.setNumberDouble(1d);
+        moreTypesDemo.setNumberFloat(1f);
+        moreTypesDemo.setNumberBigInteger(BigInteger.ONE);
+        moreTypesDemo.setNumberBigDecimal(BigDecimal.ONE);
+        moreTypesDemo.setDateJavaTemporalDate(new Date());
+        moreTypesDemo.setDateJavaTemporalTimestamp(new Date());
+        moreTypesDemo.setDateJoda(new Date());
+        moreTypesDemo.setDateTimeJoda(new Date());
+        return moreTypesDemo;
+    }
+
+}
\ No newline at end of file
diff --git a/src/test/generated-java/com/h2/demo/repository/MoreTypesDemoRepositoryIT.java b/src/test/generated-java/com/h2/demo/repository/MoreTypesDemoRepositoryIT.java
new file mode 100644
index 0000000..95768c0
--- /dev/null
+++ b/src/test/generated-java/com/h2/demo/repository/MoreTypesDemoRepositoryIT.java
@@ -0,0 +1,77 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-backend-jpa:src/test/java/service/RepositoryIT.e.vm.java
+ */
+package com.h2.demo.repository;
+
+import static com.google.common.collect.Sets.newHashSet;
+import static org.fest.assertions.Assertions.assertThat;
+
+import java.util.Set;
+
+import javax.inject.Inject;
+import javax.persistence.EntityManager;
+import javax.persistence.PersistenceContext;
+
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+import org.springframework.test.annotation.Rollback;
+import org.springframework.test.context.ContextConfiguration;
+import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
+import org.springframework.transaction.annotation.Transactional;
+
+import com.h2.demo.domain.MoreTypesDemo;
+
+/**
+ * Integration test on MoreTypesDemoRepository
+ */
+@RunWith(SpringJUnit4ClassRunner.class)
+@ContextConfiguration(locations = { "classpath*:spring/applicationContext-test.xml" })
+@Transactional
+public class MoreTypesDemoRepositoryIT {
+    @SuppressWarnings("unused")
+    private static final Logger log = LoggerFactory.getLogger(MoreTypesDemoRepositoryIT.class);
+
+    @PersistenceContext
+    private EntityManager entityManager;
+
+    @Inject
+    private MoreTypesDemoRepository moreTypesDemoRepository;
+
+    @Inject
+    private MoreTypesDemoGenerator moreTypesDemoGenerator;
+
+    @Test
+    @Rollback
+    public void saveAndGet() {
+        MoreTypesDemo moreTypesDemo = moreTypesDemoGenerator.getMoreTypesDemo();
+
+        // add it to a Set before saving (force equals/hashcode)
+        Set<MoreTypesDemo> set = newHashSet(moreTypesDemo, moreTypesDemo);
+        assertThat(set).hasSize(1);
+
+        moreTypesDemoRepository.save(moreTypesDemo);
+        entityManager.flush();
+
+        // reload it from cache and check equality
+        MoreTypesDemo model = new MoreTypesDemo();
+        model.setId(moreTypesDemo.getId());
+        assertThat(moreTypesDemo).isEqualTo(moreTypesDemoRepository.get(model));
+
+        // clear cache to force reload from db
+        entityManager.clear();
+
+        // pk are equals...
+        assertThat(moreTypesDemo.getId()).isEqualTo(moreTypesDemoRepository.get(model).getId());
+
+        // but since you do not use a business key, equality is lost.
+        assertThat(moreTypesDemo).isNotEqualTo(moreTypesDemoRepository.get(model));
+    }
+
+}
\ No newline at end of file
diff --git a/src/test/generated-java/com/h2/demo/repository/RoleGenerator.java b/src/test/generated-java/com/h2/demo/repository/RoleGenerator.java
new file mode 100644
index 0000000..d48cf75
--- /dev/null
+++ b/src/test/generated-java/com/h2/demo/repository/RoleGenerator.java
@@ -0,0 +1,36 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-backend-jpa:src/test/java/service/ModelGenerator.e.vm.java
+ */
+package com.h2.demo.repository;
+
+import javax.inject.Named;
+import javax.inject.Singleton;
+
+import com.h2.demo.domain.Role;
+import com.h2.demo.util.ValueGenerator;
+
+/**
+ * Helper class to create transient entities instance for testing purposes.
+ * Simple properties are pre-filled with random values.
+ */
+@Named
+@Singleton
+public class RoleGenerator {
+
+    /**
+     * Returns a new Role instance filled with random values.
+     */
+    public Role getRole() {
+        Role role = new Role();
+
+        // simple attributes follows
+        role.setRoleName(ValueGenerator.getUniqueString(100));
+        return role;
+    }
+
+}
\ No newline at end of file
diff --git a/src/test/generated-java/com/h2/demo/repository/RoleRepositoryIT.java b/src/test/generated-java/com/h2/demo/repository/RoleRepositoryIT.java
new file mode 100644
index 0000000..f0190e5
--- /dev/null
+++ b/src/test/generated-java/com/h2/demo/repository/RoleRepositoryIT.java
@@ -0,0 +1,115 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-backend-jpa:src/test/java/service/RepositoryIT.e.vm.java
+ */
+package com.h2.demo.repository;
+
+import static com.google.common.collect.Sets.newHashSet;
+import static com.h2.demo.repository.support.PropertySelector.newPropertySelector;
+import static org.fest.assertions.Assertions.assertThat;
+import static org.junit.Assert.fail;
+
+import java.io.ByteArrayInputStream;
+import java.io.ByteArrayOutputStream;
+import java.util.Set;
+
+import javax.inject.Inject;
+import javax.persistence.EntityManager;
+import javax.persistence.PersistenceContext;
+
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+import org.springframework.core.serializer.DefaultDeserializer;
+import org.springframework.core.serializer.DefaultSerializer;
+import org.springframework.test.annotation.Rollback;
+import org.springframework.test.context.ContextConfiguration;
+import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
+import org.springframework.transaction.annotation.Transactional;
+
+import com.h2.demo.domain.Role;
+import com.h2.demo.domain.Role_;
+import com.h2.demo.repository.support.SearchParameters;
+
+/**
+ * Integration test on RoleRepository
+ */
+@RunWith(SpringJUnit4ClassRunner.class)
+@ContextConfiguration(locations = { "classpath*:spring/applicationContext-test.xml" })
+@Transactional
+public class RoleRepositoryIT {
+    @SuppressWarnings("unused")
+    private static final Logger log = LoggerFactory.getLogger(RoleRepositoryIT.class);
+
+    @PersistenceContext
+    private EntityManager entityManager;
+
+    @Inject
+    private RoleRepository roleRepository;
+
+    @Inject
+    private RoleGenerator roleGenerator;
+
+    @Test
+    @Rollback
+    public void saveAndGet() {
+        Role role = roleGenerator.getRole();
+
+        // add it to a Set before saving (force equals/hashcode)
+        Set<Role> set = newHashSet(role, role);
+        assertThat(set).hasSize(1);
+
+        roleRepository.save(role);
+        entityManager.flush();
+
+        // reload it from cache and check equality
+        Role model = new Role();
+        model.setId(role.getId());
+        assertThat(role).isEqualTo(roleRepository.get(model));
+
+        // clear cache to force reload from db
+        entityManager.clear();
+
+        // since you use a business key, equality must be preserved.
+        assertThat(role).isEqualTo(roleRepository.get(model));
+    }
+
+    @Test
+    @Rollback
+    public void saveAndGetWithPropertySelector() {
+        Role role = roleGenerator.getRole();
+
+        // add it to a Set before saving (force equals/hashcode)
+        Set<Role> set = newHashSet(role, role);
+        assertThat(set).hasSize(1);
+
+        roleRepository.save(role);
+        entityManager.flush();
+
+        // reload it from cache and check equality
+        SearchParameters searchParameters = new SearchParameters();
+        searchParameters.property(newPropertySelector(Role_.id).selected(role.getId()));
+
+        // clear cache to force reload from db
+        entityManager.clear();
+
+        SearchParameters ser = null;
+        try {
+            ByteArrayOutputStream stream = new ByteArrayOutputStream();
+            new DefaultSerializer().serialize(searchParameters, stream);
+            byte[] bytes = stream.toByteArray();
+            ser = (SearchParameters) new DefaultDeserializer().deserialize(new ByteArrayInputStream(bytes));
+        } catch (Exception e) {
+            fail();
+        }
+
+        // pk are equals...
+        assertThat(role).isEqualTo(roleRepository.findUnique(ser));
+    }
+
+}
\ No newline at end of file
diff --git a/src/test/generated-java/com/h2/demo/repository/SavedSearchGenerator.java b/src/test/generated-java/com/h2/demo/repository/SavedSearchGenerator.java
new file mode 100644
index 0000000..b0eddc5
--- /dev/null
+++ b/src/test/generated-java/com/h2/demo/repository/SavedSearchGenerator.java
@@ -0,0 +1,37 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-backend-jpa:src/test/java/service/ModelGenerator.e.vm.java
+ */
+package com.h2.demo.repository;
+
+import javax.inject.Named;
+import javax.inject.Singleton;
+
+import com.h2.demo.domain.SavedSearch;
+
+/**
+ * Helper class to create transient entities instance for testing purposes.
+ * Simple properties are pre-filled with random values.
+ */
+@Named
+@Singleton
+public class SavedSearchGenerator {
+
+    /**
+     * Returns a new SavedSearch instance filled with random values.
+     */
+    public SavedSearch getSavedSearch() {
+        SavedSearch savedSearch = new SavedSearch();
+
+        // simple attributes follows
+        savedSearch.setName("a");
+        savedSearch.setFormClassname("a");
+        savedSearch.setFormContent("dummy".getBytes());
+        return savedSearch;
+    }
+
+}
\ No newline at end of file
diff --git a/src/test/generated-java/com/h2/demo/repository/SavedSearchRepositoryIT.java b/src/test/generated-java/com/h2/demo/repository/SavedSearchRepositoryIT.java
new file mode 100644
index 0000000..b1486ab
--- /dev/null
+++ b/src/test/generated-java/com/h2/demo/repository/SavedSearchRepositoryIT.java
@@ -0,0 +1,109 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-backend-jpa:src/test/java/service/RepositoryIT.e.vm.java
+ */
+package com.h2.demo.repository;
+
+import static com.google.common.collect.Sets.newHashSet;
+import static org.fest.assertions.Assertions.assertThat;
+
+import java.util.List;
+import java.util.Set;
+
+import javax.inject.Inject;
+import javax.persistence.EntityManager;
+import javax.persistence.PersistenceContext;
+
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+import org.springframework.test.annotation.Rollback;
+import org.springframework.test.context.ContextConfiguration;
+import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
+import org.springframework.transaction.annotation.Transactional;
+
+import com.h2.demo.domain.SavedSearch;
+import com.h2.demo.domain.SavedSearch_;
+import com.h2.demo.repository.support.SearchParameters;
+
+/**
+ * Integration test on SavedSearchRepository
+ */
+@RunWith(SpringJUnit4ClassRunner.class)
+@ContextConfiguration(locations = { "classpath*:spring/applicationContext-test.xml" })
+@Transactional
+public class SavedSearchRepositoryIT {
+    @SuppressWarnings("unused")
+    private static final Logger log = LoggerFactory.getLogger(SavedSearchRepositoryIT.class);
+
+    @PersistenceContext
+    private EntityManager entityManager;
+
+    @Inject
+    private SavedSearchRepository savedSearchRepository;
+
+    @Inject
+    private SavedSearchGenerator savedSearchGenerator;
+
+    @Test
+    @Rollback
+    public void saveAndGet() {
+        SavedSearch savedSearch = savedSearchGenerator.getSavedSearch();
+
+        // add it to a Set before saving (force equals/hashcode)
+        Set<SavedSearch> set = newHashSet(savedSearch, savedSearch);
+        assertThat(set).hasSize(1);
+
+        savedSearchRepository.save(savedSearch);
+        entityManager.flush();
+
+        // reload it from cache and check equality
+        SavedSearch model = new SavedSearch();
+        model.setId(savedSearch.getId());
+        assertThat(savedSearch).isEqualTo(savedSearchRepository.get(model));
+
+        // clear cache to force reload from db
+        entityManager.clear();
+
+        // pk are equals...
+        assertThat(savedSearch.getId()).isEqualTo(savedSearchRepository.get(model).getId());
+
+        // but since you do not use a business key, equality is lost.
+        assertThat(savedSearch).isNotEqualTo(savedSearchRepository.get(model));
+    }
+
+    @Test
+    @Rollback
+    public void saveAndGetWithExplicitNullPropertySelector() {
+        SavedSearch savedSearch = savedSearchGenerator.getSavedSearch();
+
+        // add it to a Set before saving (force equals/hashcode)
+        Set<SavedSearch> set = newHashSet(savedSearch, savedSearch);
+        assertThat(set).hasSize(1);
+
+        // explicitly set toOne relationship to null
+        savedSearch.setAccount(null);
+
+        savedSearchRepository.save(savedSearch);
+        entityManager.flush();
+
+        // clear cache to force reload from db
+        entityManager.clear();
+
+        SearchParameters searchParameters = new SearchParameters() //
+                .caseInsensitive() //
+                .anywhere() //
+                .property(SavedSearch_.account, (Object) null);
+
+        List<SavedSearch> elements = savedSearchRepository.find(searchParameters);
+        assertThat(elements).isNotEmpty();
+        for (SavedSearch element : elements) {
+            assertThat(element.getAccount()).isNull();
+        }
+    }
+}
\ No newline at end of file
diff --git a/src/test/generated-java/com/h2/demo/repository/support/ByNamedQueryUtilIT.java b/src/test/generated-java/com/h2/demo/repository/support/ByNamedQueryUtilIT.java
new file mode 100644
index 0000000..fb98750
--- /dev/null
+++ b/src/test/generated-java/com/h2/demo/repository/support/ByNamedQueryUtilIT.java
@@ -0,0 +1,40 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-backend-jpa:src/test/java/repository/support/ByNamedQueryUtilIT.p.vm.java
+ */
+package com.h2.demo.repository.support;
+
+import static org.fest.assertions.Assertions.assertThat;
+
+import javax.inject.Inject;
+
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.springframework.test.context.ContextConfiguration;
+import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
+import org.springframework.transaction.annotation.Transactional;
+
+@RunWith(SpringJUnit4ClassRunner.class)
+@ContextConfiguration(locations = { "classpath*:spring/applicationContext-test.xml" })
+@Transactional
+public class ByNamedQueryUtilIT {
+
+    @Inject
+    private ByNamedQueryUtil byNamedQueryUtil;
+
+    @Test
+    public void allAccountsUsingNamedQuery() {
+        SearchParameters searchParameters = new SearchParameters().namedQuery("Account.selectAll");
+        assertThat(byNamedQueryUtil.findByNamedQuery(searchParameters)).hasSize(1);
+    }
+
+    @Test
+    public void allAccountsUsingNativeNamedQuery() {
+        SearchParameters searchParameters = new SearchParameters().namedQuery("Account.selectAll.native");
+        assertThat(byNamedQueryUtil.findByNamedQuery(searchParameters)).hasSize(1);
+    }
+}
\ No newline at end of file
diff --git a/src/test/generated-java/com/h2/demo/util/IntegrationSampleIT.java b/src/test/generated-java/com/h2/demo/util/IntegrationSampleIT.java
new file mode 100644
index 0000000..83f1d42
--- /dev/null
+++ b/src/test/generated-java/com/h2/demo/util/IntegrationSampleIT.java
@@ -0,0 +1,23 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-backend-jpa:src/test/java/util/IntegrationSampleIT.p.vm.java
+ */
+package com.h2.demo.util;
+
+import static org.fest.assertions.Assertions.assertThat;
+
+import org.junit.Test;
+
+/**
+ * Integration test executed by FailSafe plugin
+ */
+public class IntegrationSampleIT {
+    @Test
+    public void executedByFailSafePlugin() {
+        assertThat(true).isTrue();
+    }
+}
\ No newline at end of file
diff --git a/src/test/generated-java/com/h2/demo/util/ValueGenerator.java b/src/test/generated-java/com/h2/demo/util/ValueGenerator.java
new file mode 100644
index 0000000..0285e3a
--- /dev/null
+++ b/src/test/generated-java/com/h2/demo/util/ValueGenerator.java
@@ -0,0 +1,179 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-backend-jpa:src/test/java/util/ValueGenerator.p.vm.java
+ */
+package com.h2.demo.util;
+
+import java.math.BigDecimal;
+import java.math.BigInteger;
+import java.util.Calendar;
+import java.util.Date;
+import java.util.concurrent.atomic.AtomicInteger;
+
+/**
+ * Generate values for database tests
+ */
+public class ValueGenerator {
+
+    /**
+     * Get a min date
+     *
+     * @return the min date
+     */
+    public static Date getMinDate() {
+        Calendar cal = Calendar.getInstance();
+        cal.set(1970, 1, 1, 1, 1, 1);
+        return cal.getTime();
+    }
+
+    /**
+     * Get a max date
+     *
+     * @return the max date
+     */
+    public static Date getMaxDate() {
+        Calendar cal = Calendar.getInstance();
+        cal.set(2036, 12, 28, 23, 59, 59);
+        return cal.getTime();
+    }
+
+    private static final String MAX_STRING = "ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ";
+
+    /**
+     * Use for fill the bdd
+     * @param size
+     * @return a long dummy string
+     */
+    public static String getMaxString(int size) {
+        return MAX_STRING.substring(0, Math.min(size, MAX_STRING.length()));
+    }
+
+    private static final int NUM_CHARS = 32;
+    private static int[] lastString = new int[NUM_CHARS];
+    private static final String CHARS = "abcdefghijklmonpqrstuvwxyz";
+
+    /**
+     * Get a unique string
+     *
+     * @return the unique string
+     */
+    private static String getUniqueString() {
+        char[] buf = new char[NUM_CHARS];
+
+        carry(lastString, buf.length - 1);
+        for (int i = 0; i < buf.length; i++) {
+            buf[i] = CHARS.charAt(lastString[i]);
+        }
+        return new String(buf);
+    }
+
+    private static void carry(int[] ca, int index) {
+        if (ca[index] == (CHARS.length() - 1)) {
+            ca[index] = 0;
+            carry(ca, --index);
+        } else {
+            ca[index] = ca[index] + 1;
+        }
+    }
+
+    /**
+     * Get a unique string with length < maxLength
+     *
+     * @return the unique string
+     */
+    public static String getUniqueString(int maxLength) {
+        if (maxLength == 1) {
+            return String.valueOf(getUniqueChar());
+        }
+
+        if (maxLength < NUM_CHARS) {
+            return getUniqueString().substring(NUM_CHARS - maxLength);
+        }
+        return getUniqueString();
+    }
+
+    private static Calendar uniqueCal;
+
+    /**
+     * Get a unique date
+     * start in 1970 and day auto increment
+     * @return the unique date
+     */
+    synchronized public static Date getUniqueDate() {
+        if (uniqueCal == null) {
+            uniqueCal = Calendar.getInstance();
+            uniqueCal.set(1970, 1, 1, 1, 1, 1);
+        }
+        uniqueCal.add(Calendar.DAY_OF_MONTH, 1);
+        return uniqueCal.getTime();
+    }
+
+    /**
+     * Get a unique emain
+     * @return the unique mail
+     */
+    public static String getUniqueEmail() {
+        return "email" + getUniqueString(6) + "-" + getUniqueString(10) + "@domain" + getUniqueString(10) + ".com";
+    }
+
+    /**
+     * Get a unique bytes
+     * @return the unique bytes
+     */
+    public static byte[] getUniqueBytes(int maxSize) {
+        return getUniqueString(maxSize).getBytes();
+    }
+
+    private static AtomicInteger counter = new AtomicInteger();
+
+    public static Integer getUniqueInteger() {
+        return counter.incrementAndGet();
+    }
+
+    public static Long getUniqueLong() {
+        return new Long(counter.incrementAndGet());
+    }
+
+    public static Float getUniqueFloat() {
+        return new Float(counter.incrementAndGet());
+    }
+
+    public static Double getUniqueDouble() {
+        return new Double(counter.incrementAndGet());
+    }
+
+    public static BigInteger getUniqueBigInteger() {
+        return new BigInteger("" + counter.incrementAndGet());
+    }
+
+    public static BigDecimal getUniqueBigDecimal() {
+        return new BigDecimal(counter.incrementAndGet());
+    }
+
+    /**
+     * Get a unique char
+     *
+     * @return the unique char
+     */
+    public static char getUniqueChar() {
+        return CHARS.charAt(getNextPosition());
+    }
+
+    /**
+     * Get a unique byte
+     * @return the unique byte
+     */
+    public static byte getUniqueByte() {
+        return (byte) getUniqueChar();
+    }
+
+    private static AtomicInteger charPosition = new AtomicInteger();
+
+    private static int getNextPosition() {
+        return charPosition.incrementAndGet() % CHARS.length();
+    }
+}
\ No newline at end of file
diff --git a/src/test/generated-java/com/h2/demo/web/selenium/ErrorsIT.java b/src/test/generated-java/com/h2/demo/web/selenium/ErrorsIT.java
new file mode 100644
index 0000000..f8d6196
--- /dev/null
+++ b/src/test/generated-java/com/h2/demo/web/selenium/ErrorsIT.java
@@ -0,0 +1,56 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-selenium-primefaces:src/test/java/selenium/ErrorsIT.p.vm.java
+ */
+package com.h2.demo.web.selenium;
+
+import org.junit.Test;
+import org.openqa.selenium.WebElement;
+import org.openqa.selenium.support.FindBy;
+
+import com.h2.demo.web.selenium.page.HomePage;
+import com.h2.demo.web.selenium.support.Page;
+import com.h2.demo.web.selenium.support.SeleniumTest;
+
+public class ErrorsIT extends SeleniumTest {
+    @Test
+    public void invalidLoginOrPassword() {
+        englishHomePage();
+        webClient.step("Login as unknown_user, and verify it is not valid");
+        anonymousHomePage.connexion();
+        loginPage.login("unknownUser", "invalidPassword");
+        loginPage.hasMessage("Invalid credentials");
+    }
+
+    @Page
+    public static class AjaxErrors extends HomePage {
+        @FindBy(id = "form:debug_button")
+        public WebElement debugButton;
+        @FindBy(xpath = "//span[text()='Throw exception']")
+        public WebElement throwException;
+        @FindBy(xpath = "//span[text()='Throw data access exception']")
+        public WebElement throwDataAccessException;
+    }
+
+    AjaxErrors ajaxErrors;
+
+    @Test
+    public void catchException() {
+        englishHomePage();
+        webClient.click(ajaxErrors.debugButton);
+        webClient.click(ajaxErrors.throwException);
+        ajaxErrors.hasText("Just testing RuntimeException from ExceptionUtil");
+    }
+
+    @Test
+    public void catchDataException() {
+        englishHomePage();
+        webClient.click(ajaxErrors.debugButton);
+        webClient.click(ajaxErrors.throwDataAccessException);
+        ajaxErrors.hasMessage("We have detected a concurrent modification");
+    }
+}
diff --git a/src/test/generated-java/com/h2/demo/web/selenium/page/AnonymousHomePage.java b/src/test/generated-java/com/h2/demo/web/selenium/page/AnonymousHomePage.java
new file mode 100644
index 0000000..8a4066f
--- /dev/null
+++ b/src/test/generated-java/com/h2/demo/web/selenium/page/AnonymousHomePage.java
@@ -0,0 +1,24 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-selenium-primefaces:src/test/java/selenium/pages/AnonymousHomePage.p.vm.java
+ */
+package com.h2.demo.web.selenium.page;
+
+import org.openqa.selenium.WebElement;
+import org.openqa.selenium.support.FindBy;
+
+import com.h2.demo.web.selenium.support.Page;
+
+@Page
+public class AnonymousHomePage extends HomePage {
+    @FindBy(partialLinkText = "Login")
+    public WebElement connexionLink;
+
+    public void connexion() {
+        webClient.click(connexionLink);
+    }
+}
\ No newline at end of file
diff --git a/src/test/generated-java/com/h2/demo/web/selenium/page/HomePage.java b/src/test/generated-java/com/h2/demo/web/selenium/page/HomePage.java
new file mode 100644
index 0000000..04705c2
--- /dev/null
+++ b/src/test/generated-java/com/h2/demo/web/selenium/page/HomePage.java
@@ -0,0 +1,127 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-selenium-primefaces:src/test/java/selenium/pages/HomePage.p.vm.java
+ */
+package com.h2.demo.web.selenium.page;
+
+import org.openqa.selenium.WebElement;
+import org.openqa.selenium.support.FindBy;
+
+import com.h2.demo.web.selenium.support.Page;
+import com.h2.demo.web.selenium.support.WebClient;
+
+@Page
+public class HomePage {
+    @FindBy(id = "form:home_link")
+    public WebElement home;
+    @FindBy(id = "form:selectAccounts")
+    public WebElement accountsLink;
+    @FindBy(id = "form:selectAddresses")
+    public WebElement addressesLink;
+    @FindBy(id = "form:selectAuditLogs")
+    public WebElement auditLogsLink;
+    @FindBy(id = "form:selectBooks")
+    public WebElement booksLink;
+    @FindBy(id = "form:selectDocuments")
+    public WebElement documentsLink;
+    @FindBy(id = "form:selectLegacies")
+    public WebElement legaciesLink;
+    @FindBy(id = "form:selectMoreTypesDemos")
+    public WebElement moreTypesDemosLink;
+    @FindBy(id = "form:selectRoles")
+    public WebElement rolesLink;
+    @FindBy(id = "form:selectSavedSearchs")
+    public WebElement savedSearchsLink;
+    @FindBy(id = "form:switchToFrench")
+    public WebElement switchToFrench;
+    @FindBy(id = "form:switchToEnglish")
+    public WebElement switchToEnglish;
+    @FindBy(id = "form:messages")
+    public WebElement messagesPanel;
+
+    protected WebClient webClient;
+
+    public void home() {
+        webClient.click(home);
+    }
+
+    public void switchToEnglish() {
+        webClient.click(switchToEnglish);
+    }
+
+    public void switchToFrench() {
+        webClient.click(switchToFrench);
+    }
+
+    public void accounts() {
+        webClient.click(accountsLink);
+    }
+
+    public void addresses() {
+        webClient.click(addressesLink);
+    }
+
+    public void auditLogs() {
+        webClient.click(auditLogsLink);
+    }
+
+    public void books() {
+        webClient.click(booksLink);
+    }
+
+    public void documents() {
+        webClient.click(documentsLink);
+    }
+
+    public void legacies() {
+        webClient.click(legaciesLink);
+    }
+
+    public void moreTypesDemos() {
+        webClient.click(moreTypesDemosLink);
+    }
+
+    public void roles() {
+        webClient.click(rolesLink);
+    }
+
+    public void savedSearchs() {
+        webClient.click(savedSearchsLink);
+    }
+
+    public void hasText(String... values) {
+        for (String value : values) {
+            webClient.waitUntilTextIsPresent(value);
+        }
+    }
+
+    public void hasMessage(String... values) {
+        for (String value : values) {
+            webClient.waitUntilTextIsPresent(messagesPanel, value);
+        }
+    }
+
+    protected void clickEdit(String value) {
+        webClient.clickLinkTitle("Edit " + value);
+    }
+
+    protected void clickAdd(String value) {
+        webClient.clickLinkTitle("Add " + value);
+    }
+
+    protected void clickDelete(String value) {
+        webClient.clickLinkTitle("Delete " + value);
+    }
+
+    protected void clickRemove(String value) {
+        webClient.clickLinkTitle("Remove " + value);
+    }
+
+    protected void clickSelect(String value) {
+        webClient.clickLinkTitle("Select " + value);
+    }
+}
\ No newline at end of file
diff --git a/src/test/generated-java/com/h2/demo/web/selenium/page/LoggedHomePage.java b/src/test/generated-java/com/h2/demo/web/selenium/page/LoggedHomePage.java
new file mode 100644
index 0000000..989f427
--- /dev/null
+++ b/src/test/generated-java/com/h2/demo/web/selenium/page/LoggedHomePage.java
@@ -0,0 +1,24 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-selenium-primefaces:src/test/java/selenium/pages/LoggedHomePage.p.vm.java
+ */
+package com.h2.demo.web.selenium.page;
+
+import org.openqa.selenium.WebElement;
+import org.openqa.selenium.support.FindBy;
+
+import com.h2.demo.web.selenium.support.Page;
+
+@Page
+public class LoggedHomePage extends HomePage {
+    @FindBy(partialLinkText = "Logout")
+    public WebElement logoutLink;
+
+    public void logout() {
+        webClient.click(logoutLink);
+    }
+}
diff --git a/src/test/generated-java/com/h2/demo/web/selenium/page/LoginPage.java b/src/test/generated-java/com/h2/demo/web/selenium/page/LoginPage.java
new file mode 100644
index 0000000..a6201d9
--- /dev/null
+++ b/src/test/generated-java/com/h2/demo/web/selenium/page/LoginPage.java
@@ -0,0 +1,38 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-selenium-primefaces:src/test/java/selenium/pages/LoginPage.p.vm.java
+ */
+package com.h2.demo.web.selenium.page;
+
+import org.openqa.selenium.WebElement;
+import org.openqa.selenium.support.FindBy;
+
+import com.h2.demo.web.selenium.support.WebClient;
+import com.h2.demo.web.selenium.support.Page;
+
+@Page
+public class LoginPage {
+    @FindBy(id = "j_username")
+    public WebElement user;
+    @FindBy(id = "j_password")
+    public WebElement password;
+    @FindBy(id = "login")
+    public WebElement loginButton;
+    @FindBy(id = "loginMessages")
+    public WebElement loginMessages;
+    protected WebClient webClient;
+
+    public void login(String _user, String _password) {
+        webClient.fill(user, _user);
+        webClient.fill(password, _password);
+        webClient.click(loginButton);
+    }
+
+    public void hasMessage(String value) {
+        webClient.waitUntilTextIsPresent(loginMessages, value);
+    }
+}
\ No newline at end of file
diff --git a/src/test/generated-java/com/h2/demo/web/selenium/page/account/AccountEdit.java b/src/test/generated-java/com/h2/demo/web/selenium/page/account/AccountEdit.java
new file mode 100644
index 0000000..5a160c6
--- /dev/null
+++ b/src/test/generated-java/com/h2/demo/web/selenium/page/account/AccountEdit.java
@@ -0,0 +1,47 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-selenium-primefaces:src/test/java/selenium/pages/entity/EditPage.e.vm.java
+ */
+package com.h2.demo.web.selenium.page.account;
+
+import com.h2.demo.web.selenium.support.Page;
+import com.h2.demo.web.selenium.support.elements.Checkbox;
+import com.h2.demo.web.selenium.support.elements.CustomWebElement;
+import com.h2.demo.web.selenium.support.elements.DateInput;
+import com.h2.demo.web.selenium.support.elements.EditAction;
+import com.h2.demo.web.selenium.support.elements.EntityAction;
+import com.h2.demo.web.selenium.support.elements.Messages;
+import com.h2.demo.web.selenium.support.elements.NoInverseManyToOne;
+import com.h2.demo.web.selenium.support.elements.StringInput;
+import com.h2.demo.web.selenium.support.elements.Tab;
+
+@Page
+public class AccountEdit {
+    public EditAction action;
+    public Messages messages;
+    public EntityAction entity;
+    public AccountEditForm form;
+    public AccountEditTabs tabs;
+
+    public static class AccountEditForm extends CustomWebElement {
+        public StringInput login = new StringInput("form:login");
+        public StringInput password = new StringInput("form:password");
+        public StringInput email = new StringInput("form:email");
+        public Checkbox isEnabled = new Checkbox("form:isEnabled");
+        public StringInput civility = new StringInput("form:civility");
+        public StringInput firstName = new StringInput("form:firstName");
+        public StringInput lastName = new StringInput("form:lastName");
+        public DateInput birthDate = new DateInput("form:birthDate");
+        public StringInput description = new StringInput("form:description");
+
+        public NoInverseManyToOne address = new NoInverseManyToOne("form:address");
+    };
+
+    public static class AccountEditTabs extends CustomWebElement {
+        public Tab roles = new Tab("role", "roles");
+    };
+}
\ No newline at end of file
diff --git a/src/test/generated-java/com/h2/demo/web/selenium/page/account/AccountSearch.java b/src/test/generated-java/com/h2/demo/web/selenium/page/account/AccountSearch.java
new file mode 100644
index 0000000..01eaec7
--- /dev/null
+++ b/src/test/generated-java/com/h2/demo/web/selenium/page/account/AccountSearch.java
@@ -0,0 +1,56 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-selenium-primefaces:src/test/java/selenium/pages/entity/SearchPage.e.vm.java
+ */
+package com.h2.demo.web.selenium.page.account;
+
+import com.h2.demo.web.selenium.support.Page;
+import com.h2.demo.web.selenium.support.elements.Autocomplete;
+import com.h2.demo.web.selenium.support.elements.CustomWebElement;
+import com.h2.demo.web.selenium.support.elements.EntityAction;
+import com.h2.demo.web.selenium.support.elements.ManyBooleans;
+import com.h2.demo.web.selenium.support.elements.Messages;
+import com.h2.demo.web.selenium.support.elements.OrderBy;
+import com.h2.demo.web.selenium.support.elements.SearchForm;
+import com.h2.demo.web.selenium.support.elements.StringRange;
+import com.h2.demo.web.selenium.support.elements.Table;
+
+@Page
+public class AccountSearch {
+    public Table table;
+    public EntityAction entity;
+    public Messages messages;
+    public AccountSearchOrders orders;
+    public AccountSearchForm form;
+
+    public static class AccountSearchOrders extends CustomWebElement {
+        public OrderBy login = new OrderBy("account_login");
+        public OrderBy password = new OrderBy("account_password");
+        public OrderBy email = new OrderBy("account_email");
+        public OrderBy isEnabled = new OrderBy("account_isEnabled");
+        public OrderBy civility = new OrderBy("account_civility");
+        public OrderBy firstName = new OrderBy("account_firstName");
+        public OrderBy lastName = new OrderBy("account_lastName");
+        public OrderBy birthDate = new OrderBy("account_birthDate");
+        public OrderBy description = new OrderBy("account_description");
+        public OrderBy addressId = new OrderBy("account_addressId");
+    }
+
+    public static class AccountSearchForm extends SearchForm {
+        public Autocomplete login = new Autocomplete("form:login");
+        public Autocomplete password = new Autocomplete("form:password");
+        public Autocomplete email = new Autocomplete("form:email");
+        public ManyBooleans isEnabled = new ManyBooleans("form:isEnabled");
+        public Autocomplete civility = new Autocomplete("form:civility");
+        public Autocomplete firstName = new Autocomplete("form:firstName");
+        public Autocomplete lastName = new Autocomplete("form:lastName");
+        public StringRange birthDate = new StringRange("form:birthDate");
+        public Autocomplete description = new Autocomplete("form:description");
+        public Autocomplete address = new Autocomplete("form:addressSelector");
+        public Autocomplete roles = new Autocomplete("form:rolesSelector");
+    }
+}
\ No newline at end of file
diff --git a/src/test/generated-java/com/h2/demo/web/selenium/page/address/AddressEdit.java b/src/test/generated-java/com/h2/demo/web/selenium/page/address/AddressEdit.java
new file mode 100644
index 0000000..ea89757
--- /dev/null
+++ b/src/test/generated-java/com/h2/demo/web/selenium/page/address/AddressEdit.java
@@ -0,0 +1,33 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-selenium-primefaces:src/test/java/selenium/pages/entity/EditPage.e.vm.java
+ */
+package com.h2.demo.web.selenium.page.address;
+
+import com.h2.demo.web.selenium.support.Page;
+import com.h2.demo.web.selenium.support.elements.CustomWebElement;
+import com.h2.demo.web.selenium.support.elements.EditAction;
+import com.h2.demo.web.selenium.support.elements.EntityAction;
+import com.h2.demo.web.selenium.support.elements.Messages;
+import com.h2.demo.web.selenium.support.elements.StringInput;
+
+@Page
+public class AddressEdit {
+    public EditAction action;
+    public Messages messages;
+    public EntityAction entity;
+    public AddressEditForm form;
+    public AddressEditTabs tabs;
+
+    public static class AddressEditForm extends CustomWebElement {
+        public StringInput streetName = new StringInput("form:streetName");
+        public StringInput city = new StringInput("form:city");
+    };
+
+    public static class AddressEditTabs extends CustomWebElement {
+    };
+}
\ No newline at end of file
diff --git a/src/test/generated-java/com/h2/demo/web/selenium/page/address/AddressSearch.java b/src/test/generated-java/com/h2/demo/web/selenium/page/address/AddressSearch.java
new file mode 100644
index 0000000..2704219
--- /dev/null
+++ b/src/test/generated-java/com/h2/demo/web/selenium/page/address/AddressSearch.java
@@ -0,0 +1,37 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-selenium-primefaces:src/test/java/selenium/pages/entity/SearchPage.e.vm.java
+ */
+package com.h2.demo.web.selenium.page.address;
+
+import com.h2.demo.web.selenium.support.Page;
+import com.h2.demo.web.selenium.support.elements.Autocomplete;
+import com.h2.demo.web.selenium.support.elements.CustomWebElement;
+import com.h2.demo.web.selenium.support.elements.EntityAction;
+import com.h2.demo.web.selenium.support.elements.Messages;
+import com.h2.demo.web.selenium.support.elements.OrderBy;
+import com.h2.demo.web.selenium.support.elements.SearchForm;
+import com.h2.demo.web.selenium.support.elements.Table;
+
+@Page
+public class AddressSearch {
+    public Table table;
+    public EntityAction entity;
+    public Messages messages;
+    public AddressSearchOrders orders;
+    public AddressSearchForm form;
+
+    public static class AddressSearchOrders extends CustomWebElement {
+        public OrderBy streetName = new OrderBy("address_streetName");
+        public OrderBy city = new OrderBy("address_city");
+    }
+
+    public static class AddressSearchForm extends SearchForm {
+        public Autocomplete streetName = new Autocomplete("form:streetName");
+        public Autocomplete city = new Autocomplete("form:city");
+    }
+}
\ No newline at end of file
diff --git a/src/test/generated-java/com/h2/demo/web/selenium/page/auditlog/AuditLogEdit.java b/src/test/generated-java/com/h2/demo/web/selenium/page/auditlog/AuditLogEdit.java
new file mode 100644
index 0000000..df89e23
--- /dev/null
+++ b/src/test/generated-java/com/h2/demo/web/selenium/page/auditlog/AuditLogEdit.java
@@ -0,0 +1,38 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-selenium-primefaces:src/test/java/selenium/pages/entity/EditPage.e.vm.java
+ */
+package com.h2.demo.web.selenium.page.auditlog;
+
+import com.h2.demo.web.selenium.support.Page;
+import com.h2.demo.web.selenium.support.elements.CustomWebElement;
+import com.h2.demo.web.selenium.support.elements.DateInput;
+import com.h2.demo.web.selenium.support.elements.EditAction;
+import com.h2.demo.web.selenium.support.elements.EntityAction;
+import com.h2.demo.web.selenium.support.elements.Messages;
+import com.h2.demo.web.selenium.support.elements.StringInput;
+
+@Page
+public class AuditLogEdit {
+    public EditAction action;
+    public Messages messages;
+    public EntityAction entity;
+    public AuditLogEditForm form;
+    public AuditLogEditTabs tabs;
+
+    public static class AuditLogEditForm extends CustomWebElement {
+        public StringInput author = new StringInput("form:author");
+        public StringInput event = new StringInput("form:event");
+        public DateInput eventDate = new DateInput("form:eventDate");
+        public StringInput stringAttribute1 = new StringInput("form:stringAttribute1");
+        public StringInput stringAttribute2 = new StringInput("form:stringAttribute2");
+        public StringInput stringAttribute3 = new StringInput("form:stringAttribute3");
+    };
+
+    public static class AuditLogEditTabs extends CustomWebElement {
+    };
+}
\ No newline at end of file
diff --git a/src/test/generated-java/com/h2/demo/web/selenium/page/auditlog/AuditLogSearch.java b/src/test/generated-java/com/h2/demo/web/selenium/page/auditlog/AuditLogSearch.java
new file mode 100644
index 0000000..8fc7c80
--- /dev/null
+++ b/src/test/generated-java/com/h2/demo/web/selenium/page/auditlog/AuditLogSearch.java
@@ -0,0 +1,46 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-selenium-primefaces:src/test/java/selenium/pages/entity/SearchPage.e.vm.java
+ */
+package com.h2.demo.web.selenium.page.auditlog;
+
+import com.h2.demo.web.selenium.support.Page;
+import com.h2.demo.web.selenium.support.elements.Autocomplete;
+import com.h2.demo.web.selenium.support.elements.CustomWebElement;
+import com.h2.demo.web.selenium.support.elements.EntityAction;
+import com.h2.demo.web.selenium.support.elements.Messages;
+import com.h2.demo.web.selenium.support.elements.OrderBy;
+import com.h2.demo.web.selenium.support.elements.SearchForm;
+import com.h2.demo.web.selenium.support.elements.StringRange;
+import com.h2.demo.web.selenium.support.elements.Table;
+
+@Page
+public class AuditLogSearch {
+    public Table table;
+    public EntityAction entity;
+    public Messages messages;
+    public AuditLogSearchOrders orders;
+    public AuditLogSearchForm form;
+
+    public static class AuditLogSearchOrders extends CustomWebElement {
+        public OrderBy author = new OrderBy("auditLog_author");
+        public OrderBy event = new OrderBy("auditLog_event");
+        public OrderBy eventDate = new OrderBy("auditLog_eventDate");
+        public OrderBy stringAttribute1 = new OrderBy("auditLog_stringAttribute1");
+        public OrderBy stringAttribute2 = new OrderBy("auditLog_stringAttribute2");
+        public OrderBy stringAttribute3 = new OrderBy("auditLog_stringAttribute3");
+    }
+
+    public static class AuditLogSearchForm extends SearchForm {
+        public Autocomplete author = new Autocomplete("form:author");
+        public Autocomplete event = new Autocomplete("form:event");
+        public StringRange eventDate = new StringRange("form:eventDate");
+        public Autocomplete stringAttribute1 = new Autocomplete("form:stringAttribute1");
+        public Autocomplete stringAttribute2 = new Autocomplete("form:stringAttribute2");
+        public Autocomplete stringAttribute3 = new Autocomplete("form:stringAttribute3");
+    }
+}
\ No newline at end of file
diff --git a/src/test/generated-java/com/h2/demo/web/selenium/page/book/BookEdit.java b/src/test/generated-java/com/h2/demo/web/selenium/page/book/BookEdit.java
new file mode 100644
index 0000000..f9de0fb
--- /dev/null
+++ b/src/test/generated-java/com/h2/demo/web/selenium/page/book/BookEdit.java
@@ -0,0 +1,37 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-selenium-primefaces:src/test/java/selenium/pages/entity/EditPage.e.vm.java
+ */
+package com.h2.demo.web.selenium.page.book;
+
+import com.h2.demo.web.selenium.support.Page;
+import com.h2.demo.web.selenium.support.elements.CustomWebElement;
+import com.h2.demo.web.selenium.support.elements.EditAction;
+import com.h2.demo.web.selenium.support.elements.EntityAction;
+import com.h2.demo.web.selenium.support.elements.IntegerInput;
+import com.h2.demo.web.selenium.support.elements.Messages;
+import com.h2.demo.web.selenium.support.elements.NoInverseManyToOne;
+import com.h2.demo.web.selenium.support.elements.StringInput;
+
+@Page
+public class BookEdit {
+    public EditAction action;
+    public Messages messages;
+    public EntityAction entity;
+    public BookEditForm form;
+    public BookEditTabs tabs;
+
+    public static class BookEditForm extends CustomWebElement {
+        public StringInput title = new StringInput("form:title");
+        public IntegerInput numberOfPages = new IntegerInput("form:numberOfPages");
+
+        public NoInverseManyToOne account = new NoInverseManyToOne("form:account");
+    };
+
+    public static class BookEditTabs extends CustomWebElement {
+    };
+}
\ No newline at end of file
diff --git a/src/test/generated-java/com/h2/demo/web/selenium/page/book/BookSearch.java b/src/test/generated-java/com/h2/demo/web/selenium/page/book/BookSearch.java
new file mode 100644
index 0000000..424c432
--- /dev/null
+++ b/src/test/generated-java/com/h2/demo/web/selenium/page/book/BookSearch.java
@@ -0,0 +1,40 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-selenium-primefaces:src/test/java/selenium/pages/entity/SearchPage.e.vm.java
+ */
+package com.h2.demo.web.selenium.page.book;
+
+import com.h2.demo.web.selenium.support.Page;
+import com.h2.demo.web.selenium.support.elements.Autocomplete;
+import com.h2.demo.web.selenium.support.elements.CustomWebElement;
+import com.h2.demo.web.selenium.support.elements.EntityAction;
+import com.h2.demo.web.selenium.support.elements.Messages;
+import com.h2.demo.web.selenium.support.elements.OrderBy;
+import com.h2.demo.web.selenium.support.elements.SearchForm;
+import com.h2.demo.web.selenium.support.elements.StringRange;
+import com.h2.demo.web.selenium.support.elements.Table;
+
+@Page
+public class BookSearch {
+    public Table table;
+    public EntityAction entity;
+    public Messages messages;
+    public BookSearchOrders orders;
+    public BookSearchForm form;
+
+    public static class BookSearchOrders extends CustomWebElement {
+        public OrderBy accountId = new OrderBy("book_accountId");
+        public OrderBy title = new OrderBy("book_title");
+        public OrderBy numberOfPages = new OrderBy("book_numberOfPages");
+    }
+
+    public static class BookSearchForm extends SearchForm {
+        public Autocomplete title = new Autocomplete("form:title");
+        public StringRange numberOfPages = new StringRange("form:numberOfPages");
+        public Autocomplete account = new Autocomplete("form:accountSelector");
+    }
+}
\ No newline at end of file
diff --git a/src/test/generated-java/com/h2/demo/web/selenium/page/document/DocumentEdit.java b/src/test/generated-java/com/h2/demo/web/selenium/page/document/DocumentEdit.java
new file mode 100644
index 0000000..1403f9a
--- /dev/null
+++ b/src/test/generated-java/com/h2/demo/web/selenium/page/document/DocumentEdit.java
@@ -0,0 +1,35 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-selenium-primefaces:src/test/java/selenium/pages/entity/EditPage.e.vm.java
+ */
+package com.h2.demo.web.selenium.page.document;
+
+import com.h2.demo.web.selenium.support.Page;
+import com.h2.demo.web.selenium.support.elements.CustomWebElement;
+import com.h2.demo.web.selenium.support.elements.EditAction;
+import com.h2.demo.web.selenium.support.elements.EntityAction;
+import com.h2.demo.web.selenium.support.elements.Messages;
+import com.h2.demo.web.selenium.support.elements.NoInverseManyToOne;
+import com.h2.demo.web.selenium.support.elements.Upload;
+
+@Page
+public class DocumentEdit {
+    public EditAction action;
+    public Messages messages;
+    public EntityAction entity;
+    public DocumentEditForm form;
+    public DocumentEditTabs tabs;
+
+    public static class DocumentEditForm extends CustomWebElement {
+        public Upload documentBinary = new Upload("form:documentBinary");
+
+        public NoInverseManyToOne account = new NoInverseManyToOne("form:account");
+    };
+
+    public static class DocumentEditTabs extends CustomWebElement {
+    };
+}
\ No newline at end of file
diff --git a/src/test/generated-java/com/h2/demo/web/selenium/page/document/DocumentSearch.java b/src/test/generated-java/com/h2/demo/web/selenium/page/document/DocumentSearch.java
new file mode 100644
index 0000000..3b536f8
--- /dev/null
+++ b/src/test/generated-java/com/h2/demo/web/selenium/page/document/DocumentSearch.java
@@ -0,0 +1,35 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-selenium-primefaces:src/test/java/selenium/pages/entity/SearchPage.e.vm.java
+ */
+package com.h2.demo.web.selenium.page.document;
+
+import com.h2.demo.web.selenium.support.Page;
+import com.h2.demo.web.selenium.support.elements.Autocomplete;
+import com.h2.demo.web.selenium.support.elements.CustomWebElement;
+import com.h2.demo.web.selenium.support.elements.EntityAction;
+import com.h2.demo.web.selenium.support.elements.Messages;
+import com.h2.demo.web.selenium.support.elements.OrderBy;
+import com.h2.demo.web.selenium.support.elements.SearchForm;
+import com.h2.demo.web.selenium.support.elements.Table;
+
+@Page
+public class DocumentSearch {
+    public Table table;
+    public EntityAction entity;
+    public Messages messages;
+    public DocumentSearchOrders orders;
+    public DocumentSearchForm form;
+
+    public static class DocumentSearchOrders extends CustomWebElement {
+        public OrderBy accountId = new OrderBy("document_accountId");
+    }
+
+    public static class DocumentSearchForm extends SearchForm {
+        public Autocomplete account = new Autocomplete("form:accountSelector");
+    }
+}
\ No newline at end of file
diff --git a/src/test/generated-java/com/h2/demo/web/selenium/page/legacy/LegacyEdit.java b/src/test/generated-java/com/h2/demo/web/selenium/page/legacy/LegacyEdit.java
new file mode 100644
index 0000000..e1cd1b2
--- /dev/null
+++ b/src/test/generated-java/com/h2/demo/web/selenium/page/legacy/LegacyEdit.java
@@ -0,0 +1,36 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-selenium-primefaces:src/test/java/selenium/pages/entity/EditPage.e.vm.java
+ */
+package com.h2.demo.web.selenium.page.legacy;
+
+import com.h2.demo.web.selenium.support.Page;
+import com.h2.demo.web.selenium.support.elements.CustomWebElement;
+import com.h2.demo.web.selenium.support.elements.EditAction;
+import com.h2.demo.web.selenium.support.elements.EntityAction;
+import com.h2.demo.web.selenium.support.elements.IntegerInput;
+import com.h2.demo.web.selenium.support.elements.Messages;
+import com.h2.demo.web.selenium.support.elements.StringInput;
+
+@Page
+public class LegacyEdit {
+    public EditAction action;
+    public Messages messages;
+    public EntityAction entity;
+    public LegacyEditForm form;
+    public LegacyEditTabs tabs;
+
+    public static class LegacyEditForm extends CustomWebElement {
+        public StringInput name = new StringInput("form:name");
+        public StringInput code = new StringInput("form:code");
+        public IntegerInput dept = new IntegerInput("form:dept");
+        public StringInput extraInfo = new StringInput("form:extraInfo");
+    };
+
+    public static class LegacyEditTabs extends CustomWebElement {
+    };
+}
\ No newline at end of file
diff --git a/src/test/generated-java/com/h2/demo/web/selenium/page/legacy/LegacySearch.java b/src/test/generated-java/com/h2/demo/web/selenium/page/legacy/LegacySearch.java
new file mode 100644
index 0000000..f68b308
--- /dev/null
+++ b/src/test/generated-java/com/h2/demo/web/selenium/page/legacy/LegacySearch.java
@@ -0,0 +1,42 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-selenium-primefaces:src/test/java/selenium/pages/entity/SearchPage.e.vm.java
+ */
+package com.h2.demo.web.selenium.page.legacy;
+
+import com.h2.demo.web.selenium.support.Page;
+import com.h2.demo.web.selenium.support.elements.Autocomplete;
+import com.h2.demo.web.selenium.support.elements.CustomWebElement;
+import com.h2.demo.web.selenium.support.elements.EntityAction;
+import com.h2.demo.web.selenium.support.elements.Messages;
+import com.h2.demo.web.selenium.support.elements.OrderBy;
+import com.h2.demo.web.selenium.support.elements.SearchForm;
+import com.h2.demo.web.selenium.support.elements.StringInput;
+import com.h2.demo.web.selenium.support.elements.Table;
+
+@Page
+public class LegacySearch {
+    public Table table;
+    public EntityAction entity;
+    public Messages messages;
+    public LegacySearchOrders orders;
+    public LegacySearchForm form;
+
+    public static class LegacySearchOrders extends CustomWebElement {
+        public OrderBy name = new OrderBy("legacy_name");
+        public OrderBy code = new OrderBy("legacy_code");
+        public OrderBy dept = new OrderBy("legacy_dept");
+        public OrderBy extraInfo = new OrderBy("legacy_extraInfo");
+    }
+
+    public static class LegacySearchForm extends SearchForm {
+        public StringInput name = new StringInput("form:name");
+        public StringInput code = new StringInput("form:code");
+        public StringInput dept = new StringInput("form:dept");
+        public Autocomplete extraInfo = new Autocomplete("form:extraInfo");
+    }
+}
\ No newline at end of file
diff --git a/src/test/generated-java/com/h2/demo/web/selenium/page/moretypesdemo/MoreTypesDemoEdit.java b/src/test/generated-java/com/h2/demo/web/selenium/page/moretypesdemo/MoreTypesDemoEdit.java
new file mode 100644
index 0000000..f9c34fa
--- /dev/null
+++ b/src/test/generated-java/com/h2/demo/web/selenium/page/moretypesdemo/MoreTypesDemoEdit.java
@@ -0,0 +1,42 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-selenium-primefaces:src/test/java/selenium/pages/entity/EditPage.e.vm.java
+ */
+package com.h2.demo.web.selenium.page.moretypesdemo;
+
+import com.h2.demo.web.selenium.support.Page;
+import com.h2.demo.web.selenium.support.elements.CustomWebElement;
+import com.h2.demo.web.selenium.support.elements.DateInput;
+import com.h2.demo.web.selenium.support.elements.EditAction;
+import com.h2.demo.web.selenium.support.elements.EntityAction;
+import com.h2.demo.web.selenium.support.elements.IntegerInput;
+import com.h2.demo.web.selenium.support.elements.Messages;
+
+@Page
+public class MoreTypesDemoEdit {
+    public EditAction action;
+    public Messages messages;
+    public EntityAction entity;
+    public MoreTypesDemoEditForm form;
+    public MoreTypesDemoEditTabs tabs;
+
+    public static class MoreTypesDemoEditForm extends CustomWebElement {
+        public IntegerInput numberInt = new IntegerInput("form:numberInt");
+        public IntegerInput numberLong = new IntegerInput("form:numberLong");
+        public IntegerInput numberDouble = new IntegerInput("form:numberDouble");
+        public IntegerInput numberFloat = new IntegerInput("form:numberFloat");
+        public IntegerInput numberBigInteger = new IntegerInput("form:numberBigInteger");
+        public IntegerInput numberBigDecimal = new IntegerInput("form:numberBigDecimal");
+        public DateInput dateJavaTemporalDate = new DateInput("form:dateJavaTemporalDate");
+        public DateInput dateJavaTemporalTimestamp = new DateInput("form:dateJavaTemporalTimestamp");
+        public DateInput dateJoda = new DateInput("form:dateJoda");
+        public DateInput dateTimeJoda = new DateInput("form:dateTimeJoda");
+    };
+
+    public static class MoreTypesDemoEditTabs extends CustomWebElement {
+    };
+}
\ No newline at end of file
diff --git a/src/test/generated-java/com/h2/demo/web/selenium/page/moretypesdemo/MoreTypesDemoSearch.java b/src/test/generated-java/com/h2/demo/web/selenium/page/moretypesdemo/MoreTypesDemoSearch.java
new file mode 100644
index 0000000..f809622
--- /dev/null
+++ b/src/test/generated-java/com/h2/demo/web/selenium/page/moretypesdemo/MoreTypesDemoSearch.java
@@ -0,0 +1,53 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-selenium-primefaces:src/test/java/selenium/pages/entity/SearchPage.e.vm.java
+ */
+package com.h2.demo.web.selenium.page.moretypesdemo;
+
+import com.h2.demo.web.selenium.support.Page;
+import com.h2.demo.web.selenium.support.elements.CustomWebElement;
+import com.h2.demo.web.selenium.support.elements.EntityAction;
+import com.h2.demo.web.selenium.support.elements.Messages;
+import com.h2.demo.web.selenium.support.elements.OrderBy;
+import com.h2.demo.web.selenium.support.elements.SearchForm;
+import com.h2.demo.web.selenium.support.elements.StringRange;
+import com.h2.demo.web.selenium.support.elements.Table;
+
+@Page
+public class MoreTypesDemoSearch {
+    public Table table;
+    public EntityAction entity;
+    public Messages messages;
+    public MoreTypesDemoSearchOrders orders;
+    public MoreTypesDemoSearchForm form;
+
+    public static class MoreTypesDemoSearchOrders extends CustomWebElement {
+        public OrderBy numberInt = new OrderBy("moreTypesDemo_numberInt");
+        public OrderBy numberLong = new OrderBy("moreTypesDemo_numberLong");
+        public OrderBy numberDouble = new OrderBy("moreTypesDemo_numberDouble");
+        public OrderBy numberFloat = new OrderBy("moreTypesDemo_numberFloat");
+        public OrderBy numberBigInteger = new OrderBy("moreTypesDemo_numberBigInteger");
+        public OrderBy numberBigDecimal = new OrderBy("moreTypesDemo_numberBigDecimal");
+        public OrderBy dateJavaTemporalDate = new OrderBy("moreTypesDemo_dateJavaTemporalDate");
+        public OrderBy dateJavaTemporalTimestamp = new OrderBy("moreTypesDemo_dateJavaTemporalTimestamp");
+        public OrderBy dateJoda = new OrderBy("moreTypesDemo_dateJoda");
+        public OrderBy dateTimeJoda = new OrderBy("moreTypesDemo_dateTimeJoda");
+    }
+
+    public static class MoreTypesDemoSearchForm extends SearchForm {
+        public StringRange numberInt = new StringRange("form:numberInt");
+        public StringRange numberLong = new StringRange("form:numberLong");
+        public StringRange numberDouble = new StringRange("form:numberDouble");
+        public StringRange numberFloat = new StringRange("form:numberFloat");
+        public StringRange numberBigInteger = new StringRange("form:numberBigInteger");
+        public StringRange numberBigDecimal = new StringRange("form:numberBigDecimal");
+        public StringRange dateJavaTemporalDate = new StringRange("form:dateJavaTemporalDate");
+        public StringRange dateJavaTemporalTimestamp = new StringRange("form:dateJavaTemporalTimestamp");
+        public StringRange dateJoda = new StringRange("form:dateJoda");
+        public StringRange dateTimeJoda = new StringRange("form:dateTimeJoda");
+    }
+}
\ No newline at end of file
diff --git a/src/test/generated-java/com/h2/demo/web/selenium/page/role/RoleEdit.java b/src/test/generated-java/com/h2/demo/web/selenium/page/role/RoleEdit.java
new file mode 100644
index 0000000..20eba86
--- /dev/null
+++ b/src/test/generated-java/com/h2/demo/web/selenium/page/role/RoleEdit.java
@@ -0,0 +1,32 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-selenium-primefaces:src/test/java/selenium/pages/entity/EditPage.e.vm.java
+ */
+package com.h2.demo.web.selenium.page.role;
+
+import com.h2.demo.web.selenium.support.Page;
+import com.h2.demo.web.selenium.support.elements.CustomWebElement;
+import com.h2.demo.web.selenium.support.elements.EditAction;
+import com.h2.demo.web.selenium.support.elements.EntityAction;
+import com.h2.demo.web.selenium.support.elements.Messages;
+import com.h2.demo.web.selenium.support.elements.StringInput;
+
+@Page
+public class RoleEdit {
+    public EditAction action;
+    public Messages messages;
+    public EntityAction entity;
+    public RoleEditForm form;
+    public RoleEditTabs tabs;
+
+    public static class RoleEditForm extends CustomWebElement {
+        public StringInput roleName = new StringInput("form:roleName");
+    };
+
+    public static class RoleEditTabs extends CustomWebElement {
+    };
+}
\ No newline at end of file
diff --git a/src/test/generated-java/com/h2/demo/web/selenium/page/role/RoleSearch.java b/src/test/generated-java/com/h2/demo/web/selenium/page/role/RoleSearch.java
new file mode 100644
index 0000000..aedc47b
--- /dev/null
+++ b/src/test/generated-java/com/h2/demo/web/selenium/page/role/RoleSearch.java
@@ -0,0 +1,35 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-selenium-primefaces:src/test/java/selenium/pages/entity/SearchPage.e.vm.java
+ */
+package com.h2.demo.web.selenium.page.role;
+
+import com.h2.demo.web.selenium.support.Page;
+import com.h2.demo.web.selenium.support.elements.Autocomplete;
+import com.h2.demo.web.selenium.support.elements.CustomWebElement;
+import com.h2.demo.web.selenium.support.elements.EntityAction;
+import com.h2.demo.web.selenium.support.elements.Messages;
+import com.h2.demo.web.selenium.support.elements.OrderBy;
+import com.h2.demo.web.selenium.support.elements.SearchForm;
+import com.h2.demo.web.selenium.support.elements.Table;
+
+@Page
+public class RoleSearch {
+    public Table table;
+    public EntityAction entity;
+    public Messages messages;
+    public RoleSearchOrders orders;
+    public RoleSearchForm form;
+
+    public static class RoleSearchOrders extends CustomWebElement {
+        public OrderBy roleName = new OrderBy("role_roleName");
+    }
+
+    public static class RoleSearchForm extends SearchForm {
+        public Autocomplete roleName = new Autocomplete("form:roleName");
+    }
+}
\ No newline at end of file
diff --git a/src/test/generated-java/com/h2/demo/web/selenium/page/savedsearch/SavedSearchEdit.java b/src/test/generated-java/com/h2/demo/web/selenium/page/savedsearch/SavedSearchEdit.java
new file mode 100644
index 0000000..209448d
--- /dev/null
+++ b/src/test/generated-java/com/h2/demo/web/selenium/page/savedsearch/SavedSearchEdit.java
@@ -0,0 +1,38 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-selenium-primefaces:src/test/java/selenium/pages/entity/EditPage.e.vm.java
+ */
+package com.h2.demo.web.selenium.page.savedsearch;
+
+import com.h2.demo.web.selenium.support.Page;
+import com.h2.demo.web.selenium.support.elements.CustomWebElement;
+import com.h2.demo.web.selenium.support.elements.EditAction;
+import com.h2.demo.web.selenium.support.elements.EntityAction;
+import com.h2.demo.web.selenium.support.elements.Messages;
+import com.h2.demo.web.selenium.support.elements.NoInverseManyToOne;
+import com.h2.demo.web.selenium.support.elements.StringInput;
+import com.h2.demo.web.selenium.support.elements.Upload;
+
+@Page
+public class SavedSearchEdit {
+    public EditAction action;
+    public Messages messages;
+    public EntityAction entity;
+    public SavedSearchEditForm form;
+    public SavedSearchEditTabs tabs;
+
+    public static class SavedSearchEditForm extends CustomWebElement {
+        public StringInput name = new StringInput("form:name");
+        public StringInput formClassname = new StringInput("form:formClassname");
+        public Upload formContent = new Upload("form:formContent");
+
+        public NoInverseManyToOne account = new NoInverseManyToOne("form:account");
+    };
+
+    public static class SavedSearchEditTabs extends CustomWebElement {
+    };
+}
\ No newline at end of file
diff --git a/src/test/generated-java/com/h2/demo/web/selenium/page/savedsearch/SavedSearchSearch.java b/src/test/generated-java/com/h2/demo/web/selenium/page/savedsearch/SavedSearchSearch.java
new file mode 100644
index 0000000..714d5b0
--- /dev/null
+++ b/src/test/generated-java/com/h2/demo/web/selenium/page/savedsearch/SavedSearchSearch.java
@@ -0,0 +1,39 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-selenium-primefaces:src/test/java/selenium/pages/entity/SearchPage.e.vm.java
+ */
+package com.h2.demo.web.selenium.page.savedsearch;
+
+import com.h2.demo.web.selenium.support.Page;
+import com.h2.demo.web.selenium.support.elements.Autocomplete;
+import com.h2.demo.web.selenium.support.elements.CustomWebElement;
+import com.h2.demo.web.selenium.support.elements.EntityAction;
+import com.h2.demo.web.selenium.support.elements.Messages;
+import com.h2.demo.web.selenium.support.elements.OrderBy;
+import com.h2.demo.web.selenium.support.elements.SearchForm;
+import com.h2.demo.web.selenium.support.elements.Table;
+
+@Page
+public class SavedSearchSearch {
+    public Table table;
+    public EntityAction entity;
+    public Messages messages;
+    public SavedSearchSearchOrders orders;
+    public SavedSearchSearchForm form;
+
+    public static class SavedSearchSearchOrders extends CustomWebElement {
+        public OrderBy name = new OrderBy("savedSearch_name");
+        public OrderBy formClassname = new OrderBy("savedSearch_formClassname");
+        public OrderBy accountId = new OrderBy("savedSearch_accountId");
+    }
+
+    public static class SavedSearchSearchForm extends SearchForm {
+        public Autocomplete name = new Autocomplete("form:name");
+        public Autocomplete formClassname = new Autocomplete("form:formClassname");
+        public Autocomplete account = new Autocomplete("form:accountSelector");
+    }
+}
\ No newline at end of file
diff --git a/src/test/generated-java/com/h2/demo/web/selenium/support/BrowserDriver.java b/src/test/generated-java/com/h2/demo/web/selenium/support/BrowserDriver.java
new file mode 100644
index 0000000..65e1b77
--- /dev/null
+++ b/src/test/generated-java/com/h2/demo/web/selenium/support/BrowserDriver.java
@@ -0,0 +1,41 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-selenium-primefaces:src/test/java/selenium/support/BrowserDriver.p.vm.java
+ */
+package com.h2.demo.web.selenium.support;
+
+import org.openqa.selenium.WebDriver;
+import org.openqa.selenium.firefox.FirefoxDriver;
+import org.openqa.selenium.ie.InternetExplorerDriver;
+
+public enum BrowserDriver {
+    Firefox {
+        @Override
+        public WebDriver buildWebDriver() {
+            return new FirefoxDriver();
+        }
+    }, //
+    InternetExplorer {
+        @Override
+        public WebDriver buildWebDriver() {
+            return new InternetExplorerDriver();
+        }
+    }, //
+    Chrome {
+        @Override
+        public WebDriver buildWebDriver() {
+            return new FirefoxDriver();
+        }
+    }, //
+    Javascript {
+        @Override
+        public WebDriver buildWebDriver() {
+            return new FirefoxDriver();
+        }
+    };
+    public abstract WebDriver buildWebDriver();
+}
\ No newline at end of file
diff --git a/src/test/generated-java/com/h2/demo/web/selenium/support/FollowVisually.java b/src/test/generated-java/com/h2/demo/web/selenium/support/FollowVisually.java
new file mode 100644
index 0000000..7f181a2
--- /dev/null
+++ b/src/test/generated-java/com/h2/demo/web/selenium/support/FollowVisually.java
@@ -0,0 +1,39 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-selenium-primefaces:src/test/java/selenium/support/FollowVisually.p.vm.java
+ */
+package com.h2.demo.web.selenium.support;
+
+import static java.lang.annotation.ElementType.TYPE;
+import static java.lang.annotation.RetentionPolicy.RUNTIME;
+
+import java.lang.annotation.Documented;
+import java.lang.annotation.Retention;
+import java.lang.annotation.Target;
+
+@Target(TYPE)
+@Retention(RUNTIME)
+@Documented
+public @interface FollowVisually {
+    public static enum FollowLevel {
+        INFO, DEBUG, TRACE
+    }
+
+    long driverWaitBeforeStopInSeconds() default 5;
+
+    long waitAfterClickInMs() default 250;
+
+    long waitAfterClearInMs() default 250;
+
+    long waitAfterStepInMs() default 1500;
+
+    long waitAfterFillInMs() default 250;
+
+    long waitAfterNotificationInMs() default 1000;
+
+    FollowLevel level() default com.h2.demo.web.selenium.support.FollowVisually.FollowLevel.INFO;
+}
diff --git a/src/test/generated-java/com/h2/demo/web/selenium/support/Highlighter.java b/src/test/generated-java/com/h2/demo/web/selenium/support/Highlighter.java
new file mode 100644
index 0000000..3d0a29f
--- /dev/null
+++ b/src/test/generated-java/com/h2/demo/web/selenium/support/Highlighter.java
@@ -0,0 +1,93 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-selenium-primefaces:src/test/java/selenium/support/Highlighter.p.vm.java
+ */
+package com.h2.demo.web.selenium.support;
+
+import static org.apache.commons.lang.StringUtils.isBlank;
+import static org.apache.commons.lang.StringUtils.isNotBlank;
+import static org.apache.commons.lang.StringUtils.removeStart;
+import static org.springframework.web.util.JavaScriptUtils.javaScriptEscape;
+
+import java.util.concurrent.TimeUnit;
+
+import org.apache.commons.lang3.StringUtils;
+import org.openqa.selenium.By;
+import org.openqa.selenium.By.ByCssSelector;
+import org.openqa.selenium.By.ByXPath;
+import org.openqa.selenium.JavascriptExecutor;
+import org.openqa.selenium.WebElement;
+
+public class Highlighter {
+    public void highlight(JavascriptExecutor executor, WebElement webElement, By by) {
+        String selector = highlightSelector(webElement, by);
+        if (selector == null) {
+            return;
+        }
+        String highlight = "jQuery(" + selector + ").effect(\"highlight\",{color:\"#ffff00\"}, 700).effect(\"pulsate\",{times: 2});";
+        executor.executeScript(highlight);
+        sleep(1200);
+    }
+
+    private void sleep(int waitInMs) {
+        try {
+            TimeUnit.MILLISECONDS.sleep(waitInMs);
+        } catch (InterruptedException e) {
+            Thread.currentThread().interrupt();
+        }
+    }
+
+    private String highlightSelector(WebElement webElement, By by) {
+        String selector = highlightById(webElement);
+        if (isNotBlank(selector)) {
+            return selector;
+        }
+        selector = highlightByCss(by);
+        if (isNotBlank(selector)) {
+            return selector;
+        }
+        selector = highlightByXpath(by);
+        if (isNotBlank(selector)) {
+            return selector;
+        }
+        return null;
+    }
+
+    private String highlightById(WebElement webElement) {
+        String id = webElement.getAttribute("id");
+        if (isBlank(id)) {
+            return null;
+        }
+        return "\"#" + javaScriptEscape(id).replace(":", "\\\\:") + "\"";
+    }
+
+    private String highlightByCss(By by) {
+        if (!(by instanceof ByCssSelector)) {
+            return null;
+        }
+        ByCssSelector cssSelector = (ByCssSelector) by;
+        return "\"" + removeStart(cssSelector.toString(), "By.selector: ") + "\"";
+    }
+
+    private String highlightByXpath(By by) {
+        if (!(by instanceof ByXPath)) {
+            return null;
+        }
+        String xpath = "" //
+                + "  function xpath(STR_XPATH) {                                                                    \n" //
+                + "     var xresult = document.evaluate(STR_XPATH, document, null, XPathResult.ANY_TYPE, null);     \n" //
+                + "     var xnodes = [];                                                                            \n" //
+                + "     var xres;                                                                                   \n" //
+                + "     while (xres = xresult.iterateNext()) {                                                      \n" //
+                + "         xnodes.push(xres);                                                                      \n" //
+                + "     }                                                                                           \n" //
+                + "     return xnodes;                                                                              \n" //
+                + "  }(\"" + StringUtils.removeStart(by.toString(), "By.xpath: ") + "\")                            \n"; //
+
+        return xpath;
+    }
+}
\ No newline at end of file
diff --git a/src/test/generated-java/com/h2/demo/web/selenium/support/Page.java b/src/test/generated-java/com/h2/demo/web/selenium/support/Page.java
new file mode 100644
index 0000000..fee6a9c
--- /dev/null
+++ b/src/test/generated-java/com/h2/demo/web/selenium/support/Page.java
@@ -0,0 +1,29 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-selenium-primefaces:src/test/java/selenium/support/Page.p.vm.java
+ */
+package com.h2.demo.web.selenium.support;
+
+import static java.lang.annotation.ElementType.TYPE;
+import static java.lang.annotation.RetentionPolicy.RUNTIME;
+
+import java.lang.annotation.Documented;
+import java.lang.annotation.Retention;
+import java.lang.annotation.Target;
+
+/**
+ * Indicates the field is a page and should be initialized with the driver
+ */
+@Target(TYPE)
+@Retention(RUNTIME)
+@Documented
+public @interface Page {
+    /**
+     * Description for this page for documentation only
+     */
+    String value() default "";
+}
diff --git a/src/test/generated-java/com/h2/demo/web/selenium/support/SeleniumTest.java b/src/test/generated-java/com/h2/demo/web/selenium/support/SeleniumTest.java
new file mode 100644
index 0000000..d9d8a1a
--- /dev/null
+++ b/src/test/generated-java/com/h2/demo/web/selenium/support/SeleniumTest.java
@@ -0,0 +1,84 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-selenium-primefaces:src/test/java/selenium/support/SeleniumTest.p.vm.java
+ */
+package com.h2.demo.web.selenium.support;
+
+import java.util.concurrent.TimeUnit;
+
+import org.junit.AfterClass;
+import org.junit.Before;
+import org.junit.BeforeClass;
+import org.openqa.selenium.Dimension;
+import org.openqa.selenium.WebDriver;
+
+import com.h2.demo.web.selenium.page.AnonymousHomePage;
+import com.h2.demo.web.selenium.page.LoggedHomePage;
+import com.h2.demo.web.selenium.page.LoginPage;
+
+public abstract class SeleniumTest {
+    protected WebClient webClient;
+    protected LoginPage loginPage;
+    protected AnonymousHomePage anonymousHomePage;
+    protected LoggedHomePage loggedHomePage;
+    protected static WebDriver webDriver;
+    public static final String WEBDRIVER_PROPERTY = "selenium.webdriver";
+    public static final String BASE_URL_PROPERTY = "selenium.baseurl";
+    public static final String DEFAULT_BASE_URL = "http://localhost:8080/h2project";
+
+    @BeforeClass
+    public static void setupBrowser() {
+        webDriver = buildDriver();
+        webDriver.manage().timeouts().implicitlyWait(8, TimeUnit.SECONDS);
+        webDriver.manage().window().setSize(new Dimension(1280, 1024));
+    }
+
+    private static WebDriver buildDriver() {
+        String webDriverName = System.getProperty(WEBDRIVER_PROPERTY, BrowserDriver.Firefox.name());
+        return BrowserDriver.valueOf(webDriverName).buildWebDriver();
+    }
+
+    protected String getBaseUrl() {
+        return System.getProperty(BASE_URL_PROPERTY, DEFAULT_BASE_URL);
+    }
+
+    @Before
+    public void setupTest() {
+        webClient = new WebClient(webDriver, this);
+        webDriver.manage().deleteAllCookies();
+        webDriver.get(getBaseUrl());
+    }
+
+    @AfterClass
+    public static void closeBrowser() {
+        webDriver.close();
+        webDriver.quit();
+    }
+
+    public void page(String relative) {
+        webClient.step("Requesting url " + relative);
+        webDriver.get(getBaseUrl() + relative);
+    }
+
+    protected void englishHomePage() {
+        page("/home.faces?locale=en");
+        webClient.waitUntilTextIsPresent("Please login first in order to access the application content.");
+    }
+
+    protected void loginAsAnAdmin() {
+        webClient.step("Login as admin");
+        anonymousHomePage.connexion();
+        loginPage.login("admin", "admin");
+        webClient.waitUntilTextIsPresent("Congratulations admin, you are logged");
+    }
+
+    protected void logout() {
+        webClient.step("Logout");
+        loggedHomePage.logout();
+        webClient.waitUntilTextIsPresent("Please login first in order to access the application content.");
+    }
+}
diff --git a/src/test/generated-java/com/h2/demo/web/selenium/support/WebClient.java b/src/test/generated-java/com/h2/demo/web/selenium/support/WebClient.java
new file mode 100644
index 0000000..5505568
--- /dev/null
+++ b/src/test/generated-java/com/h2/demo/web/selenium/support/WebClient.java
@@ -0,0 +1,458 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-selenium-primefaces:src/test/java/selenium/support/WebClient.p.vm.java
+ */
+package com.h2.demo.web.selenium.support;
+
+import static com.h2.demo.web.selenium.support.FollowVisually.FollowLevel.TRACE;
+import static java.util.concurrent.TimeUnit.MILLISECONDS;
+import static org.apache.commons.lang.StringUtils.containsIgnoreCase;
+import static org.apache.commons.lang.StringUtils.isNotBlank;
+import static org.springframework.web.util.JavaScriptUtils.javaScriptEscape;
+
+import java.io.File;
+import java.io.IOException;
+import java.util.Date;
+import java.util.List;
+import java.util.concurrent.TimeUnit;
+
+import org.apache.commons.io.FileUtils;
+import org.apache.commons.io.FilenameUtils;
+import org.apache.commons.lang.time.DateFormatUtils;
+import org.openqa.selenium.By;
+import org.openqa.selenium.JavascriptExecutor;
+import org.openqa.selenium.NoSuchElementException;
+import org.openqa.selenium.OutputType;
+import org.openqa.selenium.StaleElementReferenceException;
+import org.openqa.selenium.TakesScreenshot;
+import org.openqa.selenium.WebDriver;
+import org.openqa.selenium.WebElement;
+import org.openqa.selenium.interactions.Actions;
+import org.openqa.selenium.support.ui.ExpectedCondition;
+import org.openqa.selenium.support.ui.Select;
+import org.openqa.selenium.support.ui.WebDriverWait;
+import org.springframework.util.StopWatch;
+
+import com.google.common.base.Function;
+import com.h2.demo.web.selenium.support.FollowVisually.FollowLevel;
+import com.h2.demo.web.selenium.support.elements.WebElementConfiguration;
+
+public class WebClient {
+    public final WebDriver webDriver;
+    private long driverWaitBeforeStopInSeconds = 10;
+    private long waitAfterClickInMs = 0;
+    private long waitAfterClearInMs = 0;
+    private long waitAfterStepInMs = 0;
+    private long waitAfterFillInMs = 0;
+    private long waitAfterNotificationInMs = 0;
+    private boolean followVisually = false;
+    private FollowLevel followLevel;
+
+    public WebClient(WebDriver webDriver, Object instanceTest) {
+        this.webDriver = webDriver;
+        handleFollowVisually(instanceTest);
+        new WebElementConfiguration().configure(instanceTest, this);
+    }
+
+    private void handleFollowVisually(Object instanceTest) {
+        FollowVisually followVisually = instanceTest.getClass().getAnnotation(FollowVisually.class);
+        if (followVisually != null) {
+            this.driverWaitBeforeStopInSeconds = followVisually.driverWaitBeforeStopInSeconds();
+            this.waitAfterClickInMs = followVisually.waitAfterClickInMs();
+            this.waitAfterClearInMs = followVisually.waitAfterClearInMs();
+            this.waitAfterStepInMs = followVisually.waitAfterStepInMs();
+            this.waitAfterFillInMs = followVisually.waitAfterFillInMs();
+            this.waitAfterNotificationInMs = followVisually.waitAfterNotificationInMs();
+            this.followLevel = followVisually.level();
+            this.followVisually = true;
+        }
+    }
+
+    public void fast() {
+        webDriver.manage().timeouts().implicitlyWait(0, TimeUnit.SECONDS);
+    }
+
+    public void back() {
+        webDriver.manage().timeouts().implicitlyWait(driverWaitBeforeStopInSeconds, TimeUnit.SECONDS);
+    }
+
+    public void moveOver(By by) {
+        waitUntilDisplayed(by);
+        moveOver(find(by));
+    }
+
+    public void moveOver(WebElement webElement) {
+        new Actions(webDriver).moveToElement(webElement).perform();
+    }
+
+    public void hasTitle(String title) {
+        waitUntilTextIsPresent("<title>" + title + "</title>");
+    }
+
+    public void waitUntilTextIsPresent(final String text) {
+        try {
+            until(new ExpectedCondition<Boolean>() {
+                @Override
+                public Boolean apply(WebDriver from) {
+                    return from.getPageSource().contains(text);
+                }
+            });
+            success("Found [" + text + "]");
+        } catch (RuntimeException e) {
+            error("Could not find [" + text + "]", e);
+        }
+    }
+
+    public void waitUntilTextIsPresent(final WebElement webElement, final String text) {
+        try {
+            until(new ExpectedCondition<Boolean>() {
+                @Override
+                public synchronized Boolean apply(WebDriver driver) {
+                    return containsIgnoreCase(webElement.getText(), text.trim());
+                }
+            });
+            success("Found [" + text + "]");
+        } catch (RuntimeException e) {
+            error("Could not find [" + text + "]", e);
+        }
+    }
+
+    public void waitUntilTextIsRemoved(final WebElement webElement, final String text) {
+        try {
+            until(new ExpectedCondition<Boolean>() {
+                @Override
+                public synchronized Boolean apply(WebDriver driver) {
+                    return !containsIgnoreCase(webElement.getText(), text.trim());
+                }
+            });
+            success("Found different text than [" + text + "]");
+        } catch (RuntimeException e) {
+            error("Could not find a text different to [" + text + "]", e);
+        }
+    }
+
+    public void waitUntilDisplayed(final By by) {
+        try {
+            until(new ExpectedCondition<Boolean>() {
+                @Override
+                public Boolean apply(WebDriver from) {
+                    return from.findElement(by).isDisplayed();
+                }
+            });
+        } catch (RuntimeException e) {
+            error("not displayed " + by, e);
+        }
+    }
+
+    public void waitUntilRemoved(final By by) {
+        try {
+            until(new ExpectedCondition<Boolean>() {
+                @Override
+                public Boolean apply(WebDriver from) {
+                    from.manage().timeouts().implicitlyWait(0, TimeUnit.SECONDS);
+                    try {
+                        return from.findElements(by).isEmpty();
+                    } catch (NoSuchElementException e) {
+                        return true;
+                    } finally {
+                        from.manage().timeouts().implicitlyWait(driverWaitBeforeStopInSeconds, TimeUnit.SECONDS);
+                    }
+                }
+            });
+        } catch (RuntimeException e) {
+            error("not removed " + by, e);
+        }
+    }
+
+    public void waitUntilDisplayed(final WebElement webElement) {
+        try {
+            until(new ExpectedCondition<Boolean>() {
+                @Override
+                public Boolean apply(WebDriver from) {
+                    return webElement.isDisplayed();
+                }
+            });
+        } catch (RuntimeException e) {
+            error("element " + webElement.getTagName() + " is not displayed", e);
+        }
+    }
+
+    public void waitUntilEnabled(final WebElement webElement) {
+        try {
+            until(new ExpectedCondition<Boolean>() {
+                @Override
+                public Boolean apply(WebDriver from) {
+                    return webElement.isEnabled();
+                }
+            });
+        } catch (RuntimeException e) {
+            error("element " + webElement.getTagName() + " is not enabled", e);
+        }
+    }
+
+    public void waitUntilEnabled(final By by) {
+        try {
+            until(new ExpectedCondition<Boolean>() {
+                @Override
+                public Boolean apply(WebDriver from) {
+                    return from.findElement(by).isEnabled();
+                }
+            });
+        } catch (RuntimeException e) {
+            error("element " + by + " is not enabled", e);
+        }
+    }
+
+    public void waitUntilFound(final By by) {
+        try {
+            until(new ExpectedCondition<Boolean>() {
+                @Override
+                public Boolean apply(WebDriver from) {
+                    return !from.findElements(by).isEmpty();
+                }
+            });
+        } catch (RuntimeException e) {
+            error("element " + by + "could not be found", e);
+        }
+    }
+
+    public void waitUntilInvisible(final By by) {
+        try {
+            until(new ExpectedCondition<Boolean>() {
+                @Override
+                public Boolean apply(WebDriver from) {
+                    WebElement findElement = from.findElement(by);
+                    return !findElement.isDisplayed();
+                }
+            });
+        } catch (RuntimeException e) {
+            error("element " + by + " is visible", e);
+        }
+    }
+
+    public boolean until(Function<WebDriver, Boolean> function) {
+        StopWatch stopWatch = new StopWatch();
+        stopWatch.start();
+        try {
+            // iterate until we have no more StaleElementReferenceException
+            while (true) {
+                try {
+                    return tryUntil(function);
+                } catch (StaleElementReferenceException e) {
+                    //
+                }
+            }
+        } finally {
+            stopWatch.stop();
+            message(function.getClass().getName() + " took " + stopWatch.getTotalTimeSeconds() + "s", FollowLevel.TRACE);
+        }
+    }
+
+    private boolean tryUntil(Function<WebDriver, Boolean> function) {
+        // test the function now
+        if (function.apply(webDriver)) {
+            return true;
+        }
+        // nope ? ok, once more
+        if (function.apply(webDriver)) {
+            return true;
+        }
+        // test for 1 second with very rapid tests
+        try {
+            if (new WebDriverWait(webDriver, 1).until(function)) {
+                return true;
+            }
+        } catch (Exception e) {
+            // no op
+        }
+        // ok it's still not ready, so let's wait
+        return new WebDriverWait(webDriver, driverWaitBeforeStopInSeconds).until(function);
+    }
+
+    public void step(String text) {
+        if (followVisually) {
+            message(text);
+            sleep(waitAfterStepInMs);
+        }
+    }
+
+    public void message(String text) {
+        message(text, FollowLevel.INFO);
+    }
+
+    public void message(String text, FollowLevel level) {
+        notification(text, level, "info");
+    }
+
+    public void warning(String text) {
+        notification(text, FollowLevel.INFO, "warn");
+    }
+
+    public void error(String text) {
+        if (followVisually) {
+            notification(text, FollowLevel.INFO, "error");
+            sleep(60);
+        }
+        throw new RuntimeException(text);
+    }
+
+    public void error(String text, Throwable e) {
+        if (followVisually) {
+            notification(text, FollowLevel.INFO, "error");
+            sleep(60);
+        }
+        throw new RuntimeException(text, e);
+    }
+
+    public void success(String text) {
+        success(text, this.followLevel);
+    }
+
+    public void success(String text, FollowLevel followLevel) {
+        notification(text, followLevel, "info");
+    }
+
+    public void notification(String text, FollowLevel followLevel, String type) {
+        if (!followVisually) {
+            return;
+        }
+        if (followLevel.ordinal() > this.followLevel.ordinal()) {
+            return;
+        }
+        executeJs("growlNotificationBar.renderMessage({detail: '" + javaScriptEscape(text) + "', severity: '" + type + "'});");
+        sleep(waitAfterNotificationInMs);
+    }
+
+    @SuppressWarnings("unchecked")
+    public <T> T executeJs(String js) {
+        return (T) ((JavascriptExecutor) webDriver).executeScript(js);
+    }
+
+    public void sleep(long sleepInMs) {
+        sleep(MILLISECONDS, sleepInMs);
+    }
+
+    public void sleep(TimeUnit unit, long sleepInMs) {
+        try {
+            unit.sleep(sleepInMs);
+        } catch (InterruptedException ignore) {
+            Thread.currentThread().interrupt();
+        }
+    }
+
+    public void clickLinkTitle(String title) {
+        clickCss("a[title=\"" + javaScriptEscape(title) + "\"]");
+    }
+
+    public void clickCss(String css) {
+        click(By.cssSelector(css));
+    }
+
+    public List<WebElement> findAllNow(By by) {
+        fast();
+        try {
+            return findAll(by);
+        } finally {
+            back();
+        }
+    }
+
+    public List<WebElement> findAll(By by) {
+        StopWatch stopWatch = new StopWatch();
+        stopWatch.start();
+        int i = 0;
+        try {
+            List<WebElement> findElements = webDriver.findElements(by);
+            i = findElements.size();
+            return findElements;
+        } finally {
+            stopWatch.stop();
+            message("found " + i + " results in " + stopWatch.getTotalTimeSeconds() + "s for " + by, FollowLevel.TRACE);
+        }
+    }
+
+    public WebElement find(By by) {
+        return webDriver.findElement(by);
+    }
+
+    public void click(WebElement webElement) {
+        click(webElement, null);
+    }
+
+    public void click(By by) {
+        try {
+            waitUntilDisplayed(by);
+            click(find(by), by);
+        } catch (StaleElementReferenceException e) {
+            error("Not found " + by.toString());
+            throw e;
+        }
+    }
+
+    public void click(WebElement webElement, By by) {
+        message("Clicking on " + toReadableString(webElement), TRACE);
+        waitUntilDisplayed(webElement);
+        if (followVisually) {
+            new Highlighter().highlight(((JavascriptExecutor) webDriver), webElement, by);
+        }
+        webElement.click();
+        sleep(waitAfterClickInMs);
+    }
+
+    public void clear(WebElement... webElements) {
+        for (WebElement webElement : webElements) {
+            webElement.clear();
+            sleep(waitAfterClearInMs);
+        }
+    }
+
+    public void fill(By by, String text) {
+        fill(find(by), text);
+    }
+
+    public void fill(WebElement webElement, String text) {
+        waitUntilDisplayed(webElement);
+        message("Type " + text + " in " + toReadableString(webElement), TRACE);
+        webElement.clear();
+        webElement.sendKeys(text);
+        sleep(waitAfterFillInMs);
+    }
+
+    private String toReadableString(WebElement webElement) {
+        String value = webElement.getAttribute("id");
+        if (isNotBlank(value)) {
+            return value;
+        }
+        value = webElement.getAttribute("name");
+        if (isNotBlank(value)) {
+            return value;
+        }
+        return webElement.getTagName();
+    }
+
+    public void selectComboValue(WebElement webElement, String value) {
+        new Select(webElement).selectByValue(value);
+    }
+
+    public void close() {
+        webDriver.close();
+    }
+
+    public void takeScreenshot(String description) {
+        if (webDriver instanceof TakesScreenshot) {
+            try {
+                File source = ((TakesScreenshot) webDriver).getScreenshotAs(OutputType.FILE);
+                String extension = FilenameUtils.getExtension(source.getAbsolutePath());
+                String date = DateFormatUtils.format(new Date(), "HH-mm-ss");
+                String path = "./target/screenshots/" + description + "_" + date + "." + extension;
+                FileUtils.copyFile(source, new File(path));
+            } catch (IOException e) {
+                throw new RuntimeException(e);
+            }
+        }
+    }
+}
\ No newline at end of file
diff --git a/src/test/generated-java/com/h2/demo/web/selenium/support/elements/Autocomplete.java b/src/test/generated-java/com/h2/demo/web/selenium/support/elements/Autocomplete.java
new file mode 100644
index 0000000..2165ab2
--- /dev/null
+++ b/src/test/generated-java/com/h2/demo/web/selenium/support/elements/Autocomplete.java
@@ -0,0 +1,90 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-selenium-primefaces:src/test/java/selenium/support/element/Autocomplete.p.vm.java
+ */
+package com.h2.demo.web.selenium.support.elements;
+
+import static com.google.common.collect.Lists.newArrayList;
+import static com.palominolabs.xpath.XPathUtils.getXPathString;
+
+import java.util.List;
+
+import org.openqa.selenium.By;
+import org.openqa.selenium.WebElement;
+
+public class Autocomplete extends ByCustomWebElement {
+    private final By byInput;
+    private final String xPathId;
+    private final String xPathIdPanel;
+
+    public Autocomplete(String id) {
+        super(id);
+        this.byInput = By.id(id + "_input");
+        this.xPathId = getXPathString(id);
+        this.xPathIdPanel = getXPathString(id + "_panel");
+    }
+
+    public List<String> autocompleteValues(String match) {
+        webClient.fill(byInput, match);
+        waitForCompletionPanel();
+        List<String> ret = newArrayList();
+        for (WebElement webElement : webClient.findAll(By.xpath("//div[@id=" + xPathIdPanel + "]/*/li"))) {
+            ret.add(webElement.getText());
+        }
+        webClient.find(byInput).clear();
+        return ret;
+    }
+
+    public void type(String text) {
+        complete(text, text);
+    }
+
+    public void complete(String text, String match) {
+        webClient.message("Autocomplete " + text + " and select " + match);
+        webClient.fill(byInput, text);
+        waitForCompletionPanel();
+        String matchedLi = "//div[@id=" + xPathIdPanel + "]/ul/li[@data-item-label=" + getXPathString(match) + "]";
+        webClient.click(By.xpath(matchedLi));
+    }
+
+    private void waitForCompletionPanel() {
+        webClient.waitUntilDisplayed(By.xpath("//div[@id=" + xPathIdPanel + "]"));
+        webClient.waitUntilDisplayed(By.xpath("//div[@id=" + xPathIdPanel + "]/ul"));
+    }
+
+    public void delete(String value) {
+        if (!values().contains(value)) {
+            return;
+        }
+        String xpath = "//div[@id=" + xPathId + "]//span[@class='ui-autocomplete-token-label' and text()=" + getXPathString(value)
+                + "]/../span[@class='ui-autocomplete-token-icon ui-icon ui-icon-close']";
+        for (WebElement webElement : webClient.findAll(By.xpath(xpath))) {
+            webElement.click();
+        }
+
+        String stillInContainer = "//div[@id=" + xPathId
+                + "]/ul[contains(@class,'ui-autocomplete-multiple-container')]/li/span[@class='ui-autocomplete-token-label' and text()="
+                + getXPathString(value) + "]";
+        webClient.waitUntilRemoved(By.xpath(stillInContainer));
+    }
+
+    public List<String> values() {
+        List<String> ret = newArrayList();
+        String spanValues = "//div[@id=" + xPathId
+                + "]/ul[contains(@class,'ui-autocomplete-multiple-container')]/li/span[@class='ui-autocomplete-token-label']";
+        for (WebElement webElement : webClient.findAllNow(By.xpath(spanValues))) {
+            ret.add(webElement.getText());
+        }
+        return ret;
+    }
+
+    public void reset() {
+        for (String value : values()) {
+            delete(value);
+        }
+    }
+}
diff --git a/src/test/generated-java/com/h2/demo/web/selenium/support/elements/Button.java b/src/test/generated-java/com/h2/demo/web/selenium/support/elements/Button.java
new file mode 100644
index 0000000..9bbf80a
--- /dev/null
+++ b/src/test/generated-java/com/h2/demo/web/selenium/support/elements/Button.java
@@ -0,0 +1,21 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-selenium-primefaces:src/test/java/selenium/support/element/Button.p.vm.java
+ */
+package com.h2.demo.web.selenium.support.elements;
+
+import org.openqa.selenium.By;
+
+public class Button extends ByCustomWebElement {
+    public Button(String id) {
+        super(id);
+    }
+
+    public void click() {
+        webClient.click(By.id(id));
+    }
+}
diff --git a/src/test/generated-java/com/h2/demo/web/selenium/support/elements/ByCustomWebElement.java b/src/test/generated-java/com/h2/demo/web/selenium/support/elements/ByCustomWebElement.java
new file mode 100644
index 0000000..404fa07
--- /dev/null
+++ b/src/test/generated-java/com/h2/demo/web/selenium/support/elements/ByCustomWebElement.java
@@ -0,0 +1,25 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-selenium-primefaces:src/test/java/selenium/support/element/ByCustomWebElement.p.vm.java
+ */
+package com.h2.demo.web.selenium.support.elements;
+
+import org.openqa.selenium.By;
+
+public abstract class ByCustomWebElement extends CustomWebElement {
+    protected String id;
+    protected By by;
+
+    public ByCustomWebElement(By by) {
+        this.by = by;
+    }
+
+    public ByCustomWebElement(String id) {
+        this(By.id(id));
+        this.id = id;
+    }
+}
\ No newline at end of file
diff --git a/src/test/generated-java/com/h2/demo/web/selenium/support/elements/Checkbox.java b/src/test/generated-java/com/h2/demo/web/selenium/support/elements/Checkbox.java
new file mode 100644
index 0000000..278bf5a
--- /dev/null
+++ b/src/test/generated-java/com/h2/demo/web/selenium/support/elements/Checkbox.java
@@ -0,0 +1,35 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-selenium-primefaces:src/test/java/selenium/support/element/CheckBox.p.vm.java
+ */
+package com.h2.demo.web.selenium.support.elements;
+
+public class Checkbox extends ByCustomWebElement {
+    public Checkbox(String id) {
+        super(id);
+    }
+
+    public void enable() {
+        if (isDisabled()) {
+            webClient.click(by);
+        }
+    }
+
+    public void disable() {
+        if (isEnabled()) {
+            webClient.click(by);
+        }
+    }
+
+    public boolean isDisabled() {
+        return !isEnabled();
+    }
+
+    public boolean isEnabled() {
+        return Boolean.valueOf(webClient.find(by).getAttribute("checked"));
+    }
+}
diff --git a/src/test/generated-java/com/h2/demo/web/selenium/support/elements/ChooseEnum.java b/src/test/generated-java/com/h2/demo/web/selenium/support/elements/ChooseEnum.java
new file mode 100644
index 0000000..0e6dbaf
--- /dev/null
+++ b/src/test/generated-java/com/h2/demo/web/selenium/support/elements/ChooseEnum.java
@@ -0,0 +1,30 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-selenium-primefaces:src/test/java/selenium/support/element/ChooseEnum.p.vm.java
+ */
+package com.h2.demo.web.selenium.support.elements;
+
+import static com.palominolabs.xpath.XPathUtils.getXPathString;
+
+import org.openqa.selenium.By;
+
+public class ChooseEnum<T extends Enum<? extends Enum<?>>> extends ByCustomWebElement {
+    public ChooseEnum(String id) {
+        super(id);
+    }
+
+    public void set(T value) {
+        webClient.message("Choose " + value + " for " + id);
+        String xpathExpression = "//label[@for=contains(@for, " + getXPathString(id + ":" + value.ordinal()) + ")]";
+        webClient.click(By.xpath(xpathExpression));
+    }
+
+    public boolean isSelected(T value) {
+        String xpathExpression = "//input[@type='radio' and @for=contains(@for, " + getXPathString(id + ":" + value.ordinal()) + ")]";
+        return webClient.find(By.xpath(xpathExpression)).isSelected();
+    }
+}
diff --git a/src/test/generated-java/com/h2/demo/web/selenium/support/elements/CustomWebElement.java b/src/test/generated-java/com/h2/demo/web/selenium/support/elements/CustomWebElement.java
new file mode 100644
index 0000000..8390915
--- /dev/null
+++ b/src/test/generated-java/com/h2/demo/web/selenium/support/elements/CustomWebElement.java
@@ -0,0 +1,15 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-selenium-primefaces:src/test/java/selenium/support/element/CustomWebElement.p.vm.java
+ */
+package com.h2.demo.web.selenium.support.elements;
+
+import com.h2.demo.web.selenium.support.WebClient;
+
+public abstract class CustomWebElement {
+    protected WebClient webClient;
+}
\ No newline at end of file
diff --git a/src/test/generated-java/com/h2/demo/web/selenium/support/elements/DateInput.java b/src/test/generated-java/com/h2/demo/web/selenium/support/elements/DateInput.java
new file mode 100644
index 0000000..eeec355
--- /dev/null
+++ b/src/test/generated-java/com/h2/demo/web/selenium/support/elements/DateInput.java
@@ -0,0 +1,41 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-selenium-primefaces:src/test/java/selenium/support/element/DateTimeInput.p.vm.java
+ */
+package com.h2.demo.web.selenium.support.elements;
+
+import java.util.Date;
+
+import org.springframework.context.i18n.LocaleContextHolder;
+import org.springframework.format.datetime.DateFormatter;
+
+public class DateInput extends Input<Date> {
+    private String pattern = "yyyy-MM-dd";
+
+    public DateInput(String id) {
+        super(id);
+    }
+
+    public DateInput(String id, String pattern) {
+        this(id);
+        this.pattern = pattern;
+    }
+
+    @Override
+    public void type(Date date) {
+        typeString(format(date));
+    }
+
+    @Override
+    public Date value() {
+        return null;
+    }
+
+    protected String format(Date date) {
+        return new DateFormatter(pattern).print(date, LocaleContextHolder.getLocale());
+    }
+}
diff --git a/src/test/generated-java/com/h2/demo/web/selenium/support/elements/DateRange.java b/src/test/generated-java/com/h2/demo/web/selenium/support/elements/DateRange.java
new file mode 100644
index 0000000..560b992
--- /dev/null
+++ b/src/test/generated-java/com/h2/demo/web/selenium/support/elements/DateRange.java
@@ -0,0 +1,42 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-selenium-primefaces:src/test/java/selenium/support/element/DateRange.p.vm.java
+ */
+package com.h2.demo.web.selenium.support.elements;
+
+import java.util.Date;
+
+import org.springframework.context.i18n.LocaleContextHolder;
+import org.springframework.format.datetime.DateFormatter;
+
+public class DateRange extends Range<Date> {
+    private String pattern = "yyyy-MM-dd";
+    private DateInput from;
+    private DateInput to;
+
+    public DateRange(String id) {
+        from = new DateInput(id + "RangeFrom_input");
+        to = new DateInput(id + "RangeTo_input");
+    }
+
+    public DateRange(String id, String pattern) {
+        this(id);
+        this.pattern = pattern;
+    }
+
+    public void from(Date date) {
+        from.type(date);
+    }
+
+    public void to(Date date) {
+        to.type(date);
+    }
+
+    protected String format(Date date) {
+        return new DateFormatter(pattern).print(date, LocaleContextHolder.getLocale());
+    }
+}
diff --git a/src/test/generated-java/com/h2/demo/web/selenium/support/elements/DateTimeInput.java b/src/test/generated-java/com/h2/demo/web/selenium/support/elements/DateTimeInput.java
new file mode 100644
index 0000000..dab32f4
--- /dev/null
+++ b/src/test/generated-java/com/h2/demo/web/selenium/support/elements/DateTimeInput.java
@@ -0,0 +1,15 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-selenium-primefaces:src/test/java/selenium/support/element/DateInput.p.vm.java
+ */
+package com.h2.demo.web.selenium.support.elements;
+
+public class DateTimeInput extends DateInput {
+    public DateTimeInput(String id) {
+        super(id, "yyyy-MM-dd HH:mm");
+    }
+}
diff --git a/src/test/generated-java/com/h2/demo/web/selenium/support/elements/DateTimeRange.java b/src/test/generated-java/com/h2/demo/web/selenium/support/elements/DateTimeRange.java
new file mode 100644
index 0000000..cc2828d
--- /dev/null
+++ b/src/test/generated-java/com/h2/demo/web/selenium/support/elements/DateTimeRange.java
@@ -0,0 +1,15 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-selenium-primefaces:src/test/java/selenium/support/element/DateTimeRange.p.vm.java
+ */
+package com.h2.demo.web.selenium.support.elements;
+
+public class DateTimeRange extends DateRange {
+    public DateTimeRange(String id) {
+        super(id, "yyyy-MM-dd HH:mm");
+    }
+}
diff --git a/src/test/generated-java/com/h2/demo/web/selenium/support/elements/EditAction.java b/src/test/generated-java/com/h2/demo/web/selenium/support/elements/EditAction.java
new file mode 100644
index 0000000..a444d11
--- /dev/null
+++ b/src/test/generated-java/com/h2/demo/web/selenium/support/elements/EditAction.java
@@ -0,0 +1,18 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-selenium-primefaces:src/test/java/selenium/support/element/EditAction.p.vm.java
+ */
+package com.h2.demo.web.selenium.support.elements;
+
+public class EditAction extends CustomWebElement {
+    public Button quit = new Button("form:quit");
+    public Button print = new Button("form:print");
+    public Button delete = new Button("form:delete");
+    public Button save = new Button("form:saveAndClose");
+    public Button close = new Button("form:close");
+    public Button ok = new Button("form:ok");
+}
\ No newline at end of file
diff --git a/src/test/generated-java/com/h2/demo/web/selenium/support/elements/EntityAction.java b/src/test/generated-java/com/h2/demo/web/selenium/support/elements/EntityAction.java
new file mode 100644
index 0000000..2fd5c53
--- /dev/null
+++ b/src/test/generated-java/com/h2/demo/web/selenium/support/elements/EntityAction.java
@@ -0,0 +1,16 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-selenium-primefaces:src/test/java/selenium/support/element/EntityAction.p.vm.java
+ */
+package com.h2.demo.web.selenium.support.elements;
+
+public class EntityAction extends CustomWebElement {
+    public Button saveAndClose = new Button("form:saveAndClose");
+    public Button close = new Button("form:close");
+    public Button delete = new Button("form:delete");
+    public Button create = new Button("form:create");
+}
diff --git a/src/test/generated-java/com/h2/demo/web/selenium/support/elements/Input.java b/src/test/generated-java/com/h2/demo/web/selenium/support/elements/Input.java
new file mode 100644
index 0000000..6166c8d
--- /dev/null
+++ b/src/test/generated-java/com/h2/demo/web/selenium/support/elements/Input.java
@@ -0,0 +1,27 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-selenium-primefaces:src/test/java/selenium/support/element/Input.p.vm.java
+ */
+package com.h2.demo.web.selenium.support.elements;
+
+public abstract class Input<T> extends ByCustomWebElement {
+    public Input(String id) {
+        super(id);
+    }
+
+    public abstract void type(T value);
+
+    public abstract T value();
+
+    protected void typeString(String value) {
+        webClient.fill(by, value);
+    }
+
+    protected String valueAttribute() {
+        return webClient.find(by).getAttribute("value");
+    }
+}
diff --git a/src/test/generated-java/com/h2/demo/web/selenium/support/elements/IntegerInput.java b/src/test/generated-java/com/h2/demo/web/selenium/support/elements/IntegerInput.java
new file mode 100644
index 0000000..3ae83c1
--- /dev/null
+++ b/src/test/generated-java/com/h2/demo/web/selenium/support/elements/IntegerInput.java
@@ -0,0 +1,30 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-selenium-primefaces:src/test/java/selenium/support/element/IntegerInput.p.vm.java
+ */
+package com.h2.demo.web.selenium.support.elements;
+
+import org.apache.commons.lang.math.NumberUtils;
+
+public class IntegerInput extends Input<Integer> {
+    public IntegerInput(String id) {
+        super(id);
+    }
+
+    public void type(Integer value) {
+        typeString(value.toString());
+    }
+
+    public Integer value() {
+        return Integer.valueOf(valueAttribute());
+    }
+
+    public boolean hasValue() {
+        return NumberUtils.isNumber(valueAttribute());
+    }
+
+}
diff --git a/src/test/generated-java/com/h2/demo/web/selenium/support/elements/Link.java b/src/test/generated-java/com/h2/demo/web/selenium/support/elements/Link.java
new file mode 100644
index 0000000..d9e1665
--- /dev/null
+++ b/src/test/generated-java/com/h2/demo/web/selenium/support/elements/Link.java
@@ -0,0 +1,24 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-selenium-primefaces:src/test/java/selenium/support/element/Link.p.vm.java
+ */
+package com.h2.demo.web.selenium.support.elements;
+
+public class Link extends ByCustomWebElement {
+    public Link(String id) {
+        super(id);
+    }
+
+    public String getText() {
+        webClient.waitUntilDisplayed(by);
+        return webClient.find(by).getText();
+    }
+
+    public void click() {
+        webClient.click(by);
+    }
+}
\ No newline at end of file
diff --git a/src/test/generated-java/com/h2/demo/web/selenium/support/elements/ListBox.java b/src/test/generated-java/com/h2/demo/web/selenium/support/elements/ListBox.java
new file mode 100644
index 0000000..f29b060
--- /dev/null
+++ b/src/test/generated-java/com/h2/demo/web/selenium/support/elements/ListBox.java
@@ -0,0 +1,118 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-selenium-primefaces:src/test/java/selenium/support/element/ListBox.p.vm.java
+ */
+package com.h2.demo.web.selenium.support.elements;
+
+import static com.google.common.collect.Lists.newArrayList;
+import static com.palominolabs.xpath.XPathUtils.getXPathString;
+
+import java.util.List;
+
+import org.openqa.selenium.By;
+import org.openqa.selenium.WebElement;
+
+public class ListBox extends ByCustomWebElement {
+    private final String xPathId;
+
+    public ListBox(String id) {
+        super(id);
+        this.xPathId = getXPathString(id);
+    }
+
+    private List<WebElement> getOptions() {
+        String xpath = "//select[@id=" + xPathId + "]/option";
+        return webClient.findAll(By.xpath(xpath));
+
+    }
+
+    public List<String> texts() {
+        List<String> ret = newArrayList();
+        for (WebElement webElement : getOptions()) {
+            ret.add(webElement.getText());
+        }
+        return ret;
+    }
+
+    public List<String> selectedTexts() {
+        List<String> ret = newArrayList();
+        for (WebElement webElement : getOptions()) {
+            if (webElement.isSelected()) {
+                ret.add(webElement.getText());
+            }
+        }
+        return ret;
+    }
+
+    public List<String> selectedValues() {
+        List<String> ret = newArrayList();
+        for (WebElement webElement : getOptions()) {
+            if (webElement.isSelected()) {
+                ret.add(webElement.getAttribute("value"));
+            }
+        }
+        return ret;
+    }
+
+    public List<String> values() {
+        List<String> ret = newArrayList();
+        for (WebElement webElement : getOptions()) {
+            ret.add(webElement.getAttribute("value"));
+        }
+        return ret;
+    }
+
+    public String selectedValue() {
+        for (WebElement webElement : getOptions()) {
+            if (webElement.isSelected()) {
+                return webElement.getAttribute("value");
+            }
+        }
+        return null;
+    }
+
+    public String selectedText() {
+        for (WebElement webElement : getOptions()) {
+            if (webElement.isSelected()) {
+                return webElement.getText();
+            }
+        }
+        return null;
+    }
+
+    public void text(String... texts) {
+        for (String text : texts) {
+            String xpath = "//select[@id=" + xPathId + "]/option[contains(text(), " + getXPathString(text) + ")]";
+            webClient.click(By.xpath(xpath));
+        }
+    }
+
+    public void value(String... values) {
+        for (String value : values) {
+            By xpath = By.xpath("//select[@id=" + xPathId + "]/option[contains(@value, " + getXPathString(value) + ")]");
+            if (!webClient.find(xpath).isSelected()) {
+                webClient.click(xpath);
+            }
+        }
+    }
+
+    public void selectAll() {
+        for (WebElement webElement : getOptions()) {
+            if (!webElement.isSelected()) {
+                webClient.click(webElement);
+            }
+        }
+    }
+
+    public void unselectAll() {
+        for (WebElement webElement : getOptions()) {
+            if (webElement.isSelected()) {
+                webClient.click(webElement);
+            }
+        }
+    }
+}
diff --git a/src/test/generated-java/com/h2/demo/web/selenium/support/elements/ManyBooleans.java b/src/test/generated-java/com/h2/demo/web/selenium/support/elements/ManyBooleans.java
new file mode 100644
index 0000000..3b970cf
--- /dev/null
+++ b/src/test/generated-java/com/h2/demo/web/selenium/support/elements/ManyBooleans.java
@@ -0,0 +1,28 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-selenium-primefaces:src/test/java/selenium/support/element/ManyBooleans.p.vm.java
+ */
+package com.h2.demo.web.selenium.support.elements;
+
+import static com.palominolabs.xpath.XPathUtils.getXPathString;
+
+import org.openqa.selenium.By;
+
+public class ManyBooleans extends ByCustomWebElement {
+    private final String xPathId;
+
+    public ManyBooleans(String id) {
+        super(id);
+        this.xPathId = getXPathString(id);
+    }
+
+    public void choose(Boolean... values) {
+        for (Boolean value : values) {
+            webClient.click(By.xpath("//input[@type='checkbox' and @name=" + xPathId + " and @value=" + getXPathString(value ? "true" : "false") + "]"));
+        }
+    }
+}
diff --git a/src/test/generated-java/com/h2/demo/web/selenium/support/elements/ManyEnums.java b/src/test/generated-java/com/h2/demo/web/selenium/support/elements/ManyEnums.java
new file mode 100644
index 0000000..6fd9204
--- /dev/null
+++ b/src/test/generated-java/com/h2/demo/web/selenium/support/elements/ManyEnums.java
@@ -0,0 +1,51 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-selenium-primefaces:src/test/java/selenium/support/element/ManyEnums.p.vm.java
+ */
+package com.h2.demo.web.selenium.support.elements;
+
+import static com.google.common.collect.Lists.newArrayList;
+import static com.palominolabs.xpath.XPathUtils.getXPathString;
+
+import java.util.List;
+
+import org.openqa.selenium.By;
+import org.openqa.selenium.WebElement;
+
+public class ManyEnums<T extends Enum<T>> extends CustomWebElement {
+    private final String xPathId;
+    private final Class<T> clazz;
+
+    public ManyEnums(Class<T> clazz, String id) {
+        this.clazz = clazz;
+        this.xPathId = getXPathString(id);
+    }
+
+    public boolean isSelected(T value) {
+        return webClient.find(By.xpath("//input[@type='checkbox' and @name=" + xPathId + " and @value=" + getXPathString(value.name()) + "]")).isSelected();
+
+    }
+
+    public void select(T... values) {
+        for (T value : values) {
+            if (!isSelected(value)) {
+                webClient.click(By.xpath("//input[@type='checkbox' and @name=" + xPathId + " and @value=" + getXPathString(value.name()) + "]"));
+            }
+        }
+    }
+
+    public List<T> values() {
+        List<T> ret = newArrayList();
+        for (WebElement webElement : webClient.findAll(By.xpath("//input[@type='checkbox' and @name=" + xPathId + "]"))) {
+            if (webElement.isSelected()) {
+                String attribute = webElement.getAttribute("value");
+                ret.add(Enum.valueOf(clazz, attribute));
+            }
+        }
+        return ret;
+    }
+}
diff --git a/src/test/generated-java/com/h2/demo/web/selenium/support/elements/ManyToOne.java b/src/test/generated-java/com/h2/demo/web/selenium/support/elements/ManyToOne.java
new file mode 100644
index 0000000..14315c5
--- /dev/null
+++ b/src/test/generated-java/com/h2/demo/web/selenium/support/elements/ManyToOne.java
@@ -0,0 +1,23 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-selenium-primefaces:src/test/java/selenium/support/element/ManyToOne.p.vm.java
+ */
+package com.h2.demo.web.selenium.support.elements;
+
+import org.apache.commons.lang.WordUtils;
+
+public class ManyToOne extends Autocomplete {
+    public Button view;
+    public Button remove;
+
+    public ManyToOne(String id) {
+        super(id);
+        String capitalized = WordUtils.capitalize(id.split(":")[1]);
+        view = new Button("form:view" + capitalized);
+        remove = new Button("form:remove" + capitalized);
+    }
+}
diff --git a/src/test/generated-java/com/h2/demo/web/selenium/support/elements/Messages.java b/src/test/generated-java/com/h2/demo/web/selenium/support/elements/Messages.java
new file mode 100644
index 0000000..cd70277
--- /dev/null
+++ b/src/test/generated-java/com/h2/demo/web/selenium/support/elements/Messages.java
@@ -0,0 +1,58 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-selenium-primefaces:src/test/java/selenium/support/element/Messages.p.vm.java
+ */
+package com.h2.demo.web.selenium.support.elements;
+
+import static com.google.common.collect.Lists.newArrayList;
+import static com.palominolabs.xpath.XPathUtils.getXPathString;
+
+import java.util.List;
+
+import org.openqa.selenium.By;
+import org.openqa.selenium.WebElement;
+import org.openqa.selenium.support.FindBy;
+
+public class Messages extends CustomWebElement {
+    private static final String MESSAGES_ERROR_LEVEL = "error";
+    private static final String MESSAGES_INFO_LEVEL = "info";
+    @FindBy(id = "form:messages")
+    public WebElement messagesPanel;
+
+    public void hasMessage(String... values) {
+        for (String value : values) {
+            webClient.waitUntilTextIsPresent(messagesPanel, value);
+        }
+    }
+
+    public void hasError(String... values) {
+        for (String value : values) {
+            hasMessageLevel(value, MESSAGES_ERROR_LEVEL);
+        }
+    }
+
+    public void hasInfo(String... values) {
+        for (String value : values) {
+            hasMessageLevel(value, MESSAGES_INFO_LEVEL);
+        }
+    }
+
+    private void hasMessageLevel(String message, String level) {
+        String xpath = "//div[@id='form:messages']/div[contains(@class, 'ui-messages-" + level + "')]//span[contains(@class, 'ui-messages-" + level
+                + "-summary' text()=" + getXPathString(message) + "]";
+        webClient.waitUntilDisplayed(By.xpath(xpath));
+    }
+
+    public List<String> getMessages() {
+        List<String> ret = newArrayList();
+        By xpath = By.xpath("//div[@id='form:messages']//span[contains(@class,'-summary')]/a");
+        for (WebElement webElement : webClient.findAll(xpath)) {
+            ret.add(webElement.getText());
+        }
+        return ret;
+    }
+}
diff --git a/src/test/generated-java/com/h2/demo/web/selenium/support/elements/NoInverseManyToOne.java b/src/test/generated-java/com/h2/demo/web/selenium/support/elements/NoInverseManyToOne.java
new file mode 100644
index 0000000..0be8088
--- /dev/null
+++ b/src/test/generated-java/com/h2/demo/web/selenium/support/elements/NoInverseManyToOne.java
@@ -0,0 +1,23 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-selenium-primefaces:src/test/java/selenium/support/element/NoInverseManyToOne.p.vm.java
+ */
+package com.h2.demo.web.selenium.support.elements;
+
+import org.apache.commons.lang.WordUtils;
+
+public class NoInverseManyToOne extends ManyToOne {
+    public Button select;
+    public Button edit;
+
+    public NoInverseManyToOne(String id) {
+        super(id);
+        String capitalized = WordUtils.capitalize(id.split(":")[1]);
+        select = new Button("form:select" + capitalized);
+        edit = new Button("form:edit" + capitalized);
+    }
+}
diff --git a/src/test/generated-java/com/h2/demo/web/selenium/support/elements/NoInverseOneToOne.java b/src/test/generated-java/com/h2/demo/web/selenium/support/elements/NoInverseOneToOne.java
new file mode 100644
index 0000000..2dd0ae8
--- /dev/null
+++ b/src/test/generated-java/com/h2/demo/web/selenium/support/elements/NoInverseOneToOne.java
@@ -0,0 +1,21 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-selenium-primefaces:src/test/java/selenium/support/element/NoInverseOneToOne.p.vm.java
+ */
+package com.h2.demo.web.selenium.support.elements;
+
+import org.apache.commons.lang.WordUtils;
+
+public class NoInverseOneToOne extends OneToOne {
+    public Button select;
+
+    public NoInverseOneToOne(String id) {
+        super(id);
+        String capitalized = WordUtils.capitalize(id.split(":")[1]);
+        select = new Button("form:select" + capitalized);
+    }
+}
diff --git a/src/test/generated-java/com/h2/demo/web/selenium/support/elements/OneToOne.java b/src/test/generated-java/com/h2/demo/web/selenium/support/elements/OneToOne.java
new file mode 100644
index 0000000..24ae7b6
--- /dev/null
+++ b/src/test/generated-java/com/h2/demo/web/selenium/support/elements/OneToOne.java
@@ -0,0 +1,25 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-selenium-primefaces:src/test/java/selenium/support/element/OneToOne.p.vm.java
+ */
+package com.h2.demo.web.selenium.support.elements;
+
+import org.apache.commons.lang.WordUtils;
+
+public class OneToOne extends Autocomplete {
+    public Button view;
+    public Button edit;
+    public Button add;
+
+    public OneToOne(String id) {
+        super(id);
+        String capitalized = WordUtils.capitalize(id.split(":")[1]);
+        view = new Button("form:view" + capitalized);
+        edit = new Button("form:edit" + capitalized);
+        add = new Button("form:add" + capitalized);
+    }
+}
diff --git a/src/test/generated-java/com/h2/demo/web/selenium/support/elements/OrderBy.java b/src/test/generated-java/com/h2/demo/web/selenium/support/elements/OrderBy.java
new file mode 100644
index 0000000..eae0991
--- /dev/null
+++ b/src/test/generated-java/com/h2/demo/web/selenium/support/elements/OrderBy.java
@@ -0,0 +1,76 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-selenium-primefaces:src/test/java/selenium/support/element/OrderBy.p.vm.java
+ */
+package com.h2.demo.web.selenium.support.elements;
+
+import static com.palominolabs.xpath.XPathUtils.getXPathString;
+
+import javax.annotation.Nullable;
+
+import org.openqa.selenium.By;
+import org.openqa.selenium.WebDriver;
+import org.openqa.selenium.WebElement;
+
+import com.google.common.base.Function;
+
+public class OrderBy extends ByCustomWebElement {
+    public OrderBy(String id) {
+        super(id);
+    }
+
+    private WebElement icon() {
+        String xpath = "//tr/th[@id=" + getXPathString("form:searchResults:" + id) + "]/span[2]";
+        return webClient.find(By.xpath(xpath));
+    }
+
+    public boolean containsClass(String cssClass) {
+        return icon().getAttribute("class").contains(cssClass);
+    }
+
+    public boolean isUp() {
+        return containsClass("ui-icon-triangle-1-n");
+    }
+
+    public boolean isDown() {
+        return containsClass("ui-icon-triangle-1-s");
+    }
+
+    public boolean isUnsorted() {
+        return !isUp() && !isDown();
+    }
+
+    public void up() {
+        if (!isUp()) {
+            icon().click();
+            webClient.until(new Function<WebDriver, Boolean>() {
+                @Override
+                @Nullable
+                public Boolean apply(WebDriver input) {
+                    return isUp();
+                }
+            });
+        }
+    }
+
+    public void down() {
+        if (isDown()) {
+            return;
+        }
+        if (isUnsorted()) {
+            up();
+        }
+        webClient.click(icon());
+        webClient.until(new Function<WebDriver, Boolean>() {
+            @Override
+            @Nullable
+            public Boolean apply(WebDriver input) {
+                return isDown();
+            }
+        });
+    }
+}
diff --git a/src/test/generated-java/com/h2/demo/web/selenium/support/elements/Paginator.java b/src/test/generated-java/com/h2/demo/web/selenium/support/elements/Paginator.java
new file mode 100644
index 0000000..22dd59d
--- /dev/null
+++ b/src/test/generated-java/com/h2/demo/web/selenium/support/elements/Paginator.java
@@ -0,0 +1,47 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-selenium-primefaces:src/test/java/selenium/support/element/Paginator.p.vm.java
+ */
+package com.h2.demo.web.selenium.support.elements;
+
+import org.openqa.selenium.WebElement;
+import org.openqa.selenium.By;
+import org.openqa.selenium.support.FindBy;
+
+public class Paginator extends CustomWebElement {
+    // paginator
+    @FindBy(css = "div.ui-paginator-bottom span.ui-paginator-pages span.ui-state-active")
+    public WebElement paginatorCurrent;
+    @FindBy(css = "div.ui-paginator-bottom span.ui-icon-seek-next")
+    public WebElement paginatorNextButton;
+    @FindBy(css = "div.ui-paginator-bottom span.ui-icon-seek-prev")
+    public WebElement paginatorPrevButton;
+
+    // sum
+    @FindBy(id = "searchResultsRegion")
+    public WebElement searchResultsRegion;
+
+    public void next() {
+        webClient.click(paginatorNextButton);
+    }
+
+    public void previous() {
+        webClient.click(paginatorPrevButton);
+    }
+
+    public void isPage(int pageId) {
+        webClient.waitUntilTextIsPresent(paginatorCurrent, String.valueOf(pageId));
+    }
+
+    public void hasResult(String value) {
+        webClient.waitUntilTextIsPresent(searchResultsRegion, value);
+    }
+
+    public void hasSize(int size) {
+        webClient.waitUntilFound(By.xpath("//span[@id='searchResultsRegion' and @nb-results='" + size + "']"));
+    }
+}
diff --git a/src/test/generated-java/com/h2/demo/web/selenium/support/elements/Range.java b/src/test/generated-java/com/h2/demo/web/selenium/support/elements/Range.java
new file mode 100644
index 0000000..ecb23dc
--- /dev/null
+++ b/src/test/generated-java/com/h2/demo/web/selenium/support/elements/Range.java
@@ -0,0 +1,15 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-selenium-primefaces:src/test/java/selenium/support/element/Range.p.vm.java
+ */
+package com.h2.demo.web.selenium.support.elements;
+
+public abstract class Range<T> extends CustomWebElement {
+    public abstract void from(T value);
+
+    public abstract void to(T value);
+}
diff --git a/src/test/generated-java/com/h2/demo/web/selenium/support/elements/SaveSearch.java b/src/test/generated-java/com/h2/demo/web/selenium/support/elements/SaveSearch.java
new file mode 100644
index 0000000..f8eeeca
--- /dev/null
+++ b/src/test/generated-java/com/h2/demo/web/selenium/support/elements/SaveSearch.java
@@ -0,0 +1,47 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-selenium-primefaces:src/test/java/selenium/support/element/SaveSearch.p.vm.java
+ */
+package com.h2.demo.web.selenium.support.elements;
+
+import static com.google.common.collect.Lists.newArrayList;
+import static com.palominolabs.xpath.XPathUtils.getXPathString;
+
+import java.util.Date;
+import java.util.List;
+
+import org.openqa.selenium.By;
+import org.openqa.selenium.WebElement;
+
+public class SaveSearch extends ByCustomWebElement {
+    public SaveSearch(String id) {
+        super(id);
+    }
+
+    public void save(String name) {
+        webClient.fill(By.id(id + "_input"), name);
+        webClient.click(By.id("form:saveSearch"));
+        webClient.waitUntilTextIsPresent("Search criteria saved as " + name);
+    }
+
+    public void load(String name) {
+
+    }
+
+    public List<String> values() {
+        System.out.println("click dropdown " + new Date());
+        webClient.click(By.xpath("//span[@id=" + getXPathString(id) + "]/button/span[@class='ui-button-text']"));
+        webClient.waitUntilDisplayed(By.id(id + "_panel"));
+        System.out.println("--> ok is displayed autocomplete popup " + new Date());
+        List<String> ret = newArrayList();
+        String popup = "//div[@id=" + getXPathString(id + "_panel") + "]/ul/li";
+        for (WebElement webElement : webClient.findAll(By.xpath(popup))) {
+            ret.add(webElement.getText());
+        }
+        return ret;
+    }
+}
diff --git a/src/test/generated-java/com/h2/demo/web/selenium/support/elements/SearchForm.java b/src/test/generated-java/com/h2/demo/web/selenium/support/elements/SearchForm.java
new file mode 100644
index 0000000..8a8d8a0
--- /dev/null
+++ b/src/test/generated-java/com/h2/demo/web/selenium/support/elements/SearchForm.java
@@ -0,0 +1,35 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-selenium-primefaces:src/test/java/selenium/support/element/SearchForm.p.vm.java
+ */
+package com.h2.demo.web.selenium.support.elements;
+
+import java.util.concurrent.TimeUnit;
+
+import org.openqa.selenium.By;
+
+public class SearchForm extends CustomWebElement {
+
+    public void search() {
+        webClient.click(By.id("form:search"));
+        webClient.waitUntilEnabled(By.id("form:ajaxSearchSuccess"));
+    }
+
+    public void reset() {
+        webClient.click(By.id("form:resetSearch"));
+        try {
+            TimeUnit.MILLISECONDS.sleep(400);
+        } catch (InterruptedException e) {
+            // until we have feedback like a message
+            e.printStackTrace();
+        }
+    }
+
+    public void excel() {
+        // webClient.click(By.id("form:excel"));
+    }
+}
diff --git a/src/test/generated-java/com/h2/demo/web/selenium/support/elements/StringInput.java b/src/test/generated-java/com/h2/demo/web/selenium/support/elements/StringInput.java
new file mode 100644
index 0000000..c8c96ed
--- /dev/null
+++ b/src/test/generated-java/com/h2/demo/web/selenium/support/elements/StringInput.java
@@ -0,0 +1,23 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-selenium-primefaces:src/test/java/selenium/support/element/StringInput.p.vm.java
+ */
+package com.h2.demo.web.selenium.support.elements;
+
+public class StringInput extends Input<String> {
+    public StringInput(String id) {
+        super(id);
+    }
+
+    public void type(String value) {
+        typeString(value);
+    }
+
+    public String value() {
+        return valueAttribute();
+    }
+}
diff --git a/src/test/generated-java/com/h2/demo/web/selenium/support/elements/StringRange.java b/src/test/generated-java/com/h2/demo/web/selenium/support/elements/StringRange.java
new file mode 100644
index 0000000..41a4426
--- /dev/null
+++ b/src/test/generated-java/com/h2/demo/web/selenium/support/elements/StringRange.java
@@ -0,0 +1,27 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-selenium-primefaces:src/test/java/selenium/support/element/StringRange.p.vm.java
+ */
+package com.h2.demo.web.selenium.support.elements;
+
+public class StringRange extends Range<String> {
+    private final StringInput from;
+    private final StringInput to;
+
+    public StringRange(String id) {
+        from = new StringInput(id + "RangeFrom_input");
+        to = new StringInput(id + "RangeTo_input");
+    }
+
+    public void from(String value) {
+        from.type(value);
+    }
+
+    public void to(String value) {
+        to.type(value);
+    }
+}
diff --git a/src/test/generated-java/com/h2/demo/web/selenium/support/elements/Tab.java b/src/test/generated-java/com/h2/demo/web/selenium/support/elements/Tab.java
new file mode 100644
index 0000000..48622bc
--- /dev/null
+++ b/src/test/generated-java/com/h2/demo/web/selenium/support/elements/Tab.java
@@ -0,0 +1,101 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-selenium-primefaces:src/test/java/selenium/support/element/Tab.p.vm.java
+ */
+package com.h2.demo.web.selenium.support.elements;
+
+import static com.google.common.collect.Lists.newArrayList;
+import static com.palominolabs.xpath.XPathUtils.getXPathString;
+import static org.apache.commons.lang.WordUtils.capitalize;
+
+import java.util.List;
+
+import org.openqa.selenium.By;
+import org.openqa.selenium.WebElement;
+
+public class Tab extends ByCustomWebElement {
+    private final String idPlural;
+
+    public Tab(String id, String idPlural) {
+        super(id);
+        this.idPlural = idPlural;
+    }
+
+    public void open() {
+        webClient.message("Open tab " + id);
+        webClient.click(By.xpath("//div[@id='form:tabs']//a[@href='#form:tabs:" + idPlural + "']"));
+        webClient.waitUntilDisplayed(By.xpath("//div[@id='form:tabs:" + idPlural + "']"));
+    }
+
+    public void add() {
+        webClient.message("Add " + id);
+        clickInHeaderUsingClass("iconAdd");
+    }
+
+    public void search() {
+        webClient.message("Search " + id);
+        clickInHeaderUsingClass("iconSearch");
+    }
+
+    private void clickInHeaderUsingClass(String className) {
+        String xpath = "//div[@id='form:tabs:" + idPlural + "']//th[contains(@class,'actions-column')]//div[contains(@class,'" + className + "')]";
+        webClient.click(By.xpath(xpath));
+    }
+
+    public void view(String value) {
+        webClient.message("View " + value);
+        webClient.clickLinkTitle("View " + value);
+    }
+
+    public void edit(String value) {
+        webClient.message("Edit " + value);
+        webClient.clickLinkTitle("Edit " + value);
+    }
+
+    public void delete(String value) {
+        webClient.message("Delete " + value);
+        webClient.clickLinkTitle("Remove " + value);
+    }
+
+    public void select(String value) {
+        webClient.message("Select " + value);
+        webClient.clickLinkTitle("Select " + value);
+    }
+
+    public void remove(String value) {
+        webClient.message("Remove " + value);
+        webClient.clickLinkTitle("Remove " + value);
+    }
+
+    public void confirmRemove() {
+        By yesButton = By.name("form:askForRemove" + capitalize(id) + "DialogYes");
+        webClient.click(yesButton);
+        webClient.waitUntilInvisible(yesButton);
+    }
+
+    public void cancelRemove() {
+        By noButton = By.name("form:askForRemove" + capitalize(id) + "DialogNo");
+        webClient.click(noButton);
+        webClient.waitUntilInvisible(noButton);
+    }
+
+    public List<String> column(String columnName) {
+        By values = By.xpath("//div[@id='form:tabs:" + idPlural + "']//tr/td[contains(@class," + getXPathString(columnName) + ")]");
+        webClient.waitUntilFound(values);
+        List<String> ret = newArrayList();
+        for (WebElement webElement : webClient.findAll(values)) {
+            ret.add(webElement.getText());
+        }
+        return ret;
+    }
+
+    public String columnAt(String columnName, int line) {
+        By valueAt = By.xpath("//tbody[@id='form:tabs:" + idPlural + "List_data']//tr[" + line + "]/td[contains(@class," + getXPathString(columnName) + ")]");
+        webClient.waitUntilFound(valueAt);
+        return webClient.find(valueAt).getText();
+    }
+}
diff --git a/src/test/generated-java/com/h2/demo/web/selenium/support/elements/Table.java b/src/test/generated-java/com/h2/demo/web/selenium/support/elements/Table.java
new file mode 100644
index 0000000..04d53fd
--- /dev/null
+++ b/src/test/generated-java/com/h2/demo/web/selenium/support/elements/Table.java
@@ -0,0 +1,117 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-selenium-primefaces:src/test/java/selenium/support/element/Table.p.vm.java
+ */
+package com.h2.demo.web.selenium.support.elements;
+
+import static com.google.common.collect.Lists.newArrayList;
+import static com.palominolabs.xpath.XPathUtils.getXPathString;
+
+import java.util.List;
+
+import org.openqa.selenium.By;
+import org.openqa.selenium.WebElement;
+
+public class Table extends CustomWebElement {
+    public Paginator paginator;
+
+    public void edit(String value) {
+        webClient.clickLinkTitle("Edit " + value);
+    }
+
+    public void view(String value) {
+        webClient.clickLinkTitle("View " + value);
+    }
+
+    public void select(String value) {
+        webClient.clickLinkTitle("Select " + value);
+    }
+
+    public void delete(String value) {
+        webClient.clickLinkTitle("Delete " + value);
+    }
+
+    public void confirmDelete() {
+        By yesButton = By.name("form:askForDeleteItemDialogYes");
+        webClient.click(yesButton);
+        webClient.waitUntilInvisible(yesButton);
+    }
+
+    public void cancelDelete() {
+        By noButton = By.name("form:askForDeleteItemDialogNo");
+        webClient.click(noButton);
+        webClient.waitUntilInvisible(noButton);
+    }
+
+    public void hasText(String... values) {
+        for (String value : values) {
+            webClient.waitUntilTextIsPresent(value);
+        }
+    }
+
+    public void hasSize(int size) {
+        paginator.hasSize(size);
+    }
+
+    public void editLine(int line) {
+        clickNthLineWithIcon(line, "iconEdit");
+    }
+
+    public void selectLine(int line) {
+        clickNthLineWithIcon(line, "iconSelect");
+    }
+
+    public void viewLine(int line) {
+        clickNthLineWithIcon(line, "iconView");
+    }
+
+    public void deleteLine(int line) {
+        clickNthLineWithIcon(line, "iconDelete");
+    }
+
+    private void clickNthLineWithIcon(int line, String icon) {
+        String xpath = "//div[@id='form:searchResults']//table/tbody/tr[" + line + "]/td[contains(@class,'actions-column')]//div[contains(@class,'" + icon
+                + "')]";
+        webClient.click(By.xpath(xpath));
+    }
+
+    public void selectAll() {
+        By selectAllCheckBox = By
+                .xpath("//table/thead[@id='form:searchResults_head']/tr/th[@id='form:searchResults:selectAll']/div[contains(@class,'ui-chkbox-all')]/div[contains(@class,'ui-chkbox-box')]");
+        webClient.waitUntilEnabled(selectAllCheckBox);
+        webClient.find(selectAllCheckBox).click();
+        By unselectedCheckboxes = By.xpath("//div[@id='form:searchResults']//td[@class='ui-selection-column']//span[not(contains(@class,'ui-icon-check'))]");
+        webClient.waitUntilRemoved(unselectedCheckboxes);
+    }
+
+    public void confirmSelection() {
+        String selectMultipleSelectionIcon = "//div[@id='form:searchResults']/div[contains(@class,'ui-datatable-footer')]//div[contains(@class,'iconSelect')]";
+        webClient.click(By.xpath(selectMultipleSelectionIcon));
+    }
+
+    /**
+     * Get the values for a given column
+     */
+    public List<String> column(String columnName) {
+        By values = By.xpath("//div[@id='form:searchResults']//tbody/tr/td[contains(@class," + getXPathString(columnName) + ")]");
+        webClient.waitUntilFound(values);
+        List<String> ret = newArrayList();
+        for (WebElement webElement : webClient.findAll(values)) {
+            ret.add(webElement.getText());
+        }
+        return ret;
+    }
+
+    /**
+     * Get the values for a given column and a line, please note that lines start at 1
+     */
+    public String columnAt(String columnName, int line) {
+        By value = By.xpath("//div[@id='form:searchResults']//tbody/tr[" + line + "]/td[contains(@class," + getXPathString(columnName) + ")]");
+        webClient.waitUntilFound(value);
+        return webClient.find(value).getText();
+    }
+}
diff --git a/src/test/generated-java/com/h2/demo/web/selenium/support/elements/Upload.java b/src/test/generated-java/com/h2/demo/web/selenium/support/elements/Upload.java
new file mode 100644
index 0000000..13c488f
--- /dev/null
+++ b/src/test/generated-java/com/h2/demo/web/selenium/support/elements/Upload.java
@@ -0,0 +1,46 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-selenium-primefaces:src/test/java/selenium/support/element/Upload.p.vm.java
+ */
+package com.h2.demo.web.selenium.support.elements;
+
+import org.openqa.selenium.WebElement;
+
+import java.io.File;
+
+public class Upload extends ByCustomWebElement {
+    private final String jsId;
+
+    public Upload(String id) {
+        super(id + "_input");
+        jsId = "#" + id.replace(":", "\\\\:");
+    }
+
+    public void upload(String filename) {
+        upload(new File(filename));
+    }
+
+    public void upload(File file) {
+        String cssQuery = jsId + ", .ui-fileupload-choose";
+
+        // remove these css elements on upload buttons as they are not visible
+        // basically primefaces uses hacks to display a nice button, and we have to deal with it
+
+        setCss(cssQuery, "position", "initial");
+        setCss(cssQuery, "opacity", "1");
+        setCss(cssQuery, "fontSize", "7px");
+        setCss(cssQuery, "transform", "none");
+        setCss(cssQuery, "filter", "none");
+
+        WebElement upload = webClient.find(by);
+        upload.sendKeys(file.getAbsolutePath());
+    }
+
+    private String setCss(String cssQuery, String css, String value) {
+        return webClient.executeJs("$('" + cssQuery + "').css('" + css + "', '" + value + "');");
+    }
+}
diff --git a/src/test/generated-java/com/h2/demo/web/selenium/support/elements/WebElementConfiguration.java b/src/test/generated-java/com/h2/demo/web/selenium/support/elements/WebElementConfiguration.java
new file mode 100644
index 0000000..0ee222b
--- /dev/null
+++ b/src/test/generated-java/com/h2/demo/web/selenium/support/elements/WebElementConfiguration.java
@@ -0,0 +1,122 @@
+/*
+ * (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ * Source code generated by Celerio, a Jaxio product
+ * Want to purchase Celerio ? email us at info@jaxio.com
+ * Follow us on twitter: @springfuse
+ * Documentation: http://www.jaxio.com/documentation/celerio/
+ * Template pack-selenium-primefaces:src/test/java/selenium/support/element/WebElementConfiguration.p.vm.java
+ */
+package com.h2.demo.web.selenium.support.elements;
+
+import static com.google.common.base.Throwables.propagate;
+
+import java.lang.reflect.Field;
+import java.lang.reflect.InvocationHandler;
+import java.lang.reflect.Proxy;
+
+import org.openqa.selenium.WebElement;
+import org.openqa.selenium.internal.Locatable;
+import org.openqa.selenium.internal.WrapsElement;
+import org.openqa.selenium.support.PageFactory;
+import org.openqa.selenium.support.pagefactory.DefaultElementLocatorFactory;
+import org.openqa.selenium.support.pagefactory.ElementLocator;
+import org.openqa.selenium.support.pagefactory.ElementLocatorFactory;
+import org.openqa.selenium.support.pagefactory.FieldDecorator;
+import org.openqa.selenium.support.pagefactory.internal.LocatingElementHandler;
+
+import com.h2.demo.web.selenium.support.Page;
+import com.h2.demo.web.selenium.support.WebClient;
+
+public class WebElementConfiguration {
+    public void configure(Object page, WebClient webClient) {
+        try {
+            buildPages(page, page.getClass(), webClient);
+        } catch (Exception e) {
+            throw propagate(e);
+        }
+    }
+
+    private void buildPages(Object object, Class<?> clazz, WebClient webClient) throws Exception {
+        for (Field field : clazz.getDeclaredFields()) {
+            if (field.getType().isAnnotationPresent(Page.class)) {
+                field.setAccessible(true);
+                field.set(object, initPage(field, webClient));
+            }
+        }
+        if (clazz.getSuperclass() != null) {
+            buildPages(object, clazz.getSuperclass(), webClient);
+        }
+    }
+
+    private void setupCustomWebElements(Object object, WebClient webClient) throws Exception {
+        FieldDecorator fieldDecorator = new AnotherFieldDecorator(new DefaultElementLocatorFactory(webClient.webDriver));
+        setupCustomWebElementsForClass(object, object.getClass(), fieldDecorator, webClient);
+    }
+
+    private void setupCustomWebElementsForClass(Object object, Class<?> clazz, FieldDecorator fieldDecorator, WebClient webClient) throws Exception {
+        for (Field field : clazz.getDeclaredFields()) {
+            if (CustomWebElement.class.isAssignableFrom(field.getType())) {
+                field.setAccessible(true);
+                CustomWebElement customWebElement = (CustomWebElement) field.get(object);
+                if (customWebElement == null) {
+                    customWebElement = (CustomWebElement) field.getType().getConstructor().newInstance();
+                }
+                field.set(object, customWebElement);
+
+                // if the custom element has itself WebElement , let's dot it again
+                // we do it before assigning the proxy as our default webElement has no @FindBy annotation 
+                PageFactory.initElements(new DefaultElementLocatorFactory(webClient.webDriver), customWebElement);
+                setupCustomWebElements(customWebElement, webClient);
+
+                customWebElement.webClient = webClient;
+            }
+        }
+        if (clazz.getSuperclass() != null) {
+            setupCustomWebElementsForClass(object, clazz.getSuperclass(), fieldDecorator, webClient);
+        }
+    }
+
+    private Object initPage(Field field, WebClient webClient) throws Exception {
+        Object page = createPage(field, webClient);
+        setupCustomWebElements(page, webClient);
+        buildPages(page, page.getClass(), webClient);
+        injectWebClient(page, page.getClass(), webClient);
+        return page;
+    }
+
+    private void injectWebClient(Object page, Class<?> clazz, WebClient webClient) throws Exception {
+        for (Field field : clazz.getDeclaredFields()) {
+            if (WebClient.class.isAssignableFrom(field.getType())) {
+                field.setAccessible(true);
+                field.set(page, webClient);
+            }
+        }
+        if (clazz.getSuperclass() != null) {
+            injectWebClient(page, clazz.getSuperclass(), webClient);
+        }
+    }
+
+    private Object createPage(Field field, WebClient webClient) throws ClassNotFoundException {
+        return PageFactory.initElements(webClient.webDriver, Class.forName(field.getType().getName()));
+    }
+
+    private static class AnotherFieldDecorator implements FieldDecorator {
+
+        protected ElementLocatorFactory factory;
+
+        public AnotherFieldDecorator(ElementLocatorFactory factory) {
+            this.factory = factory;
+        }
+
+        @Override
+        public Object decorate(ClassLoader loader, Field field) {
+            ElementLocator locator = factory.createLocator(field);
+            return locator == null ? null : proxyForLocator(loader, locator);
+        }
+
+        protected WebElement proxyForLocator(ClassLoader loader, ElementLocator locator) {
+            InvocationHandler handler = new LocatingElementHandler(locator);
+            return (WebElement) Proxy.newProxyInstance(loader, new Class<?>[] { WebElement.class, WrapsElement.class, Locatable.class }, handler);
+        }
+    }
+}
\ No newline at end of file
diff --git a/src/test/resources/for_upload.txt b/src/test/resources/for_upload.txt
new file mode 100644
index 0000000..dcc2b2a
--- /dev/null
+++ b/src/test/resources/for_upload.txt
@@ -0,0 +1 @@
+to be uploaded
\ No newline at end of file
diff --git a/src/test/resources/no_extension b/src/test/resources/no_extension
new file mode 100644
index 0000000..e466dcb
--- /dev/null
+++ b/src/test/resources/no_extension
@@ -0,0 +1 @@
+invalid
\ No newline at end of file
diff --git a/src/test/resources/spring/applicationContext-test.xml b/src/test/resources/spring/applicationContext-test.xml
new file mode 100644
index 0000000..9cdf0a0
--- /dev/null
+++ b/src/test/resources/spring/applicationContext-test.xml
@@ -0,0 +1,26 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!--
+ ! (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ ! Source code generated by Celerio, a Jaxio product
+ ! Want to purchase Celerio ? email us at info@jaxio.com
+ ! Follow us on twitter: @springfuse
+ ! Documentation: http://www.jaxio.com/documentation/celerio/
+ ! Template pack-backend-jpa:src/test/resources/spring/applicationContext-test.p.vm.xml
+-->
+<beans default-lazy-init="true" xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context" xmlns:jdbc="http://www.springframework.org/schema/jdbc"
+	xsi:schemaLocation="
+			http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
+			http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.2.xsd
+			http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd">
+
+	<!-- The core application context -->
+	<import resource="classpath*:spring/applicationContext.xml" />
+
+	<!-- Simulate part of the web application context (does not apply for backend only project) -->
+	<context:component-scan base-package="com.h2.demo.web" />
+    
+    <!-- Fresh H2 is used for tests. If you want to use the dev database, comment it out -->
+	<jdbc:embedded-database id="dataSource" type="H2">
+		<jdbc:script location="file:./src/main/sql/h2/*.sql" />
+	</jdbc:embedded-database>
+</beans>
\ No newline at end of file
diff --git a/target/antrun/build-main.xml b/target/antrun/build-main.xml
new file mode 100644
index 0000000..ecba763
--- /dev/null
+++ b/target/antrun/build-main.xml
@@ -0,0 +1,16 @@
+<?xml version="1.0" encoding="UTF-8" ?>
+<project name="maven-antrun-" default="main"  >
+<target name="main">
+  <taskdef name="instrument" classname="org.hibernate.tool.instrument.javassist.InstrumentTask">
+    <classpath>
+      <path refid="maven.dependency.classpath"/>
+      <path refid="maven.runtime.classpath"/>
+    </classpath>
+  </taskdef>
+  <instrument verbose="true">
+    <fileset dir="E:\Ankush\SpringFuse\new_workspace\h2dbProject\h2project\target\classes">
+      <include name="com/h2/demo/domain/Document.class"/>
+    </fileset>
+  </instrument>
+</target>
+</project>
\ No newline at end of file
diff --git a/target/classes/META-INF/spring-orm.xml b/target/classes/META-INF/spring-orm.xml
new file mode 100644
index 0000000..eecfeb4
--- /dev/null
+++ b/target/classes/META-INF/spring-orm.xml
@@ -0,0 +1,69 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!--
+ ! (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ ! Source code generated by Celerio, a Jaxio product
+ ! Want to purchase Celerio ? email us at info@jaxio.com
+ ! Follow us on twitter: @springfuse
+ ! Documentation: http://www.jaxio.com/documentation/celerio/
+ ! Template pack-backend-jpa:src/main/resources/META-INF/spring-orm.p.vm.xml
+-->
+<entity-mappings xmlns="http://java.sun.com/xml/ns/persistence/orm" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+    xsi:schemaLocation="http://java.sun.com/xml/ns/persistence/orm http://java.sun.com/xml/ns/persistence/orm_2_0.xsd" version="2.0">
+	<description><![CDATA[
+		NOTE: You may override the JPA annotations of your Java entities in this file.
+		This is also the standard place to declare your named queries.
+
+		********************************************
+		* ABOUT NAMED QUERIES and SearchParameters *
+		********************************************
+
+		Named query integration is almost transparent, it is done using
+		the generated services and searchParameters.
+
+		To execute a named query
+		========================
+		* Define a named query in this file (some example are provided) or via an annotation in your Entity class.
+
+		* Pass the named query's name and the parameters, if any, to the searchParameters:
+			searchParameters.setNamedQuery("myNamedQuery");
+			searchParameters.addParameter("paramName", paramValue);
+
+		* Use the xxxRepository that handles the Xxx entity that the named query should return.
+			 For example:
+				xxxRepository.find(searchParameters) or
+				xxxRepository.find(xxxModel, searchParameters)
+
+				xxxRepository.findCount(searchParameters)
+				xxxRepository.findCount(xxxModel, searchParameters)
+
+		* When you define your named query the parameters will be replaced with either
+			- the value of xxxModel.get<parameterName>()
+			- the value returned by searchParameters.getParameters().get("<parameterName>")
+
+		Dynamic order By support:
+		=========================
+		If the hint 'dynamic' is present and set to 'true'
+		the query will be dynamically modified to take into account the orderBy
+		information carried by the searchParameters.
+		This is extremely usefuf when rendering sortable data to the view.
+		NOTE: When dynamic is true YOU MUST declare a 'query' hint having exactly the same value as the query tag.
+
+		Dynamic Select count support:
+		=============================
+		Note that if you call xxxRepository.findCount(searchParameters) and that your
+		named query starts with "from" instead of "select", the "select count(*) "
+		will be dynamically appended so it returns what you expect.
+	]]></description>
+	<entity metadata-complete="false" class="com.h2.demo.domain.Account">
+		<!-- basic example with dynamic ordering support -->
+		<named-query name="Account.selectAll">
+			<query>from com.h2.demo.domain.Account</query>
+			<hint name="dynamic" value="true" />
+			<hint name="query" value="from com.h2.demo.domain.Account" />
+			<hint name="org.hibernate.cacheable" value="true" />
+		</named-query>
+		<named-native-query name="Account.selectAll.native" result-class="com.h2.demo.domain.Account">
+			<query>select * from ACCOUNT</query>
+		</named-native-query>
+	</entity>
+</entity-mappings>
\ No newline at end of file
diff --git a/target/classes/META-INF/spring-persistence.xml b/target/classes/META-INF/spring-persistence.xml
new file mode 100644
index 0000000..108fa55
--- /dev/null
+++ b/target/classes/META-INF/spring-persistence.xml
@@ -0,0 +1,29 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!--
+ ! (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ ! Source code generated by Celerio, a Jaxio product
+ ! Want to purchase Celerio ? email us at info@jaxio.com
+ ! Follow us on twitter: @springfuse
+ ! Documentation: http://www.jaxio.com/documentation/celerio/
+ ! Template pack-backend-jpa:src/main/resources/META-INF/spring-persistence.p.vm.xml
+-->
+<persistence xmlns="http://java.sun.com/xml/ns/persistence" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+	xsi:schemaLocation="http://java.sun.com/xml/ns/persistence http://java.sun.com/xml/ns/persistence/persistence_2_0.xsd" version="2.0">
+	<persistence-unit name="h2projectPU" transaction-type="RESOURCE_LOCAL">
+		<description><![CDATA[
+			Main persistence unit.
+			It is named spring-persistence.xml to prevent JBoss from picking it automatically, which would create a mess as we use Spring.
+			With JBoss/Spring it is required to list the classes explicitly.
+		]]></description>
+		<mapping-file>META-INF/spring-orm.xml</mapping-file>
+		<class>com.h2.demo.domain.Account</class>
+		<class>com.h2.demo.domain.Address</class>
+		<class>com.h2.demo.domain.AuditLog</class>
+		<class>com.h2.demo.domain.Book</class>
+		<class>com.h2.demo.domain.Document</class>
+		<class>com.h2.demo.domain.Legacy</class>
+		<class>com.h2.demo.domain.MoreTypesDemo</class>
+		<class>com.h2.demo.domain.Role</class>
+		<class>com.h2.demo.domain.SavedSearch</class>
+	</persistence-unit>
+</persistence>
\ No newline at end of file
diff --git a/target/classes/ValidationMessages.properties b/target/classes/ValidationMessages.properties
new file mode 100644
index 0000000..7f4a541
--- /dev/null
+++ b/target/classes/ValidationMessages.properties
@@ -0,0 +1,21 @@
+#
+# (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+# Source code generated by Celerio, a Jaxio product
+# Want to purchase Celerio ? email us at info@jaxio.com
+# Follow us on twitter: @springfuse
+# Documentation: http://www.jaxio.com/documentation/celerio/
+# Template pack-backend-jpa:src/main/resources/ValidationMessages.p.vm.properties
+#
+## IMPORTANT NOTE: This file MUST be located at the classpath's root in order to be picked up by hibernate validator
+
+##  Default project specific constraints localization
+com.h2.demo.validation.CheckCase.message=should be {value}
+com.h2.demo.validation.FixedLength.message=should be {length} characters
+com.h2.demo.validation.JpaUnique.message=is already used
+
+## required as we override french version
+org.hibernate.validator.constraints.Email.message=Invalid email address
+
+## {0} is replaced with the Bean Validation message and {1} is replaced with the JSF component label.
+javax.faces.validator.BeanValidator.MESSAGE={1}: {0}
+javax.faces.validator.BeanValidator.MESSAGE_detail={0}
diff --git a/target/classes/ValidationMessages_en.properties b/target/classes/ValidationMessages_en.properties
new file mode 100644
index 0000000..b6a578d
--- /dev/null
+++ b/target/classes/ValidationMessages_en.properties
@@ -0,0 +1,10 @@
+#
+# (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+# Source code generated by Celerio, a Jaxio product
+# Want to purchase Celerio ? email us at info@jaxio.com
+# Follow us on twitter: @springfuse
+# Documentation: http://www.jaxio.com/documentation/celerio/
+# Template pack-backend-jpa:src/main/resources/ValidationMessages_en.p.vm.properties
+#
+## This file is intentionally left empty (see ValidationMessage_en.properties in hibernate validator's jar)
+## IMPORTANT NOTE: This file MUST be located at the classpath's root in order to be picked up by hibernate validator
diff --git a/target/classes/ValidationMessages_fr.properties b/target/classes/ValidationMessages_fr.properties
new file mode 100644
index 0000000..9ef473a
--- /dev/null
+++ b/target/classes/ValidationMessages_fr.properties
@@ -0,0 +1,21 @@
+#
+# (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+# Source code generated by Celerio, a Jaxio product
+# Want to purchase Celerio ? email us at info@jaxio.com
+# Follow us on twitter: @springfuse
+# Documentation: http://www.jaxio.com/documentation/celerio/
+# Template pack-backend-jpa:src/main/resources/ValidationMessages_fr.p.vm.properties
+#
+## IMPORTANT NOTE: This file MUST be located at the classpath's root in order to be picked up by hibernate validator
+
+## French locale project specific constraints localization
+com.h2.demo.validation.CheckCase.message=devrait \u00EAtre {value}
+com.h2.demo.validation.FixedLength.message=doit avoir une taille de {length}
+com.h2.demo.validation.JpaUnique.message=est d\u00E9j\u00E0� utilis\u00E9
+
+## Corrige une typo (Address avec 2 d...) pr�sente dans le fichier de ressources hibernate validator
+org.hibernate.validator.constraints.Email.message=Adresse email mal form\u00E9e
+
+## {0} is replaced with the Bean Validation message and {1} is replaced with the JSF component label.
+javax.faces.validator.BeanValidator.MESSAGE={1}: {0}
+javax.faces.validator.BeanValidator.MESSAGE_detail={0}
diff --git a/target/classes/app-version.properties b/target/classes/app-version.properties
new file mode 100644
index 0000000..ad3f6ed
--- /dev/null
+++ b/target/classes/app-version.properties
@@ -0,0 +1,11 @@
+#
+# (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+# Source code generated by Celerio, a Jaxio product
+# Want to purchase Celerio ? email us at info@jaxio.com
+# Follow us on twitter: @springfuse
+# Documentation: http://www.jaxio.com/documentation/celerio/
+# Template pack-backend-jpa:src/main/resources/app-version.p.vm.properties
+#
+
+build.version=1.0.0-SNAPSHOT
+build.svnrevision=@buildNumber@
diff --git a/target/classes/com/h2/demo/audit/AuditContextHolder.class b/target/classes/com/h2/demo/audit/AuditContextHolder.class
new file mode 100644
index 0000000..e76bd11
Binary files /dev/null and b/target/classes/com/h2/demo/audit/AuditContextHolder.class differ
diff --git a/target/classes/com/h2/demo/audit/AuditLogListener$1.class b/target/classes/com/h2/demo/audit/AuditLogListener$1.class
new file mode 100644
index 0000000..32214af
Binary files /dev/null and b/target/classes/com/h2/demo/audit/AuditLogListener$1.class differ
diff --git a/target/classes/com/h2/demo/audit/AuditLogListener.class b/target/classes/com/h2/demo/audit/AuditLogListener.class
new file mode 100644
index 0000000..04d5993
Binary files /dev/null and b/target/classes/com/h2/demo/audit/AuditLogListener.class differ
diff --git a/target/classes/com/h2/demo/audit/AuditTemplate$AuditCallback.class b/target/classes/com/h2/demo/audit/AuditTemplate$AuditCallback.class
new file mode 100644
index 0000000..b6c12ea
Binary files /dev/null and b/target/classes/com/h2/demo/audit/AuditTemplate$AuditCallback.class differ
diff --git a/target/classes/com/h2/demo/audit/AuditTemplate.class b/target/classes/com/h2/demo/audit/AuditTemplate.class
new file mode 100644
index 0000000..48cb2c7
Binary files /dev/null and b/target/classes/com/h2/demo/audit/AuditTemplate.class differ
diff --git a/target/classes/com/h2/demo/audit/HibernateListenerRegistration.class b/target/classes/com/h2/demo/audit/HibernateListenerRegistration.class
new file mode 100644
index 0000000..afc6f64
Binary files /dev/null and b/target/classes/com/h2/demo/audit/HibernateListenerRegistration.class differ
diff --git a/target/classes/com/h2/demo/configuration/JpaConfiguration.class b/target/classes/com/h2/demo/configuration/JpaConfiguration.class
new file mode 100644
index 0000000..12598a9
Binary files /dev/null and b/target/classes/com/h2/demo/configuration/JpaConfiguration.class differ
diff --git a/target/classes/com/h2/demo/configuration/MessageSourceConfiguration.class b/target/classes/com/h2/demo/configuration/MessageSourceConfiguration.class
new file mode 100644
index 0000000..8ab34d4
Binary files /dev/null and b/target/classes/com/h2/demo/configuration/MessageSourceConfiguration.class differ
diff --git a/target/classes/com/h2/demo/configuration/ValidationConfiguration.class b/target/classes/com/h2/demo/configuration/ValidationConfiguration.class
new file mode 100644
index 0000000..b020f46
Binary files /dev/null and b/target/classes/com/h2/demo/configuration/ValidationConfiguration.class differ
diff --git a/target/classes/com/h2/demo/context/LocaleHolder.class b/target/classes/com/h2/demo/context/LocaleHolder.class
new file mode 100644
index 0000000..2a18b0b
Binary files /dev/null and b/target/classes/com/h2/demo/context/LocaleHolder.class differ
diff --git a/target/classes/com/h2/demo/context/LogContext.class b/target/classes/com/h2/demo/context/LogContext.class
new file mode 100644
index 0000000..8b8628b
Binary files /dev/null and b/target/classes/com/h2/demo/context/LogContext.class differ
diff --git a/target/classes/com/h2/demo/context/UserContext.class b/target/classes/com/h2/demo/context/UserContext.class
new file mode 100644
index 0000000..c2ad7f2
Binary files /dev/null and b/target/classes/com/h2/demo/context/UserContext.class differ
diff --git a/target/classes/com/h2/demo/context/UserWithId.class b/target/classes/com/h2/demo/context/UserWithId.class
new file mode 100644
index 0000000..1064aca
Binary files /dev/null and b/target/classes/com/h2/demo/context/UserWithId.class differ
diff --git a/target/classes/com/h2/demo/domain/Account.class b/target/classes/com/h2/demo/domain/Account.class
new file mode 100644
index 0000000..8074eaf
Binary files /dev/null and b/target/classes/com/h2/demo/domain/Account.class differ
diff --git a/target/classes/com/h2/demo/domain/Account_.class b/target/classes/com/h2/demo/domain/Account_.class
new file mode 100644
index 0000000..270a74a
Binary files /dev/null and b/target/classes/com/h2/demo/domain/Account_.class differ
diff --git a/target/classes/com/h2/demo/domain/Address.class b/target/classes/com/h2/demo/domain/Address.class
new file mode 100644
index 0000000..072b4f3
Binary files /dev/null and b/target/classes/com/h2/demo/domain/Address.class differ
diff --git a/target/classes/com/h2/demo/domain/Address_.class b/target/classes/com/h2/demo/domain/Address_.class
new file mode 100644
index 0000000..2a6ebe5
Binary files /dev/null and b/target/classes/com/h2/demo/domain/Address_.class differ
diff --git a/target/classes/com/h2/demo/domain/AuditLog.class b/target/classes/com/h2/demo/domain/AuditLog.class
new file mode 100644
index 0000000..bf3e845
Binary files /dev/null and b/target/classes/com/h2/demo/domain/AuditLog.class differ
diff --git a/target/classes/com/h2/demo/domain/AuditLog_.class b/target/classes/com/h2/demo/domain/AuditLog_.class
new file mode 100644
index 0000000..607a2aa
Binary files /dev/null and b/target/classes/com/h2/demo/domain/AuditLog_.class differ
diff --git a/target/classes/com/h2/demo/domain/Book.class b/target/classes/com/h2/demo/domain/Book.class
new file mode 100644
index 0000000..dd6de61
Binary files /dev/null and b/target/classes/com/h2/demo/domain/Book.class differ
diff --git a/target/classes/com/h2/demo/domain/Book_.class b/target/classes/com/h2/demo/domain/Book_.class
new file mode 100644
index 0000000..6c51157
Binary files /dev/null and b/target/classes/com/h2/demo/domain/Book_.class differ
diff --git a/target/classes/com/h2/demo/domain/Document.class b/target/classes/com/h2/demo/domain/Document.class
new file mode 100644
index 0000000..fed249d
Binary files /dev/null and b/target/classes/com/h2/demo/domain/Document.class differ
diff --git a/target/classes/com/h2/demo/domain/Document_.class b/target/classes/com/h2/demo/domain/Document_.class
new file mode 100644
index 0000000..f5dbff9
Binary files /dev/null and b/target/classes/com/h2/demo/domain/Document_.class differ
diff --git a/target/classes/com/h2/demo/domain/Identifiable.class b/target/classes/com/h2/demo/domain/Identifiable.class
new file mode 100644
index 0000000..564c755
Binary files /dev/null and b/target/classes/com/h2/demo/domain/Identifiable.class differ
diff --git a/target/classes/com/h2/demo/domain/IdentifiableHashBuilder.class b/target/classes/com/h2/demo/domain/IdentifiableHashBuilder.class
new file mode 100644
index 0000000..d071a35
Binary files /dev/null and b/target/classes/com/h2/demo/domain/IdentifiableHashBuilder.class differ
diff --git a/target/classes/com/h2/demo/domain/LabelizedEnum.class b/target/classes/com/h2/demo/domain/LabelizedEnum.class
new file mode 100644
index 0000000..cda89a6
Binary files /dev/null and b/target/classes/com/h2/demo/domain/LabelizedEnum.class differ
diff --git a/target/classes/com/h2/demo/domain/Legacy.class b/target/classes/com/h2/demo/domain/Legacy.class
new file mode 100644
index 0000000..ce1c08e
Binary files /dev/null and b/target/classes/com/h2/demo/domain/Legacy.class differ
diff --git a/target/classes/com/h2/demo/domain/LegacyPk.class b/target/classes/com/h2/demo/domain/LegacyPk.class
new file mode 100644
index 0000000..31d7d9b
Binary files /dev/null and b/target/classes/com/h2/demo/domain/LegacyPk.class differ
diff --git a/target/classes/com/h2/demo/domain/LegacyPk_.class b/target/classes/com/h2/demo/domain/LegacyPk_.class
new file mode 100644
index 0000000..921a69a
Binary files /dev/null and b/target/classes/com/h2/demo/domain/LegacyPk_.class differ
diff --git a/target/classes/com/h2/demo/domain/Legacy_.class b/target/classes/com/h2/demo/domain/Legacy_.class
new file mode 100644
index 0000000..637cb97
Binary files /dev/null and b/target/classes/com/h2/demo/domain/Legacy_.class differ
diff --git a/target/classes/com/h2/demo/domain/MoreTypesDemo.class b/target/classes/com/h2/demo/domain/MoreTypesDemo.class
new file mode 100644
index 0000000..dc538e2
Binary files /dev/null and b/target/classes/com/h2/demo/domain/MoreTypesDemo.class differ
diff --git a/target/classes/com/h2/demo/domain/MoreTypesDemo_.class b/target/classes/com/h2/demo/domain/MoreTypesDemo_.class
new file mode 100644
index 0000000..56bf1c3
Binary files /dev/null and b/target/classes/com/h2/demo/domain/MoreTypesDemo_.class differ
diff --git a/target/classes/com/h2/demo/domain/Role.class b/target/classes/com/h2/demo/domain/Role.class
new file mode 100644
index 0000000..a787015
Binary files /dev/null and b/target/classes/com/h2/demo/domain/Role.class differ
diff --git a/target/classes/com/h2/demo/domain/Role_.class b/target/classes/com/h2/demo/domain/Role_.class
new file mode 100644
index 0000000..79f4dd4
Binary files /dev/null and b/target/classes/com/h2/demo/domain/Role_.class differ
diff --git a/target/classes/com/h2/demo/domain/SavedSearch.class b/target/classes/com/h2/demo/domain/SavedSearch.class
new file mode 100644
index 0000000..f2279fc
Binary files /dev/null and b/target/classes/com/h2/demo/domain/SavedSearch.class differ
diff --git a/target/classes/com/h2/demo/domain/SavedSearch_.class b/target/classes/com/h2/demo/domain/SavedSearch_.class
new file mode 100644
index 0000000..77f41dc
Binary files /dev/null and b/target/classes/com/h2/demo/domain/SavedSearch_.class differ
diff --git a/target/classes/com/h2/demo/printer/AccountPrinter.class b/target/classes/com/h2/demo/printer/AccountPrinter.class
new file mode 100644
index 0000000..8407280
Binary files /dev/null and b/target/classes/com/h2/demo/printer/AccountPrinter.class differ
diff --git a/target/classes/com/h2/demo/printer/AddressPrinter.class b/target/classes/com/h2/demo/printer/AddressPrinter.class
new file mode 100644
index 0000000..f1ccfe5
Binary files /dev/null and b/target/classes/com/h2/demo/printer/AddressPrinter.class differ
diff --git a/target/classes/com/h2/demo/printer/AuditLogPrinter.class b/target/classes/com/h2/demo/printer/AuditLogPrinter.class
new file mode 100644
index 0000000..13eb6c6
Binary files /dev/null and b/target/classes/com/h2/demo/printer/AuditLogPrinter.class differ
diff --git a/target/classes/com/h2/demo/printer/BookPrinter.class b/target/classes/com/h2/demo/printer/BookPrinter.class
new file mode 100644
index 0000000..727fb5b
Binary files /dev/null and b/target/classes/com/h2/demo/printer/BookPrinter.class differ
diff --git a/target/classes/com/h2/demo/printer/DocumentPrinter.class b/target/classes/com/h2/demo/printer/DocumentPrinter.class
new file mode 100644
index 0000000..a0d6155
Binary files /dev/null and b/target/classes/com/h2/demo/printer/DocumentPrinter.class differ
diff --git a/target/classes/com/h2/demo/printer/LegacyPrinter.class b/target/classes/com/h2/demo/printer/LegacyPrinter.class
new file mode 100644
index 0000000..903b92c
Binary files /dev/null and b/target/classes/com/h2/demo/printer/LegacyPrinter.class differ
diff --git a/target/classes/com/h2/demo/printer/MoreTypesDemoPrinter.class b/target/classes/com/h2/demo/printer/MoreTypesDemoPrinter.class
new file mode 100644
index 0000000..144c3f0
Binary files /dev/null and b/target/classes/com/h2/demo/printer/MoreTypesDemoPrinter.class differ
diff --git a/target/classes/com/h2/demo/printer/RolePrinter.class b/target/classes/com/h2/demo/printer/RolePrinter.class
new file mode 100644
index 0000000..07deb73
Binary files /dev/null and b/target/classes/com/h2/demo/printer/RolePrinter.class differ
diff --git a/target/classes/com/h2/demo/printer/SavedSearchPrinter.class b/target/classes/com/h2/demo/printer/SavedSearchPrinter.class
new file mode 100644
index 0000000..4d52049
Binary files /dev/null and b/target/classes/com/h2/demo/printer/SavedSearchPrinter.class differ
diff --git a/target/classes/com/h2/demo/printer/support/GenericPrinter.class b/target/classes/com/h2/demo/printer/support/GenericPrinter.class
new file mode 100644
index 0000000..9e84a32
Binary files /dev/null and b/target/classes/com/h2/demo/printer/support/GenericPrinter.class differ
diff --git a/target/classes/com/h2/demo/printer/support/TypeAwarePrinter.class b/target/classes/com/h2/demo/printer/support/TypeAwarePrinter.class
new file mode 100644
index 0000000..2b0a267
Binary files /dev/null and b/target/classes/com/h2/demo/printer/support/TypeAwarePrinter.class differ
diff --git a/target/classes/com/h2/demo/repository/AccountRepository.class b/target/classes/com/h2/demo/repository/AccountRepository.class
new file mode 100644
index 0000000..3a65a33
Binary files /dev/null and b/target/classes/com/h2/demo/repository/AccountRepository.class differ
diff --git a/target/classes/com/h2/demo/repository/AddressRepository.class b/target/classes/com/h2/demo/repository/AddressRepository.class
new file mode 100644
index 0000000..7b0f9e1
Binary files /dev/null and b/target/classes/com/h2/demo/repository/AddressRepository.class differ
diff --git a/target/classes/com/h2/demo/repository/AuditLogRepository.class b/target/classes/com/h2/demo/repository/AuditLogRepository.class
new file mode 100644
index 0000000..a768f99
Binary files /dev/null and b/target/classes/com/h2/demo/repository/AuditLogRepository.class differ
diff --git a/target/classes/com/h2/demo/repository/BookRepository.class b/target/classes/com/h2/demo/repository/BookRepository.class
new file mode 100644
index 0000000..7b17dba
Binary files /dev/null and b/target/classes/com/h2/demo/repository/BookRepository.class differ
diff --git a/target/classes/com/h2/demo/repository/DocumentRepository.class b/target/classes/com/h2/demo/repository/DocumentRepository.class
new file mode 100644
index 0000000..0da5d9a
Binary files /dev/null and b/target/classes/com/h2/demo/repository/DocumentRepository.class differ
diff --git a/target/classes/com/h2/demo/repository/LegacyRepository.class b/target/classes/com/h2/demo/repository/LegacyRepository.class
new file mode 100644
index 0000000..0c82711
Binary files /dev/null and b/target/classes/com/h2/demo/repository/LegacyRepository.class differ
diff --git a/target/classes/com/h2/demo/repository/MoreTypesDemoRepository.class b/target/classes/com/h2/demo/repository/MoreTypesDemoRepository.class
new file mode 100644
index 0000000..3c40f64
Binary files /dev/null and b/target/classes/com/h2/demo/repository/MoreTypesDemoRepository.class differ
diff --git a/target/classes/com/h2/demo/repository/RoleRepository.class b/target/classes/com/h2/demo/repository/RoleRepository.class
new file mode 100644
index 0000000..b86a713
Binary files /dev/null and b/target/classes/com/h2/demo/repository/RoleRepository.class differ
diff --git a/target/classes/com/h2/demo/repository/SavedSearchRepository.class b/target/classes/com/h2/demo/repository/SavedSearchRepository.class
new file mode 100644
index 0000000..fe650a2
Binary files /dev/null and b/target/classes/com/h2/demo/repository/SavedSearchRepository.class differ
diff --git a/target/classes/com/h2/demo/repository/support/ByExampleUtil.class b/target/classes/com/h2/demo/repository/support/ByExampleUtil.class
new file mode 100644
index 0000000..4d8a0b1
Binary files /dev/null and b/target/classes/com/h2/demo/repository/support/ByExampleUtil.class differ
diff --git a/target/classes/com/h2/demo/repository/support/ByNamedQueryUtil.class b/target/classes/com/h2/demo/repository/support/ByNamedQueryUtil.class
new file mode 100644
index 0000000..b24ac08
Binary files /dev/null and b/target/classes/com/h2/demo/repository/support/ByNamedQueryUtil.class differ
diff --git a/target/classes/com/h2/demo/repository/support/ByPatternUtil.class b/target/classes/com/h2/demo/repository/support/ByPatternUtil.class
new file mode 100644
index 0000000..4f73c5d
Binary files /dev/null and b/target/classes/com/h2/demo/repository/support/ByPatternUtil.class differ
diff --git a/target/classes/com/h2/demo/repository/support/ByPropertySelectorUtil.class b/target/classes/com/h2/demo/repository/support/ByPropertySelectorUtil.class
new file mode 100644
index 0000000..79fd89d
Binary files /dev/null and b/target/classes/com/h2/demo/repository/support/ByPropertySelectorUtil.class differ
diff --git a/target/classes/com/h2/demo/repository/support/ByRangeUtil.class b/target/classes/com/h2/demo/repository/support/ByRangeUtil.class
new file mode 100644
index 0000000..cf54f53
Binary files /dev/null and b/target/classes/com/h2/demo/repository/support/ByRangeUtil.class differ
diff --git a/target/classes/com/h2/demo/repository/support/EntityGraphLoader.class b/target/classes/com/h2/demo/repository/support/EntityGraphLoader.class
new file mode 100644
index 0000000..5710a8f
Binary files /dev/null and b/target/classes/com/h2/demo/repository/support/EntityGraphLoader.class differ
diff --git a/target/classes/com/h2/demo/repository/support/GenericRepository.class b/target/classes/com/h2/demo/repository/support/GenericRepository.class
new file mode 100644
index 0000000..38d896f
Binary files /dev/null and b/target/classes/com/h2/demo/repository/support/GenericRepository.class differ
diff --git a/target/classes/com/h2/demo/repository/support/JpaUniqueUtil.class b/target/classes/com/h2/demo/repository/support/JpaUniqueUtil.class
new file mode 100644
index 0000000..c9fd12b
Binary files /dev/null and b/target/classes/com/h2/demo/repository/support/JpaUniqueUtil.class differ
diff --git a/target/classes/com/h2/demo/repository/support/JpaUtil$1.class b/target/classes/com/h2/demo/repository/support/JpaUtil$1.class
new file mode 100644
index 0000000..2af6a3e
Binary files /dev/null and b/target/classes/com/h2/demo/repository/support/JpaUtil$1.class differ
diff --git a/target/classes/com/h2/demo/repository/support/JpaUtil.class b/target/classes/com/h2/demo/repository/support/JpaUtil.class
new file mode 100644
index 0000000..18d6455
Binary files /dev/null and b/target/classes/com/h2/demo/repository/support/JpaUtil.class differ
diff --git a/target/classes/com/h2/demo/repository/support/MetamodelUtil.class b/target/classes/com/h2/demo/repository/support/MetamodelUtil.class
new file mode 100644
index 0000000..838da7a
Binary files /dev/null and b/target/classes/com/h2/demo/repository/support/MetamodelUtil.class differ
diff --git a/target/classes/com/h2/demo/repository/support/OrderBy.class b/target/classes/com/h2/demo/repository/support/OrderBy.class
new file mode 100644
index 0000000..3bd77ec
Binary files /dev/null and b/target/classes/com/h2/demo/repository/support/OrderBy.class differ
diff --git a/target/classes/com/h2/demo/repository/support/OrderByDirection.class b/target/classes/com/h2/demo/repository/support/OrderByDirection.class
new file mode 100644
index 0000000..9a5689f
Binary files /dev/null and b/target/classes/com/h2/demo/repository/support/OrderByDirection.class differ
diff --git a/target/classes/com/h2/demo/repository/support/OrderByUtil.class b/target/classes/com/h2/demo/repository/support/OrderByUtil.class
new file mode 100644
index 0000000..7a8da71
Binary files /dev/null and b/target/classes/com/h2/demo/repository/support/OrderByUtil.class differ
diff --git a/target/classes/com/h2/demo/repository/support/Path.class b/target/classes/com/h2/demo/repository/support/Path.class
new file mode 100644
index 0000000..46b08e4
Binary files /dev/null and b/target/classes/com/h2/demo/repository/support/Path.class differ
diff --git a/target/classes/com/h2/demo/repository/support/PropertySelector.class b/target/classes/com/h2/demo/repository/support/PropertySelector.class
new file mode 100644
index 0000000..dd3708c
Binary files /dev/null and b/target/classes/com/h2/demo/repository/support/PropertySelector.class differ
diff --git a/target/classes/com/h2/demo/repository/support/Range.class b/target/classes/com/h2/demo/repository/support/Range.class
new file mode 100644
index 0000000..fe2ff07
Binary files /dev/null and b/target/classes/com/h2/demo/repository/support/Range.class differ
diff --git a/target/classes/com/h2/demo/repository/support/RepositoryLocator.class b/target/classes/com/h2/demo/repository/support/RepositoryLocator.class
new file mode 100644
index 0000000..f45e5a3
Binary files /dev/null and b/target/classes/com/h2/demo/repository/support/RepositoryLocator.class differ
diff --git a/target/classes/com/h2/demo/repository/support/SearchMode.class b/target/classes/com/h2/demo/repository/support/SearchMode.class
new file mode 100644
index 0000000..eeb8b10
Binary files /dev/null and b/target/classes/com/h2/demo/repository/support/SearchMode.class differ
diff --git a/target/classes/com/h2/demo/repository/support/SearchParameters$1.class b/target/classes/com/h2/demo/repository/support/SearchParameters$1.class
new file mode 100644
index 0000000..1479f0c
Binary files /dev/null and b/target/classes/com/h2/demo/repository/support/SearchParameters$1.class differ
diff --git a/target/classes/com/h2/demo/repository/support/SearchParameters.class b/target/classes/com/h2/demo/repository/support/SearchParameters.class
new file mode 100644
index 0000000..edefb22
Binary files /dev/null and b/target/classes/com/h2/demo/repository/support/SearchParameters.class differ
diff --git a/target/classes/com/h2/demo/security/UserDetailsServiceImpl.class b/target/classes/com/h2/demo/security/UserDetailsServiceImpl.class
new file mode 100644
index 0000000..c7a9606
Binary files /dev/null and b/target/classes/com/h2/demo/security/UserDetailsServiceImpl.class differ
diff --git a/target/classes/com/h2/demo/service/AuditEvent.class b/target/classes/com/h2/demo/service/AuditEvent.class
new file mode 100644
index 0000000..789d6de
Binary files /dev/null and b/target/classes/com/h2/demo/service/AuditEvent.class differ
diff --git a/target/classes/com/h2/demo/service/AuditLogService.class b/target/classes/com/h2/demo/service/AuditLogService.class
new file mode 100644
index 0000000..6b8c883
Binary files /dev/null and b/target/classes/com/h2/demo/service/AuditLogService.class differ
diff --git a/target/classes/com/h2/demo/service/EnvironmentService$Environment.class b/target/classes/com/h2/demo/service/EnvironmentService$Environment.class
new file mode 100644
index 0000000..a0f7c48
Binary files /dev/null and b/target/classes/com/h2/demo/service/EnvironmentService$Environment.class differ
diff --git a/target/classes/com/h2/demo/service/EnvironmentService.class b/target/classes/com/h2/demo/service/EnvironmentService.class
new file mode 100644
index 0000000..32ebf82
Binary files /dev/null and b/target/classes/com/h2/demo/service/EnvironmentService.class differ
diff --git a/target/classes/com/h2/demo/service/VersionService.class b/target/classes/com/h2/demo/service/VersionService.class
new file mode 100644
index 0000000..b7d98c9
Binary files /dev/null and b/target/classes/com/h2/demo/service/VersionService.class differ
diff --git a/target/classes/com/h2/demo/util/DateUtil.class b/target/classes/com/h2/demo/util/DateUtil.class
new file mode 100644
index 0000000..1377ead
Binary files /dev/null and b/target/classes/com/h2/demo/util/DateUtil.class differ
diff --git a/target/classes/com/h2/demo/util/ResourcesUtil.class b/target/classes/com/h2/demo/util/ResourcesUtil.class
new file mode 100644
index 0000000..559fc82
Binary files /dev/null and b/target/classes/com/h2/demo/util/ResourcesUtil.class differ
diff --git a/target/classes/com/h2/demo/validation/FixedLength.class b/target/classes/com/h2/demo/validation/FixedLength.class
new file mode 100644
index 0000000..5839ce7
Binary files /dev/null and b/target/classes/com/h2/demo/validation/FixedLength.class differ
diff --git a/target/classes/com/h2/demo/validation/impl/FixedLengthValidator.class b/target/classes/com/h2/demo/validation/impl/FixedLengthValidator.class
new file mode 100644
index 0000000..ff61747
Binary files /dev/null and b/target/classes/com/h2/demo/validation/impl/FixedLengthValidator.class differ
diff --git a/target/classes/com/h2/demo/web/component/DatePicker.class b/target/classes/com/h2/demo/web/component/DatePicker.class
new file mode 100644
index 0000000..4ab9387
Binary files /dev/null and b/target/classes/com/h2/demo/web/component/DatePicker.class differ
diff --git a/target/classes/com/h2/demo/web/component/DatePickerHelper.class b/target/classes/com/h2/demo/web/component/DatePickerHelper.class
new file mode 100644
index 0000000..a4651dd
Binary files /dev/null and b/target/classes/com/h2/demo/web/component/DatePickerHelper.class differ
diff --git a/target/classes/com/h2/demo/web/configuration/LocaleConfiguration.class b/target/classes/com/h2/demo/web/configuration/LocaleConfiguration.class
new file mode 100644
index 0000000..91b5798
Binary files /dev/null and b/target/classes/com/h2/demo/web/configuration/LocaleConfiguration.class differ
diff --git a/target/classes/com/h2/demo/web/configuration/ViewScopeConfiguration.class b/target/classes/com/h2/demo/web/configuration/ViewScopeConfiguration.class
new file mode 100644
index 0000000..8a3ca28
Binary files /dev/null and b/target/classes/com/h2/demo/web/configuration/ViewScopeConfiguration.class differ
diff --git a/target/classes/com/h2/demo/web/conversation/Conversation.class b/target/classes/com/h2/demo/web/conversation/Conversation.class
new file mode 100644
index 0000000..81831e9
Binary files /dev/null and b/target/classes/com/h2/demo/web/conversation/Conversation.class differ
diff --git a/target/classes/com/h2/demo/web/conversation/ConversationCallBack.class b/target/classes/com/h2/demo/web/conversation/ConversationCallBack.class
new file mode 100644
index 0000000..55c5ab3
Binary files /dev/null and b/target/classes/com/h2/demo/web/conversation/ConversationCallBack.class differ
diff --git a/target/classes/com/h2/demo/web/conversation/ConversationContext.class b/target/classes/com/h2/demo/web/conversation/ConversationContext.class
new file mode 100644
index 0000000..042b58e
Binary files /dev/null and b/target/classes/com/h2/demo/web/conversation/ConversationContext.class differ
diff --git a/target/classes/com/h2/demo/web/conversation/ConversationFilter.class b/target/classes/com/h2/demo/web/conversation/ConversationFilter.class
new file mode 100644
index 0000000..ba4a0c2
Binary files /dev/null and b/target/classes/com/h2/demo/web/conversation/ConversationFilter.class differ
diff --git a/target/classes/com/h2/demo/web/conversation/ConversationHolder.class b/target/classes/com/h2/demo/web/conversation/ConversationHolder.class
new file mode 100644
index 0000000..4edbf3a
Binary files /dev/null and b/target/classes/com/h2/demo/web/conversation/ConversationHolder.class differ
diff --git a/target/classes/com/h2/demo/web/conversation/ConversationListener.class b/target/classes/com/h2/demo/web/conversation/ConversationListener.class
new file mode 100644
index 0000000..5f0f53c
Binary files /dev/null and b/target/classes/com/h2/demo/web/conversation/ConversationListener.class differ
diff --git a/target/classes/com/h2/demo/web/conversation/ConversationManager$1.class b/target/classes/com/h2/demo/web/conversation/ConversationManager$1.class
new file mode 100644
index 0000000..63ad6e8
Binary files /dev/null and b/target/classes/com/h2/demo/web/conversation/ConversationManager$1.class differ
diff --git a/target/classes/com/h2/demo/web/conversation/ConversationManager.class b/target/classes/com/h2/demo/web/conversation/ConversationManager.class
new file mode 100644
index 0000000..6cafed4
Binary files /dev/null and b/target/classes/com/h2/demo/web/conversation/ConversationManager.class differ
diff --git a/target/classes/com/h2/demo/web/conversation/ConversationUtil.class b/target/classes/com/h2/demo/web/conversation/ConversationUtil.class
new file mode 100644
index 0000000..6985565
Binary files /dev/null and b/target/classes/com/h2/demo/web/conversation/ConversationUtil.class differ
diff --git a/target/classes/com/h2/demo/web/conversation/UnexpectedConversationException.class b/target/classes/com/h2/demo/web/conversation/UnexpectedConversationException.class
new file mode 100644
index 0000000..d2cb4bc
Binary files /dev/null and b/target/classes/com/h2/demo/web/conversation/UnexpectedConversationException.class differ
diff --git a/target/classes/com/h2/demo/web/conversation/component/ConversationBreadCrumb.class b/target/classes/com/h2/demo/web/conversation/component/ConversationBreadCrumb.class
new file mode 100644
index 0000000..551e978
Binary files /dev/null and b/target/classes/com/h2/demo/web/conversation/component/ConversationBreadCrumb.class differ
diff --git a/target/classes/com/h2/demo/web/conversation/component/ConversationMenu.class b/target/classes/com/h2/demo/web/conversation/component/ConversationMenu.class
new file mode 100644
index 0000000..9c53b8f
Binary files /dev/null and b/target/classes/com/h2/demo/web/conversation/component/ConversationMenu.class differ
diff --git a/target/classes/com/h2/demo/web/converter/support/BooleanConverter.class b/target/classes/com/h2/demo/web/converter/support/BooleanConverter.class
new file mode 100644
index 0000000..3edbbc1
Binary files /dev/null and b/target/classes/com/h2/demo/web/converter/support/BooleanConverter.class differ
diff --git a/target/classes/com/h2/demo/web/converter/support/GenericJsfConverter.class b/target/classes/com/h2/demo/web/converter/support/GenericJsfConverter.class
new file mode 100644
index 0000000..f36d178
Binary files /dev/null and b/target/classes/com/h2/demo/web/converter/support/GenericJsfConverter.class differ
diff --git a/target/classes/com/h2/demo/web/converter/support/LocalDateConverter.class b/target/classes/com/h2/demo/web/converter/support/LocalDateConverter.class
new file mode 100644
index 0000000..102d628
Binary files /dev/null and b/target/classes/com/h2/demo/web/converter/support/LocalDateConverter.class differ
diff --git a/target/classes/com/h2/demo/web/converter/support/LocalDateTimeConverter.class b/target/classes/com/h2/demo/web/converter/support/LocalDateTimeConverter.class
new file mode 100644
index 0000000..3159f13
Binary files /dev/null and b/target/classes/com/h2/demo/web/converter/support/LocalDateTimeConverter.class differ
diff --git a/target/classes/com/h2/demo/web/domain/AccountController.class b/target/classes/com/h2/demo/web/domain/AccountController.class
new file mode 100644
index 0000000..7c73977
Binary files /dev/null and b/target/classes/com/h2/demo/web/domain/AccountController.class differ
diff --git a/target/classes/com/h2/demo/web/domain/AccountEditForm$1.class b/target/classes/com/h2/demo/web/domain/AccountEditForm$1.class
new file mode 100644
index 0000000..6cf345c
Binary files /dev/null and b/target/classes/com/h2/demo/web/domain/AccountEditForm$1.class differ
diff --git a/target/classes/com/h2/demo/web/domain/AccountEditForm$2.class b/target/classes/com/h2/demo/web/domain/AccountEditForm$2.class
new file mode 100644
index 0000000..242d71c
Binary files /dev/null and b/target/classes/com/h2/demo/web/domain/AccountEditForm$2.class differ
diff --git a/target/classes/com/h2/demo/web/domain/AccountEditForm.class b/target/classes/com/h2/demo/web/domain/AccountEditForm.class
new file mode 100644
index 0000000..c2eacab
Binary files /dev/null and b/target/classes/com/h2/demo/web/domain/AccountEditForm.class differ
diff --git a/target/classes/com/h2/demo/web/domain/AccountExcelExporter.class b/target/classes/com/h2/demo/web/domain/AccountExcelExporter.class
new file mode 100644
index 0000000..b5556c0
Binary files /dev/null and b/target/classes/com/h2/demo/web/domain/AccountExcelExporter.class differ
diff --git a/target/classes/com/h2/demo/web/domain/AccountGraphLoader.class b/target/classes/com/h2/demo/web/domain/AccountGraphLoader.class
new file mode 100644
index 0000000..2e21211
Binary files /dev/null and b/target/classes/com/h2/demo/web/domain/AccountGraphLoader.class differ
diff --git a/target/classes/com/h2/demo/web/domain/AccountLazyDataModel.class b/target/classes/com/h2/demo/web/domain/AccountLazyDataModel.class
new file mode 100644
index 0000000..30cd10b
Binary files /dev/null and b/target/classes/com/h2/demo/web/domain/AccountLazyDataModel.class differ
diff --git a/target/classes/com/h2/demo/web/domain/AccountSearchForm.class b/target/classes/com/h2/demo/web/domain/AccountSearchForm.class
new file mode 100644
index 0000000..b3506ed
Binary files /dev/null and b/target/classes/com/h2/demo/web/domain/AccountSearchForm.class differ
diff --git a/target/classes/com/h2/demo/web/domain/AddressController.class b/target/classes/com/h2/demo/web/domain/AddressController.class
new file mode 100644
index 0000000..fae8bfd
Binary files /dev/null and b/target/classes/com/h2/demo/web/domain/AddressController.class differ
diff --git a/target/classes/com/h2/demo/web/domain/AddressEditForm.class b/target/classes/com/h2/demo/web/domain/AddressEditForm.class
new file mode 100644
index 0000000..3b25430
Binary files /dev/null and b/target/classes/com/h2/demo/web/domain/AddressEditForm.class differ
diff --git a/target/classes/com/h2/demo/web/domain/AddressExcelExporter.class b/target/classes/com/h2/demo/web/domain/AddressExcelExporter.class
new file mode 100644
index 0000000..ff2a326
Binary files /dev/null and b/target/classes/com/h2/demo/web/domain/AddressExcelExporter.class differ
diff --git a/target/classes/com/h2/demo/web/domain/AddressLazyDataModel.class b/target/classes/com/h2/demo/web/domain/AddressLazyDataModel.class
new file mode 100644
index 0000000..7fa5956
Binary files /dev/null and b/target/classes/com/h2/demo/web/domain/AddressLazyDataModel.class differ
diff --git a/target/classes/com/h2/demo/web/domain/AddressSearchForm.class b/target/classes/com/h2/demo/web/domain/AddressSearchForm.class
new file mode 100644
index 0000000..b91476b
Binary files /dev/null and b/target/classes/com/h2/demo/web/domain/AddressSearchForm.class differ
diff --git a/target/classes/com/h2/demo/web/domain/AuditLogController.class b/target/classes/com/h2/demo/web/domain/AuditLogController.class
new file mode 100644
index 0000000..d674042
Binary files /dev/null and b/target/classes/com/h2/demo/web/domain/AuditLogController.class differ
diff --git a/target/classes/com/h2/demo/web/domain/AuditLogEditForm.class b/target/classes/com/h2/demo/web/domain/AuditLogEditForm.class
new file mode 100644
index 0000000..eac9e9b
Binary files /dev/null and b/target/classes/com/h2/demo/web/domain/AuditLogEditForm.class differ
diff --git a/target/classes/com/h2/demo/web/domain/AuditLogExcelExporter.class b/target/classes/com/h2/demo/web/domain/AuditLogExcelExporter.class
new file mode 100644
index 0000000..2fa7a4d
Binary files /dev/null and b/target/classes/com/h2/demo/web/domain/AuditLogExcelExporter.class differ
diff --git a/target/classes/com/h2/demo/web/domain/AuditLogLazyDataModel.class b/target/classes/com/h2/demo/web/domain/AuditLogLazyDataModel.class
new file mode 100644
index 0000000..775b93e
Binary files /dev/null and b/target/classes/com/h2/demo/web/domain/AuditLogLazyDataModel.class differ
diff --git a/target/classes/com/h2/demo/web/domain/AuditLogSearchForm.class b/target/classes/com/h2/demo/web/domain/AuditLogSearchForm.class
new file mode 100644
index 0000000..066e2f2
Binary files /dev/null and b/target/classes/com/h2/demo/web/domain/AuditLogSearchForm.class differ
diff --git a/target/classes/com/h2/demo/web/domain/BookController.class b/target/classes/com/h2/demo/web/domain/BookController.class
new file mode 100644
index 0000000..ea2647c
Binary files /dev/null and b/target/classes/com/h2/demo/web/domain/BookController.class differ
diff --git a/target/classes/com/h2/demo/web/domain/BookEditForm$1.class b/target/classes/com/h2/demo/web/domain/BookEditForm$1.class
new file mode 100644
index 0000000..99b581c
Binary files /dev/null and b/target/classes/com/h2/demo/web/domain/BookEditForm$1.class differ
diff --git a/target/classes/com/h2/demo/web/domain/BookEditForm.class b/target/classes/com/h2/demo/web/domain/BookEditForm.class
new file mode 100644
index 0000000..66a4c0c
Binary files /dev/null and b/target/classes/com/h2/demo/web/domain/BookEditForm.class differ
diff --git a/target/classes/com/h2/demo/web/domain/BookExcelExporter.class b/target/classes/com/h2/demo/web/domain/BookExcelExporter.class
new file mode 100644
index 0000000..d9f9738
Binary files /dev/null and b/target/classes/com/h2/demo/web/domain/BookExcelExporter.class differ
diff --git a/target/classes/com/h2/demo/web/domain/BookGraphLoader.class b/target/classes/com/h2/demo/web/domain/BookGraphLoader.class
new file mode 100644
index 0000000..087e700
Binary files /dev/null and b/target/classes/com/h2/demo/web/domain/BookGraphLoader.class differ
diff --git a/target/classes/com/h2/demo/web/domain/BookLazyDataModel.class b/target/classes/com/h2/demo/web/domain/BookLazyDataModel.class
new file mode 100644
index 0000000..3ebce7e
Binary files /dev/null and b/target/classes/com/h2/demo/web/domain/BookLazyDataModel.class differ
diff --git a/target/classes/com/h2/demo/web/domain/BookSearchForm.class b/target/classes/com/h2/demo/web/domain/BookSearchForm.class
new file mode 100644
index 0000000..2fba0de
Binary files /dev/null and b/target/classes/com/h2/demo/web/domain/BookSearchForm.class differ
diff --git a/target/classes/com/h2/demo/web/domain/DocumentController.class b/target/classes/com/h2/demo/web/domain/DocumentController.class
new file mode 100644
index 0000000..68ff8bf
Binary files /dev/null and b/target/classes/com/h2/demo/web/domain/DocumentController.class differ
diff --git a/target/classes/com/h2/demo/web/domain/DocumentEditForm$1.class b/target/classes/com/h2/demo/web/domain/DocumentEditForm$1.class
new file mode 100644
index 0000000..3fc697b
Binary files /dev/null and b/target/classes/com/h2/demo/web/domain/DocumentEditForm$1.class differ
diff --git a/target/classes/com/h2/demo/web/domain/DocumentEditForm.class b/target/classes/com/h2/demo/web/domain/DocumentEditForm.class
new file mode 100644
index 0000000..31d66e7
Binary files /dev/null and b/target/classes/com/h2/demo/web/domain/DocumentEditForm.class differ
diff --git a/target/classes/com/h2/demo/web/domain/DocumentExcelExporter.class b/target/classes/com/h2/demo/web/domain/DocumentExcelExporter.class
new file mode 100644
index 0000000..5b88090
Binary files /dev/null and b/target/classes/com/h2/demo/web/domain/DocumentExcelExporter.class differ
diff --git a/target/classes/com/h2/demo/web/domain/DocumentFileDownload$1.class b/target/classes/com/h2/demo/web/domain/DocumentFileDownload$1.class
new file mode 100644
index 0000000..e55095e
Binary files /dev/null and b/target/classes/com/h2/demo/web/domain/DocumentFileDownload$1.class differ
diff --git a/target/classes/com/h2/demo/web/domain/DocumentFileDownload.class b/target/classes/com/h2/demo/web/domain/DocumentFileDownload.class
new file mode 100644
index 0000000..b4e2892
Binary files /dev/null and b/target/classes/com/h2/demo/web/domain/DocumentFileDownload.class differ
diff --git a/target/classes/com/h2/demo/web/domain/DocumentFileUpload.class b/target/classes/com/h2/demo/web/domain/DocumentFileUpload.class
new file mode 100644
index 0000000..65f04df
Binary files /dev/null and b/target/classes/com/h2/demo/web/domain/DocumentFileUpload.class differ
diff --git a/target/classes/com/h2/demo/web/domain/DocumentGraphLoader.class b/target/classes/com/h2/demo/web/domain/DocumentGraphLoader.class
new file mode 100644
index 0000000..f9b11f6
Binary files /dev/null and b/target/classes/com/h2/demo/web/domain/DocumentGraphLoader.class differ
diff --git a/target/classes/com/h2/demo/web/domain/DocumentLazyDataModel.class b/target/classes/com/h2/demo/web/domain/DocumentLazyDataModel.class
new file mode 100644
index 0000000..10b854e
Binary files /dev/null and b/target/classes/com/h2/demo/web/domain/DocumentLazyDataModel.class differ
diff --git a/target/classes/com/h2/demo/web/domain/DocumentSearchForm.class b/target/classes/com/h2/demo/web/domain/DocumentSearchForm.class
new file mode 100644
index 0000000..978f980
Binary files /dev/null and b/target/classes/com/h2/demo/web/domain/DocumentSearchForm.class differ
diff --git a/target/classes/com/h2/demo/web/domain/LegacyController.class b/target/classes/com/h2/demo/web/domain/LegacyController.class
new file mode 100644
index 0000000..10e7637
Binary files /dev/null and b/target/classes/com/h2/demo/web/domain/LegacyController.class differ
diff --git a/target/classes/com/h2/demo/web/domain/LegacyEditForm.class b/target/classes/com/h2/demo/web/domain/LegacyEditForm.class
new file mode 100644
index 0000000..ab45039
Binary files /dev/null and b/target/classes/com/h2/demo/web/domain/LegacyEditForm.class differ
diff --git a/target/classes/com/h2/demo/web/domain/LegacyExcelExporter.class b/target/classes/com/h2/demo/web/domain/LegacyExcelExporter.class
new file mode 100644
index 0000000..98e122c
Binary files /dev/null and b/target/classes/com/h2/demo/web/domain/LegacyExcelExporter.class differ
diff --git a/target/classes/com/h2/demo/web/domain/LegacyLazyDataModel.class b/target/classes/com/h2/demo/web/domain/LegacyLazyDataModel.class
new file mode 100644
index 0000000..582b88e
Binary files /dev/null and b/target/classes/com/h2/demo/web/domain/LegacyLazyDataModel.class differ
diff --git a/target/classes/com/h2/demo/web/domain/LegacySearchForm.class b/target/classes/com/h2/demo/web/domain/LegacySearchForm.class
new file mode 100644
index 0000000..78420f6
Binary files /dev/null and b/target/classes/com/h2/demo/web/domain/LegacySearchForm.class differ
diff --git a/target/classes/com/h2/demo/web/domain/MoreTypesDemoController.class b/target/classes/com/h2/demo/web/domain/MoreTypesDemoController.class
new file mode 100644
index 0000000..5768d59
Binary files /dev/null and b/target/classes/com/h2/demo/web/domain/MoreTypesDemoController.class differ
diff --git a/target/classes/com/h2/demo/web/domain/MoreTypesDemoEditForm.class b/target/classes/com/h2/demo/web/domain/MoreTypesDemoEditForm.class
new file mode 100644
index 0000000..b0d7302
Binary files /dev/null and b/target/classes/com/h2/demo/web/domain/MoreTypesDemoEditForm.class differ
diff --git a/target/classes/com/h2/demo/web/domain/MoreTypesDemoExcelExporter.class b/target/classes/com/h2/demo/web/domain/MoreTypesDemoExcelExporter.class
new file mode 100644
index 0000000..c3d0682
Binary files /dev/null and b/target/classes/com/h2/demo/web/domain/MoreTypesDemoExcelExporter.class differ
diff --git a/target/classes/com/h2/demo/web/domain/MoreTypesDemoLazyDataModel.class b/target/classes/com/h2/demo/web/domain/MoreTypesDemoLazyDataModel.class
new file mode 100644
index 0000000..d5573d5
Binary files /dev/null and b/target/classes/com/h2/demo/web/domain/MoreTypesDemoLazyDataModel.class differ
diff --git a/target/classes/com/h2/demo/web/domain/MoreTypesDemoSearchForm.class b/target/classes/com/h2/demo/web/domain/MoreTypesDemoSearchForm.class
new file mode 100644
index 0000000..908eea6
Binary files /dev/null and b/target/classes/com/h2/demo/web/domain/MoreTypesDemoSearchForm.class differ
diff --git a/target/classes/com/h2/demo/web/domain/RoleController.class b/target/classes/com/h2/demo/web/domain/RoleController.class
new file mode 100644
index 0000000..eecb479
Binary files /dev/null and b/target/classes/com/h2/demo/web/domain/RoleController.class differ
diff --git a/target/classes/com/h2/demo/web/domain/RoleEditForm.class b/target/classes/com/h2/demo/web/domain/RoleEditForm.class
new file mode 100644
index 0000000..3e19d04
Binary files /dev/null and b/target/classes/com/h2/demo/web/domain/RoleEditForm.class differ
diff --git a/target/classes/com/h2/demo/web/domain/RoleExcelExporter.class b/target/classes/com/h2/demo/web/domain/RoleExcelExporter.class
new file mode 100644
index 0000000..3c1a6a2
Binary files /dev/null and b/target/classes/com/h2/demo/web/domain/RoleExcelExporter.class differ
diff --git a/target/classes/com/h2/demo/web/domain/RoleLazyDataModel.class b/target/classes/com/h2/demo/web/domain/RoleLazyDataModel.class
new file mode 100644
index 0000000..7c7ec5d
Binary files /dev/null and b/target/classes/com/h2/demo/web/domain/RoleLazyDataModel.class differ
diff --git a/target/classes/com/h2/demo/web/domain/RoleSearchForm.class b/target/classes/com/h2/demo/web/domain/RoleSearchForm.class
new file mode 100644
index 0000000..1265125
Binary files /dev/null and b/target/classes/com/h2/demo/web/domain/RoleSearchForm.class differ
diff --git a/target/classes/com/h2/demo/web/domain/SavedSearchController.class b/target/classes/com/h2/demo/web/domain/SavedSearchController.class
new file mode 100644
index 0000000..554cd4d
Binary files /dev/null and b/target/classes/com/h2/demo/web/domain/SavedSearchController.class differ
diff --git a/target/classes/com/h2/demo/web/domain/SavedSearchEditForm$1.class b/target/classes/com/h2/demo/web/domain/SavedSearchEditForm$1.class
new file mode 100644
index 0000000..fc24ba9
Binary files /dev/null and b/target/classes/com/h2/demo/web/domain/SavedSearchEditForm$1.class differ
diff --git a/target/classes/com/h2/demo/web/domain/SavedSearchEditForm.class b/target/classes/com/h2/demo/web/domain/SavedSearchEditForm.class
new file mode 100644
index 0000000..1a45bb1
Binary files /dev/null and b/target/classes/com/h2/demo/web/domain/SavedSearchEditForm.class differ
diff --git a/target/classes/com/h2/demo/web/domain/SavedSearchExcelExporter.class b/target/classes/com/h2/demo/web/domain/SavedSearchExcelExporter.class
new file mode 100644
index 0000000..95b6502
Binary files /dev/null and b/target/classes/com/h2/demo/web/domain/SavedSearchExcelExporter.class differ
diff --git a/target/classes/com/h2/demo/web/domain/SavedSearchFileDownload$1.class b/target/classes/com/h2/demo/web/domain/SavedSearchFileDownload$1.class
new file mode 100644
index 0000000..709f0a1
Binary files /dev/null and b/target/classes/com/h2/demo/web/domain/SavedSearchFileDownload$1.class differ
diff --git a/target/classes/com/h2/demo/web/domain/SavedSearchFileDownload.class b/target/classes/com/h2/demo/web/domain/SavedSearchFileDownload.class
new file mode 100644
index 0000000..7549530
Binary files /dev/null and b/target/classes/com/h2/demo/web/domain/SavedSearchFileDownload.class differ
diff --git a/target/classes/com/h2/demo/web/domain/SavedSearchFileUpload.class b/target/classes/com/h2/demo/web/domain/SavedSearchFileUpload.class
new file mode 100644
index 0000000..dacb10d
Binary files /dev/null and b/target/classes/com/h2/demo/web/domain/SavedSearchFileUpload.class differ
diff --git a/target/classes/com/h2/demo/web/domain/SavedSearchGraphLoader.class b/target/classes/com/h2/demo/web/domain/SavedSearchGraphLoader.class
new file mode 100644
index 0000000..1513007
Binary files /dev/null and b/target/classes/com/h2/demo/web/domain/SavedSearchGraphLoader.class differ
diff --git a/target/classes/com/h2/demo/web/domain/SavedSearchLazyDataModel.class b/target/classes/com/h2/demo/web/domain/SavedSearchLazyDataModel.class
new file mode 100644
index 0000000..e643aac
Binary files /dev/null and b/target/classes/com/h2/demo/web/domain/SavedSearchLazyDataModel.class differ
diff --git a/target/classes/com/h2/demo/web/domain/SavedSearchSearchForm.class b/target/classes/com/h2/demo/web/domain/SavedSearchSearchForm.class
new file mode 100644
index 0000000..dfd0497
Binary files /dev/null and b/target/classes/com/h2/demo/web/domain/SavedSearchSearchForm.class differ
diff --git a/target/classes/com/h2/demo/web/domain/support/ByteArrayStreamedContent.class b/target/classes/com/h2/demo/web/domain/support/ByteArrayStreamedContent.class
new file mode 100644
index 0000000..6a03b5b
Binary files /dev/null and b/target/classes/com/h2/demo/web/domain/support/ByteArrayStreamedContent.class differ
diff --git a/target/classes/com/h2/demo/web/domain/support/CommonAction.class b/target/classes/com/h2/demo/web/domain/support/CommonAction.class
new file mode 100644
index 0000000..57f7ef1
Binary files /dev/null and b/target/classes/com/h2/demo/web/domain/support/CommonAction.class differ
diff --git a/target/classes/com/h2/demo/web/domain/support/ControllerLocator.class b/target/classes/com/h2/demo/web/domain/support/ControllerLocator.class
new file mode 100644
index 0000000..a1e5e70
Binary files /dev/null and b/target/classes/com/h2/demo/web/domain/support/ControllerLocator.class differ
diff --git a/target/classes/com/h2/demo/web/domain/support/GenericController.class b/target/classes/com/h2/demo/web/domain/support/GenericController.class
new file mode 100644
index 0000000..eed0647
Binary files /dev/null and b/target/classes/com/h2/demo/web/domain/support/GenericController.class differ
diff --git a/target/classes/com/h2/demo/web/domain/support/GenericEditForm$1.class b/target/classes/com/h2/demo/web/domain/support/GenericEditForm$1.class
new file mode 100644
index 0000000..01f2bc9
Binary files /dev/null and b/target/classes/com/h2/demo/web/domain/support/GenericEditForm$1.class differ
diff --git a/target/classes/com/h2/demo/web/domain/support/GenericEditForm.class b/target/classes/com/h2/demo/web/domain/support/GenericEditForm.class
new file mode 100644
index 0000000..dadfd32
Binary files /dev/null and b/target/classes/com/h2/demo/web/domain/support/GenericEditForm.class differ
diff --git a/target/classes/com/h2/demo/web/domain/support/GenericEnumController.class b/target/classes/com/h2/demo/web/domain/support/GenericEnumController.class
new file mode 100644
index 0000000..b8418be
Binary files /dev/null and b/target/classes/com/h2/demo/web/domain/support/GenericEnumController.class differ
diff --git a/target/classes/com/h2/demo/web/domain/support/GenericExcelExporter.class b/target/classes/com/h2/demo/web/domain/support/GenericExcelExporter.class
new file mode 100644
index 0000000..49f0d7e
Binary files /dev/null and b/target/classes/com/h2/demo/web/domain/support/GenericExcelExporter.class differ
diff --git a/target/classes/com/h2/demo/web/domain/support/GenericLazyDataModel.class b/target/classes/com/h2/demo/web/domain/support/GenericLazyDataModel.class
new file mode 100644
index 0000000..31104e0
Binary files /dev/null and b/target/classes/com/h2/demo/web/domain/support/GenericLazyDataModel.class differ
diff --git a/target/classes/com/h2/demo/web/domain/support/GenericSearchForm.class b/target/classes/com/h2/demo/web/domain/support/GenericSearchForm.class
new file mode 100644
index 0000000..7fffb93
Binary files /dev/null and b/target/classes/com/h2/demo/web/domain/support/GenericSearchForm.class differ
diff --git a/target/classes/com/h2/demo/web/domain/support/GenericToManyAssociation$1.class b/target/classes/com/h2/demo/web/domain/support/GenericToManyAssociation$1.class
new file mode 100644
index 0000000..bc2ae87
Binary files /dev/null and b/target/classes/com/h2/demo/web/domain/support/GenericToManyAssociation$1.class differ
diff --git a/target/classes/com/h2/demo/web/domain/support/GenericToManyAssociation$2.class b/target/classes/com/h2/demo/web/domain/support/GenericToManyAssociation$2.class
new file mode 100644
index 0000000..a7c84e6
Binary files /dev/null and b/target/classes/com/h2/demo/web/domain/support/GenericToManyAssociation$2.class differ
diff --git a/target/classes/com/h2/demo/web/domain/support/GenericToManyAssociation$3.class b/target/classes/com/h2/demo/web/domain/support/GenericToManyAssociation$3.class
new file mode 100644
index 0000000..f22528a
Binary files /dev/null and b/target/classes/com/h2/demo/web/domain/support/GenericToManyAssociation$3.class differ
diff --git a/target/classes/com/h2/demo/web/domain/support/GenericToManyAssociation.class b/target/classes/com/h2/demo/web/domain/support/GenericToManyAssociation.class
new file mode 100644
index 0000000..5d69ee6
Binary files /dev/null and b/target/classes/com/h2/demo/web/domain/support/GenericToManyAssociation.class differ
diff --git a/target/classes/com/h2/demo/web/domain/support/GenericToOneAssociation$1.class b/target/classes/com/h2/demo/web/domain/support/GenericToOneAssociation$1.class
new file mode 100644
index 0000000..096dd6e
Binary files /dev/null and b/target/classes/com/h2/demo/web/domain/support/GenericToOneAssociation$1.class differ
diff --git a/target/classes/com/h2/demo/web/domain/support/GenericToOneAssociation$2.class b/target/classes/com/h2/demo/web/domain/support/GenericToOneAssociation$2.class
new file mode 100644
index 0000000..b90bc38
Binary files /dev/null and b/target/classes/com/h2/demo/web/domain/support/GenericToOneAssociation$2.class differ
diff --git a/target/classes/com/h2/demo/web/domain/support/GenericToOneAssociation$3.class b/target/classes/com/h2/demo/web/domain/support/GenericToOneAssociation$3.class
new file mode 100644
index 0000000..3b58740
Binary files /dev/null and b/target/classes/com/h2/demo/web/domain/support/GenericToOneAssociation$3.class differ
diff --git a/target/classes/com/h2/demo/web/domain/support/GenericToOneAssociation.class b/target/classes/com/h2/demo/web/domain/support/GenericToOneAssociation.class
new file mode 100644
index 0000000..d20eca1
Binary files /dev/null and b/target/classes/com/h2/demo/web/domain/support/GenericToOneAssociation.class differ
diff --git a/target/classes/com/h2/demo/web/domain/support/SavedSearchService$Finder.class b/target/classes/com/h2/demo/web/domain/support/SavedSearchService$Finder.class
new file mode 100644
index 0000000..0aa4c55
Binary files /dev/null and b/target/classes/com/h2/demo/web/domain/support/SavedSearchService$Finder.class differ
diff --git a/target/classes/com/h2/demo/web/domain/support/SavedSearchService.class b/target/classes/com/h2/demo/web/domain/support/SavedSearchService.class
new file mode 100644
index 0000000..2578279
Binary files /dev/null and b/target/classes/com/h2/demo/web/domain/support/SavedSearchService.class differ
diff --git a/target/classes/com/h2/demo/web/domain/support/SelectableListDataModel.class b/target/classes/com/h2/demo/web/domain/support/SelectableListDataModel.class
new file mode 100644
index 0000000..a2f3f36
Binary files /dev/null and b/target/classes/com/h2/demo/web/domain/support/SelectableListDataModel.class differ
diff --git a/target/classes/com/h2/demo/web/faces/ConversationAwareElResolver.class b/target/classes/com/h2/demo/web/faces/ConversationAwareElResolver.class
new file mode 100644
index 0000000..7dbb2bf
Binary files /dev/null and b/target/classes/com/h2/demo/web/faces/ConversationAwareElResolver.class differ
diff --git a/target/classes/com/h2/demo/web/faces/ConversationContextScope.class b/target/classes/com/h2/demo/web/faces/ConversationContextScope.class
new file mode 100644
index 0000000..b16e277
Binary files /dev/null and b/target/classes/com/h2/demo/web/faces/ConversationContextScope.class differ
diff --git a/target/classes/com/h2/demo/web/faces/ConversationContextScoped.class b/target/classes/com/h2/demo/web/faces/ConversationContextScoped.class
new file mode 100644
index 0000000..4798285
Binary files /dev/null and b/target/classes/com/h2/demo/web/faces/ConversationContextScoped.class differ
diff --git a/target/classes/com/h2/demo/web/faces/ConversationScope.class b/target/classes/com/h2/demo/web/faces/ConversationScope.class
new file mode 100644
index 0000000..fabe46f
Binary files /dev/null and b/target/classes/com/h2/demo/web/faces/ConversationScope.class differ
diff --git a/target/classes/com/h2/demo/web/faces/ConversationScoped.class b/target/classes/com/h2/demo/web/faces/ConversationScoped.class
new file mode 100644
index 0000000..35a6757
Binary files /dev/null and b/target/classes/com/h2/demo/web/faces/ConversationScoped.class differ
diff --git a/target/classes/com/h2/demo/web/faces/CustomExceptionHandler.class b/target/classes/com/h2/demo/web/faces/CustomExceptionHandler.class
new file mode 100644
index 0000000..0dee992
Binary files /dev/null and b/target/classes/com/h2/demo/web/faces/CustomExceptionHandler.class differ
diff --git a/target/classes/com/h2/demo/web/faces/CustomExceptionHandlerFactory.class b/target/classes/com/h2/demo/web/faces/CustomExceptionHandlerFactory.class
new file mode 100644
index 0000000..dd1dee1
Binary files /dev/null and b/target/classes/com/h2/demo/web/faces/CustomExceptionHandlerFactory.class differ
diff --git a/target/classes/com/h2/demo/web/faces/ExceptionInRenderPhaseListener.class b/target/classes/com/h2/demo/web/faces/ExceptionInRenderPhaseListener.class
new file mode 100644
index 0000000..fbe9600
Binary files /dev/null and b/target/classes/com/h2/demo/web/faces/ExceptionInRenderPhaseListener.class differ
diff --git a/target/classes/com/h2/demo/web/faces/LocaleSetterListener.class b/target/classes/com/h2/demo/web/faces/LocaleSetterListener.class
new file mode 100644
index 0000000..00d92aa
Binary files /dev/null and b/target/classes/com/h2/demo/web/faces/LocaleSetterListener.class differ
diff --git a/target/classes/com/h2/demo/web/faces/LogPhaseListener.class b/target/classes/com/h2/demo/web/faces/LogPhaseListener.class
new file mode 100644
index 0000000..29efd3f
Binary files /dev/null and b/target/classes/com/h2/demo/web/faces/LogPhaseListener.class differ
diff --git a/target/classes/com/h2/demo/web/faces/MultiPageMessagesListener.class b/target/classes/com/h2/demo/web/faces/MultiPageMessagesListener.class
new file mode 100644
index 0000000..88e2d93
Binary files /dev/null and b/target/classes/com/h2/demo/web/faces/MultiPageMessagesListener.class differ
diff --git a/target/classes/com/h2/demo/web/faces/OptimisticLockExceptionHandler$1.class b/target/classes/com/h2/demo/web/faces/OptimisticLockExceptionHandler$1.class
new file mode 100644
index 0000000..a5337ac
Binary files /dev/null and b/target/classes/com/h2/demo/web/faces/OptimisticLockExceptionHandler$1.class differ
diff --git a/target/classes/com/h2/demo/web/faces/OptimisticLockExceptionHandler.class b/target/classes/com/h2/demo/web/faces/OptimisticLockExceptionHandler.class
new file mode 100644
index 0000000..cc3757d
Binary files /dev/null and b/target/classes/com/h2/demo/web/faces/OptimisticLockExceptionHandler.class differ
diff --git a/target/classes/com/h2/demo/web/faces/ViewScope.class b/target/classes/com/h2/demo/web/faces/ViewScope.class
new file mode 100644
index 0000000..47de34b
Binary files /dev/null and b/target/classes/com/h2/demo/web/faces/ViewScope.class differ
diff --git a/target/classes/com/h2/demo/web/faces/ViewScoped.class b/target/classes/com/h2/demo/web/faces/ViewScoped.class
new file mode 100644
index 0000000..64c4ed2
Binary files /dev/null and b/target/classes/com/h2/demo/web/faces/ViewScoped.class differ
diff --git a/target/classes/com/h2/demo/web/filter/LocaleResolverRequestFilter.class b/target/classes/com/h2/demo/web/filter/LocaleResolverRequestFilter.class
new file mode 100644
index 0000000..f2111c1
Binary files /dev/null and b/target/classes/com/h2/demo/web/filter/LocaleResolverRequestFilter.class differ
diff --git a/target/classes/com/h2/demo/web/filter/LogContextFilter.class b/target/classes/com/h2/demo/web/filter/LogContextFilter.class
new file mode 100644
index 0000000..f4ce0f4
Binary files /dev/null and b/target/classes/com/h2/demo/web/filter/LogContextFilter.class differ
diff --git a/target/classes/com/h2/demo/web/filter/NoPageCacheFilter.class b/target/classes/com/h2/demo/web/filter/NoPageCacheFilter.class
new file mode 100644
index 0000000..e1dc42d
Binary files /dev/null and b/target/classes/com/h2/demo/web/filter/NoPageCacheFilter.class differ
diff --git a/target/classes/com/h2/demo/web/filter/SessionExpirationFilter.class b/target/classes/com/h2/demo/web/filter/SessionExpirationFilter.class
new file mode 100644
index 0000000..9e74826
Binary files /dev/null and b/target/classes/com/h2/demo/web/filter/SessionExpirationFilter.class differ
diff --git a/target/classes/com/h2/demo/web/permission/AccountPermission.class b/target/classes/com/h2/demo/web/permission/AccountPermission.class
new file mode 100644
index 0000000..b3eae41
Binary files /dev/null and b/target/classes/com/h2/demo/web/permission/AccountPermission.class differ
diff --git a/target/classes/com/h2/demo/web/permission/AddressPermission.class b/target/classes/com/h2/demo/web/permission/AddressPermission.class
new file mode 100644
index 0000000..ad34ae3
Binary files /dev/null and b/target/classes/com/h2/demo/web/permission/AddressPermission.class differ
diff --git a/target/classes/com/h2/demo/web/permission/AuditLogPermission.class b/target/classes/com/h2/demo/web/permission/AuditLogPermission.class
new file mode 100644
index 0000000..689eaf4
Binary files /dev/null and b/target/classes/com/h2/demo/web/permission/AuditLogPermission.class differ
diff --git a/target/classes/com/h2/demo/web/permission/BookPermission.class b/target/classes/com/h2/demo/web/permission/BookPermission.class
new file mode 100644
index 0000000..e9f7f44
Binary files /dev/null and b/target/classes/com/h2/demo/web/permission/BookPermission.class differ
diff --git a/target/classes/com/h2/demo/web/permission/DocumentPermission.class b/target/classes/com/h2/demo/web/permission/DocumentPermission.class
new file mode 100644
index 0000000..e545b0f
Binary files /dev/null and b/target/classes/com/h2/demo/web/permission/DocumentPermission.class differ
diff --git a/target/classes/com/h2/demo/web/permission/LegacyPermission.class b/target/classes/com/h2/demo/web/permission/LegacyPermission.class
new file mode 100644
index 0000000..c07b520
Binary files /dev/null and b/target/classes/com/h2/demo/web/permission/LegacyPermission.class differ
diff --git a/target/classes/com/h2/demo/web/permission/MoreTypesDemoPermission.class b/target/classes/com/h2/demo/web/permission/MoreTypesDemoPermission.class
new file mode 100644
index 0000000..cfe6231
Binary files /dev/null and b/target/classes/com/h2/demo/web/permission/MoreTypesDemoPermission.class differ
diff --git a/target/classes/com/h2/demo/web/permission/RolePermission.class b/target/classes/com/h2/demo/web/permission/RolePermission.class
new file mode 100644
index 0000000..5fbae82
Binary files /dev/null and b/target/classes/com/h2/demo/web/permission/RolePermission.class differ
diff --git a/target/classes/com/h2/demo/web/permission/SavedSearchPermission.class b/target/classes/com/h2/demo/web/permission/SavedSearchPermission.class
new file mode 100644
index 0000000..0176dbe
Binary files /dev/null and b/target/classes/com/h2/demo/web/permission/SavedSearchPermission.class differ
diff --git a/target/classes/com/h2/demo/web/permission/support/GenericPermission.class b/target/classes/com/h2/demo/web/permission/support/GenericPermission.class
new file mode 100644
index 0000000..ca5e57e
Binary files /dev/null and b/target/classes/com/h2/demo/web/permission/support/GenericPermission.class differ
diff --git a/target/classes/com/h2/demo/web/permission/support/TypeAwarePermission.class b/target/classes/com/h2/demo/web/permission/support/TypeAwarePermission.class
new file mode 100644
index 0000000..415b63c
Binary files /dev/null and b/target/classes/com/h2/demo/web/permission/support/TypeAwarePermission.class differ
diff --git a/target/classes/com/h2/demo/web/service/ConcurrentModificationResolver.class b/target/classes/com/h2/demo/web/service/ConcurrentModificationResolver.class
new file mode 100644
index 0000000..427bd7c
Binary files /dev/null and b/target/classes/com/h2/demo/web/service/ConcurrentModificationResolver.class differ
diff --git a/target/classes/com/h2/demo/web/service/LocaleService.class b/target/classes/com/h2/demo/web/service/LocaleService.class
new file mode 100644
index 0000000..71067ae
Binary files /dev/null and b/target/classes/com/h2/demo/web/service/LocaleService.class differ
diff --git a/target/classes/com/h2/demo/web/service/UserContextService.class b/target/classes/com/h2/demo/web/service/UserContextService.class
new file mode 100644
index 0000000..43c7617
Binary files /dev/null and b/target/classes/com/h2/demo/web/service/UserContextService.class differ
diff --git a/target/classes/com/h2/demo/web/util/DownloadUtil.class b/target/classes/com/h2/demo/web/util/DownloadUtil.class
new file mode 100644
index 0000000..d13306c
Binary files /dev/null and b/target/classes/com/h2/demo/web/util/DownloadUtil.class differ
diff --git a/target/classes/com/h2/demo/web/util/ExceptionUtil.class b/target/classes/com/h2/demo/web/util/ExceptionUtil.class
new file mode 100644
index 0000000..80481e6
Binary files /dev/null and b/target/classes/com/h2/demo/web/util/ExceptionUtil.class differ
diff --git a/target/classes/com/h2/demo/web/util/LoginPageManager.class b/target/classes/com/h2/demo/web/util/LoginPageManager.class
new file mode 100644
index 0000000..40f85c1
Binary files /dev/null and b/target/classes/com/h2/demo/web/util/LoginPageManager.class differ
diff --git a/target/classes/com/h2/demo/web/util/Message.class b/target/classes/com/h2/demo/web/util/Message.class
new file mode 100644
index 0000000..305c02f
Binary files /dev/null and b/target/classes/com/h2/demo/web/util/Message.class differ
diff --git a/target/classes/com/h2/demo/web/util/MessageBundle.class b/target/classes/com/h2/demo/web/util/MessageBundle.class
new file mode 100644
index 0000000..814a326
Binary files /dev/null and b/target/classes/com/h2/demo/web/util/MessageBundle.class differ
diff --git a/target/classes/com/h2/demo/web/util/MessageUtil.class b/target/classes/com/h2/demo/web/util/MessageUtil.class
new file mode 100644
index 0000000..a3cc72d
Binary files /dev/null and b/target/classes/com/h2/demo/web/util/MessageUtil.class differ
diff --git a/target/classes/com/h2/demo/web/util/MessagesHelper$1.class b/target/classes/com/h2/demo/web/util/MessagesHelper$1.class
new file mode 100644
index 0000000..5b557cb
Binary files /dev/null and b/target/classes/com/h2/demo/web/util/MessagesHelper$1.class differ
diff --git a/target/classes/com/h2/demo/web/util/MessagesHelper$2.class b/target/classes/com/h2/demo/web/util/MessagesHelper$2.class
new file mode 100644
index 0000000..53980c2
Binary files /dev/null and b/target/classes/com/h2/demo/web/util/MessagesHelper$2.class differ
diff --git a/target/classes/com/h2/demo/web/util/MessagesHelper$3.class b/target/classes/com/h2/demo/web/util/MessagesHelper$3.class
new file mode 100644
index 0000000..e57efc7
Binary files /dev/null and b/target/classes/com/h2/demo/web/util/MessagesHelper$3.class differ
diff --git a/target/classes/com/h2/demo/web/util/MessagesHelper.class b/target/classes/com/h2/demo/web/util/MessagesHelper.class
new file mode 100644
index 0000000..87c76b3
Binary files /dev/null and b/target/classes/com/h2/demo/web/util/MessagesHelper.class differ
diff --git a/target/classes/com/h2/demo/web/util/PrimeFacesUtil.class b/target/classes/com/h2/demo/web/util/PrimeFacesUtil.class
new file mode 100644
index 0000000..5522d70
Binary files /dev/null and b/target/classes/com/h2/demo/web/util/PrimeFacesUtil.class differ
diff --git a/target/classes/com/h2/demo/web/util/TabBean.class b/target/classes/com/h2/demo/web/util/TabBean.class
new file mode 100644
index 0000000..93acd01
Binary files /dev/null and b/target/classes/com/h2/demo/web/util/TabBean.class differ
diff --git a/target/classes/com/h2/demo/web/validation/ConditionalValidatorUtil.class b/target/classes/com/h2/demo/web/validation/ConditionalValidatorUtil.class
new file mode 100644
index 0000000..7a1d80e
Binary files /dev/null and b/target/classes/com/h2/demo/web/validation/ConditionalValidatorUtil.class differ
diff --git a/target/classes/com/h2/demo/web/validation/JpaUniqueValidator.class b/target/classes/com/h2/demo/web/validation/JpaUniqueValidator.class
new file mode 100644
index 0000000..2d4dfe6
Binary files /dev/null and b/target/classes/com/h2/demo/web/validation/JpaUniqueValidator.class differ
diff --git a/target/classes/com/h2/demo/web/validation/LenientBeanValidator.class b/target/classes/com/h2/demo/web/validation/LenientBeanValidator.class
new file mode 100644
index 0000000..9927f7f
Binary files /dev/null and b/target/classes/com/h2/demo/web/validation/LenientBeanValidator.class differ
diff --git a/target/classes/database.properties b/target/classes/database.properties
new file mode 100644
index 0000000..41d393e
--- /dev/null
+++ b/target/classes/database.properties
@@ -0,0 +1,17 @@
+#
+# (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+# Source code generated by Celerio, a Jaxio product
+# Want to purchase Celerio ? email us at info@jaxio.com
+# Follow us on twitter: @springfuse
+# Documentation: http://www.jaxio.com/documentation/celerio/
+# Template pack-backend-jpa:src/main/resources/database.p.vm.properties
+#
+
+#----------------------
+# DATABASE PROPERTIES
+#----------------------
+
+jdbc.driver=org.h2.Driver
+jdbc.url=jdbc:h2:~/test
+jdbc.user=sa
+jdbc.password=
diff --git a/target/classes/ehcache-distributed.xml b/target/classes/ehcache-distributed.xml
new file mode 100644
index 0000000..25adb1e
--- /dev/null
+++ b/target/classes/ehcache-distributed.xml
@@ -0,0 +1,123 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!--
+ ! (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ ! Source code generated by Celerio, a Jaxio product
+ ! Want to purchase Celerio ? email us at info@jaxio.com
+ ! Follow us on twitter: @springfuse
+ ! Documentation: http://www.jaxio.com/documentation/celerio/
+ ! Template pack-backend-jpa:src/main/resources/ehcache-distributed.p.vm.xml
+-->
+<ehcache>
+	<!-- see ehcache/ehcache.xml for local caching -->
+
+	<!-- Sets the path to the directory where cache .data files are created.
+
+		If the path is a Java System Property it is replaced by
+		its value in the running VM.
+
+		The following properties are translated:
+		user.home - User's home directory
+		user.dir - User's current working directory
+		java.io.tmpdir - Default temp file path -->
+
+	<diskStore path="java.io.tmpdir" />
+
+	<!--
+		for automatic peer discovery see http://ehcache.sourceforge.net/EhcacheUserGuide.html#id.s20.2.1
+		for manual peer discovery see  http://ehcache.sourceforge.net/EhcacheUserGuide.html#id.s20.2.2
+
+		!! please note that timeToLive has a specific meaning with multicast adresses
+	-->
+	<cacheManagerPeerProviderFactory
+		class="net.sf.ehcache.distribution.RMICacheManagerPeerProviderFactory"
+		properties="peerDiscovery=automatic, multicastGroupAddress=230.0.0.1, multicastGroupPort=4446, timeToLive=1" />
+
+	<cacheManagerPeerListenerFactory class="net.sf.ehcache.distribution.RMICacheManagerPeerListenerFactory" />
+
+	<!--
+		Default Cache configuration. These will applied to caches programmatically created through
+		the CacheManager.
+
+		The following attributes are required for defaultCache:
+
+		maxInMemory	   - Sets the maximum number of objects that will be created in memory
+		eternal		   - Sets whether elements are eternal. If eternal,  timeouts are ignored and the element
+		is never expired.
+		timeToIdleSeconds - Sets the time to idle for an element before it expires.
+		i.e. The maximum amount of time between accesses before an element expires
+		Is only used if the element is not eternal.
+		Optional attribute. A value of 0 means that an Element can idle for infinity
+		timeToLiveSeconds - Sets the time to live for an element before it expires.
+		i.e. The maximum time between creation time and when an element expires.
+		Is only used if the element is not eternal.
+		Optional attribute. A value of 0 means that and Element can live for infinity
+		overflowToDisk	- Sets whether elements can overflow to disk when the in-memory cache
+		has reached the maxInMemory limit.
+	-->
+
+	<defaultCache
+		maxElementsInMemory="20000"
+		eternal="false"
+		timeToIdleSeconds="6000"
+		timeToLiveSeconds="6000"
+		overflowToDisk="false"
+		memoryStoreEvictionPolicy="LFU">
+	</defaultCache>
+
+	<cache  name="org.hibernate.cache.StandardQueryCache"
+		maxElementsInMemory="10000"
+		eternal="false"
+		timeToIdleSeconds="86400"
+		timeToLiveSeconds="86400"
+		overflowToDisk="false"
+		memoryStoreEvictionPolicy="LFU">
+		<cacheEventListenerFactory
+			class="net.sf.ehcache.distribution.RMICacheReplicatorFactory"
+			properties="replicateAsynchronously=true,replicatePuts=false,replicateUpdates=true,replicateUpdatesViaCopy=false,replicateRemovals=true" />
+	</cache>
+
+	<!-- mandatory if you want to distribute the query cache -->
+	<cache  name="org.hibernate.cache.UpdateTimestampsCache"
+		maxElementsInMemory="400000"
+		eternal="true"
+		overflowToDisk="false"
+		memoryStoreEvictionPolicy="LFU">
+		<!-- please note the mandatory replicateUpdatesViaCopy=true -->
+		<cacheEventListenerFactory
+			class="net.sf.ehcache.distribution.RMICacheReplicatorFactory"
+			properties="replicateAsynchronously=true,replicatePuts=true,replicateUpdates=true,replicateUpdatesViaCopy=true,replicateRemovals=true" />
+	</cache>
+
+	<!--
+		You can override cache configuration given a cache name the following way:
+
+		!! If you choose to distribute a specific entity please remember to distribute also the collection that contains such entities too !!
+
+		The following cache may be used
+
+		# hibernate related
+		org.hibernate.cache.internal.StandardQueryCache
+		org.hibernate.cache.spi.UpdateTimestampsCache
+
+		# database related
+		com.h2.demo.domain.Account
+		com.h2.demo.domain.Account.roles
+
+		com.h2.demo.domain.Address
+
+		com.h2.demo.domain.AuditLog
+
+		com.h2.demo.domain.Book
+
+		com.h2.demo.domain.Document
+
+		com.h2.demo.domain.Legacy
+
+		com.h2.demo.domain.MoreTypesDemo
+
+		com.h2.demo.domain.Role
+
+		com.h2.demo.domain.SavedSearch
+
+	-->
+</ehcache>
diff --git a/target/classes/ehcache.xml b/target/classes/ehcache.xml
new file mode 100644
index 0000000..bb47480
--- /dev/null
+++ b/target/classes/ehcache.xml
@@ -0,0 +1,91 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!--
+ ! (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ ! Source code generated by Celerio, a Jaxio product
+ ! Want to purchase Celerio ? email us at info@jaxio.com
+ ! Follow us on twitter: @springfuse
+ ! Documentation: http://www.jaxio.com/documentation/celerio/
+ ! Template pack-backend-jpa:src/main/resources/ehcache.p.vm.xml
+-->
+<ehcache>
+	<!-- see cache/ehcache-distributed.xml for hibernate distributed caching -->
+
+	<!-- Sets the path to the directory where cache .data files are created.
+
+		If the path is a Java System Property it is replaced by
+		its value in the running VM.
+
+		The following properties are translated:
+		user.home - User's home directory
+		user.dir - User's current working directory
+		java.io.tmpdir - Default temp file path -->
+	<diskStore path="java.io.tmpdir" />
+
+	<!--Default Cache configuration. These will applied to caches programmatically created through
+		the CacheManager.
+
+		The following attributes are required for defaultCache:
+
+		maxInMemory	   - Sets the maximum number of objects that will be created in memory
+		eternal		   - Sets whether elements are eternal. If eternal,  timeouts are ignored and the element
+		is never expired.
+		timeToIdleSeconds - Sets the time to idle for an element before it expires.
+		i.e. The maximum amount of time between accesses before an element expires
+		Is only used if the element is not eternal.
+		Optional attribute. A value of 0 means that an Element can idle for infinity
+		timeToLiveSeconds - Sets the time to live for an element before it expires.
+		i.e. The maximum time between creation time and when an element expires.
+		Is only used if the element is not eternal.
+		Optional attribute. A value of 0 means that and Element can live for infinity
+		overflowToDisk	- Sets whether elements can overflow to disk when the in-memory cache
+		has reached the maxInMemory limit.
+
+	-->
+	<defaultCache maxElementsInMemory="2000" eternal="false"
+		timeToIdleSeconds="6000" timeToLiveSeconds="6000"
+		overflowToDisk="false" memoryStoreEvictionPolicy="LFU">
+	</defaultCache>
+
+	<cache name="org.hibernate.cache.internal.StandardQueryCache"
+		maxElementsInMemory="10000" eternal="false" timeToIdleSeconds="86400"
+		timeToLiveSeconds="86400" overflowToDisk="false"
+		memoryStoreEvictionPolicy="LFU">
+	</cache>
+
+	<cache name="org.hibernate.cache.spi.UpdateTimestampsCache"
+		maxElementsInMemory="400000" eternal="true" overflowToDisk="false"
+		memoryStoreEvictionPolicy="LFU">
+	</cache>
+
+	<!--
+
+		You can override cache configuration given a cache name the following way:
+
+		The following cache may be used
+
+		# hibernate related
+		org.hibernate.cache.internal.StandardQueryCache
+		org.hibernate.cache.spi.UpdateTimestampsCache
+
+		# database related
+		com.h2.demo.domain.Account
+		com.h2.demo.domain.Account.roles
+
+		com.h2.demo.domain.Address
+
+		com.h2.demo.domain.AuditLog
+
+		com.h2.demo.domain.Book
+
+		com.h2.demo.domain.Document
+
+		com.h2.demo.domain.Legacy
+
+		com.h2.demo.domain.MoreTypesDemo
+
+		com.h2.demo.domain.Role
+
+		com.h2.demo.domain.SavedSearch
+
+	-->
+</ehcache>
diff --git a/target/classes/hibernate.properties b/target/classes/hibernate.properties
new file mode 100644
index 0000000..abe7301
--- /dev/null
+++ b/target/classes/hibernate.properties
@@ -0,0 +1,49 @@
+#
+# (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+# Source code generated by Celerio, a Jaxio product
+# Want to purchase Celerio ? email us at info@jaxio.com
+# Follow us on twitter: @springfuse
+# Documentation: http://www.jaxio.com/documentation/celerio/
+# Template pack-backend-jpa:src/main/resources/hibernate.p.vm.properties
+#
+
+#-----------------------
+# HIBERNATE PROPERTIES
+#-----------------------
+
+hibernate.dialect=org.hibernate.dialect.H2Dialect
+hibernate.connection.useUnicode=true
+hibernate.connection.charSet=UTF-8
+
+# 2d level cache
+hibernate.cache.use_query_cache=true
+hibernate.cache.use_second_level_cache=true
+hibernate.cache.provider_class=org.hibernate.cache.EhCacheProvider
+hibernate.cache.region.factory_class=org.hibernate.cache.ehcache.EhCacheRegionFactory
+hibernate.cache.provider_configuration_file_resource_path=ehcache.xml
+
+# search
+hibernate.search.default.directory_provider=ram
+#hibernate.search.default.indexBase=target
+#hibernate.search.default.directory_provider=filesystem
+hibernate.search.worker.execution=async
+hibernate.search.worker.thread_pool.size=3
+
+# connection management
+hibernate.connection.release_mode=after_transaction
+
+# misc
+hibernate.bytecode.use_reflection_optimizer=true
+hibernate.jdbc.use_scrollable_resultset=false
+hibernate.jdbc.use_streams_for_binary=true
+hibernate.jdbc.fetch_size=300
+hibernate.jdbc.batch_size=50
+
+# logging debug information
+hibernate.show_sql=true
+hibernate.format_sql=true
+hibernate.generate_statistics=true
+hibernate.use_sql_comments=true
+
+# If needed, please uncomment and set it properly
+# hibernate.default_schema=
\ No newline at end of file
diff --git a/target/classes/localization/application.xml b/target/classes/localization/application.xml
new file mode 100644
index 0000000..8e0e678
--- /dev/null
+++ b/target/classes/localization/application.xml
@@ -0,0 +1,13 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!--
+ ! (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ ! Source code generated by Celerio, a Jaxio product
+ ! Want to purchase Celerio ? email us at info@jaxio.com
+ ! Follow us on twitter: @springfuse
+ ! Documentation: http://www.jaxio.com/documentation/celerio/
+ ! Template pack-backend-jpa:src/main/resources/localization/application.p.vm.xml
+-->
+<!DOCTYPE properties SYSTEM "http://java.sun.com/dtd/properties.dtd">
+<properties>
+	<comment>Add your application specific properties in this file.</comment>
+</properties>
\ No newline at end of file
diff --git a/target/classes/localization/application_fr.xml b/target/classes/localization/application_fr.xml
new file mode 100644
index 0000000..f193c2e
--- /dev/null
+++ b/target/classes/localization/application_fr.xml
@@ -0,0 +1,13 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!--
+ ! (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ ! Source code generated by Celerio, a Jaxio product
+ ! Want to purchase Celerio ? email us at info@jaxio.com
+ ! Follow us on twitter: @springfuse
+ ! Documentation: http://www.jaxio.com/documentation/celerio/
+ ! Template pack-backend-jpa:src/main/resources/localization/application_fr.p.vm.xml
+-->
+<!DOCTYPE properties SYSTEM "http://java.sun.com/dtd/properties.dtd">
+<properties>
+	<comment>Add your application specific properties for the french locale in this file.</comment>
+</properties>
\ No newline at end of file
diff --git a/target/classes/localization/domain/Account.xml b/target/classes/localization/domain/Account.xml
new file mode 100644
index 0000000..ddf25b3
--- /dev/null
+++ b/target/classes/localization/domain/Account.xml
@@ -0,0 +1,48 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!--
+ ! (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ ! Source code generated by Celerio, a Jaxio product
+ ! Want to purchase Celerio ? email us at info@jaxio.com
+ ! Follow us on twitter: @springfuse
+ ! Documentation: http://www.jaxio.com/documentation/celerio/
+ ! Template pack-backend-jpa:src/main/resources/localization/domain/domain.e.vm.xml
+-->
+<!DOCTYPE properties SYSTEM "http://java.sun.com/dtd/properties.dtd">
+<properties>
+	<comment>Domain resources for Account</comment>
+
+	<entry key="account">Account</entry>
+	<entry key="account_search">Search Account</entry>
+	<entry key="account_create">Create Account</entry>
+	<entry key="account_edit">Edit {0}</entry>
+	<entry key="account_view">View {0}</entry>
+
+	<!-- attributes -->
+	<entry key="account_id">Id</entry>
+	<entry key="account_login">Login</entry>
+	<entry key="account_password">Password</entry>
+	<entry key="account_email">Email</entry>
+	<entry key="account_isEnabled">Is Enabled?</entry>
+	<entry key="account_civility">Civility</entry>
+	<entry key="account_firstName">First Name</entry>
+	<entry key="account_lastName">Last Name</entry>
+	<entry key="account_birthDate">Birth Date</entry>
+	<entry key="account_description">Description</entry>
+	<entry key="account_addressId">Address Id</entry>
+	<entry key="account_creationDate">Creation Date</entry>
+	<entry key="account_creationAuthor">Creation Author</entry>
+	<entry key="account_lastModificationDate">Last Modification Date</entry>
+	<entry key="account_lastModificationAuthor">Last Modification Author</entry>
+	<entry key="account_version">Version</entry>
+
+	<!-- x-to-one -->
+	<entry key="account_address">Address</entry>
+
+	<!-- many-to-many -->
+	<entry key="account_roles">Roles</entry>
+
+	<!-- uniques -->
+	<entry key="account_login_already_exists">Login already exists</entry>
+	<entry key="account_email_already_exists">Email already exists</entry>
+	<entry key="account_composite_unique_constraint_error">A composite unique constraint has failed on Account</entry>
+</properties>
\ No newline at end of file
diff --git a/target/classes/localization/domain/Account_fr.xml b/target/classes/localization/domain/Account_fr.xml
new file mode 100644
index 0000000..5a21d22
--- /dev/null
+++ b/target/classes/localization/domain/Account_fr.xml
@@ -0,0 +1,48 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!--
+ ! (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ ! Source code generated by Celerio, a Jaxio product
+ ! Want to purchase Celerio ? email us at info@jaxio.com
+ ! Follow us on twitter: @springfuse
+ ! Documentation: http://www.jaxio.com/documentation/celerio/
+ ! Template pack-backend-jpa:src/main/resources/localization/domain/domain_fr.e.vm.xml
+-->
+<!DOCTYPE properties SYSTEM "http://java.sun.com/dtd/properties.dtd">
+<properties>
+	<comment>Domain resources for Account for the french locale</comment>
+
+	<entry key="account">Account</entry>
+	<entry key="account_search">Recherche de Account</entry>
+	<entry key="account_create">Création de Account</entry>
+	<entry key="account_edit">Édition de {0}</entry>
+	<entry key="account_view">Affichage de {0}</entry>
+
+	<!-- attributes -->
+	<entry key="account_id">Id</entry>
+	<entry key="account_login">Login</entry>
+	<entry key="account_password">Password</entry>
+	<entry key="account_email">Email</entry>
+	<entry key="account_isEnabled">Is Enabled?</entry>
+	<entry key="account_civility">Civility</entry>
+	<entry key="account_firstName">First Name</entry>
+	<entry key="account_lastName">Last Name</entry>
+	<entry key="account_birthDate">Birth Date</entry>
+	<entry key="account_description">Description</entry>
+	<entry key="account_addressId">Address Id</entry>
+	<entry key="account_creationDate">Creation Date</entry>
+	<entry key="account_creationAuthor">Creation Author</entry>
+	<entry key="account_lastModificationDate">Last Modification Date</entry>
+	<entry key="account_lastModificationAuthor">Last Modification Author</entry>
+	<entry key="account_version">Version</entry>
+
+	<!-- x-to-one -->
+	<entry key="account_address">Address</entry>
+
+	<!-- many-to-many -->
+	<entry key="account_roles">Roles</entry>
+
+	<!-- uniques -->
+	<entry key="account_login_already_exists">Login existe déjà</entry>
+	<entry key="account_email_already_exists">Email existe déjà</entry>
+	<entry key="account_composite_unique_constraint_error">Une contrainte d'unicité multiple n'est pas respectée sur Account</entry>
+</properties>
\ No newline at end of file
diff --git a/target/classes/localization/domain/Address.xml b/target/classes/localization/domain/Address.xml
new file mode 100644
index 0000000..425d7ad
--- /dev/null
+++ b/target/classes/localization/domain/Address.xml
@@ -0,0 +1,28 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!--
+ ! (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ ! Source code generated by Celerio, a Jaxio product
+ ! Want to purchase Celerio ? email us at info@jaxio.com
+ ! Follow us on twitter: @springfuse
+ ! Documentation: http://www.jaxio.com/documentation/celerio/
+ ! Template pack-backend-jpa:src/main/resources/localization/domain/domain.e.vm.xml
+-->
+<!DOCTYPE properties SYSTEM "http://java.sun.com/dtd/properties.dtd">
+<properties>
+	<comment>Domain resources for Address</comment>
+
+	<entry key="address">Address</entry>
+	<entry key="address_search">Search Address</entry>
+	<entry key="address_create">Create Address</entry>
+	<entry key="address_edit">Edit {0}</entry>
+	<entry key="address_view">View {0}</entry>
+
+	<!-- attributes -->
+	<entry key="address_id">Id</entry>
+	<entry key="address_streetName">Street Name</entry>
+	<entry key="address_city">City</entry>
+	<entry key="address_version">Version</entry>
+
+	<!-- uniques -->
+	<entry key="address_composite_unique_constraint_error">A composite unique constraint has failed on Address</entry>
+</properties>
\ No newline at end of file
diff --git a/target/classes/localization/domain/Address_fr.xml b/target/classes/localization/domain/Address_fr.xml
new file mode 100644
index 0000000..6ec5228
--- /dev/null
+++ b/target/classes/localization/domain/Address_fr.xml
@@ -0,0 +1,28 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!--
+ ! (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ ! Source code generated by Celerio, a Jaxio product
+ ! Want to purchase Celerio ? email us at info@jaxio.com
+ ! Follow us on twitter: @springfuse
+ ! Documentation: http://www.jaxio.com/documentation/celerio/
+ ! Template pack-backend-jpa:src/main/resources/localization/domain/domain_fr.e.vm.xml
+-->
+<!DOCTYPE properties SYSTEM "http://java.sun.com/dtd/properties.dtd">
+<properties>
+	<comment>Domain resources for Address for the french locale</comment>
+
+	<entry key="address">Address</entry>
+	<entry key="address_search">Recherche de Address</entry>
+	<entry key="address_create">Création de Address</entry>
+	<entry key="address_edit">Édition de {0}</entry>
+	<entry key="address_view">Affichage de {0}</entry>
+
+	<!-- attributes -->
+	<entry key="address_id">Id</entry>
+	<entry key="address_streetName">Street Name</entry>
+	<entry key="address_city">City</entry>
+	<entry key="address_version">Version</entry>
+
+	<!-- uniques -->
+	<entry key="address_composite_unique_constraint_error">Une contrainte d'unicité multiple n'est pas respectée sur Address</entry>
+</properties>
\ No newline at end of file
diff --git a/target/classes/localization/domain/AuditLog.xml b/target/classes/localization/domain/AuditLog.xml
new file mode 100644
index 0000000..29232b2
--- /dev/null
+++ b/target/classes/localization/domain/AuditLog.xml
@@ -0,0 +1,31 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!--
+ ! (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ ! Source code generated by Celerio, a Jaxio product
+ ! Want to purchase Celerio ? email us at info@jaxio.com
+ ! Follow us on twitter: @springfuse
+ ! Documentation: http://www.jaxio.com/documentation/celerio/
+ ! Template pack-backend-jpa:src/main/resources/localization/domain/domain.e.vm.xml
+-->
+<!DOCTYPE properties SYSTEM "http://java.sun.com/dtd/properties.dtd">
+<properties>
+	<comment>Domain resources for AuditLog</comment>
+
+	<entry key="auditLog">Audit Log</entry>
+	<entry key="auditLog_search">Search Audit Log</entry>
+	<entry key="auditLog_create">Create Audit Log</entry>
+	<entry key="auditLog_edit">Edit {0}</entry>
+	<entry key="auditLog_view">View {0}</entry>
+
+	<!-- attributes -->
+	<entry key="auditLog_id">Id</entry>
+	<entry key="auditLog_author">Author</entry>
+	<entry key="auditLog_event">Event</entry>
+	<entry key="auditLog_eventDate">Event Date</entry>
+	<entry key="auditLog_stringAttribute1">String Attribute1</entry>
+	<entry key="auditLog_stringAttribute2">String Attribute2</entry>
+	<entry key="auditLog_stringAttribute3">String Attribute3</entry>
+
+	<!-- uniques -->
+	<entry key="auditLog_composite_unique_constraint_error">A composite unique constraint has failed on Audit Log</entry>
+</properties>
\ No newline at end of file
diff --git a/target/classes/localization/domain/AuditLog_fr.xml b/target/classes/localization/domain/AuditLog_fr.xml
new file mode 100644
index 0000000..3d44662
--- /dev/null
+++ b/target/classes/localization/domain/AuditLog_fr.xml
@@ -0,0 +1,31 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!--
+ ! (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ ! Source code generated by Celerio, a Jaxio product
+ ! Want to purchase Celerio ? email us at info@jaxio.com
+ ! Follow us on twitter: @springfuse
+ ! Documentation: http://www.jaxio.com/documentation/celerio/
+ ! Template pack-backend-jpa:src/main/resources/localization/domain/domain_fr.e.vm.xml
+-->
+<!DOCTYPE properties SYSTEM "http://java.sun.com/dtd/properties.dtd">
+<properties>
+	<comment>Domain resources for AuditLog for the french locale</comment>
+
+	<entry key="auditLog">Audit Log</entry>
+	<entry key="auditLog_search">Recherche de Audit Log</entry>
+	<entry key="auditLog_create">Création de Audit Log</entry>
+	<entry key="auditLog_edit">Édition de {0}</entry>
+	<entry key="auditLog_view">Affichage de {0}</entry>
+
+	<!-- attributes -->
+	<entry key="auditLog_id">Id</entry>
+	<entry key="auditLog_author">Author</entry>
+	<entry key="auditLog_event">Event</entry>
+	<entry key="auditLog_eventDate">Event Date</entry>
+	<entry key="auditLog_stringAttribute1">String Attribute1</entry>
+	<entry key="auditLog_stringAttribute2">String Attribute2</entry>
+	<entry key="auditLog_stringAttribute3">String Attribute3</entry>
+
+	<!-- uniques -->
+	<entry key="auditLog_composite_unique_constraint_error">Une contrainte d'unicité multiple n'est pas respectée sur Audit Log</entry>
+</properties>
\ No newline at end of file
diff --git a/target/classes/localization/domain/Book.xml b/target/classes/localization/domain/Book.xml
new file mode 100644
index 0000000..c77d1f6
--- /dev/null
+++ b/target/classes/localization/domain/Book.xml
@@ -0,0 +1,32 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!--
+ ! (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ ! Source code generated by Celerio, a Jaxio product
+ ! Want to purchase Celerio ? email us at info@jaxio.com
+ ! Follow us on twitter: @springfuse
+ ! Documentation: http://www.jaxio.com/documentation/celerio/
+ ! Template pack-backend-jpa:src/main/resources/localization/domain/domain.e.vm.xml
+-->
+<!DOCTYPE properties SYSTEM "http://java.sun.com/dtd/properties.dtd">
+<properties>
+	<comment>Domain resources for Book</comment>
+
+	<entry key="book">Book</entry>
+	<entry key="book_search">Search Book</entry>
+	<entry key="book_create">Create Book</entry>
+	<entry key="book_edit">Edit {0}</entry>
+	<entry key="book_view">View {0}</entry>
+
+	<!-- attributes -->
+	<entry key="book_id">Id</entry>
+	<entry key="book_accountId">Account Id</entry>
+	<entry key="book_title">Title</entry>
+	<entry key="book_numberOfPages">Number Of Pages</entry>
+	<entry key="book_version">Version</entry>
+
+	<!-- x-to-one -->
+	<entry key="book_account">Account</entry>
+
+	<!-- uniques -->
+	<entry key="book_composite_unique_constraint_error">A composite unique constraint has failed on Book</entry>
+</properties>
\ No newline at end of file
diff --git a/target/classes/localization/domain/Book_fr.xml b/target/classes/localization/domain/Book_fr.xml
new file mode 100644
index 0000000..c76e183
--- /dev/null
+++ b/target/classes/localization/domain/Book_fr.xml
@@ -0,0 +1,32 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!--
+ ! (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ ! Source code generated by Celerio, a Jaxio product
+ ! Want to purchase Celerio ? email us at info@jaxio.com
+ ! Follow us on twitter: @springfuse
+ ! Documentation: http://www.jaxio.com/documentation/celerio/
+ ! Template pack-backend-jpa:src/main/resources/localization/domain/domain_fr.e.vm.xml
+-->
+<!DOCTYPE properties SYSTEM "http://java.sun.com/dtd/properties.dtd">
+<properties>
+	<comment>Domain resources for Book for the french locale</comment>
+
+	<entry key="book">Book</entry>
+	<entry key="book_search">Recherche de Book</entry>
+	<entry key="book_create">Création de Book</entry>
+	<entry key="book_edit">Édition de {0}</entry>
+	<entry key="book_view">Affichage de {0}</entry>
+
+	<!-- attributes -->
+	<entry key="book_id">Id</entry>
+	<entry key="book_accountId">Account Id</entry>
+	<entry key="book_title">Title</entry>
+	<entry key="book_numberOfPages">Number Of Pages</entry>
+	<entry key="book_version">Version</entry>
+
+	<!-- x-to-one -->
+	<entry key="book_account">Account</entry>
+
+	<!-- uniques -->
+	<entry key="book_composite_unique_constraint_error">Une contrainte d'unicité multiple n'est pas respectée sur Book</entry>
+</properties>
\ No newline at end of file
diff --git a/target/classes/localization/domain/Document.xml b/target/classes/localization/domain/Document.xml
new file mode 100644
index 0000000..51e4f90
--- /dev/null
+++ b/target/classes/localization/domain/Document.xml
@@ -0,0 +1,34 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!--
+ ! (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ ! Source code generated by Celerio, a Jaxio product
+ ! Want to purchase Celerio ? email us at info@jaxio.com
+ ! Follow us on twitter: @springfuse
+ ! Documentation: http://www.jaxio.com/documentation/celerio/
+ ! Template pack-backend-jpa:src/main/resources/localization/domain/domain.e.vm.xml
+-->
+<!DOCTYPE properties SYSTEM "http://java.sun.com/dtd/properties.dtd">
+<properties>
+	<comment>Domain resources for Document</comment>
+
+	<entry key="document">Document</entry>
+	<entry key="document_search">Search Document</entry>
+	<entry key="document_create">Create Document</entry>
+	<entry key="document_edit">Edit {0}</entry>
+	<entry key="document_view">View {0}</entry>
+
+	<!-- attributes -->
+	<entry key="document_id">Id</entry>
+	<entry key="document_accountId">Account Id</entry>
+	<entry key="document_documentBinary">Document Binary</entry>
+	<entry key="document_documentFileName">Document File Name</entry>
+	<entry key="document_documentContentType">Document Content Type</entry>
+	<entry key="document_documentSize">Document Size</entry>
+	<entry key="document_version">Version</entry>
+
+	<!-- x-to-one -->
+	<entry key="document_account">Account</entry>
+
+	<!-- uniques -->
+	<entry key="document_composite_unique_constraint_error">A composite unique constraint has failed on Document</entry>
+</properties>
\ No newline at end of file
diff --git a/target/classes/localization/domain/Document_fr.xml b/target/classes/localization/domain/Document_fr.xml
new file mode 100644
index 0000000..3f8cfaa
--- /dev/null
+++ b/target/classes/localization/domain/Document_fr.xml
@@ -0,0 +1,34 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!--
+ ! (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ ! Source code generated by Celerio, a Jaxio product
+ ! Want to purchase Celerio ? email us at info@jaxio.com
+ ! Follow us on twitter: @springfuse
+ ! Documentation: http://www.jaxio.com/documentation/celerio/
+ ! Template pack-backend-jpa:src/main/resources/localization/domain/domain_fr.e.vm.xml
+-->
+<!DOCTYPE properties SYSTEM "http://java.sun.com/dtd/properties.dtd">
+<properties>
+	<comment>Domain resources for Document for the french locale</comment>
+
+	<entry key="document">Document</entry>
+	<entry key="document_search">Recherche de Document</entry>
+	<entry key="document_create">Création de Document</entry>
+	<entry key="document_edit">Édition de {0}</entry>
+	<entry key="document_view">Affichage de {0}</entry>
+
+	<!-- attributes -->
+	<entry key="document_id">Id</entry>
+	<entry key="document_accountId">Account Id</entry>
+	<entry key="document_documentBinary">Document Binary</entry>
+	<entry key="document_documentFileName">Document File Name</entry>
+	<entry key="document_documentContentType">Document Content Type</entry>
+	<entry key="document_documentSize">Document Size</entry>
+	<entry key="document_version">Version</entry>
+
+	<!-- x-to-one -->
+	<entry key="document_account">Account</entry>
+
+	<!-- uniques -->
+	<entry key="document_composite_unique_constraint_error">Une contrainte d'unicité multiple n'est pas respectée sur Document</entry>
+</properties>
\ No newline at end of file
diff --git a/target/classes/localization/domain/Legacy.xml b/target/classes/localization/domain/Legacy.xml
new file mode 100644
index 0000000..f487ecf
--- /dev/null
+++ b/target/classes/localization/domain/Legacy.xml
@@ -0,0 +1,29 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!--
+ ! (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ ! Source code generated by Celerio, a Jaxio product
+ ! Want to purchase Celerio ? email us at info@jaxio.com
+ ! Follow us on twitter: @springfuse
+ ! Documentation: http://www.jaxio.com/documentation/celerio/
+ ! Template pack-backend-jpa:src/main/resources/localization/domain/domain.e.vm.xml
+-->
+<!DOCTYPE properties SYSTEM "http://java.sun.com/dtd/properties.dtd">
+<properties>
+	<comment>Domain resources for Legacy</comment>
+
+	<entry key="legacy">Legacy</entry>
+	<entry key="legacy_search">Search Legacy</entry>
+	<entry key="legacy_create">Create Legacy</entry>
+	<entry key="legacy_edit">Edit {0}</entry>
+	<entry key="legacy_view">View {0}</entry>
+
+	<!-- attributes -->
+	<entry key="legacy_name">Name</entry>
+	<entry key="legacy_code">Code</entry>
+	<entry key="legacy_dept">Dept</entry>
+	<entry key="legacy_extraInfo">Extra Info</entry>
+
+	<!-- uniques -->
+	<entry key="legacy_primary_key_8">Legacy primary_key_8 constraint violation</entry>
+	<entry key="legacy_composite_unique_constraint_error">A composite unique constraint has failed on Legacy</entry>
+</properties>
\ No newline at end of file
diff --git a/target/classes/localization/domain/Legacy_fr.xml b/target/classes/localization/domain/Legacy_fr.xml
new file mode 100644
index 0000000..42a6ebf
--- /dev/null
+++ b/target/classes/localization/domain/Legacy_fr.xml
@@ -0,0 +1,29 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!--
+ ! (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ ! Source code generated by Celerio, a Jaxio product
+ ! Want to purchase Celerio ? email us at info@jaxio.com
+ ! Follow us on twitter: @springfuse
+ ! Documentation: http://www.jaxio.com/documentation/celerio/
+ ! Template pack-backend-jpa:src/main/resources/localization/domain/domain_fr.e.vm.xml
+-->
+<!DOCTYPE properties SYSTEM "http://java.sun.com/dtd/properties.dtd">
+<properties>
+	<comment>Domain resources for Legacy for the french locale</comment>
+
+	<entry key="legacy">Legacy</entry>
+	<entry key="legacy_search">Recherche de Legacy</entry>
+	<entry key="legacy_create">Création de Legacy</entry>
+	<entry key="legacy_edit">Édition de {0}</entry>
+	<entry key="legacy_view">Affichage de {0}</entry>
+
+	<!-- attributes -->
+	<entry key="legacy_name">Name</entry>
+	<entry key="legacy_code">Code</entry>
+	<entry key="legacy_dept">Dept</entry>
+	<entry key="legacy_extraInfo">Extra Info</entry>
+
+	<!-- uniques -->
+	<entry key="legacy_primary_key_8">Legacy violation de contrainte unique primary_key_8 </entry>
+	<entry key="legacy_composite_unique_constraint_error">Une contrainte d'unicité multiple n'est pas respectée sur Legacy</entry>
+</properties>
\ No newline at end of file
diff --git a/target/classes/localization/domain/MoreTypesDemo.xml b/target/classes/localization/domain/MoreTypesDemo.xml
new file mode 100644
index 0000000..1699dad
--- /dev/null
+++ b/target/classes/localization/domain/MoreTypesDemo.xml
@@ -0,0 +1,36 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!--
+ ! (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ ! Source code generated by Celerio, a Jaxio product
+ ! Want to purchase Celerio ? email us at info@jaxio.com
+ ! Follow us on twitter: @springfuse
+ ! Documentation: http://www.jaxio.com/documentation/celerio/
+ ! Template pack-backend-jpa:src/main/resources/localization/domain/domain.e.vm.xml
+-->
+<!DOCTYPE properties SYSTEM "http://java.sun.com/dtd/properties.dtd">
+<properties>
+	<comment>Domain resources for MoreTypesDemo</comment>
+
+	<entry key="moreTypesDemo">More Types Demo</entry>
+	<entry key="moreTypesDemo_search">Search More Types Demo</entry>
+	<entry key="moreTypesDemo_create">Create More Types Demo</entry>
+	<entry key="moreTypesDemo_edit">Edit {0}</entry>
+	<entry key="moreTypesDemo_view">View {0}</entry>
+
+	<!-- attributes -->
+	<entry key="moreTypesDemo_id">Id</entry>
+	<entry key="moreTypesDemo_numberInt">Number Int</entry>
+	<entry key="moreTypesDemo_numberLong">Number Long</entry>
+	<entry key="moreTypesDemo_numberDouble">Number Double</entry>
+	<entry key="moreTypesDemo_numberFloat">Number Float</entry>
+	<entry key="moreTypesDemo_numberBigInteger">Number Big Integer</entry>
+	<entry key="moreTypesDemo_numberBigDecimal">Number Big Decimal</entry>
+	<entry key="moreTypesDemo_dateJavaTemporalDate">Date Java Temporal Date</entry>
+	<entry key="moreTypesDemo_dateJavaTemporalTimestamp">Date Java Temporal Timestamp</entry>
+	<entry key="moreTypesDemo_dateJoda">Date Joda</entry>
+	<entry key="moreTypesDemo_dateTimeJoda">Date Time Joda</entry>
+	<entry key="moreTypesDemo_version">Version</entry>
+
+	<!-- uniques -->
+	<entry key="moreTypesDemo_composite_unique_constraint_error">A composite unique constraint has failed on More Types Demo</entry>
+</properties>
\ No newline at end of file
diff --git a/target/classes/localization/domain/MoreTypesDemo_fr.xml b/target/classes/localization/domain/MoreTypesDemo_fr.xml
new file mode 100644
index 0000000..198b69a
--- /dev/null
+++ b/target/classes/localization/domain/MoreTypesDemo_fr.xml
@@ -0,0 +1,36 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!--
+ ! (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ ! Source code generated by Celerio, a Jaxio product
+ ! Want to purchase Celerio ? email us at info@jaxio.com
+ ! Follow us on twitter: @springfuse
+ ! Documentation: http://www.jaxio.com/documentation/celerio/
+ ! Template pack-backend-jpa:src/main/resources/localization/domain/domain_fr.e.vm.xml
+-->
+<!DOCTYPE properties SYSTEM "http://java.sun.com/dtd/properties.dtd">
+<properties>
+	<comment>Domain resources for MoreTypesDemo for the french locale</comment>
+
+	<entry key="moreTypesDemo">More Types Demo</entry>
+	<entry key="moreTypesDemo_search">Recherche de More Types Demo</entry>
+	<entry key="moreTypesDemo_create">Création de More Types Demo</entry>
+	<entry key="moreTypesDemo_edit">Édition de {0}</entry>
+	<entry key="moreTypesDemo_view">Affichage de {0}</entry>
+
+	<!-- attributes -->
+	<entry key="moreTypesDemo_id">Id</entry>
+	<entry key="moreTypesDemo_numberInt">Number Int</entry>
+	<entry key="moreTypesDemo_numberLong">Number Long</entry>
+	<entry key="moreTypesDemo_numberDouble">Number Double</entry>
+	<entry key="moreTypesDemo_numberFloat">Number Float</entry>
+	<entry key="moreTypesDemo_numberBigInteger">Number Big Integer</entry>
+	<entry key="moreTypesDemo_numberBigDecimal">Number Big Decimal</entry>
+	<entry key="moreTypesDemo_dateJavaTemporalDate">Date Java Temporal Date</entry>
+	<entry key="moreTypesDemo_dateJavaTemporalTimestamp">Date Java Temporal Timestamp</entry>
+	<entry key="moreTypesDemo_dateJoda">Date Joda</entry>
+	<entry key="moreTypesDemo_dateTimeJoda">Date Time Joda</entry>
+	<entry key="moreTypesDemo_version">Version</entry>
+
+	<!-- uniques -->
+	<entry key="moreTypesDemo_composite_unique_constraint_error">Une contrainte d'unicité multiple n'est pas respectée sur More Types Demo</entry>
+</properties>
\ No newline at end of file
diff --git a/target/classes/localization/domain/README.txt b/target/classes/localization/domain/README.txt
new file mode 100644
index 0000000..e8432c8
--- /dev/null
+++ b/target/classes/localization/domain/README.txt
@@ -0,0 +1,12 @@
+#
+# (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+# Source code generated by Celerio, a Jaxio product
+# Want to purchase Celerio ? email us at info@jaxio.com
+# Follow us on twitter: @springfuse
+# Documentation: http://www.jaxio.com/documentation/celerio/
+# Template pack-backend-jpa:src/main/resources/localization/domain/README.p.vm.txt
+#
+
+
+This folder contains Resources file for entities.
+Note that each base file must be declared in the Spring configuration MessageSourceConfiguration Java class.
diff --git a/target/classes/localization/domain/Role.xml b/target/classes/localization/domain/Role.xml
new file mode 100644
index 0000000..09d1acc
--- /dev/null
+++ b/target/classes/localization/domain/Role.xml
@@ -0,0 +1,27 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!--
+ ! (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ ! Source code generated by Celerio, a Jaxio product
+ ! Want to purchase Celerio ? email us at info@jaxio.com
+ ! Follow us on twitter: @springfuse
+ ! Documentation: http://www.jaxio.com/documentation/celerio/
+ ! Template pack-backend-jpa:src/main/resources/localization/domain/domain.e.vm.xml
+-->
+<!DOCTYPE properties SYSTEM "http://java.sun.com/dtd/properties.dtd">
+<properties>
+	<comment>Domain resources for Role</comment>
+
+	<entry key="role">Role</entry>
+	<entry key="role_search">Search Role</entry>
+	<entry key="role_create">Create Role</entry>
+	<entry key="role_edit">Edit {0}</entry>
+	<entry key="role_view">View {0}</entry>
+
+	<!-- attributes -->
+	<entry key="role_id">Id</entry>
+	<entry key="role_roleName">Role Name</entry>
+
+	<!-- uniques -->
+	<entry key="role_roleName_already_exists">Role Name already exists</entry>
+	<entry key="role_composite_unique_constraint_error">A composite unique constraint has failed on Role</entry>
+</properties>
\ No newline at end of file
diff --git a/target/classes/localization/domain/Role_fr.xml b/target/classes/localization/domain/Role_fr.xml
new file mode 100644
index 0000000..7e1d01c
--- /dev/null
+++ b/target/classes/localization/domain/Role_fr.xml
@@ -0,0 +1,27 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!--
+ ! (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ ! Source code generated by Celerio, a Jaxio product
+ ! Want to purchase Celerio ? email us at info@jaxio.com
+ ! Follow us on twitter: @springfuse
+ ! Documentation: http://www.jaxio.com/documentation/celerio/
+ ! Template pack-backend-jpa:src/main/resources/localization/domain/domain_fr.e.vm.xml
+-->
+<!DOCTYPE properties SYSTEM "http://java.sun.com/dtd/properties.dtd">
+<properties>
+	<comment>Domain resources for Role for the french locale</comment>
+
+	<entry key="role">Role</entry>
+	<entry key="role_search">Recherche de Role</entry>
+	<entry key="role_create">Création de Role</entry>
+	<entry key="role_edit">Édition de {0}</entry>
+	<entry key="role_view">Affichage de {0}</entry>
+
+	<!-- attributes -->
+	<entry key="role_id">Id</entry>
+	<entry key="role_roleName">Role Name</entry>
+
+	<!-- uniques -->
+	<entry key="role_roleName_already_exists">Role Name existe déjà</entry>
+	<entry key="role_composite_unique_constraint_error">Une contrainte d'unicité multiple n'est pas respectée sur Role</entry>
+</properties>
\ No newline at end of file
diff --git a/target/classes/localization/domain/SavedSearch.xml b/target/classes/localization/domain/SavedSearch.xml
new file mode 100644
index 0000000..28d8a1b
--- /dev/null
+++ b/target/classes/localization/domain/SavedSearch.xml
@@ -0,0 +1,32 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!--
+ ! (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ ! Source code generated by Celerio, a Jaxio product
+ ! Want to purchase Celerio ? email us at info@jaxio.com
+ ! Follow us on twitter: @springfuse
+ ! Documentation: http://www.jaxio.com/documentation/celerio/
+ ! Template pack-backend-jpa:src/main/resources/localization/domain/domain.e.vm.xml
+-->
+<!DOCTYPE properties SYSTEM "http://java.sun.com/dtd/properties.dtd">
+<properties>
+	<comment>Domain resources for SavedSearch</comment>
+
+	<entry key="savedSearch">Saved Search</entry>
+	<entry key="savedSearch_search">Search Saved Search</entry>
+	<entry key="savedSearch_create">Create Saved Search</entry>
+	<entry key="savedSearch_edit">Edit {0}</entry>
+	<entry key="savedSearch_view">View {0}</entry>
+
+	<!-- attributes -->
+	<entry key="savedSearch_id">Id</entry>
+	<entry key="savedSearch_name">Name</entry>
+	<entry key="savedSearch_formClassname">Form Classname</entry>
+	<entry key="savedSearch_formContent">Form Content</entry>
+	<entry key="savedSearch_accountId">Account Id</entry>
+
+	<!-- x-to-one -->
+	<entry key="savedSearch_account">Account</entry>
+
+	<!-- uniques -->
+	<entry key="savedSearch_composite_unique_constraint_error">A composite unique constraint has failed on Saved Search</entry>
+</properties>
\ No newline at end of file
diff --git a/target/classes/localization/domain/SavedSearch_fr.xml b/target/classes/localization/domain/SavedSearch_fr.xml
new file mode 100644
index 0000000..76ade1e
--- /dev/null
+++ b/target/classes/localization/domain/SavedSearch_fr.xml
@@ -0,0 +1,32 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!--
+ ! (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ ! Source code generated by Celerio, a Jaxio product
+ ! Want to purchase Celerio ? email us at info@jaxio.com
+ ! Follow us on twitter: @springfuse
+ ! Documentation: http://www.jaxio.com/documentation/celerio/
+ ! Template pack-backend-jpa:src/main/resources/localization/domain/domain_fr.e.vm.xml
+-->
+<!DOCTYPE properties SYSTEM "http://java.sun.com/dtd/properties.dtd">
+<properties>
+	<comment>Domain resources for SavedSearch for the french locale</comment>
+
+	<entry key="savedSearch">Saved Search</entry>
+	<entry key="savedSearch_search">Recherche de Saved Search</entry>
+	<entry key="savedSearch_create">Création de Saved Search</entry>
+	<entry key="savedSearch_edit">Édition de {0}</entry>
+	<entry key="savedSearch_view">Affichage de {0}</entry>
+
+	<!-- attributes -->
+	<entry key="savedSearch_id">Id</entry>
+	<entry key="savedSearch_name">Name</entry>
+	<entry key="savedSearch_formClassname">Form Classname</entry>
+	<entry key="savedSearch_formContent">Form Content</entry>
+	<entry key="savedSearch_accountId">Account Id</entry>
+
+	<!-- x-to-one -->
+	<entry key="savedSearch_account">Account</entry>
+
+	<!-- uniques -->
+	<entry key="savedSearch_composite_unique_constraint_error">Une contrainte d'unicité multiple n'est pas respectée sur Saved Search</entry>
+</properties>
\ No newline at end of file
diff --git a/target/classes/localization/messages.properties b/target/classes/localization/messages.properties
new file mode 100644
index 0000000..6525258
--- /dev/null
+++ b/target/classes/localization/messages.properties
@@ -0,0 +1,162 @@
+#
+# (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+# Source code generated by Celerio, a Jaxio product
+# Want to purchase Celerio ? email us at info@jaxio.com
+# Follow us on twitter: @springfuse
+# Documentation: http://www.jaxio.com/documentation/celerio/
+# Template pack-jsf2-spring-conversation:src/main/resources/localization/messages.p.vm.properties
+#
+
+application_name=h2project
+main_title=Application h2project
+welcome=Welcome
+you_are_connected_to=Congratulations {0}, you are logged into {1}
+
+home=Home
+yes=Yes
+no=No
+
+form_error_status_1=There is one error in the information you submitted
+form_error_status_n=There are {0} errors in the information you submitted
+
+label_required_suffix=*
+
+null_value=Not Set
+null_file_value=No file
+
+# display boolean
+boolean_true=Yes
+boolean_false=No
+
+dialog_ask_for_save=Do you want to save your modifications ?
+dialog_delete_confirm=Do you really want to delete this item?
+dialog_remove_confirm=Do you really want to remove this item?
+
+login=Login
+logout=Logout
+actions=Actions
+
+# Icons
+icon_add=Add {0}
+icon_delete=Delete {0}
+icon_remove=Remove {0}
+icon_select=Select {0}
+icon_multiselect=Select all {0}
+icon_edit=Edit {0}
+icon_search=Search {0}
+icon_view=View {0}
+
+# Menus
+menu_active_flows_1=One conversation
+menu_active_flows_n={0} conversations
+menu_default_display=No value
+menu_open=Open
+menu_new=New
+menu_send=Submit
+menu_save=Save
+menu_save_and_close=Close
+menu_search=Search
+menu_delete_and_close=Delete
+menu_delete=Delete
+menu_remove=Remove
+menu_close=Close
+menu_quit=Quit
+menu_print=Print
+
+# Search
+search_criteria=Search criteria
+search_results=Search results
+search_empty=No matching result
+search_reset=Reset
+search_reseted=Search reseted
+search_save=Save this search query
+search_results=Results
+search_results_status_0=There is no result
+search_results_status_1=There is one result
+search_results_status_n=There are {0} results
+
+# Search full text
+search_full_text_all=All indexed properties
+search_full_text=Full text search
+search_full_text_criteria=Full text search criteria
+
+# Ranges
+date_range_from=From
+date_range_to=To
+range_from=Between
+range_to=And
+
+# Excel export
+search_by=Search by 
+search_date=Results on
+search_nb_results=Number of results
+excel_date_format=m/d/yy
+excel_date_time_format=m/d/yy h:mm
+excel_time_format=h:mm
+
+# Navigation
+submit=Submit
+back=Back
+refresh=Refresh
+discard=Discard the conversation
+
+# Status
+status_saved_ok=Saved {0} successfully in database
+status_deleted_ok=Suppressed {0} successfully from database
+status_selected_ok={0}: Selected existing and set it, but not saved in database
+status_selected_new_ok={0}: Selected existing and set it, but not saved in database
+status_created_ok={0}: Created and set, but not saved in database
+status_removed_ok={0}: Removed, but not saved in database
+status_added_new_ok={0}: Created and added, but not saved in database
+status_added_existing_ok={0}: Selected existing and added it, but not saved in database
+status_edited_ok={0}: Edited, but not saved in database
+status_exception_ko={0}: An error occurred, you should quit this page and try again
+
+# Error
+error_concurrent_modification=We have detected a concurrent modification (optimistic locking). You must quit this page.
+error_data_integrity_violation=Action refused because it violates data integrity.
+error_database_title=Database error
+error_database=Database returned an error.
+error_ajax=An error occurred, login again.
+error_not_found_title=Not found
+error_not_found=Sorry the page you request does not exist.
+error_unknown_title=Error unknown
+error_unknown=An error occurred, please report it to your administrator.
+error_access_denied_title=Access denied
+error_access_denied=You do not have enough privilege to access this resource.
+error_action_denied=You do not have enough privilege to perform this action.
+
+# One to Many or many to many empty collection
+collection_empty=Empty list
+
+# Download
+download=Download
+
+# DatePicker
+year=Year
+month=Month
+day=Day of month
+hour=Hour
+minute=Minute
+
+# Audit
+audit=Audit
+creation_author=Created by
+creation_date=Creation date
+last_modification_author=Last modification by
+last_modification_date=Last modification date 
+
+# Saved search
+saved_search_saved=Search criteria saved as {0}
+saved_search_loaded=Using saved search criteria {0}
+savedSearchName_private=Private ?
+
+# Security
+security_username_not_found=Username not found
+security_account_disabled=Account disabled
+security_account_locked=Account locked
+security_account_expired=Account expired
+security_account_credentials_expired=Account credentials expired
+security_account_status_invalid=Account state cannot allow you to log in
+security_bad_credentials=Invalid credentials
+security_error=You cannot log in
diff --git a/target/classes/localization/messages_fr.properties b/target/classes/localization/messages_fr.properties
new file mode 100644
index 0000000..3fbf0e3
--- /dev/null
+++ b/target/classes/localization/messages_fr.properties
@@ -0,0 +1,162 @@
+#
+# (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+# Source code generated by Celerio, a Jaxio product
+# Want to purchase Celerio ? email us at info@jaxio.com
+# Follow us on twitter: @springfuse
+# Documentation: http://www.jaxio.com/documentation/celerio/
+# Template pack-jsf2-spring-conversation:src/main/resources/localization/messages_fr.p.vm.properties
+#
+
+application_name=h2project
+main_title=Application h2project
+welcome=Bienvenue
+you_are_connected_to=Bravo {0}, vous êtes connecté sur {1}
+
+home=Accueil
+yes=Oui
+no=Non
+
+form_error_status_1=Il y a une erreur dans le formulaire que vous avez soumis
+form_error_status_n=Il y a {0} erreurs dans le formulaire que vous avez soumis
+
+label_required_suffix=*
+
+null_value=Non Renseigné
+null_file_value=Pas de fichier
+
+# display boolean
+boolean_true=Oui
+boolean_false=Non
+
+dialog_ask_for_save=Voulez-vous enregistrer vos éventuelles modifications ?
+dialog_delete_confirm=Voulez-vous vraiment supprimer cet élément ?
+dialog_remove_confirm=Voulez-vous vraiment retirer cet élément ?
+
+login=S'authentifier
+logout=Déconnexion
+actions=Actions
+
+# Icons
+icon_add=Ajouter {0}
+icon_delete=Supprimer {0}
+icon_remove=Enlever {0}
+icon_select=Choisir {0}
+icon_multiselect=Choisir tous les {0}
+icon_edit=Editer {0}
+icon_search=Rechercher {0}
+icon_view=Visualiser {0}
+
+# Menus
+menu_active_flows_1=Une conversation
+menu_active_flows_n={0} conversations
+menu_default_display=Pas de valeur
+menu_open=Ouvrir
+menu_new=Nouveau
+menu_send=Envoyer
+menu_save=Enregistrer
+menu_save_and_close=Fermer
+menu_search=Rechercher
+menu_delete_and_close=Supprimer
+menu_delete=Supprimer
+menu_remove=Retirer
+menu_close=Fermer
+menu_quit=Quitter
+menu_print=Imprimer
+
+# Search
+search_criteria=Critères de recherche
+search_results=Résultats de la recherche
+search_empty=Aucun résultat ne correspond à votre recherche
+search_reset=Réinitialiser
+search_reseted=Recherche réinitialisée
+search_save=Sauvegarder cette recherche
+search_results=Résultats
+search_results_status_0=Aucun résultat trouvé
+search_results_status_1=Il y a un résultat
+search_results_status_n=Il y a {0} résultats
+
+# Search full text
+search_full_text_all=Tout champ indexé
+search_full_text=Full text search
+search_full_text_criteria=Critères de recherche full text
+
+
+# Ranges
+date_range_from=Du
+date_range_to=au
+range_from=Entre
+range_to=et
+
+# Excel export
+search_by=Recherche effectuée par
+search_date=Résultat du
+search_nb_results=Nombre de résultats
+excel_date_format=d/m/yy
+excel_date_time_format=d/m/yy h:mm
+excel_time_format=h:mm
+
+# Navigation
+submit=Envoyer
+back=Retour
+refresh=Rafraîchir
+discard=Terminer la conversation
+
+# Status
+status_saved_ok=Enregistrement en base de données réussi pour {0}
+status_deleted_ok=Suppression de la base de données réussie pour {0}
+status_selected_ok={0}: Sélection et liaison réalisées, mais liaison non enregistrée en base
+status_selected_new_ok={0}: Création et liaison réalisées, mais non enregistrées en base
+status_removed_ok={0}: Retrait réalisé, mais non enregistré en base
+status_added_new_ok={0}: Création et ajout réalisés, mais non enregistrés en base
+status_added_existing_ok={0}: Sélection et ajout réalisés, mais non enregistrés en base
+status_edited_ok={0}: Edition réalisée, mais non enregistrée en base
+status_exception_ko={0}: Une erreur s'est produite, vous devriez quitter cette page et essayer de nouveau
+
+# Error
+error_concurrent_modification=Nous avons détecté une modification concurrente (optimistic locking).
+error_data_integrity_violation=Action rejetée car elle corrompt l'intégrité des données.
+error_database_title=Erreur base de données
+error_database=La base de données a retourné une erreur.
+error_ajax=Une erreur est survenue. Identifiez-vous de nouveau.
+error_not_found_title=Non trouvé
+error_not_found=La ressource demandée n'a pas été trouvée.
+error_unknown_title=Erreur inconnue
+error_unknown=Une erreur est apparue, merci de le signaler.
+error_access_denied_title=Droits insuffisants
+error_access_denied=Vous n'avez pas les droits suffisants pour accéder à cette ressource.
+error_action_denied=Vous n'avez pas les droits suffisants pour effectuer cette action.
+
+# One to Many or many to many empty collection
+collection_empty=Liste vide
+
+# Download
+download=Télécharger
+
+# DatePicker
+year=Année
+month=Mois
+day=Jour
+hour=Heure
+minute=Minute
+
+# Audit
+audit=Audit
+creation_author=Créé par
+creation_date=Date de création 
+last_modification_author=Modifié par
+last_modification_date=Date de modification
+
+# Saved search
+saved_search_saved=Sauvegarde de la recherche {0}
+saved_search_loaded=Utilisation de la recherche {0}
+savedSearchName_private=Privée ?
+
+# Security
+security_username_not_found=Identifiant non connu
+security_account_disabled=Compte désactivé
+security_account_locked=Compte verrouillé
+security_account_expired=Compte expiré
+security_account_credentials_expired=Mot de passe expiré
+security_account_status_invalid=Compte non valide
+security_bad_credentials=Mot de passe invalide
+security_error=Vous ne pouvez pas vous identifier
diff --git a/target/classes/localization/pages/concurrentModificationResolution.xml b/target/classes/localization/pages/concurrentModificationResolution.xml
new file mode 100644
index 0000000..d4c4328
--- /dev/null
+++ b/target/classes/localization/pages/concurrentModificationResolution.xml
@@ -0,0 +1,27 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!--
+ ! (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ ! Source code generated by Celerio, a Jaxio product
+ ! Want to purchase Celerio ? email us at info@jaxio.com
+ ! Follow us on twitter: @springfuse
+ ! Documentation: http://www.jaxio.com/documentation/celerio/
+ ! Template pack-jsf2-spring-conversation:src/main/resources/localization/pages/concurrentModificationResolution.p.vm.xml
+-->
+<!DOCTYPE properties SYSTEM "http://java.sun.com/dtd/properties.dtd">
+<properties>
+	<comment>concurrentModificationResolution</comment>
+	<entry key="concurrentModificationResolution_title">Conflict found</entry>
+	<entry key="concurrentModificationResolution_conflict">Conflict found</entry>
+	<entry key="concurrentModificationResolution_description"><![CDATA[
+		<p>
+			We have detected a concurrent modification (optimistic locking).<br/>
+			You can either :
+			<ul>
+				<li>refresh the values with the latest values from the database. You way loose some of your modifications.</li>
+				<li>terminate this conversation and loose all of your modifications.</li>
+			</ul>
+		</p>
+	]]></entry>
+	<entry key="concurrentModificationResolution_refresh">Refresh</entry>
+	<entry key="concurrentModificationResolution_discard">Discard</entry>
+</properties>
\ No newline at end of file
diff --git a/target/classes/localization/pages/concurrentModificationResolution_fr.xml b/target/classes/localization/pages/concurrentModificationResolution_fr.xml
new file mode 100644
index 0000000..976af0c
--- /dev/null
+++ b/target/classes/localization/pages/concurrentModificationResolution_fr.xml
@@ -0,0 +1,27 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!--
+ ! (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ ! Source code generated by Celerio, a Jaxio product
+ ! Want to purchase Celerio ? email us at info@jaxio.com
+ ! Follow us on twitter: @springfuse
+ ! Documentation: http://www.jaxio.com/documentation/celerio/
+ ! Template pack-jsf2-spring-conversation:src/main/resources/localization/pages/concurrentModificationResolution_fr.p.vm.xml
+-->
+<!DOCTYPE properties SYSTEM "http://java.sun.com/dtd/properties.dtd">
+<properties>
+	<comment>concurrentModificationResolution</comment>
+	<entry key="concurrentModificationResolution_title">Conflit détecté</entry>
+	<entry key="concurrentModificationResolution_conflict">Conflit détecté</entry>
+	<entry key="concurrentModificationResolution_description"><![CDATA[
+		<p>
+			Nous avons détecté une modification concurrente (optimistic locking).<br/>
+			Vous pouvez soit :
+			<ul>
+				<li>rafraichir avec les dernieres données de la base. Vous perdrez alors une partie de vos modifications.</li>
+				<li>terminer la conversation en cours et perdre l'ensemble de vos changements.</li>
+			</ul>
+		</p>
+	]]></entry>
+	<entry key="concurrentModificationResolution_refresh">Rafraîchir</entry>
+	<entry key="concurrentModificationResolution_discard">Annuler</entry>
+</properties>
\ No newline at end of file
diff --git a/target/classes/localization/pages/home.xml b/target/classes/localization/pages/home.xml
new file mode 100644
index 0000000..2bb6fee
--- /dev/null
+++ b/target/classes/localization/pages/home.xml
@@ -0,0 +1,45 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!--
+ ! (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ ! Source code generated by Celerio, a Jaxio product
+ ! Want to purchase Celerio ? email us at info@jaxio.com
+ ! Follow us on twitter: @springfuse
+ ! Documentation: http://www.jaxio.com/documentation/celerio/
+ ! Template pack-jsf2-spring-conversation:src/main/resources/localization/pages/home.p.vm.xml
+-->
+<!DOCTYPE properties SYSTEM "http://java.sun.com/dtd/properties.dtd">
+<properties>
+	<comment>Homepage</comment>
+	<entry key="home_about">About</entry>
+	<entry key="home_generated_by"><![CDATA[
+		<p>This application was generated by <a href="http://www.jaxio.com/en/celerio.html" target="_jaxio">Celerio</a>, a tool developed by <a href="http://www.jaxio.com/en/" target="_jaxio">Jaxio</a>, a company based in Paris, France.</p>
+		
+		<p>If you use the generated code in a commercial activity we encourage you to purchase a Celerio License to benefit from
+		advanced features and support our activity.
+		<br/>
+		<a href="http://www.jaxio.com/en/pricing.html" target="_jaxio">Celerio License and pricing</a>.
+		</p>
+
+		<p>Like this generated application? Have new ideas? Found a bug? Need custom support ?
+		<a href="http://www.jaxio.com/en/contact-us.html" target="_jaxio">please let us know...</a></p>
+	]]></entry>
+	<entry key="home_please_connect_first">Please login first in order to access the application content.</entry>
+	<entry key="home_start_conversation">Start a new conversation</entry>
+	<entry key="home_conversation">Here is the list of generated conversations:</entry>
+	<entry key="home_conversation_search">Search</entry>
+	<entry key="home_conversation_create">Create</entry>
+	<entry key="home_configuration">Fine tuning code generation</entry>
+	<entry key="home_configuration_howto"><![CDATA[
+		<p>You can <a href="http://www.jaxio.com/documentation/celerio/">fine tune the code generation</a> using Celerio configuration file which can be found in the folder
+		"h2project/src/main/config/maven-celerio-plugin".
+		This file allows you to:</p>
+		<ul>
+			<li>Configure bidirectional relations (ie one to many)</li>
+			<li>Configure JPA inheritance</li>
+			<li>Rename your entities or properties</li>
+			<li>Configure packages to group your entities by functional domain</li>
+			<li>Configure number mappings or date mappings</li>
+			<li>etc.</li>
+		</ul>
+	]]></entry>
+</properties>
\ No newline at end of file
diff --git a/target/classes/localization/pages/home_fr.xml b/target/classes/localization/pages/home_fr.xml
new file mode 100644
index 0000000..9c5eb1c
--- /dev/null
+++ b/target/classes/localization/pages/home_fr.xml
@@ -0,0 +1,43 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!--
+ ! (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ ! Source code generated by Celerio, a Jaxio product
+ ! Want to purchase Celerio ? email us at info@jaxio.com
+ ! Follow us on twitter: @springfuse
+ ! Documentation: http://www.jaxio.com/documentation/celerio/
+ ! Template pack-jsf2-spring-conversation:src/main/resources/localization/pages/home_fr.p.vm.xml
+-->
+<!DOCTYPE properties SYSTEM "http://java.sun.com/dtd/properties.dtd">
+<properties>
+	<comment>Homepage</comment>
+	<entry key="home_about">A propos</entry>
+	<entry key="home_generated_by"><![CDATA[
+		<p>Cette application a été générée par <a href="http://www.jaxio.com/celerio.html" target="_jaxio">Celerio</a>,
+		un outil de la société <a href="http://www.jaxio.com/" target="_jaxio">Jaxio</a>, basée à Paris, en France.</p>
+		<p>Si vous faites un usage du code généré dans un cadre professionnel nous vous encourageons à acheter une Licence Celerio,
+		pour bénéficier de fonctionnalités avancées et soutenir notre activité.
+		<br/>
+		<a href="http://www.jaxio.com/licence-utilisation-celerio.html" target="_jaxio">Voir les tarifs Celerio</a>.</p>
+		<p>
+			Pour toute remarque/suggestion/question/bug, <a href="http://www.jaxio.com/nous-contacter.html" target="_jaxio">Contactez-nous...</a>
+		</p>
+	]]></entry>
+	<entry key="home_please_connect_first">Connectez-vous afin d'accéder au contenu.</entry>
+	<entry key="home_start_conversation">Démarrer une nouvelle conversation</entry>
+	<entry key="home_conversation">Voici la liste des conversations générées:</entry>
+	<entry key="home_conversation_search">Liste</entry>
+	<entry key="home_conversation_create">Créer</entry>
+	<entry key="home_configuration">Configurer la génération</entry>
+	<entry key="home_configuration_howto"><![CDATA[
+		<p>Vous pouvez <a href="http://www.jaxio.com/documentation/celerio/">configurer la génération</a> en utilisant le fichier de configuration maven-celerio-plugin.xml qui se trouve
+		dans le répertoire "h2project/src/main/config/maven-celerio-plugin". Ce fichier vous permet par exemple de:</p>
+		<ul>
+			<li>Générer les associations inverses (i.e. one-to-many)</li>
+			<li>Configurer l'héritage JPA</li>
+			<li>Changer le nom de vos entités ou de leurs propriétés</li>
+			<li>Changer le nom du package de chaque entité</li>
+			<li>Customiser les règles de mapping des nombres ou dates</li>
+			<li>etc.</li>
+		</ul>
+	]]></entry>
+</properties>
\ No newline at end of file
diff --git a/target/classes/localization/pages/login.xml b/target/classes/localization/pages/login.xml
new file mode 100644
index 0000000..66fff18
--- /dev/null
+++ b/target/classes/localization/pages/login.xml
@@ -0,0 +1,33 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!--
+ ! (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ ! Source code generated by Celerio, a Jaxio product
+ ! Want to purchase Celerio ? email us at info@jaxio.com
+ ! Follow us on twitter: @springfuse
+ ! Documentation: http://www.jaxio.com/documentation/celerio/
+ ! Template pack-jsf2-spring-conversation:src/main/resources/localization/pages/login.p.vm.xml
+-->
+<!DOCTYPE properties SYSTEM "http://java.sun.com/dtd/properties.dtd">
+<properties>
+	<comment>Login</comment>
+	<entry key="login_title">Login</entry>
+	<entry key="login_header">Login</entry>
+	<entry key="login_login">Username</entry>
+	<entry key="login_password">Password</entry>
+	<entry key="login_rememberme">Remember me on this computer.</entry>
+	<entry key="login_submit">Login</entry>
+	<entry key="login_error">Invalid login or password</entry>
+	<entry key="login_logout">Logout</entry>
+	<entry key="session_expired">Your session has expired... please login again.</entry>
+	<entry key="login_description"><![CDATA[
+		<p>
+			If you used our database schema example or if Celerio could
+			not detect in your database schema the table used to store username/password pairs, you
+			should use:
+		</p>
+		<ul>
+			<li><strong>admin/admin</strong>: can access all data</li>
+			<li>user/user: can access only home page</li>
+		</ul>
+	]]></entry>
+</properties>
\ No newline at end of file
diff --git a/target/classes/localization/pages/login_fr.xml b/target/classes/localization/pages/login_fr.xml
new file mode 100644
index 0000000..d659de9
--- /dev/null
+++ b/target/classes/localization/pages/login_fr.xml
@@ -0,0 +1,32 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!--
+ ! (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ ! Source code generated by Celerio, a Jaxio product
+ ! Want to purchase Celerio ? email us at info@jaxio.com
+ ! Follow us on twitter: @springfuse
+ ! Documentation: http://www.jaxio.com/documentation/celerio/
+ ! Template pack-jsf2-spring-conversation:src/main/resources/localization/pages/login_fr.p.vm.xml
+-->
+<!DOCTYPE properties SYSTEM "http://java.sun.com/dtd/properties.dtd">
+<properties>
+	<comment>Login</comment>
+	<entry key="login_title">Identification</entry>
+	<entry key="login_header">Login</entry>
+	<entry key="login_login">Identifiant</entry>
+	<entry key="login_password">Mot de passe</entry>
+	<entry key="login_rememberme">Mémoriser mes informations sur cet ordinateur.</entry>
+	<entry key="login_submit">S'authentifier</entry>
+	<entry key="login_error">Identifiant ou mot de passe incorrect</entry>
+	<entry key="login_logout">Déconnexion</entry>
+	<entry key="session_expired">Votre session a expirée... merci de vous ré-authentifier</entry>
+	<entry key="login_description"><![CDATA[
+		<p>
+			Si vous utilisez la base de données d'exemple ou si Celerio n'a pas trouvé 
+			la table où sont stockés les login/mots de passe, alors pour vous connecter vous devez utiliser:
+		</p>
+		<ul>
+			<li><strong>admin/admin</strong>: accède à toutes les données</li>
+			<li>user/user:  accède uniquement à la page d'accueil</li>
+		</ul>
+	]]></entry>
+</properties>
\ No newline at end of file
diff --git a/target/classes/logback.xml b/target/classes/logback.xml
new file mode 100644
index 0000000..4507a2b
--- /dev/null
+++ b/target/classes/logback.xml
@@ -0,0 +1,67 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!--
+ ! (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ ! Source code generated by Celerio, a Jaxio product
+ ! Want to purchase Celerio ? email us at info@jaxio.com
+ ! Follow us on twitter: @springfuse
+ ! Documentation: http://www.jaxio.com/documentation/celerio/
+ ! Template pack-backend-jpa:src/main/resources/logback.p.vm.xml
+-->
+<configuration>
+	<appender name="Console" class="ch.qos.logback.core.ConsoleAppender">
+		<encoder>
+			<pattern>%-5level %C{3}.%M %m%n</pattern>
+		</encoder>
+	</appender>
+
+	<appender name="File" class="ch.qos.logback.core.rolling.RollingFileAppender">
+		<file>E:\\Ankush\\SpringFuse\\new_workspace\\h2dbProject\\h2project\\target/logs/h2project-1.0.0-SNAPSHOT.log</file>
+		<rollingPolicy class="ch.qos.logback.core.rolling.FixedWindowRollingPolicy">
+			<fileNamePattern>E:\\Ankush\\SpringFuse\\new_workspace\\h2dbProject\\h2project\\target/logs/h2project-1.0.0-SNAPSHOT.%i.log</fileNamePattern>
+			<minIndex>1</minIndex>
+			<maxIndex>5</maxIndex>
+		</rollingPolicy>
+		<triggeringPolicy class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">
+			<maxFileSize>1MB</maxFileSize>
+		</triggeringPolicy>
+		<encoder>
+			<pattern>[%d{ISO8601}] [%-5level] [%X{session_id}] [%X{login}] [%C{3}.%M] %m%n</pattern>
+		</encoder>
+	</appender>
+
+	<!-- Log Hibernate SQL queries to file (log level must be DEBUG to enable it) -->
+	<logger name="org.hibernate.SQL" additivity="false">
+		<level value="DEBUG" />
+		<appender-ref ref="File" />
+	</logger>
+
+	<!-- log the param value in the prepared statement and the query result! (log level must be TRACE to enable it) -->
+	<!--<logger name="org.hibernate.type"> -->
+	<!--<level value="trace" /> -->
+	<!-- <appender-ref ref="File"/> -->
+	<!--</logger> -->
+
+	<logger name="org.hibernate.cache.EhCacheProvider" level="error" />
+	<logger name="org.hibernate" level="warn" />
+	<logger name="org.hibernate.search.impl.SimpleIndexingProgressMonitor" level="DEBUG" />
+	<logger name="org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl" level="error" /> <!-- until hibernate HHH-8210 is resolved -->
+	<logger name="org.springframework.security" level="warn" />
+	<logger name="org.apache.commons" level="warn" />
+	<logger name="org.apache.commons.jexl2.JexlEngine" level="error" />
+	<logger name="org.springframework" level="warn" />
+	<logger name="org.springframework.beans.factory.support" level="warn" />
+
+	<logger name="LOG4J" level="INFO" />
+	<logger name="SLF4J" level="WARN" />
+	<logger name="JCL" level="INFO" />
+
+	<logger name="com.h2.demo" level="DEBUG" />
+	<logger name="com.h2.demo.repository.support.HibernateSearchUtil" level="DEBUG" />
+	<logger name="com.h2.demo.repository" level="warn" />
+
+	<root level="warn">
+		<appender-ref ref="Console" />
+		<appender-ref ref="File" />
+	</root>
+
+</configuration>
\ No newline at end of file
diff --git a/target/classes/spring/applicationContext-web.xml b/target/classes/spring/applicationContext-web.xml
new file mode 100644
index 0000000..9b74ba9
--- /dev/null
+++ b/target/classes/spring/applicationContext-web.xml
@@ -0,0 +1,28 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!--
+ ! (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ ! Source code generated by Celerio, a Jaxio product
+ ! Want to purchase Celerio ? email us at info@jaxio.com
+ ! Follow us on twitter: @springfuse
+ ! Documentation: http://www.jaxio.com/documentation/celerio/
+ ! Template pack-jsf2-spring-conversation:src/main/resources/spring/applicationContext-web.p.vm.xml
+-->
+<beans default-lazy-init="true" xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
+	xmlns:util="http://www.springframework.org/schema/util" xmlns:security="http://www.springframework.org/schema/security" xmlns:tx="http://www.springframework.org/schema/tx"
+	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:p="http://www.springframework.org/schema/p" xmlns:task="http://www.springframework.org/schema/task" xmlns:aop="http://www.springframework.org/schema/aop"
+	xsi:schemaLocation="
+			http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
+			http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
+			http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.2.xsd
+			http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.1.xsd
+			http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
+			http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd
+			http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-3.2.xsd
+			http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd">
+	<description><![CDATA[
+		Main entry point for web spring configuration
+	]]></description>
+	
+	<context:annotation-config />
+	<context:component-scan base-package="com.h2.demo.web"/>
+</beans>
diff --git a/target/classes/spring/applicationContext.xml b/target/classes/spring/applicationContext.xml
new file mode 100644
index 0000000..312e205
--- /dev/null
+++ b/target/classes/spring/applicationContext.xml
@@ -0,0 +1,68 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!--
+ ! (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ ! Source code generated by Celerio, a Jaxio product
+ ! Want to purchase Celerio ? email us at info@jaxio.com
+ ! Follow us on twitter: @springfuse
+ ! Documentation: http://www.jaxio.com/documentation/celerio/
+ ! Template pack-backend-jpa:src/main/resources/spring/applicationContext.p.vm.xml
+-->
+<beans default-lazy-init="true" xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
+	xmlns:util="http://www.springframework.org/schema/util" xmlns:security="http://www.springframework.org/schema/security" xmlns:tx="http://www.springframework.org/schema/tx"
+	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:p="http://www.springframework.org/schema/p" xmlns:task="http://www.springframework.org/schema/task" xmlns:aop="http://www.springframework.org/schema/aop"
+	xsi:schemaLocation="
+			http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
+			http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
+			http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.2.xsd
+			http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.1.xsd
+			http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
+			http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd
+			http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-3.2.xsd
+			http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd">
+	<description><![CDATA[
+		Main entry point for spring configuration
+	]]></description>
+
+	<!-- context -->
+	<context:component-scan base-package="com.h2.demo">
+		<!-- exclude web beans as they live in the web application context -->
+		<!-- Note: this regexp does not work if you try to escape the '.' -->
+		<context:exclude-filter type="regex" expression="com.h2.demo.web.*" />
+	</context:component-scan>
+	<context:property-placeholder location="classpath*:database.properties,classpath*:hibernate.properties,classpath*:app-version.properties" />
+
+	<!-- security -->
+	<security:authentication-manager>
+		<security:authentication-provider user-service-ref="userDetailsService" />
+	</security:authentication-manager>
+	<security:global-method-security jsr250-annotations="enabled" pre-post-annotations="enabled" />
+
+	<!-- task -->
+	<task:annotation-driven executor="myExecutor" scheduler="myScheduler" />
+	<task:executor id="myExecutor" pool-size="5" />
+	<task:scheduler id="myScheduler" pool-size="10" />
+
+	<!-- transaction -->
+	<tx:annotation-driven />
+
+	<!-- datasource -->
+	<bean id="dataSource" class="org.apache.tomcat.jdbc.pool.DataSource" 
+		destroy-method="close" 
+		lazy-init="false" 
+		p:driverClassName="${jdbc.driver}"
+		p:url="${jdbc.url}"
+		p:username="${jdbc.user}" 
+		p:password="${jdbc.password}" 
+		p:initialSize="1" 
+		p:maxActive="50" 
+		p:maxIdle="1" 
+		p:maxWait="1000" 
+		p:defaultAutoCommit="false" 
+		p:removeAbandoned="true" 
+		p:removeAbandonedTimeout="60">
+		<description><![CDATA[
+			Simple datasource. This is a direct access to the datasource that can be used for specific queries that need to bypass JPA functionalities.
+			However, if you need to use JDBC, please look at hibernate SQL-QUERIES, they would most probably be a more elegant way to solve your problem.
+		]]></description>
+	</bean>
+</beans>
diff --git a/target/logs/h2project-1.0.0-SNAPSHOT.log b/target/logs/h2project-1.0.0-SNAPSHOT.log
new file mode 100644
index 0000000..ee0eef4
--- /dev/null
+++ b/target/logs/h2project-1.0.0-SNAPSHOT.log
@@ -0,0 +1,838 @@
+[2015-05-10 21:37:07,509] [WARN ] [] [] [o.h.s.i.ConfigContext.getLuceneMatchVersion] HSEARCH000075: Configuration setting hibernate.search.lucene_version was not specified, using LUCENE_CURRENT.
+[2015-05-10 21:37:08,517] [INFO ] [] [] [c.h.d.a.HibernateListenerRegistration.register] Registering class com.h2.demo.audit.AuditLogListener listener on post-delete events
+[2015-05-10 21:37:08,518] [INFO ] [] [] [c.h.d.a.HibernateListenerRegistration.register] Registering class com.h2.demo.audit.AuditLogListener listener on post-insert events
+[2015-05-10 21:37:08,519] [INFO ] [] [] [c.h.d.a.HibernateListenerRegistration.register] Registering class com.h2.demo.audit.AuditLogListener listener on pre-update events
+[2015-05-10 21:37:10,212] [WARN ] [] [] [c.h.d.d.IdentifiableHashBuilder.hash] DEVELOPER: hashCode is not safe.If you encounter this message you should take the time to carefuly review the equals/hashCode methods for: com.h2.demo.domain.AuditLog You may consider using a business key.
+[2015-05-10 21:37:10,268] [DEBUG] [] [] [o.h.e.j.s.SqlStatementLogger.logStatement] 
+    /* insert com.h2.demo.domain.AuditLog
+        */ insert 
+        into
+            AUDIT_LOG
+            (ID, AUTHOR, EVENT, EVENT_DATE, STRING_ATTRIBUTE_1, STRING_ATTRIBUTE_2, STRING_ATTRIBUTE_3) 
+        values
+            (null, ?, ?, ?, ?, ?, ?)
+[2015-05-10 21:37:10,383] [DEBUG] [] [] [c.h.d.s.AuditLogService.batchInsert] Added 1 AuditLog in database
+[2015-05-10 21:37:11,618] [DEBUG] [] [] [o.s.w.f.GenericFilterBean.init] Initializing filter 'localeResolverRequestFilter'
+[2015-05-10 21:37:11,624] [DEBUG] [] [] [o.s.w.f.GenericFilterBean.init] Filter 'localeResolverRequestFilter' configured successfully
+[2015-05-10 21:38:29,337] [DEBUG] [naocf09bwwjd1fxf56th3fg1y] [anonymousUser] [c.h.d.w.f.LogPhaseListener.beforePhase] RESTORE_VIEW 1
+[2015-05-10 21:38:29,517] [DEBUG] [naocf09bwwjd1fxf56th3fg1y] [anonymousUser] [c.h.d.w.f.LogPhaseListener.afterPhase] RESTORE_VIEW 1
+[2015-05-10 21:38:29,519] [DEBUG] [naocf09bwwjd1fxf56th3fg1y] [anonymousUser] [c.h.d.w.f.LogPhaseListener.beforePhase] RENDER_RESPONSE 6
+[2015-05-10 21:38:32,077] [DEBUG] [naocf09bwwjd1fxf56th3fg1y] [anonymousUser] [c.h.d.w.f.LogPhaseListener.afterPhase] RENDER_RESPONSE 6
+[2015-05-10 21:39:35,335] [DEBUG] [naocf09bwwjd1fxf56th3fg1y] [anonymousUser] [c.h.d.w.f.LogPhaseListener.beforePhase] RESTORE_VIEW 1
+[2015-05-10 21:39:35,493] [DEBUG] [naocf09bwwjd1fxf56th3fg1y] [anonymousUser] [c.h.d.w.f.LogPhaseListener.afterPhase] RESTORE_VIEW 1
+[2015-05-10 21:39:35,494] [DEBUG] [naocf09bwwjd1fxf56th3fg1y] [anonymousUser] [c.h.d.w.f.LogPhaseListener.beforePhase] APPLY_REQUEST_VALUES 2
+[2015-05-10 21:39:35,503] [DEBUG] [naocf09bwwjd1fxf56th3fg1y] [anonymousUser] [c.h.d.w.f.LogPhaseListener.afterPhase] APPLY_REQUEST_VALUES 2
+[2015-05-10 21:39:35,505] [DEBUG] [naocf09bwwjd1fxf56th3fg1y] [anonymousUser] [c.h.d.w.f.LogPhaseListener.beforePhase] PROCESS_VALIDATIONS 3
+[2015-05-10 21:39:35,527] [DEBUG] [naocf09bwwjd1fxf56th3fg1y] [anonymousUser] [c.h.d.w.f.LogPhaseListener.afterPhase] PROCESS_VALIDATIONS 3
+[2015-05-10 21:39:35,528] [DEBUG] [naocf09bwwjd1fxf56th3fg1y] [anonymousUser] [c.h.d.w.f.LogPhaseListener.beforePhase] UPDATE_MODEL_VALUES 4
+[2015-05-10 21:39:35,535] [DEBUG] [naocf09bwwjd1fxf56th3fg1y] [anonymousUser] [c.h.d.w.f.LogPhaseListener.afterPhase] UPDATE_MODEL_VALUES 4
+[2015-05-10 21:39:35,537] [DEBUG] [naocf09bwwjd1fxf56th3fg1y] [anonymousUser] [c.h.d.w.f.LogPhaseListener.beforePhase] INVOKE_APPLICATION 5
+[2015-05-10 21:39:35,746] [DEBUG] [naocf09bwwjd1fxf56th3fg1y] [anonymousUser] [c.h.d.w.c.Conversation.pushNextContextIfNeeded] pushed 1 context on stack: Search Book
+[2015-05-10 21:39:36,015] [DEBUG] [naocf09bwwjd1fxf56th3fg1y] [anonymousUser] [c.h.d.w.f.LogPhaseListener.afterPhase] INVOKE_APPLICATION 5
+[2015-05-10 21:39:36,052] [DEBUG] [naocf09bwwjd1fxf56th3fg1y] [anonymousUser] [c.h.d.w.f.LogPhaseListener.beforePhase] RESTORE_VIEW 1
+[2015-05-10 21:39:36,139] [DEBUG] [naocf09bwwjd1fxf56th3fg1y] [anonymousUser] [c.h.d.w.f.LogPhaseListener.afterPhase] RESTORE_VIEW 1
+[2015-05-10 21:39:36,140] [DEBUG] [naocf09bwwjd1fxf56th3fg1y] [anonymousUser] [c.h.d.w.f.LogPhaseListener.beforePhase] APPLY_REQUEST_VALUES 2
+[2015-05-10 21:39:36,144] [DEBUG] [naocf09bwwjd1fxf56th3fg1y] [anonymousUser] [c.h.d.w.f.LogPhaseListener.afterPhase] APPLY_REQUEST_VALUES 2
+[2015-05-10 21:39:36,146] [DEBUG] [naocf09bwwjd1fxf56th3fg1y] [anonymousUser] [c.h.d.w.f.LogPhaseListener.beforePhase] PROCESS_VALIDATIONS 3
+[2015-05-10 21:39:36,148] [DEBUG] [naocf09bwwjd1fxf56th3fg1y] [anonymousUser] [c.h.d.w.f.LogPhaseListener.afterPhase] PROCESS_VALIDATIONS 3
+[2015-05-10 21:39:36,150] [DEBUG] [naocf09bwwjd1fxf56th3fg1y] [anonymousUser] [c.h.d.w.f.LogPhaseListener.beforePhase] UPDATE_MODEL_VALUES 4
+[2015-05-10 21:39:36,154] [DEBUG] [naocf09bwwjd1fxf56th3fg1y] [anonymousUser] [c.h.d.w.f.LogPhaseListener.afterPhase] UPDATE_MODEL_VALUES 4
+[2015-05-10 21:39:36,156] [DEBUG] [naocf09bwwjd1fxf56th3fg1y] [anonymousUser] [c.h.d.w.f.LogPhaseListener.beforePhase] INVOKE_APPLICATION 5
+[2015-05-10 21:39:36,158] [DEBUG] [naocf09bwwjd1fxf56th3fg1y] [anonymousUser] [c.h.d.w.f.LogPhaseListener.afterPhase] INVOKE_APPLICATION 5
+[2015-05-10 21:39:36,160] [DEBUG] [naocf09bwwjd1fxf56th3fg1y] [anonymousUser] [c.h.d.w.f.LogPhaseListener.beforePhase] RENDER_RESPONSE 6
+[2015-05-10 21:39:36,733] [DEBUG] [naocf09bwwjd1fxf56th3fg1y] [anonymousUser] [c.h.d.w.f.LogPhaseListener.afterPhase] RENDER_RESPONSE 6
+[2015-05-10 21:39:45,245] [DEBUG] [naocf09bwwjd1fxf56th3fg1y] [anonymousUser] [c.h.d.w.f.LogPhaseListener.beforePhase] RESTORE_VIEW 1
+[2015-05-10 21:39:45,288] [DEBUG] [naocf09bwwjd1fxf56th3fg1y] [anonymousUser] [c.h.d.w.f.LogPhaseListener.afterPhase] RESTORE_VIEW 1
+[2015-05-10 21:39:45,290] [DEBUG] [naocf09bwwjd1fxf56th3fg1y] [anonymousUser] [c.h.d.w.f.LogPhaseListener.beforePhase] APPLY_REQUEST_VALUES 2
+[2015-05-10 21:39:45,296] [DEBUG] [naocf09bwwjd1fxf56th3fg1y] [anonymousUser] [c.h.d.w.f.LogPhaseListener.afterPhase] APPLY_REQUEST_VALUES 2
+[2015-05-10 21:39:45,298] [DEBUG] [naocf09bwwjd1fxf56th3fg1y] [anonymousUser] [c.h.d.w.f.LogPhaseListener.beforePhase] PROCESS_VALIDATIONS 3
+[2015-05-10 21:39:45,305] [DEBUG] [naocf09bwwjd1fxf56th3fg1y] [anonymousUser] [c.h.d.w.f.LogPhaseListener.afterPhase] PROCESS_VALIDATIONS 3
+[2015-05-10 21:39:45,306] [DEBUG] [naocf09bwwjd1fxf56th3fg1y] [anonymousUser] [c.h.d.w.f.LogPhaseListener.beforePhase] UPDATE_MODEL_VALUES 4
+[2015-05-10 21:39:45,310] [DEBUG] [naocf09bwwjd1fxf56th3fg1y] [anonymousUser] [c.h.d.w.f.LogPhaseListener.afterPhase] UPDATE_MODEL_VALUES 4
+[2015-05-10 21:39:45,311] [DEBUG] [naocf09bwwjd1fxf56th3fg1y] [anonymousUser] [c.h.d.w.f.LogPhaseListener.beforePhase] INVOKE_APPLICATION 5
+[2015-05-10 21:39:45,411] [DEBUG] [naocf09bwwjd1fxf56th3fg1y] [anonymousUser] [c.h.d.s.UserDetailsServiceImpl.loadUserByUsername] Security verification for user 'user'
+[2015-05-10 21:39:45,602] [DEBUG] [naocf09bwwjd1fxf56th3fg1y] [anonymousUser] [o.h.e.j.s.SqlStatementLogger.logStatement] 
+    /* select
+        generatedAlias0 
+    from
+        Account as generatedAlias0 
+    where
+        generatedAlias0.login=:param0 */ select
+            account0_.ID as ID1_0_,
+            account0_.ADDRESS_ID as ADDRESS16_0_,
+            account0_.BIRTH_DATE as BIRTH_DA2_0_,
+            account0_.CIVILITY as CIVILITY3_0_,
+            account0_.CREATION_AUTHOR as CREATION4_0_,
+            account0_.CREATION_DATE as CREATION5_0_,
+            account0_.DESCRIPTION as DESCRIPT6_0_,
+            account0_.EMAIL as EMAIL7_0_,
+            account0_.FIRST_NAME as FIRST_NA8_0_,
+            account0_.IS_ENABLED as IS_ENABL9_0_,
+            account0_.LAST_MODIFICATION_AUTHOR as LAST_MO10_0_,
+            account0_.LAST_MODIFICATION_DATE as LAST_MO11_0_,
+            account0_.LAST_NAME as LAST_NA12_0_,
+            account0_.LOGIN as LOGIN13_0_,
+            account0_."PASSWORD" as PASSWOR14_0_,
+            account0_.VERSION as VERSION15_0_ 
+        from
+            ACCOUNT account0_ 
+        where
+            account0_.LOGIN=? limit ?
+[2015-05-10 21:39:45,657] [DEBUG] [naocf09bwwjd1fxf56th3fg1y] [anonymousUser] [o.h.e.j.s.SqlStatementLogger.logStatement] 
+    /* load collection com.h2.demo.domain.Account.roles */ select
+        roles0_.ACCOUNT_ID as ACCOUNT_1_0_1_,
+        roles0_.ROLE_ID as ROLE_ID2_1_1_,
+        role1_.ID as ID1_9_0_,
+        role1_.ROLE_NAME as ROLE_NAM2_9_0_ 
+    from
+        ACCOUNT_ROLE roles0_ 
+    inner join
+        "ROLE" role1_ 
+            on roles0_.ROLE_ID=role1_.ID 
+    where
+        roles0_.ACCOUNT_ID=?
+[2015-05-10 21:39:45,721] [DEBUG] [naocf09bwwjd1fxf56th3fg1y] [anonymousUser] [c.h.d.w.f.LogPhaseListener.afterPhase] INVOKE_APPLICATION 5
+[2015-05-10 21:39:45,744] [DEBUG] [1tj6m402ko7d01rjfooepj8egg] [user] [c.h.d.w.f.LogPhaseListener.beforePhase] RESTORE_VIEW 1
+[2015-05-10 21:39:45,749] [DEBUG] [1tj6m402ko7d01rjfooepj8egg] [user] [c.h.d.w.f.LogPhaseListener.afterPhase] RESTORE_VIEW 1
+[2015-05-10 21:39:45,752] [DEBUG] [1tj6m402ko7d01rjfooepj8egg] [user] [c.h.d.w.f.LogPhaseListener.beforePhase] RENDER_RESPONSE 6
+[2015-05-10 21:39:46,094] [DEBUG] [1tj6m402ko7d01rjfooepj8egg] [user] [c.h.d.w.f.LogPhaseListener.afterPhase] RENDER_RESPONSE 6
+[2015-05-10 21:39:50,003] [DEBUG] [1tj6m402ko7d01rjfooepj8egg] [user] [c.h.d.w.f.LogPhaseListener.beforePhase] RESTORE_VIEW 1
+[2015-05-10 21:39:50,052] [DEBUG] [1tj6m402ko7d01rjfooepj8egg] [user] [c.h.d.w.f.LogPhaseListener.afterPhase] RESTORE_VIEW 1
+[2015-05-10 21:39:50,058] [DEBUG] [1tj6m402ko7d01rjfooepj8egg] [user] [c.h.d.w.f.LogPhaseListener.beforePhase] APPLY_REQUEST_VALUES 2
+[2015-05-10 21:39:50,112] [DEBUG] [1tj6m402ko7d01rjfooepj8egg] [user] [c.h.d.w.c.Conversation.pushNextContextIfNeeded] pushed 1 context on stack: Create Account
+[2015-05-10 21:39:50,116] [DEBUG] [1tj6m402ko7d01rjfooepj8egg] [user] [c.h.d.w.f.LogPhaseListener.afterPhase] APPLY_REQUEST_VALUES 2
+[2015-05-10 21:39:50,125] [DEBUG] [1tj6m402ko7d01rjfooepj8egg] [anonymousUser] [c.h.d.w.f.LogPhaseListener.beforePhase] RESTORE_VIEW 1
+[2015-05-10 21:39:50,171] [DEBUG] [1tj6m402ko7d01rjfooepj8egg] [anonymousUser] [c.h.d.w.f.LogPhaseListener.afterPhase] RESTORE_VIEW 1
+[2015-05-10 21:39:50,172] [DEBUG] [1tj6m402ko7d01rjfooepj8egg] [anonymousUser] [c.h.d.w.f.LogPhaseListener.beforePhase] RENDER_RESPONSE 6
+[2015-05-10 21:39:50,450] [DEBUG] [1tj6m402ko7d01rjfooepj8egg] [anonymousUser] [c.h.d.w.f.LogPhaseListener.afterPhase] RENDER_RESPONSE 6
+[2015-05-10 21:39:55,148] [DEBUG] [1giyxpi2oa8pw1tbjy4g0b14ac] [anonymousUser] [c.h.d.w.f.LogPhaseListener.beforePhase] RESTORE_VIEW 1
+[2015-05-10 21:39:55,151] [DEBUG] [1giyxpi2oa8pw1tbjy4g0b14ac] [anonymousUser] [c.h.d.w.f.LogPhaseListener.afterPhase] RESTORE_VIEW 1
+[2015-05-10 21:39:55,153] [DEBUG] [1giyxpi2oa8pw1tbjy4g0b14ac] [anonymousUser] [c.h.d.w.f.LogPhaseListener.beforePhase] RENDER_RESPONSE 6
+[2015-05-10 21:39:55,505] [DEBUG] [1giyxpi2oa8pw1tbjy4g0b14ac] [anonymousUser] [c.h.d.w.f.LogPhaseListener.afterPhase] RENDER_RESPONSE 6
+[2015-05-10 21:39:57,401] [DEBUG] [1giyxpi2oa8pw1tbjy4g0b14ac] [anonymousUser] [c.h.d.w.f.LogPhaseListener.beforePhase] RESTORE_VIEW 1
+[2015-05-10 21:39:57,405] [DEBUG] [1giyxpi2oa8pw1tbjy4g0b14ac] [anonymousUser] [c.h.d.w.f.LogPhaseListener.afterPhase] RESTORE_VIEW 1
+[2015-05-10 21:39:57,407] [DEBUG] [1giyxpi2oa8pw1tbjy4g0b14ac] [anonymousUser] [c.h.d.w.f.LogPhaseListener.beforePhase] APPLY_REQUEST_VALUES 2
+[2015-05-10 21:39:57,411] [DEBUG] [1giyxpi2oa8pw1tbjy4g0b14ac] [anonymousUser] [c.h.d.w.f.LogPhaseListener.afterPhase] APPLY_REQUEST_VALUES 2
+[2015-05-10 21:39:57,413] [DEBUG] [1giyxpi2oa8pw1tbjy4g0b14ac] [anonymousUser] [c.h.d.w.f.LogPhaseListener.beforePhase] PROCESS_VALIDATIONS 3
+[2015-05-10 21:39:57,416] [DEBUG] [1giyxpi2oa8pw1tbjy4g0b14ac] [anonymousUser] [c.h.d.w.f.LogPhaseListener.afterPhase] PROCESS_VALIDATIONS 3
+[2015-05-10 21:39:57,417] [DEBUG] [1giyxpi2oa8pw1tbjy4g0b14ac] [anonymousUser] [c.h.d.w.f.LogPhaseListener.beforePhase] UPDATE_MODEL_VALUES 4
+[2015-05-10 21:39:57,419] [DEBUG] [1giyxpi2oa8pw1tbjy4g0b14ac] [anonymousUser] [c.h.d.w.f.LogPhaseListener.afterPhase] UPDATE_MODEL_VALUES 4
+[2015-05-10 21:39:57,421] [DEBUG] [1giyxpi2oa8pw1tbjy4g0b14ac] [anonymousUser] [c.h.d.w.f.LogPhaseListener.beforePhase] INVOKE_APPLICATION 5
+[2015-05-10 21:39:57,423] [DEBUG] [1giyxpi2oa8pw1tbjy4g0b14ac] [anonymousUser] [c.h.d.w.f.LogPhaseListener.afterPhase] INVOKE_APPLICATION 5
+[2015-05-10 21:39:57,426] [DEBUG] [1giyxpi2oa8pw1tbjy4g0b14ac] [anonymousUser] [c.h.d.w.f.LogPhaseListener.beforePhase] RENDER_RESPONSE 6
+[2015-05-10 21:39:57,732] [DEBUG] [1giyxpi2oa8pw1tbjy4g0b14ac] [anonymousUser] [c.h.d.w.f.LogPhaseListener.afterPhase] RENDER_RESPONSE 6
+[2015-05-10 21:40:07,646] [DEBUG] [1giyxpi2oa8pw1tbjy4g0b14ac] [anonymousUser] [c.h.d.w.f.LogPhaseListener.beforePhase] RESTORE_VIEW 1
+[2015-05-10 21:40:07,685] [DEBUG] [1giyxpi2oa8pw1tbjy4g0b14ac] [anonymousUser] [c.h.d.w.f.LogPhaseListener.afterPhase] RESTORE_VIEW 1
+[2015-05-10 21:40:07,688] [DEBUG] [1giyxpi2oa8pw1tbjy4g0b14ac] [anonymousUser] [c.h.d.w.f.LogPhaseListener.beforePhase] APPLY_REQUEST_VALUES 2
+[2015-05-10 21:40:07,692] [DEBUG] [1giyxpi2oa8pw1tbjy4g0b14ac] [anonymousUser] [c.h.d.w.f.LogPhaseListener.afterPhase] APPLY_REQUEST_VALUES 2
+[2015-05-10 21:40:07,695] [DEBUG] [1giyxpi2oa8pw1tbjy4g0b14ac] [anonymousUser] [c.h.d.w.f.LogPhaseListener.beforePhase] PROCESS_VALIDATIONS 3
+[2015-05-10 21:40:07,700] [DEBUG] [1giyxpi2oa8pw1tbjy4g0b14ac] [anonymousUser] [c.h.d.w.f.LogPhaseListener.afterPhase] PROCESS_VALIDATIONS 3
+[2015-05-10 21:40:07,704] [DEBUG] [1giyxpi2oa8pw1tbjy4g0b14ac] [anonymousUser] [c.h.d.w.f.LogPhaseListener.beforePhase] UPDATE_MODEL_VALUES 4
+[2015-05-10 21:40:07,707] [DEBUG] [1giyxpi2oa8pw1tbjy4g0b14ac] [anonymousUser] [c.h.d.w.f.LogPhaseListener.afterPhase] UPDATE_MODEL_VALUES 4
+[2015-05-10 21:40:07,711] [DEBUG] [1giyxpi2oa8pw1tbjy4g0b14ac] [anonymousUser] [c.h.d.w.f.LogPhaseListener.beforePhase] INVOKE_APPLICATION 5
+[2015-05-10 21:40:07,717] [DEBUG] [1giyxpi2oa8pw1tbjy4g0b14ac] [anonymousUser] [c.h.d.s.UserDetailsServiceImpl.loadUserByUsername] Security verification for user 'admin'
+[2015-05-10 21:40:07,722] [DEBUG] [1giyxpi2oa8pw1tbjy4g0b14ac] [anonymousUser] [o.h.e.j.s.SqlStatementLogger.logStatement] 
+    /* select
+        generatedAlias0 
+    from
+        Account as generatedAlias0 
+    where
+        generatedAlias0.login=:param0 */ select
+            account0_.ID as ID1_0_,
+            account0_.ADDRESS_ID as ADDRESS16_0_,
+            account0_.BIRTH_DATE as BIRTH_DA2_0_,
+            account0_.CIVILITY as CIVILITY3_0_,
+            account0_.CREATION_AUTHOR as CREATION4_0_,
+            account0_.CREATION_DATE as CREATION5_0_,
+            account0_.DESCRIPTION as DESCRIPT6_0_,
+            account0_.EMAIL as EMAIL7_0_,
+            account0_.FIRST_NAME as FIRST_NA8_0_,
+            account0_.IS_ENABLED as IS_ENABL9_0_,
+            account0_.LAST_MODIFICATION_AUTHOR as LAST_MO10_0_,
+            account0_.LAST_MODIFICATION_DATE as LAST_MO11_0_,
+            account0_.LAST_NAME as LAST_NA12_0_,
+            account0_.LOGIN as LOGIN13_0_,
+            account0_."PASSWORD" as PASSWOR14_0_,
+            account0_.VERSION as VERSION15_0_ 
+        from
+            ACCOUNT account0_ 
+        where
+            account0_.LOGIN=? limit ?
+[2015-05-10 21:40:07,734] [DEBUG] [1giyxpi2oa8pw1tbjy4g0b14ac] [anonymousUser] [o.h.e.j.s.SqlStatementLogger.logStatement] 
+    /* load collection com.h2.demo.domain.Account.roles */ select
+        roles0_.ACCOUNT_ID as ACCOUNT_1_0_1_,
+        roles0_.ROLE_ID as ROLE_ID2_1_1_,
+        role1_.ID as ID1_9_0_,
+        role1_.ROLE_NAME as ROLE_NAM2_9_0_ 
+    from
+        ACCOUNT_ROLE roles0_ 
+    inner join
+        "ROLE" role1_ 
+            on roles0_.ROLE_ID=role1_.ID 
+    where
+        roles0_.ACCOUNT_ID=?
+[2015-05-10 21:40:07,747] [DEBUG] [1giyxpi2oa8pw1tbjy4g0b14ac] [anonymousUser] [c.h.d.w.f.LogPhaseListener.afterPhase] INVOKE_APPLICATION 5
+[2015-05-10 21:40:07,769] [DEBUG] [g5mwu7t4h2gjn61m2x4rmim8] [admin] [c.h.d.w.f.LogPhaseListener.beforePhase] RESTORE_VIEW 1
+[2015-05-10 21:40:07,778] [DEBUG] [g5mwu7t4h2gjn61m2x4rmim8] [admin] [c.h.d.w.f.LogPhaseListener.afterPhase] RESTORE_VIEW 1
+[2015-05-10 21:40:07,780] [DEBUG] [g5mwu7t4h2gjn61m2x4rmim8] [admin] [c.h.d.w.f.LogPhaseListener.beforePhase] RENDER_RESPONSE 6
+[2015-05-10 21:40:08,118] [DEBUG] [g5mwu7t4h2gjn61m2x4rmim8] [admin] [c.h.d.w.f.LogPhaseListener.afterPhase] RENDER_RESPONSE 6
+[2015-05-10 21:42:06,391] [DEBUG] [g5mwu7t4h2gjn61m2x4rmim8] [admin] [c.h.d.w.f.LogPhaseListener.beforePhase] RESTORE_VIEW 1
+[2015-05-10 21:42:06,396] [DEBUG] [g5mwu7t4h2gjn61m2x4rmim8] [admin] [c.h.d.w.f.LogPhaseListener.afterPhase] RESTORE_VIEW 1
+[2015-05-10 21:42:06,398] [DEBUG] [g5mwu7t4h2gjn61m2x4rmim8] [admin] [c.h.d.w.f.LogPhaseListener.beforePhase] RENDER_RESPONSE 6
+[2015-05-10 21:42:06,750] [DEBUG] [g5mwu7t4h2gjn61m2x4rmim8] [admin] [c.h.d.w.f.LogPhaseListener.afterPhase] RENDER_RESPONSE 6
+[2015-05-10 21:49:03,267] [DEBUG] [g5mwu7t4h2gjn61m2x4rmim8] [admin] [c.h.d.w.f.LogPhaseListener.beforePhase] RESTORE_VIEW 1
+[2015-05-10 21:51:44,626] [DEBUG] [g5mwu7t4h2gjn61m2x4rmim8] [admin] [c.h.d.w.f.LogPhaseListener.beforePhase] RESTORE_VIEW 1
+[2015-05-10 21:50:01,923] [DEBUG] [g5mwu7t4h2gjn61m2x4rmim8] [admin] [c.h.d.w.f.LogPhaseListener.beforePhase] RESTORE_VIEW 1
+[2015-05-10 21:49:58,660] [DEBUG] [g5mwu7t4h2gjn61m2x4rmim8] [anonymousUser] [c.h.d.w.f.LogPhaseListener.beforePhase] RESTORE_VIEW 1
+[2015-05-10 21:51:56,544] [DEBUG] [g5mwu7t4h2gjn61m2x4rmim8] [admin] [c.h.d.w.f.LogPhaseListener.afterPhase] RESTORE_VIEW 1
+[2015-05-10 21:51:56,547] [DEBUG] [g5mwu7t4h2gjn61m2x4rmim8] [admin] [c.h.d.w.f.LogPhaseListener.beforePhase] RENDER_RESPONSE 6
+[2015-05-10 21:51:56,542] [DEBUG] [g5mwu7t4h2gjn61m2x4rmim8] [admin] [c.h.d.w.f.LogPhaseListener.afterPhase] RESTORE_VIEW 1
+[2015-05-10 21:51:56,551] [DEBUG] [g5mwu7t4h2gjn61m2x4rmim8] [admin] [c.h.d.w.f.LogPhaseListener.beforePhase] RENDER_RESPONSE 6
+[2015-05-10 21:51:56,542] [DEBUG] [g5mwu7t4h2gjn61m2x4rmim8] [admin] [c.h.d.w.f.LogPhaseListener.afterPhase] RESTORE_VIEW 1
+[2015-05-10 21:51:56,579] [DEBUG] [g5mwu7t4h2gjn61m2x4rmim8] [admin] [c.h.d.w.f.LogPhaseListener.beforePhase] RENDER_RESPONSE 6
+[2015-05-10 21:51:56,547] [DEBUG] [g5mwu7t4h2gjn61m2x4rmim8] [anonymousUser] [c.h.d.w.f.LogPhaseListener.afterPhase] RESTORE_VIEW 1
+[2015-05-10 21:51:56,647] [DEBUG] [g5mwu7t4h2gjn61m2x4rmim8] [anonymousUser] [c.h.d.w.f.LogPhaseListener.beforePhase] APPLY_REQUEST_VALUES 2
+[2015-05-10 21:51:56,648] [DEBUG] [g5mwu7t4h2gjn61m2x4rmim8] [anonymousUser] [c.h.d.w.f.LogPhaseListener.afterPhase] APPLY_REQUEST_VALUES 2
+[2015-05-10 21:51:56,651] [DEBUG] [g5mwu7t4h2gjn61m2x4rmim8] [anonymousUser] [c.h.d.w.f.LogPhaseListener.beforePhase] PROCESS_VALIDATIONS 3
+[2015-05-10 21:51:56,685] [DEBUG] [g5mwu7t4h2gjn61m2x4rmim8] [anonymousUser] [c.h.d.w.f.LogPhaseListener.afterPhase] PROCESS_VALIDATIONS 3
+[2015-05-10 21:51:56,687] [DEBUG] [g5mwu7t4h2gjn61m2x4rmim8] [anonymousUser] [c.h.d.w.f.LogPhaseListener.beforePhase] UPDATE_MODEL_VALUES 4
+[2015-05-10 21:51:56,688] [DEBUG] [g5mwu7t4h2gjn61m2x4rmim8] [anonymousUser] [c.h.d.w.f.LogPhaseListener.afterPhase] UPDATE_MODEL_VALUES 4
+[2015-05-10 21:51:56,689] [DEBUG] [g5mwu7t4h2gjn61m2x4rmim8] [anonymousUser] [c.h.d.w.f.LogPhaseListener.beforePhase] INVOKE_APPLICATION 5
+[2015-05-10 21:51:56,690] [DEBUG] [g5mwu7t4h2gjn61m2x4rmim8] [anonymousUser] [c.h.d.w.f.LogPhaseListener.afterPhase] INVOKE_APPLICATION 5
+[2015-05-10 21:51:56,691] [DEBUG] [g5mwu7t4h2gjn61m2x4rmim8] [anonymousUser] [c.h.d.w.f.LogPhaseListener.beforePhase] RENDER_RESPONSE 6
+[2015-05-10 21:51:57,349] [DEBUG] [g5mwu7t4h2gjn61m2x4rmim8] [admin] [c.h.d.w.f.LogPhaseListener.afterPhase] RENDER_RESPONSE 6
+[2015-05-10 21:51:57,448] [DEBUG] [g5mwu7t4h2gjn61m2x4rmim8] [admin] [c.h.d.w.f.LogPhaseListener.afterPhase] RENDER_RESPONSE 6
+[2015-05-10 21:51:57,678] [DEBUG] [g5mwu7t4h2gjn61m2x4rmim8] [anonymousUser] [c.h.d.w.f.LogPhaseListener.afterPhase] RENDER_RESPONSE 6
+[2015-05-10 21:51:57,803] [DEBUG] [g5mwu7t4h2gjn61m2x4rmim8] [admin] [c.h.d.w.f.LogPhaseListener.afterPhase] RENDER_RESPONSE 6
+[2015-05-10 21:52:06,883] [DEBUG] [1rxsqihgjm5421uw52r6f7a4ee] [anonymousUser] [c.h.d.w.f.LogPhaseListener.beforePhase] RESTORE_VIEW 1
+[2015-05-10 21:52:06,886] [DEBUG] [1rxsqihgjm5421uw52r6f7a4ee] [anonymousUser] [c.h.d.w.f.LogPhaseListener.afterPhase] RESTORE_VIEW 1
+[2015-05-10 21:52:06,888] [DEBUG] [1rxsqihgjm5421uw52r6f7a4ee] [anonymousUser] [c.h.d.w.f.LogPhaseListener.beforePhase] RENDER_RESPONSE 6
+[2015-05-10 21:52:07,190] [DEBUG] [1rxsqihgjm5421uw52r6f7a4ee] [anonymousUser] [c.h.d.w.f.LogPhaseListener.afterPhase] RENDER_RESPONSE 6
+[2015-05-10 21:52:09,604] [DEBUG] [1rxsqihgjm5421uw52r6f7a4ee] [anonymousUser] [c.h.d.w.f.LogPhaseListener.beforePhase] RESTORE_VIEW 1
+[2015-05-10 21:52:09,609] [DEBUG] [1rxsqihgjm5421uw52r6f7a4ee] [anonymousUser] [c.h.d.w.f.LogPhaseListener.afterPhase] RESTORE_VIEW 1
+[2015-05-10 21:52:09,610] [DEBUG] [1rxsqihgjm5421uw52r6f7a4ee] [anonymousUser] [c.h.d.w.f.LogPhaseListener.beforePhase] APPLY_REQUEST_VALUES 2
+[2015-05-10 21:52:09,612] [DEBUG] [1rxsqihgjm5421uw52r6f7a4ee] [anonymousUser] [c.h.d.w.f.LogPhaseListener.afterPhase] APPLY_REQUEST_VALUES 2
+[2015-05-10 21:52:09,613] [DEBUG] [1rxsqihgjm5421uw52r6f7a4ee] [anonymousUser] [c.h.d.w.f.LogPhaseListener.beforePhase] PROCESS_VALIDATIONS 3
+[2015-05-10 21:52:09,615] [DEBUG] [1rxsqihgjm5421uw52r6f7a4ee] [anonymousUser] [c.h.d.w.f.LogPhaseListener.afterPhase] PROCESS_VALIDATIONS 3
+[2015-05-10 21:52:09,616] [DEBUG] [1rxsqihgjm5421uw52r6f7a4ee] [anonymousUser] [c.h.d.w.f.LogPhaseListener.beforePhase] UPDATE_MODEL_VALUES 4
+[2015-05-10 21:52:09,617] [DEBUG] [1rxsqihgjm5421uw52r6f7a4ee] [anonymousUser] [c.h.d.w.f.LogPhaseListener.afterPhase] UPDATE_MODEL_VALUES 4
+[2015-05-10 21:52:09,619] [DEBUG] [1rxsqihgjm5421uw52r6f7a4ee] [anonymousUser] [c.h.d.w.f.LogPhaseListener.beforePhase] INVOKE_APPLICATION 5
+[2015-05-10 21:52:09,620] [DEBUG] [1rxsqihgjm5421uw52r6f7a4ee] [anonymousUser] [c.h.d.w.f.LogPhaseListener.afterPhase] INVOKE_APPLICATION 5
+[2015-05-10 21:52:09,621] [DEBUG] [1rxsqihgjm5421uw52r6f7a4ee] [anonymousUser] [c.h.d.w.f.LogPhaseListener.beforePhase] RENDER_RESPONSE 6
+[2015-05-10 21:52:09,926] [DEBUG] [1rxsqihgjm5421uw52r6f7a4ee] [anonymousUser] [c.h.d.w.f.LogPhaseListener.afterPhase] RENDER_RESPONSE 6
+[2015-05-10 21:52:14,810] [DEBUG] [1rxsqihgjm5421uw52r6f7a4ee] [anonymousUser] [c.h.d.w.f.LogPhaseListener.beforePhase] RESTORE_VIEW 1
+[2015-05-10 21:52:14,835] [DEBUG] [1rxsqihgjm5421uw52r6f7a4ee] [anonymousUser] [c.h.d.w.f.LogPhaseListener.afterPhase] RESTORE_VIEW 1
+[2015-05-10 21:52:14,837] [DEBUG] [1rxsqihgjm5421uw52r6f7a4ee] [anonymousUser] [c.h.d.w.f.LogPhaseListener.beforePhase] APPLY_REQUEST_VALUES 2
+[2015-05-10 21:52:14,839] [DEBUG] [1rxsqihgjm5421uw52r6f7a4ee] [anonymousUser] [c.h.d.w.f.LogPhaseListener.afterPhase] APPLY_REQUEST_VALUES 2
+[2015-05-10 21:52:14,840] [DEBUG] [1rxsqihgjm5421uw52r6f7a4ee] [anonymousUser] [c.h.d.w.f.LogPhaseListener.beforePhase] PROCESS_VALIDATIONS 3
+[2015-05-10 21:52:14,843] [DEBUG] [1rxsqihgjm5421uw52r6f7a4ee] [anonymousUser] [c.h.d.w.f.LogPhaseListener.afterPhase] PROCESS_VALIDATIONS 3
+[2015-05-10 21:52:14,844] [DEBUG] [1rxsqihgjm5421uw52r6f7a4ee] [anonymousUser] [c.h.d.w.f.LogPhaseListener.beforePhase] UPDATE_MODEL_VALUES 4
+[2015-05-10 21:52:14,846] [DEBUG] [1rxsqihgjm5421uw52r6f7a4ee] [anonymousUser] [c.h.d.w.f.LogPhaseListener.afterPhase] UPDATE_MODEL_VALUES 4
+[2015-05-10 21:52:14,847] [DEBUG] [1rxsqihgjm5421uw52r6f7a4ee] [anonymousUser] [c.h.d.w.f.LogPhaseListener.beforePhase] INVOKE_APPLICATION 5
+[2015-05-10 21:52:14,851] [DEBUG] [1rxsqihgjm5421uw52r6f7a4ee] [anonymousUser] [c.h.d.s.UserDetailsServiceImpl.loadUserByUsername] Security verification for user 'admin'
+[2015-05-10 21:52:14,854] [DEBUG] [1rxsqihgjm5421uw52r6f7a4ee] [anonymousUser] [o.h.e.j.s.SqlStatementLogger.logStatement] 
+    /* select
+        generatedAlias0 
+    from
+        Account as generatedAlias0 
+    where
+        generatedAlias0.login=:param0 */ select
+            account0_.ID as ID1_0_,
+            account0_.ADDRESS_ID as ADDRESS16_0_,
+            account0_.BIRTH_DATE as BIRTH_DA2_0_,
+            account0_.CIVILITY as CIVILITY3_0_,
+            account0_.CREATION_AUTHOR as CREATION4_0_,
+            account0_.CREATION_DATE as CREATION5_0_,
+            account0_.DESCRIPTION as DESCRIPT6_0_,
+            account0_.EMAIL as EMAIL7_0_,
+            account0_.FIRST_NAME as FIRST_NA8_0_,
+            account0_.IS_ENABLED as IS_ENABL9_0_,
+            account0_.LAST_MODIFICATION_AUTHOR as LAST_MO10_0_,
+            account0_.LAST_MODIFICATION_DATE as LAST_MO11_0_,
+            account0_.LAST_NAME as LAST_NA12_0_,
+            account0_.LOGIN as LOGIN13_0_,
+            account0_."PASSWORD" as PASSWOR14_0_,
+            account0_.VERSION as VERSION15_0_ 
+        from
+            ACCOUNT account0_ 
+        where
+            account0_.LOGIN=? limit ?
+[2015-05-10 21:52:14,861] [DEBUG] [1rxsqihgjm5421uw52r6f7a4ee] [anonymousUser] [o.h.e.j.s.SqlStatementLogger.logStatement] 
+    /* load collection com.h2.demo.domain.Account.roles */ select
+        roles0_.ACCOUNT_ID as ACCOUNT_1_0_1_,
+        roles0_.ROLE_ID as ROLE_ID2_1_1_,
+        role1_.ID as ID1_9_0_,
+        role1_.ROLE_NAME as ROLE_NAM2_9_0_ 
+    from
+        ACCOUNT_ROLE roles0_ 
+    inner join
+        "ROLE" role1_ 
+            on roles0_.ROLE_ID=role1_.ID 
+    where
+        roles0_.ACCOUNT_ID=?
+[2015-05-10 21:52:14,869] [DEBUG] [1rxsqihgjm5421uw52r6f7a4ee] [anonymousUser] [c.h.d.w.f.LogPhaseListener.afterPhase] INVOKE_APPLICATION 5
+[2015-05-10 21:52:14,890] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.beforePhase] RESTORE_VIEW 1
+[2015-05-10 21:52:14,893] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.afterPhase] RESTORE_VIEW 1
+[2015-05-10 21:52:14,895] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.beforePhase] RENDER_RESPONSE 6
+[2015-05-10 21:52:15,215] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.afterPhase] RENDER_RESPONSE 6
+[2015-05-10 21:52:24,460] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.beforePhase] RESTORE_VIEW 1
+[2015-05-10 21:52:24,486] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.afterPhase] RESTORE_VIEW 1
+[2015-05-10 21:52:24,488] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.beforePhase] APPLY_REQUEST_VALUES 2
+[2015-05-10 21:52:24,683] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.c.Conversation.pushNextContextIfNeeded] pushed 1 context on stack: Create Address
+[2015-05-10 21:52:24,688] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.afterPhase] APPLY_REQUEST_VALUES 2
+[2015-05-10 21:52:24,692] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.c.ConversationFilter.doFilter] Conv. 1 resumed. Nb ctx: 1
+[2015-05-10 21:52:24,694] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.beforePhase] RESTORE_VIEW 1
+[2015-05-10 21:52:24,744] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.afterPhase] RESTORE_VIEW 1
+[2015-05-10 21:52:24,745] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.beforePhase] RENDER_RESPONSE 6
+[2015-05-10 21:52:26,073] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.afterPhase] RENDER_RESPONSE 6
+[2015-05-10 21:52:28,972] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.c.ConversationFilter.doFilter] Conv. 1 resumed. Nb ctx: 1
+[2015-05-10 21:52:28,978] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.beforePhase] RESTORE_VIEW 1
+[2015-05-10 21:52:29,030] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.afterPhase] RESTORE_VIEW 1
+[2015-05-10 21:52:29,036] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.beforePhase] APPLY_REQUEST_VALUES 2
+[2015-05-10 21:52:29,049] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.afterPhase] APPLY_REQUEST_VALUES 2
+[2015-05-10 21:52:29,052] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.beforePhase] RENDER_RESPONSE 6
+[2015-05-10 21:52:29,071] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.afterPhase] RENDER_RESPONSE 6
+[2015-05-10 21:52:32,068] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.c.ConversationFilter.doFilter] Conv. 1 resumed. Nb ctx: 1
+[2015-05-10 21:52:32,071] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.beforePhase] RESTORE_VIEW 1
+[2015-05-10 21:52:32,129] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.afterPhase] RESTORE_VIEW 1
+[2015-05-10 21:52:32,131] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.beforePhase] APPLY_REQUEST_VALUES 2
+[2015-05-10 21:52:32,135] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.afterPhase] APPLY_REQUEST_VALUES 2
+[2015-05-10 21:52:32,136] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.beforePhase] PROCESS_VALIDATIONS 3
+[2015-05-10 21:52:32,208] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.afterPhase] PROCESS_VALIDATIONS 3
+[2015-05-10 21:52:32,209] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.beforePhase] RENDER_RESPONSE 6
+[2015-05-10 21:52:32,276] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.afterPhase] RENDER_RESPONSE 6
+[2015-05-10 21:52:42,407] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.c.ConversationFilter.doFilter] Conv. 1 resumed. Nb ctx: 1
+[2015-05-10 21:52:42,427] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.beforePhase] RESTORE_VIEW 1
+[2015-05-10 21:52:42,473] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.afterPhase] RESTORE_VIEW 1
+[2015-05-10 21:52:42,479] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.beforePhase] APPLY_REQUEST_VALUES 2
+[2015-05-10 21:52:42,482] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.afterPhase] APPLY_REQUEST_VALUES 2
+[2015-05-10 21:52:42,484] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.beforePhase] RENDER_RESPONSE 6
+[2015-05-10 21:52:42,507] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.afterPhase] RENDER_RESPONSE 6
+[2015-05-10 21:52:48,050] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.c.ConversationFilter.doFilter] Conv. 1 resumed. Nb ctx: 1
+[2015-05-10 21:52:48,054] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.beforePhase] RESTORE_VIEW 1
+[2015-05-10 21:52:48,094] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.afterPhase] RESTORE_VIEW 1
+[2015-05-10 21:52:48,104] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.beforePhase] APPLY_REQUEST_VALUES 2
+[2015-05-10 21:52:48,113] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.afterPhase] APPLY_REQUEST_VALUES 2
+[2015-05-10 21:52:48,124] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.c.Conversation.popContextesIfNeeded] popped 1 context from stack: Create Address
+[2015-05-10 21:52:48,127] [INFO ] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.c.Conversation.popContextesIfNeeded] All contextes have been popped. Natural conversation ending will be performed
+[2015-05-10 21:52:48,129] [INFO ] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.c.ConversationManager.endCurrentConversationCommon] Ending conversation 1
+[2015-05-10 21:52:48,133] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.beforePhase] RESTORE_VIEW 1
+[2015-05-10 21:52:48,160] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.afterPhase] RESTORE_VIEW 1
+[2015-05-10 21:52:48,165] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.beforePhase] RENDER_RESPONSE 6
+[2015-05-10 21:52:48,454] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.afterPhase] RENDER_RESPONSE 6
+[2015-05-10 21:52:52,148] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.beforePhase] RESTORE_VIEW 1
+[2015-05-10 21:52:52,170] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.afterPhase] RESTORE_VIEW 1
+[2015-05-10 21:52:52,173] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.beforePhase] APPLY_REQUEST_VALUES 2
+[2015-05-10 21:52:52,177] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.c.Conversation.pushNextContextIfNeeded] pushed 1 context on stack: Search Address
+[2015-05-10 21:52:52,181] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.afterPhase] APPLY_REQUEST_VALUES 2
+[2015-05-10 21:52:52,187] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.c.ConversationFilter.doFilter] Conv. 2 resumed. Nb ctx: 1
+[2015-05-10 21:52:52,190] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.beforePhase] RESTORE_VIEW 1
+[2015-05-10 21:52:52,315] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.afterPhase] RESTORE_VIEW 1
+[2015-05-10 21:52:52,317] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.beforePhase] RENDER_RESPONSE 6
+[2015-05-10 21:52:53,163] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [o.h.e.j.s.SqlStatementLogger.logStatement] 
+    /* select
+        count(distinct generatedAlias0) 
+    from
+        Address as generatedAlias0 */ select
+            count(distinct address0_.ID) as col_0_0_ 
+        from
+            ADDRESS address0_
+[2015-05-10 21:52:53,183] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [o.h.e.j.s.SqlStatementLogger.logStatement] 
+    /* select
+        distinct generatedAlias0 
+    from
+        Address as generatedAlias0 */ select
+            distinct address0_.ID as ID1_2_,
+            address0_.CITY as CITY2_2_,
+            address0_.STREET_NAME as STREET_N3_2_,
+            address0_.VERSION as VERSION4_2_ 
+        from
+            ADDRESS address0_ limit ?
+[2015-05-10 21:52:53,239] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.afterPhase] RENDER_RESPONSE 6
+[2015-05-10 21:52:58,100] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.c.ConversationFilter.doFilter] Conv. 2 resumed. Nb ctx: 1
+[2015-05-10 21:52:58,103] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.beforePhase] RESTORE_VIEW 1
+[2015-05-10 21:52:58,153] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.afterPhase] RESTORE_VIEW 1
+[2015-05-10 21:52:58,155] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.beforePhase] APPLY_REQUEST_VALUES 2
+[2015-05-10 21:52:58,218] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [o.h.e.j.s.SqlStatementLogger.logStatement] 
+    /* select
+        distinct generatedAlias0.streetName 
+    from
+        Address as generatedAlias0 
+    where
+        lower(generatedAlias0.streetName) like :param0 
+    order by
+        generatedAlias0.streetName asc */ select
+            distinct address0_.STREET_NAME as col_0_0_ 
+        from
+            ADDRESS address0_ 
+        where
+            lower(address0_.STREET_NAME) like ? 
+        order by
+            address0_.STREET_NAME asc limit ?
+[2015-05-10 21:52:58,226] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.afterPhase] APPLY_REQUEST_VALUES 2
+[2015-05-10 21:52:58,228] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.beforePhase] RENDER_RESPONSE 6
+[2015-05-10 21:52:58,252] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.afterPhase] RENDER_RESPONSE 6
+[2015-05-10 21:52:59,463] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.c.ConversationFilter.doFilter] Conv. 2 resumed. Nb ctx: 1
+[2015-05-10 21:52:59,467] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.beforePhase] RESTORE_VIEW 1
+[2015-05-10 21:52:59,504] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.afterPhase] RESTORE_VIEW 1
+[2015-05-10 21:52:59,505] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.beforePhase] APPLY_REQUEST_VALUES 2
+[2015-05-10 21:52:59,517] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [o.h.e.j.s.SqlStatementLogger.logStatement] 
+    /* select
+        distinct generatedAlias0.streetName 
+    from
+        Address as generatedAlias0 
+    where
+        lower(generatedAlias0.streetName) like :param0 
+    order by
+        generatedAlias0.streetName asc */ select
+            distinct address0_.STREET_NAME as col_0_0_ 
+        from
+            ADDRESS address0_ 
+        where
+            lower(address0_.STREET_NAME) like ? 
+        order by
+            address0_.STREET_NAME asc limit ?
+[2015-05-10 21:52:59,527] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.afterPhase] APPLY_REQUEST_VALUES 2
+[2015-05-10 21:52:59,529] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.beforePhase] RENDER_RESPONSE 6
+[2015-05-10 21:52:59,551] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.afterPhase] RENDER_RESPONSE 6
+[2015-05-10 21:53:03,680] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.c.ConversationFilter.doFilter] Conv. 2 resumed. Nb ctx: 1
+[2015-05-10 21:53:03,686] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.beforePhase] RESTORE_VIEW 1
+[2015-05-10 21:53:03,761] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.afterPhase] RESTORE_VIEW 1
+[2015-05-10 21:53:03,772] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.beforePhase] APPLY_REQUEST_VALUES 2
+[2015-05-10 21:53:03,785] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.afterPhase] APPLY_REQUEST_VALUES 2
+[2015-05-10 21:53:03,787] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.beforePhase] PROCESS_VALIDATIONS 3
+[2015-05-10 21:53:03,800] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.afterPhase] PROCESS_VALIDATIONS 3
+[2015-05-10 21:53:03,807] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.beforePhase] UPDATE_MODEL_VALUES 4
+[2015-05-10 21:53:03,822] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.afterPhase] UPDATE_MODEL_VALUES 4
+[2015-05-10 21:53:03,823] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.beforePhase] INVOKE_APPLICATION 5
+[2015-05-10 21:53:03,825] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.afterPhase] INVOKE_APPLICATION 5
+[2015-05-10 21:53:03,826] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.beforePhase] RENDER_RESPONSE 6
+[2015-05-10 21:53:03,862] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [o.h.e.j.s.SqlStatementLogger.logStatement] 
+    /* select
+        count(distinct generatedAlias0) 
+    from
+        Address as generatedAlias0 
+    where
+        lower(generatedAlias0.streetName) like :param0 */ select
+            count(distinct address0_.ID) as col_0_0_ 
+        from
+            ADDRESS address0_ 
+        where
+            lower(address0_.STREET_NAME) like ?
+[2015-05-10 21:53:03,878] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [o.h.e.j.s.SqlStatementLogger.logStatement] 
+    /* select
+        distinct generatedAlias0 
+    from
+        Address as generatedAlias0 
+    where
+        lower(generatedAlias0.streetName) like :param0 */ select
+            distinct address0_.ID as ID1_2_,
+            address0_.CITY as CITY2_2_,
+            address0_.STREET_NAME as STREET_N3_2_,
+            address0_.VERSION as VERSION4_2_ 
+        from
+            ADDRESS address0_ 
+        where
+            lower(address0_.STREET_NAME) like ? limit ?
+[2015-05-10 21:53:03,891] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.afterPhase] RENDER_RESPONSE 6
+[2015-05-10 21:53:08,260] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.c.ConversationFilter.doFilter] Conv. 2 resumed. Nb ctx: 1
+[2015-05-10 21:53:08,288] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.beforePhase] RESTORE_VIEW 1
+[2015-05-10 21:53:08,337] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.afterPhase] RESTORE_VIEW 1
+[2015-05-10 21:53:08,345] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.beforePhase] APPLY_REQUEST_VALUES 2
+[2015-05-10 21:53:08,349] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.afterPhase] APPLY_REQUEST_VALUES 2
+[2015-05-10 21:53:08,351] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.beforePhase] PROCESS_VALIDATIONS 3
+[2015-05-10 21:53:08,365] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.afterPhase] PROCESS_VALIDATIONS 3
+[2015-05-10 21:53:08,368] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.beforePhase] UPDATE_MODEL_VALUES 4
+[2015-05-10 21:53:08,379] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.afterPhase] UPDATE_MODEL_VALUES 4
+[2015-05-10 21:53:08,388] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.beforePhase] INVOKE_APPLICATION 5
+[2015-05-10 21:53:08,391] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.afterPhase] INVOKE_APPLICATION 5
+[2015-05-10 21:53:08,394] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.beforePhase] RENDER_RESPONSE 6
+[2015-05-10 21:53:08,425] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [o.h.e.j.s.SqlStatementLogger.logStatement] 
+    /* select
+        count(distinct generatedAlias0) 
+    from
+        Address as generatedAlias0 */ select
+            count(distinct address0_.ID) as col_0_0_ 
+        from
+            ADDRESS address0_
+[2015-05-10 21:53:08,432] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [o.h.e.j.s.SqlStatementLogger.logStatement] 
+    /* select
+        distinct generatedAlias0 
+    from
+        Address as generatedAlias0 */ select
+            distinct address0_.ID as ID1_2_,
+            address0_.CITY as CITY2_2_,
+            address0_.STREET_NAME as STREET_N3_2_,
+            address0_.VERSION as VERSION4_2_ 
+        from
+            ADDRESS address0_ limit ?
+[2015-05-10 21:53:08,447] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.afterPhase] RENDER_RESPONSE 6
+[2015-05-10 21:53:13,801] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.c.ConversationFilter.doFilter] Conv. 2 resumed. Nb ctx: 1
+[2015-05-10 21:53:13,805] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.beforePhase] RESTORE_VIEW 1
+[2015-05-10 21:53:13,850] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.afterPhase] RESTORE_VIEW 1
+[2015-05-10 21:53:13,852] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.beforePhase] APPLY_REQUEST_VALUES 2
+[2015-05-10 21:53:13,858] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [o.h.e.j.s.SqlStatementLogger.logStatement] 
+    /* select
+        distinct generatedAlias0.streetName 
+    from
+        Address as generatedAlias0 
+    where
+        lower(generatedAlias0.streetName) like :param0 
+    order by
+        generatedAlias0.streetName asc */ select
+            distinct address0_.STREET_NAME as col_0_0_ 
+        from
+            ADDRESS address0_ 
+        where
+            lower(address0_.STREET_NAME) like ? 
+        order by
+            address0_.STREET_NAME asc limit ?
+[2015-05-10 21:53:13,866] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.afterPhase] APPLY_REQUEST_VALUES 2
+[2015-05-10 21:53:13,867] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.beforePhase] RENDER_RESPONSE 6
+[2015-05-10 21:53:13,888] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.afterPhase] RENDER_RESPONSE 6
+[2015-05-10 21:53:19,727] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.c.ConversationFilter.doFilter] Conv. 2 resumed. Nb ctx: 1
+[2015-05-10 21:53:19,730] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.beforePhase] RESTORE_VIEW 1
+[2015-05-10 21:53:19,759] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.afterPhase] RESTORE_VIEW 1
+[2015-05-10 21:53:19,762] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.beforePhase] APPLY_REQUEST_VALUES 2
+[2015-05-10 21:53:19,768] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [o.h.e.j.s.SqlStatementLogger.logStatement] 
+    /* select
+        distinct generatedAlias0.streetName 
+    from
+        Address as generatedAlias0 
+    where
+        lower(generatedAlias0.streetName) like :param0 
+    order by
+        generatedAlias0.streetName asc */ select
+            distinct address0_.STREET_NAME as col_0_0_ 
+        from
+            ADDRESS address0_ 
+        where
+            lower(address0_.STREET_NAME) like ? 
+        order by
+            address0_.STREET_NAME asc limit ?
+[2015-05-10 21:53:19,775] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.afterPhase] APPLY_REQUEST_VALUES 2
+[2015-05-10 21:53:19,777] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.beforePhase] RENDER_RESPONSE 6
+[2015-05-10 21:53:19,804] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.afterPhase] RENDER_RESPONSE 6
+[2015-05-10 21:53:21,522] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.c.ConversationFilter.doFilter] Conv. 2 resumed. Nb ctx: 1
+[2015-05-10 21:53:21,525] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.beforePhase] RESTORE_VIEW 1
+[2015-05-10 21:53:21,557] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.afterPhase] RESTORE_VIEW 1
+[2015-05-10 21:53:21,559] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.beforePhase] APPLY_REQUEST_VALUES 2
+[2015-05-10 21:53:21,568] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [o.h.e.j.s.SqlStatementLogger.logStatement] 
+    /* select
+        distinct generatedAlias0.streetName 
+    from
+        Address as generatedAlias0 
+    where
+        lower(generatedAlias0.streetName) like :param0 
+    order by
+        generatedAlias0.streetName asc */ select
+            distinct address0_.STREET_NAME as col_0_0_ 
+        from
+            ADDRESS address0_ 
+        where
+            lower(address0_.STREET_NAME) like ? 
+        order by
+            address0_.STREET_NAME asc limit ?
+[2015-05-10 21:53:21,574] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.afterPhase] APPLY_REQUEST_VALUES 2
+[2015-05-10 21:53:21,576] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.beforePhase] RENDER_RESPONSE 6
+[2015-05-10 21:53:21,597] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.afterPhase] RENDER_RESPONSE 6
+[2015-05-10 21:53:25,062] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.c.ConversationFilter.doFilter] Conv. 2 resumed. Nb ctx: 1
+[2015-05-10 21:53:25,065] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.beforePhase] RESTORE_VIEW 1
+[2015-05-10 21:53:25,094] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.afterPhase] RESTORE_VIEW 1
+[2015-05-10 21:53:25,113] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.beforePhase] APPLY_REQUEST_VALUES 2
+[2015-05-10 21:53:25,120] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.afterPhase] APPLY_REQUEST_VALUES 2
+[2015-05-10 21:53:25,134] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.beforePhase] PROCESS_VALIDATIONS 3
+[2015-05-10 21:53:25,147] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.afterPhase] PROCESS_VALIDATIONS 3
+[2015-05-10 21:53:25,169] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.beforePhase] UPDATE_MODEL_VALUES 4
+[2015-05-10 21:53:25,175] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.afterPhase] UPDATE_MODEL_VALUES 4
+[2015-05-10 21:53:25,186] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.beforePhase] INVOKE_APPLICATION 5
+[2015-05-10 21:53:25,188] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.afterPhase] INVOKE_APPLICATION 5
+[2015-05-10 21:53:25,190] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.beforePhase] RENDER_RESPONSE 6
+[2015-05-10 21:53:25,227] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [o.h.e.j.s.SqlStatementLogger.logStatement] 
+    /* select
+        count(distinct generatedAlias0) 
+    from
+        Address as generatedAlias0 
+    where
+        (
+            lower(generatedAlias0.streetName) like :param0 
+        ) 
+        or (
+            lower(generatedAlias0.streetName) like :param1 
+        ) */ select
+            count(distinct address0_.ID) as col_0_0_ 
+        from
+            ADDRESS address0_ 
+        where
+            lower(address0_.STREET_NAME) like ? 
+            or lower(address0_.STREET_NAME) like ?
+[2015-05-10 21:53:25,249] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [o.h.e.j.s.SqlStatementLogger.logStatement] 
+    /* select
+        distinct generatedAlias0 
+    from
+        Address as generatedAlias0 
+    where
+        (
+            lower(generatedAlias0.streetName) like :param0 
+        ) 
+        or (
+            lower(generatedAlias0.streetName) like :param1 
+        ) */ select
+            distinct address0_.ID as ID1_2_,
+            address0_.CITY as CITY2_2_,
+            address0_.STREET_NAME as STREET_N3_2_,
+            address0_.VERSION as VERSION4_2_ 
+        from
+            ADDRESS address0_ 
+        where
+            lower(address0_.STREET_NAME) like ? 
+            or lower(address0_.STREET_NAME) like ? limit ?
+[2015-05-10 21:53:25,263] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.afterPhase] RENDER_RESPONSE 6
+[2015-05-10 21:54:51,578] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.c.ConversationFilter.doFilter] Conv. 2 resumed. Nb ctx: 1
+[2015-05-10 21:54:51,587] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.beforePhase] RESTORE_VIEW 1
+[2015-05-10 21:54:51,652] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.afterPhase] RESTORE_VIEW 1
+[2015-05-10 21:54:51,654] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.beforePhase] APPLY_REQUEST_VALUES 2
+[2015-05-10 21:54:51,658] [INFO ] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.c.ConversationManager.endCurrentConversationCommon] Ending conversation 2
+[2015-05-10 21:54:51,668] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.afterPhase] APPLY_REQUEST_VALUES 2
+[2015-05-10 21:54:51,679] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.beforePhase] RESTORE_VIEW 1
+[2015-05-10 21:54:51,690] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.afterPhase] RESTORE_VIEW 1
+[2015-05-10 21:54:51,691] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.beforePhase] RENDER_RESPONSE 6
+[2015-05-10 21:54:52,027] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.afterPhase] RENDER_RESPONSE 6
+[2015-05-10 21:54:59,669] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.beforePhase] RESTORE_VIEW 1
+[2015-05-10 21:54:59,691] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.afterPhase] RESTORE_VIEW 1
+[2015-05-10 21:54:59,699] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.beforePhase] APPLY_REQUEST_VALUES 2
+[2015-05-10 21:54:59,705] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.afterPhase] APPLY_REQUEST_VALUES 2
+[2015-05-10 21:54:59,707] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.beforePhase] PROCESS_VALIDATIONS 3
+[2015-05-10 21:54:59,719] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.afterPhase] PROCESS_VALIDATIONS 3
+[2015-05-10 21:54:59,724] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.beforePhase] UPDATE_MODEL_VALUES 4
+[2015-05-10 21:54:59,740] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.afterPhase] UPDATE_MODEL_VALUES 4
+[2015-05-10 21:54:59,746] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.beforePhase] INVOKE_APPLICATION 5
+[2015-05-10 21:54:59,748] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.c.Conversation.pushNextContextIfNeeded] pushed 1 context on stack: Search Book
+[2015-05-10 21:54:59,751] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.afterPhase] INVOKE_APPLICATION 5
+[2015-05-10 21:54:59,804] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.c.ConversationFilter.doFilter] Conv. 3 resumed. Nb ctx: 1
+[2015-05-10 21:54:59,815] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.beforePhase] RESTORE_VIEW 1
+[2015-05-10 21:54:59,828] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.afterPhase] RESTORE_VIEW 1
+[2015-05-10 21:54:59,839] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.beforePhase] RENDER_RESPONSE 6
+[2015-05-10 21:55:00,351] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [o.h.e.j.s.SqlStatementLogger.logStatement] 
+    /* select
+        count(distinct generatedAlias0) 
+    from
+        Book as generatedAlias0 */ select
+            count(distinct book0_.ID) as col_0_0_ 
+        from
+            BOOK book0_
+[2015-05-10 21:55:00,364] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [o.h.e.j.s.SqlStatementLogger.logStatement] 
+    /* select
+        distinct generatedAlias0 
+    from
+        Book as generatedAlias0 */ select
+            distinct book0_.ID as ID1_4_,
+            book0_.ACCOUNT_ID as ACCOUNT_5_4_,
+            book0_.NUMBER_OF_PAGES as NUMBER_O2_4_,
+            book0_.TITLE as TITLE3_4_,
+            book0_.VERSION as VERSION4_4_ 
+        from
+            BOOK book0_ limit ?
+[2015-05-10 21:55:00,440] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.afterPhase] RENDER_RESPONSE 6
+[2015-05-10 21:55:03,836] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.c.ConversationFilter.doFilter] Conv. 3 resumed. Nb ctx: 1
+[2015-05-10 21:55:03,838] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.beforePhase] RESTORE_VIEW 1
+[2015-05-10 21:55:03,874] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.afterPhase] RESTORE_VIEW 1
+[2015-05-10 21:55:03,886] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.beforePhase] APPLY_REQUEST_VALUES 2
+[2015-05-10 21:55:03,900] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.afterPhase] APPLY_REQUEST_VALUES 2
+[2015-05-10 21:55:03,904] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.beforePhase] PROCESS_VALIDATIONS 3
+[2015-05-10 21:55:03,912] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.afterPhase] PROCESS_VALIDATIONS 3
+[2015-05-10 21:55:03,914] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.beforePhase] UPDATE_MODEL_VALUES 4
+[2015-05-10 21:55:03,918] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.afterPhase] UPDATE_MODEL_VALUES 4
+[2015-05-10 21:55:03,919] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.beforePhase] INVOKE_APPLICATION 5
+[2015-05-10 21:55:03,930] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.afterPhase] INVOKE_APPLICATION 5
+[2015-05-10 21:55:03,959] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.c.Conversation.pushNextContextIfNeeded] pushed 1 context on stack: Edit How to create a web app
+[2015-05-10 21:55:03,968] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.c.ConversationFilter.doFilter] Conv. 3 resumed. Nb ctx: 2
+[2015-05-10 21:55:03,971] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.beforePhase] RESTORE_VIEW 1
+[2015-05-10 21:55:03,983] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.afterPhase] RESTORE_VIEW 1
+[2015-05-10 21:55:03,984] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.beforePhase] RENDER_RESPONSE 6
+[2015-05-10 21:55:04,711] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [o.h.e.j.s.SqlStatementLogger.logStatement] 
+    /* load com.h2.demo.domain.Book */ select
+        book0_.ID as ID1_4_0_,
+        book0_.ACCOUNT_ID as ACCOUNT_5_4_0_,
+        book0_.NUMBER_OF_PAGES as NUMBER_O2_4_0_,
+        book0_.TITLE as TITLE3_4_0_,
+        book0_.VERSION as VERSION4_4_0_ 
+    from
+        BOOK book0_ 
+    where
+        book0_.ID=?
+[2015-05-10 21:55:04,721] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [o.h.e.j.s.SqlStatementLogger.logStatement] 
+    /* load com.h2.demo.domain.Account */ select
+        account0_.ID as ID1_0_0_,
+        account0_.ADDRESS_ID as ADDRESS16_0_0_,
+        account0_.BIRTH_DATE as BIRTH_DA2_0_0_,
+        account0_.CIVILITY as CIVILITY3_0_0_,
+        account0_.CREATION_AUTHOR as CREATION4_0_0_,
+        account0_.CREATION_DATE as CREATION5_0_0_,
+        account0_.DESCRIPTION as DESCRIPT6_0_0_,
+        account0_.EMAIL as EMAIL7_0_0_,
+        account0_.FIRST_NAME as FIRST_NA8_0_0_,
+        account0_.IS_ENABLED as IS_ENABL9_0_0_,
+        account0_.LAST_MODIFICATION_AUTHOR as LAST_MO10_0_0_,
+        account0_.LAST_MODIFICATION_DATE as LAST_MO11_0_0_,
+        account0_.LAST_NAME as LAST_NA12_0_0_,
+        account0_.LOGIN as LOGIN13_0_0_,
+        account0_."PASSWORD" as PASSWOR14_0_0_,
+        account0_.VERSION as VERSION15_0_0_ 
+    from
+        ACCOUNT account0_ 
+    where
+        account0_.ID=?
+[2015-05-10 21:55:05,069] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.afterPhase] RENDER_RESPONSE 6
+[2015-05-10 21:55:08,513] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.c.ConversationFilter.doFilter] Conv. 3 resumed. Nb ctx: 2
+[2015-05-10 21:55:08,529] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.beforePhase] RESTORE_VIEW 1
+[2015-05-10 21:55:08,630] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.afterPhase] RESTORE_VIEW 1
+[2015-05-10 21:55:08,632] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.beforePhase] APPLY_REQUEST_VALUES 2
+[2015-05-10 21:55:08,635] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.afterPhase] APPLY_REQUEST_VALUES 2
+[2015-05-10 21:55:08,636] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.beforePhase] PROCESS_VALIDATIONS 3
+[2015-05-10 21:55:08,638] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.afterPhase] PROCESS_VALIDATIONS 3
+[2015-05-10 21:55:08,639] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.beforePhase] UPDATE_MODEL_VALUES 4
+[2015-05-10 21:55:08,641] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.afterPhase] UPDATE_MODEL_VALUES 4
+[2015-05-10 21:55:08,654] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.beforePhase] INVOKE_APPLICATION 5
+[2015-05-10 21:55:08,655] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.afterPhase] INVOKE_APPLICATION 5
+[2015-05-10 21:55:08,656] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.beforePhase] RENDER_RESPONSE 6
+[2015-05-10 21:55:08,710] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.afterPhase] RENDER_RESPONSE 6
+[2015-05-10 21:55:08,744] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.c.ConversationFilter.doFilter] Conv. 3 resumed. Nb ctx: 2
+[2015-05-10 21:55:08,747] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.beforePhase] RESTORE_VIEW 1
+[2015-05-10 21:55:08,782] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.afterPhase] RESTORE_VIEW 1
+[2015-05-10 21:55:08,783] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.beforePhase] APPLY_REQUEST_VALUES 2
+[2015-05-10 21:55:08,785] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.afterPhase] APPLY_REQUEST_VALUES 2
+[2015-05-10 21:55:08,786] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.beforePhase] RENDER_RESPONSE 6
+[2015-05-10 21:55:08,802] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.afterPhase] RENDER_RESPONSE 6
+[2015-05-10 21:55:10,949] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.c.ConversationFilter.doFilter] Conv. 3 resumed. Nb ctx: 2
+[2015-05-10 21:55:10,953] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.beforePhase] RESTORE_VIEW 1
+[2015-05-10 21:55:11,012] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.afterPhase] RESTORE_VIEW 1
+[2015-05-10 21:55:11,018] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.beforePhase] APPLY_REQUEST_VALUES 2
+[2015-05-10 21:55:11,027] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.afterPhase] APPLY_REQUEST_VALUES 2
+[2015-05-10 21:55:11,038] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.c.Conversation.popContextesIfNeeded] popped 1 context from stack: Edit How to create a web app
+[2015-05-10 21:55:11,046] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.c.ConversationFilter.doFilter] Conv. 3 resumed. Nb ctx: 1
+[2015-05-10 21:55:11,055] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.beforePhase] RESTORE_VIEW 1
+[2015-05-10 21:55:11,062] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.afterPhase] RESTORE_VIEW 1
+[2015-05-10 21:55:11,064] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.beforePhase] RENDER_RESPONSE 6
+[2015-05-10 21:55:11,408] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [o.h.e.j.s.SqlStatementLogger.logStatement] 
+    /* select
+        count(distinct generatedAlias0) 
+    from
+        Book as generatedAlias0 */ select
+            count(distinct book0_.ID) as col_0_0_ 
+        from
+            BOOK book0_
+[2015-05-10 21:55:11,415] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [o.h.e.j.s.SqlStatementLogger.logStatement] 
+    /* select
+        distinct generatedAlias0 
+    from
+        Book as generatedAlias0 */ select
+            distinct book0_.ID as ID1_4_,
+            book0_.ACCOUNT_ID as ACCOUNT_5_4_,
+            book0_.NUMBER_OF_PAGES as NUMBER_O2_4_,
+            book0_.TITLE as TITLE3_4_,
+            book0_.VERSION as VERSION4_4_ 
+        from
+            BOOK book0_ limit ?
+[2015-05-10 21:55:11,459] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.afterPhase] RENDER_RESPONSE 6
+[2015-05-10 21:55:16,256] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.c.ConversationFilter.doFilter] Conv. 3 resumed. Nb ctx: 1
+[2015-05-10 21:55:16,259] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.beforePhase] RESTORE_VIEW 1
+[2015-05-10 21:55:16,293] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.afterPhase] RESTORE_VIEW 1
+[2015-05-10 21:55:16,295] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.beforePhase] APPLY_REQUEST_VALUES 2
+[2015-05-10 21:55:16,301] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.afterPhase] APPLY_REQUEST_VALUES 2
+[2015-05-10 21:55:16,313] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.beforePhase] PROCESS_VALIDATIONS 3
+[2015-05-10 21:55:16,320] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.afterPhase] PROCESS_VALIDATIONS 3
+[2015-05-10 21:55:16,321] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.beforePhase] UPDATE_MODEL_VALUES 4
+[2015-05-10 21:55:16,326] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.afterPhase] UPDATE_MODEL_VALUES 4
+[2015-05-10 21:55:16,328] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.beforePhase] INVOKE_APPLICATION 5
+[2015-05-10 21:55:16,330] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.afterPhase] INVOKE_APPLICATION 5
+[2015-05-10 21:55:16,354] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.c.Conversation.pushNextContextIfNeeded] pushed 1 context on stack: Edit Complete history of the universe
+[2015-05-10 21:55:16,358] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.c.ConversationFilter.doFilter] Conv. 3 resumed. Nb ctx: 2
+[2015-05-10 21:55:16,360] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.beforePhase] RESTORE_VIEW 1
+[2015-05-10 21:55:16,363] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.afterPhase] RESTORE_VIEW 1
+[2015-05-10 21:55:16,372] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.beforePhase] RENDER_RESPONSE 6
+[2015-05-10 21:55:16,403] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [o.h.e.j.s.SqlStatementLogger.logStatement] 
+    /* load com.h2.demo.domain.Book */ select
+        book0_.ID as ID1_4_0_,
+        book0_.ACCOUNT_ID as ACCOUNT_5_4_0_,
+        book0_.NUMBER_OF_PAGES as NUMBER_O2_4_0_,
+        book0_.TITLE as TITLE3_4_0_,
+        book0_.VERSION as VERSION4_4_0_ 
+    from
+        BOOK book0_ 
+    where
+        book0_.ID=?
+[2015-05-10 21:55:16,408] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [o.h.e.j.s.SqlStatementLogger.logStatement] 
+    /* load com.h2.demo.domain.Account */ select
+        account0_.ID as ID1_0_0_,
+        account0_.ADDRESS_ID as ADDRESS16_0_0_,
+        account0_.BIRTH_DATE as BIRTH_DA2_0_0_,
+        account0_.CIVILITY as CIVILITY3_0_0_,
+        account0_.CREATION_AUTHOR as CREATION4_0_0_,
+        account0_.CREATION_DATE as CREATION5_0_0_,
+        account0_.DESCRIPTION as DESCRIPT6_0_0_,
+        account0_.EMAIL as EMAIL7_0_0_,
+        account0_.FIRST_NAME as FIRST_NA8_0_0_,
+        account0_.IS_ENABLED as IS_ENABL9_0_0_,
+        account0_.LAST_MODIFICATION_AUTHOR as LAST_MO10_0_0_,
+        account0_.LAST_MODIFICATION_DATE as LAST_MO11_0_0_,
+        account0_.LAST_NAME as LAST_NA12_0_0_,
+        account0_.LOGIN as LOGIN13_0_0_,
+        account0_."PASSWORD" as PASSWOR14_0_0_,
+        account0_.VERSION as VERSION15_0_0_ 
+    from
+        ACCOUNT account0_ 
+    where
+        account0_.ID=?
+[2015-05-10 21:55:16,670] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.afterPhase] RENDER_RESPONSE 6
+[2015-05-10 21:55:21,583] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.c.ConversationFilter.doFilter] Conv. 3 resumed. Nb ctx: 2
+[2015-05-10 21:55:21,586] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.beforePhase] RESTORE_VIEW 1
+[2015-05-10 21:55:21,621] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.afterPhase] RESTORE_VIEW 1
+[2015-05-10 21:55:21,639] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.beforePhase] APPLY_REQUEST_VALUES 2
+[2015-05-10 21:55:21,641] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.afterPhase] APPLY_REQUEST_VALUES 2
+[2015-05-10 21:55:21,642] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.beforePhase] PROCESS_VALIDATIONS 3
+[2015-05-10 21:55:21,644] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.afterPhase] PROCESS_VALIDATIONS 3
+[2015-05-10 21:55:21,645] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.beforePhase] UPDATE_MODEL_VALUES 4
+[2015-05-10 21:55:21,647] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.afterPhase] UPDATE_MODEL_VALUES 4
+[2015-05-10 21:55:21,659] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.beforePhase] INVOKE_APPLICATION 5
+[2015-05-10 21:55:21,661] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.afterPhase] INVOKE_APPLICATION 5
+[2015-05-10 21:55:21,662] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.beforePhase] RENDER_RESPONSE 6
+[2015-05-10 21:55:21,700] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.afterPhase] RENDER_RESPONSE 6
+[2015-05-10 21:55:21,767] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.c.ConversationFilter.doFilter] Conv. 3 resumed. Nb ctx: 2
+[2015-05-10 21:55:21,770] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.beforePhase] RESTORE_VIEW 1
+[2015-05-10 21:55:21,811] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.afterPhase] RESTORE_VIEW 1
+[2015-05-10 21:55:21,813] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.beforePhase] APPLY_REQUEST_VALUES 2
+[2015-05-10 21:55:21,816] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.afterPhase] APPLY_REQUEST_VALUES 2
+[2015-05-10 21:55:21,817] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.beforePhase] RENDER_RESPONSE 6
+[2015-05-10 21:55:21,839] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.afterPhase] RENDER_RESPONSE 6
+[2015-05-10 21:55:23,821] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.c.ConversationFilter.doFilter] Conv. 3 resumed. Nb ctx: 2
+[2015-05-10 21:55:23,830] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.beforePhase] RESTORE_VIEW 1
+[2015-05-10 21:55:23,875] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.afterPhase] RESTORE_VIEW 1
+[2015-05-10 21:55:23,881] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.beforePhase] APPLY_REQUEST_VALUES 2
+[2015-05-10 21:55:23,888] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.afterPhase] APPLY_REQUEST_VALUES 2
+[2015-05-10 21:55:23,892] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.c.Conversation.popContextesIfNeeded] popped 1 context from stack: Edit Complete history of the universe
+[2015-05-10 21:55:23,899] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.c.ConversationFilter.doFilter] Conv. 3 resumed. Nb ctx: 1
+[2015-05-10 21:55:23,902] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.beforePhase] RESTORE_VIEW 1
+[2015-05-10 21:55:23,905] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.afterPhase] RESTORE_VIEW 1
+[2015-05-10 21:55:23,911] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.beforePhase] RENDER_RESPONSE 6
+[2015-05-10 21:55:24,210] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [o.h.e.j.s.SqlStatementLogger.logStatement] 
+    /* select
+        count(distinct generatedAlias0) 
+    from
+        Book as generatedAlias0 */ select
+            count(distinct book0_.ID) as col_0_0_ 
+        from
+            BOOK book0_
+[2015-05-10 21:55:24,216] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [o.h.e.j.s.SqlStatementLogger.logStatement] 
+    /* select
+        distinct generatedAlias0 
+    from
+        Book as generatedAlias0 */ select
+            distinct book0_.ID as ID1_4_,
+            book0_.ACCOUNT_ID as ACCOUNT_5_4_,
+            book0_.NUMBER_OF_PAGES as NUMBER_O2_4_,
+            book0_.TITLE as TITLE3_4_,
+            book0_.VERSION as VERSION4_4_ 
+        from
+            BOOK book0_ limit ?
+[2015-05-10 21:55:24,253] [DEBUG] [1atnqzec5onfidzkak0ixw5t2] [admin] [c.h.d.w.f.LogPhaseListener.afterPhase] RENDER_RESPONSE 6
diff --git a/target/logs/jetty-2015_05_10-request.log b/target/logs/jetty-2015_05_10-request.log
new file mode 100644
index 0000000..2d5b064
--- /dev/null
+++ b/target/logs/jetty-2015_05_10-request.log
@@ -0,0 +1,405 @@
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:08:28 +0000] "GET /h2project/ HTTP/1.1" 200 90 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:08:28 +0000] "GET /favicon.ico HTTP/1.1" 200 1150 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:08:28 +0000] "GET /h2project/home.faces HTTP/1.1" 200 3424 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:08:32 +0000] "GET /h2project/javax.faces.resource/layout/layout.css.faces;jsessionid=naocf09bwwjd1fxf56th3fg1y?ln=primefaces&v=4.0 HTTP/1.1" 200 238 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:08:32 +0000] "GET /h2project/javax.faces.resource/jquery/jquery.js.faces;jsessionid=naocf09bwwjd1fxf56th3fg1y?ln=primefaces&v=4.0 HTTP/1.1" 200 105384 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:08:32 +0000] "GET /h2project/javax.faces.resource/primefaces.js.faces;jsessionid=naocf09bwwjd1fxf56th3fg1y?ln=primefaces&v=4.0 HTTP/1.1" 200 276924 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:08:32 +0000] "GET /h2project/javax.faces.resource/layout/layout.js.faces;jsessionid=naocf09bwwjd1fxf56th3fg1y?ln=primefaces&v=4.0 HTTP/1.1" 200 87560 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:08:32 +0000] "GET /h2project/javax.faces.resource/jquery/jquery-plugins.js.faces;jsessionid=naocf09bwwjd1fxf56th3fg1y?ln=primefaces&v=4.0 HTTP/1.1" 200 220526 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:08:32 +0000] "GET /h2project/javax.faces.resource/js/primefaces-locale.js.faces;jsessionid=naocf09bwwjd1fxf56th3fg1y HTTP/1.1" 200 1132 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:08:32 +0000] "GET /h2project/javax.faces.resource/js/main.js.faces;jsessionid=naocf09bwwjd1fxf56th3fg1y HTTP/1.1" 200 3995 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:08:32 +0000] "GET /h2project/javax.faces.resource/jsf.js.faces?ln=javax.faces&stage=Development HTTP/1.1" 200 117623 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:08:32 +0000] "GET /h2project/javax.faces.resource/theme.css.faces?ln=primefaces-bootstrap HTTP/1.1" 200 5583 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:08:32 +0000] "GET /h2project/javax.faces.resource/css/main.css.faces;jsessionid=naocf09bwwjd1fxf56th3fg1y HTTP/1.1" 200 2635 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:08:32 +0000] "GET /h2project/javax.faces.resource/primefaces.css.faces;jsessionid=naocf09bwwjd1fxf56th3fg1y?ln=primefaces&v=4.0 HTTP/1.1" 200 9961 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:08:33 +0000] "GET /h2project/javax.faces.resource/icons/login.png.faces HTTP/1.1" 200 485 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:08:33 +0000] "GET /h2project/javax.faces.resource/icons/environment/development.gif.faces HTTP/1.1" 200 1589 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:08:33 +0000] "GET /h2project/javax.faces.resource/images/ui-icons_333333_256x240.png.faces?ln=primefaces-bootstrap HTTP/1.1" 200 4369 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:08:33 +0000] "GET /h2project/javax.faces.resource/icons/fr.gif.faces HTTP/1.1" 200 1006 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:08:33 +0000] "GET /h2project/javax.faces.resource/img/logo.png.faces HTTP/1.1" 200 11100 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:08:33 +0000] "GET /h2project/javax.faces.resource/icons/home.png.faces HTTP/1.1" 200 1273 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:09:35 +0000] "POST /h2project/home.faces;jsessionid=naocf09bwwjd1fxf56th3fg1y HTTP/1.1" 200 147 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:09:36 +0000] "GET /h2project/domain/bookSelect.faces?_cid=1c1 HTTP/1.1" 302 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:09:36 +0000] "GET /h2project/login.faces HTTP/1.1" 200 2679 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:09:36 +0000] "GET /h2project/javax.faces.resource/theme.css.faces?ln=primefaces-bootstrap HTTP/1.1" 304 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:09:36 +0000] "GET /h2project/javax.faces.resource/jquery/jquery.js.faces?ln=primefaces&v=4.0 HTTP/1.1" 200 105384 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:09:36 +0000] "GET /h2project/javax.faces.resource/jquery/jquery-plugins.js.faces?ln=primefaces&v=4.0 HTTP/1.1" 200 220526 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:09:37 +0000] "GET /h2project/javax.faces.resource/layout/layout.css.faces?ln=primefaces&v=4.0 HTTP/1.1" 200 238 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:09:37 +0000] "GET /h2project/javax.faces.resource/layout/layout.js.faces?ln=primefaces&v=4.0 HTTP/1.1" 200 87560 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:09:37 +0000] "GET /h2project/javax.faces.resource/js/primefaces-locale.js.faces HTTP/1.1" 200 1132 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:09:37 +0000] "GET /h2project/javax.faces.resource/js/main.js.faces HTTP/1.1" 200 3995 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:09:36 +0000] "GET /h2project/javax.faces.resource/primefaces.js.faces?ln=primefaces&v=4.0 HTTP/1.1" 200 276924 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:09:37 +0000] "GET /h2project/javax.faces.resource/spacer/dot_clear.gif.faces?ln=primefaces&v=4.0 HTTP/1.1" 200 42 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:09:36 +0000] "GET /h2project/javax.faces.resource/css/main.css.faces HTTP/1.1" 200 2635 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:09:36 +0000] "GET /h2project/javax.faces.resource/primefaces.css.faces?ln=primefaces&v=4.0 HTTP/1.1" 200 9961 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:09:37 +0000] "GET /h2project/javax.faces.resource/icons/environment/development.gif.faces HTTP/1.1" 304 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:09:37 +0000] "GET /h2project/javax.faces.resource/img/logo.png.faces HTTP/1.1" 304 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:09:37 +0000] "GET /h2project/javax.faces.resource/icons/login.png.faces HTTP/1.1" 304 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:09:37 +0000] "GET /h2project/javax.faces.resource/icons/home.png.faces HTTP/1.1" 304 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:09:37 +0000] "GET /h2project/javax.faces.resource/icons/fr.gif.faces HTTP/1.1" 304 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:09:45 +0000] "POST /h2project/login.faces HTTP/1.1" 200 125 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:09:45 +0000] "GET /h2project/home.faces HTTP/1.1" 200 3465 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:09:46 +0000] "GET /h2project/javax.faces.resource/theme.css.faces?ln=primefaces-bootstrap HTTP/1.1" 304 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:09:46 +0000] "GET /h2project/javax.faces.resource/css/main.css.faces HTTP/1.1" 304 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:09:46 +0000] "GET /h2project/javax.faces.resource/primefaces.css.faces?ln=primefaces&v=4.0 HTTP/1.1" 304 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:09:46 +0000] "GET /h2project/javax.faces.resource/layout/layout.css.faces?ln=primefaces&v=4.0 HTTP/1.1" 304 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:09:46 +0000] "GET /h2project/javax.faces.resource/jquery/jquery-plugins.js.faces?ln=primefaces&v=4.0 HTTP/1.1" 304 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:09:46 +0000] "GET /h2project/javax.faces.resource/js/main.js.faces HTTP/1.1" 304 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:09:46 +0000] "GET /h2project/javax.faces.resource/layout/layout.js.faces?ln=primefaces&v=4.0 HTTP/1.1" 304 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:09:46 +0000] "GET /h2project/javax.faces.resource/js/primefaces-locale.js.faces HTTP/1.1" 304 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:09:46 +0000] "GET /h2project/javax.faces.resource/jquery/jquery.js.faces?ln=primefaces&v=4.0 HTTP/1.1" 304 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:09:46 +0000] "GET /h2project/javax.faces.resource/jsf.js.faces?ln=javax.faces&stage=Development HTTP/1.1" 304 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:09:46 +0000] "GET /h2project/javax.faces.resource/primefaces.js.faces?ln=primefaces&v=4.0 HTTP/1.1" 304 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:09:49 +0000] "POST /h2project/home.faces HTTP/1.1" 302 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:09:50 +0000] "GET /h2project/domain/accountEdit.faces?_cid=2c1 HTTP/1.1" 403 11453 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:09:50 +0000] "GET /h2project/javax.faces.resource/theme.css.faces?ln=primefaces-bootstrap HTTP/1.1" 304 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:09:50 +0000] "GET /h2project/javax.faces.resource/css/main.css.faces HTTP/1.1" 304 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:09:50 +0000] "GET /h2project/javax.faces.resource/layout/layout.css.faces?ln=primefaces&v=4.0 HTTP/1.1" 304 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:09:50 +0000] "GET /h2project/javax.faces.resource/primefaces.js.faces?ln=primefaces&v=4.0 HTTP/1.1" 304 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:09:50 +0000] "GET /h2project/javax.faces.resource/js/main.js.faces HTTP/1.1" 304 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:09:50 +0000] "GET /h2project/javax.faces.resource/jquery/jquery.js.faces?ln=primefaces&v=4.0 HTTP/1.1" 304 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:09:50 +0000] "GET /h2project/javax.faces.resource/jquery/jquery-plugins.js.faces?ln=primefaces&v=4.0 HTTP/1.1" 304 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:09:50 +0000] "GET /h2project/javax.faces.resource/primefaces.css.faces?ln=primefaces&v=4.0 HTTP/1.1" 304 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:09:50 +0000] "GET /h2project/javax.faces.resource/layout/layout.js.faces?ln=primefaces&v=4.0 HTTP/1.1" 304 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:09:50 +0000] "GET /h2project/javax.faces.resource/js/primefaces-locale.js.faces HTTP/1.1" 304 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:09:55 +0000] "GET /h2project/logout.faces HTTP/1.1" 302 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:09:55 +0000] "GET /h2project/home.faces HTTP/1.1" 200 3379 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:09:55 +0000] "GET /h2project/javax.faces.resource/css/main.css.faces HTTP/1.1" 304 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:09:55 +0000] "GET /h2project/javax.faces.resource/jquery/jquery-plugins.js.faces?ln=primefaces&v=4.0 HTTP/1.1" 304 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:09:55 +0000] "GET /h2project/javax.faces.resource/theme.css.faces?ln=primefaces-bootstrap HTTP/1.1" 304 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:09:55 +0000] "GET /h2project/javax.faces.resource/jquery/jquery.js.faces?ln=primefaces&v=4.0 HTTP/1.1" 304 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:09:55 +0000] "GET /h2project/javax.faces.resource/js/primefaces-locale.js.faces HTTP/1.1" 304 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:09:55 +0000] "GET /h2project/javax.faces.resource/layout/layout.js.faces?ln=primefaces&v=4.0 HTTP/1.1" 304 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:09:55 +0000] "GET /h2project/javax.faces.resource/primefaces.js.faces?ln=primefaces&v=4.0 HTTP/1.1" 304 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:09:55 +0000] "GET /h2project/javax.faces.resource/layout/layout.css.faces?ln=primefaces&v=4.0 HTTP/1.1" 304 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:09:55 +0000] "GET /h2project/javax.faces.resource/primefaces.css.faces?ln=primefaces&v=4.0 HTTP/1.1" 304 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:09:55 +0000] "GET /h2project/javax.faces.resource/jsf.js.faces?ln=javax.faces&stage=Development HTTP/1.1" 304 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:09:55 +0000] "GET /h2project/javax.faces.resource/js/main.js.faces HTTP/1.1" 304 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:09:57 +0000] "GET /h2project/login.faces HTTP/1.1" 200 2602 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:09:57 +0000] "GET /h2project/javax.faces.resource/css/main.css.faces HTTP/1.1" 304 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:09:57 +0000] "GET /h2project/javax.faces.resource/theme.css.faces?ln=primefaces-bootstrap HTTP/1.1" 304 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:09:57 +0000] "GET /h2project/javax.faces.resource/primefaces.js.faces?ln=primefaces&v=4.0 HTTP/1.1" 304 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:09:57 +0000] "GET /h2project/javax.faces.resource/layout/layout.js.faces?ln=primefaces&v=4.0 HTTP/1.1" 304 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:09:57 +0000] "GET /h2project/javax.faces.resource/primefaces.css.faces?ln=primefaces&v=4.0 HTTP/1.1" 304 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:09:57 +0000] "GET /h2project/javax.faces.resource/js/main.js.faces HTTP/1.1" 304 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:09:57 +0000] "GET /h2project/javax.faces.resource/jquery/jquery-plugins.js.faces?ln=primefaces&v=4.0 HTTP/1.1" 304 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:09:57 +0000] "GET /h2project/javax.faces.resource/js/primefaces-locale.js.faces HTTP/1.1" 304 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:09:57 +0000] "GET /h2project/javax.faces.resource/jquery/jquery.js.faces?ln=primefaces&v=4.0 HTTP/1.1" 304 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:09:57 +0000] "GET /h2project/javax.faces.resource/layout/layout.css.faces?ln=primefaces&v=4.0 HTTP/1.1" 304 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:09:57 +0000] "GET /h2project/javax.faces.resource/spacer/dot_clear.gif.faces?ln=primefaces&v=4.0 HTTP/1.1" 304 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:10:07 +0000] "POST /h2project/login.faces HTTP/1.1" 200 125 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:10:07 +0000] "GET /h2project/home.faces HTTP/1.1" 200 3436 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:10:08 +0000] "GET /h2project/javax.faces.resource/css/main.css.faces HTTP/1.1" 304 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:10:08 +0000] "GET /h2project/javax.faces.resource/primefaces.js.faces?ln=primefaces&v=4.0 HTTP/1.1" 304 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:10:08 +0000] "GET /h2project/javax.faces.resource/jquery/jquery-plugins.js.faces?ln=primefaces&v=4.0 HTTP/1.1" 304 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:10:08 +0000] "GET /h2project/javax.faces.resource/layout/layout.js.faces?ln=primefaces&v=4.0 HTTP/1.1" 304 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:10:08 +0000] "GET /h2project/javax.faces.resource/jquery/jquery.js.faces?ln=primefaces&v=4.0 HTTP/1.1" 304 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:10:08 +0000] "GET /h2project/javax.faces.resource/layout/layout.css.faces?ln=primefaces&v=4.0 HTTP/1.1" 304 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:10:08 +0000] "GET /h2project/javax.faces.resource/theme.css.faces?ln=primefaces-bootstrap HTTP/1.1" 304 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:10:08 +0000] "GET /h2project/javax.faces.resource/primefaces.css.faces?ln=primefaces&v=4.0 HTTP/1.1" 304 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:10:08 +0000] "GET /h2project/javax.faces.resource/js/main.js.faces HTTP/1.1" 304 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:10:08 +0000] "GET /h2project/javax.faces.resource/js/primefaces-locale.js.faces HTTP/1.1" 304 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:10:08 +0000] "GET /h2project/javax.faces.resource/jsf.js.faces?ln=javax.faces&stage=Development HTTP/1.1" 304 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:12:06 +0000] "GET /h2project/home.faces HTTP/1.1" 200 3435 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:12:13 +0000] "GET /h2project/monitoring HTTP/1.1" 200 13865 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:12:14 +0000] "GET /h2project/monitoring?resource=resizable_tables.js HTTP/1.1" 200 7003 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:12:14 +0000] "GET /h2project/monitoring?resource=monitoring.css HTTP/1.1" 200 2647 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:12:14 +0000] "GET /h2project/monitoring?resource=sorttable.js HTTP/1.1" 200 17234 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:12:14 +0000] "GET /h2project/monitoring?resource=systemmonitor.png HTTP/1.1" 200 1878 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:12:14 +0000] "GET /h2project/monitoring?resource=effects.js HTTP/1.1" 200 33802 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:12:15 +0000] "GET /h2project/monitoring?resource=donate.gif HTTP/1.1" 200 1714 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:12:14 +0000] "GET /h2project/monitoring?resource=prototype.js HTTP/1.1" 200 61894 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:12:15 +0000] "GET /h2project/monitoring?resource=action_refresh.png HTTP/1.1" 200 391 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:12:15 +0000] "GET /h2project/monitoring?resource=action_help.png HTTP/1.1" 200 786 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:12:15 +0000] "GET /h2project/monitoring?resource=calendar_view_day.png HTTP/1.1" 200 572 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:12:15 +0000] "GET /h2project/monitoring?resource=calendar_view_week.png HTTP/1.1" 200 480 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:12:15 +0000] "GET /h2project/monitoring?resource=calendar_view_month.png HTTP/1.1" 200 595 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:12:15 +0000] "GET /h2project/monitoring?resource=calendar.png HTTP/1.1" 200 675 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:12:15 +0000] "GET /h2project/monitoring?width=200&height=50&graph=usedMemory HTTP/1.1" 200 3530 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:12:15 +0000] "GET /h2project/monitoring?width=200&height=50&graph=usedConnections HTTP/1.1" 200 3579 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:12:16 +0000] "GET /h2project/monitoring?resource=backgroundGradient.png HTTP/1.1" 200 330 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:12:15 +0000] "GET /h2project/monitoring?width=200&height=50&graph=cpu HTTP/1.1" 200 3292 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:12:16 +0000] "GET /h2project/monitoring?resource=db.png HTTP/1.1" 200 6340 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:12:15 +0000] "GET /h2project/monitoring?width=200&height=50&graph=httpSessions HTTP/1.1" 200 3550 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:12:16 +0000] "GET /h2project/monitoring?resource=dbweb.png HTTP/1.1" 200 6199 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:12:15 +0000] "GET /h2project/monitoring?width=200&height=50&graph=activeThreads HTTP/1.1" 200 3485 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:12:15 +0000] "GET /h2project/monitoring?width=200&height=50&graph=activeConnections HTTP/1.1" 200 3661 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:12:16 +0000] "GET /h2project/monitoring?resource=bullets/plus.png HTTP/1.1" 200 960 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:12:16 +0000] "GET /h2project/monitoring?width=200&height=50&graph=httpMeanTimes HTTP/1.1" 200 3867 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:12:16 +0000] "GET /h2project/monitoring?width=200&height=50&graph=jsfMeanTimes HTTP/1.1" 200 3793 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:12:16 +0000] "GET /h2project/monitoring?width=200&height=50&graph=httpSystemErrors HTTP/1.1" 200 3420 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:12:17 +0000] "GET /h2project/monitoring?width=200&height=50&graph=jsfHitsRate HTTP/1.1" 200 3754 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:12:17 +0000] "GET /h2project/monitoring?width=200&height=50&graph=sqlMeanTimes HTTP/1.1" 200 3618 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:12:17 +0000] "GET /h2project/monitoring?width=200&height=50&graph=sqlSystemErrors HTTP/1.1" 200 3512 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:12:17 +0000] "GET /h2project/monitoring?width=200&height=50&graph=httpHitsRate HTTP/1.1" 200 3532 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:12:17 +0000] "GET /h2project/monitoring?width=200&height=50&graph=sqlHitsRate HTTP/1.1" 200 3574 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:12:17 +0000] "GET /h2project/monitoring?width=200&height=50&graph=jsfSystemErrors HTTP/1.1" 200 3680 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:12:17 +0000] "GET /h2project/monitoring?width=200&height=50&graph=gc HTTP/1.1" 200 3762 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:12:17 +0000] "GET /h2project/monitoring?width=200&height=50&graph=threadCount HTTP/1.1" 200 3589 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:12:17 +0000] "GET /h2project/monitoring?width=200&height=50&graph=loadedClassesCount HTTP/1.1" 200 3805 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:12:17 +0000] "GET /h2project/monitoring?width=200&height=50&graph=usedPhysicalMemorySize HTTP/1.1" 200 3861 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:12:17 +0000] "GET /h2project/monitoring?width=200&height=50&graph=usedNonHeapMemory HTTP/1.1" 200 3736 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:12:17 +0000] "GET /h2project/monitoring?width=200&height=50&graph=jspHitsRate HTTP/1.1" 200 3472 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:12:17 +0000] "GET /h2project/monitoring?width=200&height=50&graph=httpSessionsMeanAge HTTP/1.1" 200 4053 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:12:17 +0000] "GET /h2project/monitoring?width=200&height=50&graph=jspMeanTimes HTTP/1.1" 200 3606 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:12:18 +0000] "GET /h2project/monitoring?resource=error.png HTTP/1.1" 200 1461 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:12:17 +0000] "GET /h2project/monitoring?width=200&height=50&graph=transactionsRate HTTP/1.1" 200 3710 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:12:18 +0000] "GET /h2project/monitoring?resource=log.png HTTP/1.1" 200 1323 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:12:18 +0000] "GET /h2project/monitoring?resource=hourglass.png HTTP/1.1" 200 2742 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:12:18 +0000] "GET /h2project/monitoring?resource=systeminfo.png HTTP/1.1" 200 1845 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:12:18 +0000] "GET /h2project/monitoring?resource=broom.png HTTP/1.1" 200 784 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:12:17 +0000] "GET /h2project/monitoring?width=200&height=50&graph=usedSwapSpaceSize HTTP/1.1" 200 3481 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:12:18 +0000] "GET /h2project/monitoring?resource=heapdump.png HTTP/1.1" 200 476 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:12:18 +0000] "GET /h2project/monitoring?resource=memory.png HTTP/1.1" 200 9562 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:12:18 +0000] "GET /h2project/monitoring?width=200&height=50&graph=jspSystemErrors HTTP/1.1" 200 3541 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:12:18 +0000] "GET /h2project/monitoring?resource=user-trash.png HTTP/1.1" 200 1772 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:12:18 +0000] "GET /h2project/monitoring?resource=system-users.png HTTP/1.1" 200 1883 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:12:18 +0000] "GET /h2project/monitoring?resource=xml.png HTTP/1.1" 200 603 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:12:18 +0000] "GET /h2project/monitoring?resource=mbeans.png HTTP/1.1" 200 1915 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:12:18 +0000] "GET /h2project/monitoring?resource=processes.png HTTP/1.1" 200 3057 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:12:18 +0000] "GET /h2project/monitoring?resource=jndi.png HTTP/1.1" 200 1373 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:12:18 +0000] "GET /h2project/monitoring?resource=bar/rb_a.gif HTTP/1.1" 200 839 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:12:18 +0000] "GET /h2project/monitoring?resource=bar/rb_5.gif HTTP/1.1" 200 84 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:12:18 +0000] "GET /h2project/monitoring?resource=bar/rb_2.gif HTTP/1.1" 200 121 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:12:18 +0000] "GET /h2project/monitoring?resource=bar/rb_0.gif HTTP/1.1" 200 77 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:12:18 +0000] "GET /h2project/monitoring?resource=bar/rb_b0.gif HTTP/1.1" 200 155 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:12:18 +0000] "GET /h2project/monitoring?resource=bar/rb_a0.gif HTTP/1.1" 200 154 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:12:18 +0000] "GET /h2project/monitoring?resource=servers/windows.png HTTP/1.1" 200 3685 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:12:18 +0000] "GET /h2project/monitoring?resource=alert.png HTTP/1.1" 200 1047 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:12:18 +0000] "GET /h2project/monitoring?resource=servers/jetty.png HTTP/1.1" 200 746 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:12:18 +0000] "GET /h2project/monitoring?resource=bar/rb_3.gif HTTP/1.1" 200 120 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:12:18 +0000] "GET /h2project/monitoring?resource=threads.png HTTP/1.1" 200 2399 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:12:18 +0000] "GET /h2project/monitoring?resource=stop.png HTTP/1.1" 200 700 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:12:18 +0000] "GET /h2project/monitoring?resource=bullets/green.png HTTP/1.1" 200 602 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:12:18 +0000] "GET /h2project/monitoring?resource=bullets/yellow.png HTTP/1.1" 200 666 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:12:18 +0000] "GET /h2project/monitoring?resource=bullets/blue.png HTTP/1.1" 200 661 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:12:18 +0000] "GET /h2project/monitoring?resource=text.png HTTP/1.1" 200 333 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:12:18 +0000] "GET /h2project/monitoring?resource=caches.png HTTP/1.1" 200 1239 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:12:18 +0000] "GET /h2project/monitoring?resource=jsp.png HTTP/1.1" 200 3446 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:12:43 +0000] "GET /h2project/monitoring?resource=bullets/minus.png HTTP/1.1" 200 957 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:12:48 +0000] "GET /h2project/monitoring?graph=sqlfb91f01900b64144ab06b85df3c270ea4c3f4f3b&width=100&height=50 HTTP/1.1" 200 654 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:12:48 +0000] "GET /h2project/monitoring?graph=sql9f9e7065d3d446b4d6e61801f9c57ee6cf78881a&width=100&height=50 HTTP/1.1" 200 654 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:21:44 +0000] "GET /h2project/home.faces HTTP/1.1" 200 3436 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:21:57 +0000] "GET /h2project/javax.faces.resource/css/main.css.faces HTTP/1.1" 304 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:19:03 +0000] "GET /h2project/home.faces HTTP/1.1" 200 3434 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:21:57 +0000] "GET /h2project/javax.faces.resource/layout/layout.css.faces?ln=primefaces&v=4.0 HTTP/1.1" 304 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:21:57 +0000] "GET /h2project/javax.faces.resource/theme.css.faces?ln=primefaces-bootstrap HTTP/1.1" 304 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:19:58 +0000] "GET /h2project/login.faces HTTP/1.1" 200 2602 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:21:57 +0000] "GET /h2project/javax.faces.resource/jquery/jquery.js.faces?ln=primefaces&v=4.0 HTTP/1.1" 304 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:21:57 +0000] "GET /h2project/javax.faces.resource/primefaces.js.faces?ln=primefaces&v=4.0 HTTP/1.1" 304 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:21:57 +0000] "GET /h2project/javax.faces.resource/jquery/jquery-plugins.js.faces?ln=primefaces&v=4.0 HTTP/1.1" 304 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:21:57 +0000] "GET /h2project/javax.faces.resource/primefaces.css.faces?ln=primefaces&v=4.0 HTTP/1.1" 304 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:21:57 +0000] "GET /h2project/javax.faces.resource/layout/layout.js.faces?ln=primefaces&v=4.0 HTTP/1.1" 304 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:21:57 +0000] "GET /h2project/javax.faces.resource/js/main.js.faces HTTP/1.1" 304 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:21:57 +0000] "GET /h2project/javax.faces.resource/js/primefaces-locale.js.faces HTTP/1.1" 304 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:21:57 +0000] "GET /h2project/javax.faces.resource/jsf.js.faces?ln=javax.faces&stage=Development HTTP/1.1" 304 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:20:01 +0000] "GET /h2project/home.faces HTTP/1.1" 200 3436 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:22:06 +0000] "GET /h2project/logout.faces HTTP/1.1" 302 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:22:06 +0000] "GET /h2project/home.faces HTTP/1.1" 200 3382 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:22:07 +0000] "GET /h2project/javax.faces.resource/css/main.css.faces HTTP/1.1" 304 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:22:07 +0000] "GET /h2project/javax.faces.resource/primefaces.js.faces?ln=primefaces&v=4.0 HTTP/1.1" 304 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:22:07 +0000] "GET /h2project/javax.faces.resource/primefaces.css.faces?ln=primefaces&v=4.0 HTTP/1.1" 304 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:22:07 +0000] "GET /h2project/javax.faces.resource/theme.css.faces?ln=primefaces-bootstrap HTTP/1.1" 304 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:22:07 +0000] "GET /h2project/javax.faces.resource/jquery/jquery-plugins.js.faces?ln=primefaces&v=4.0 HTTP/1.1" 304 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:22:07 +0000] "GET /h2project/javax.faces.resource/jquery/jquery.js.faces?ln=primefaces&v=4.0 HTTP/1.1" 304 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:22:07 +0000] "GET /h2project/javax.faces.resource/layout/layout.css.faces?ln=primefaces&v=4.0 HTTP/1.1" 304 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:22:07 +0000] "GET /h2project/javax.faces.resource/layout/layout.js.faces?ln=primefaces&v=4.0 HTTP/1.1" 304 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:22:07 +0000] "GET /h2project/javax.faces.resource/js/main.js.faces HTTP/1.1" 304 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:22:07 +0000] "GET /h2project/javax.faces.resource/js/primefaces-locale.js.faces HTTP/1.1" 304 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:22:07 +0000] "GET /h2project/javax.faces.resource/jsf.js.faces?ln=javax.faces&stage=Development HTTP/1.1" 304 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:22:09 +0000] "GET /h2project/login.faces HTTP/1.1" 200 2601 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:22:10 +0000] "GET /h2project/javax.faces.resource/css/main.css.faces HTTP/1.1" 304 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:22:10 +0000] "GET /h2project/javax.faces.resource/primefaces.js.faces?ln=primefaces&v=4.0 HTTP/1.1" 304 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:22:10 +0000] "GET /h2project/javax.faces.resource/jquery/jquery-plugins.js.faces?ln=primefaces&v=4.0 HTTP/1.1" 304 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:22:10 +0000] "GET /h2project/javax.faces.resource/js/main.js.faces HTTP/1.1" 304 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:22:10 +0000] "GET /h2project/javax.faces.resource/theme.css.faces?ln=primefaces-bootstrap HTTP/1.1" 304 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:22:10 +0000] "GET /h2project/javax.faces.resource/layout/layout.js.faces?ln=primefaces&v=4.0 HTTP/1.1" 304 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:22:10 +0000] "GET /h2project/javax.faces.resource/primefaces.css.faces?ln=primefaces&v=4.0 HTTP/1.1" 304 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:22:10 +0000] "GET /h2project/javax.faces.resource/js/primefaces-locale.js.faces HTTP/1.1" 304 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:22:10 +0000] "GET /h2project/javax.faces.resource/spacer/dot_clear.gif.faces?ln=primefaces&v=4.0 HTTP/1.1" 304 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:22:10 +0000] "GET /h2project/javax.faces.resource/layout/layout.css.faces?ln=primefaces&v=4.0 HTTP/1.1" 304 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:22:10 +0000] "GET /h2project/javax.faces.resource/jquery/jquery.js.faces?ln=primefaces&v=4.0 HTTP/1.1" 304 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:22:14 +0000] "POST /h2project/login.faces HTTP/1.1" 200 125 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:22:14 +0000] "GET /h2project/home.faces HTTP/1.1" 200 3434 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:22:15 +0000] "GET /h2project/javax.faces.resource/css/main.css.faces HTTP/1.1" 304 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:22:15 +0000] "GET /h2project/javax.faces.resource/theme.css.faces?ln=primefaces-bootstrap HTTP/1.1" 304 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:22:15 +0000] "GET /h2project/javax.faces.resource/primefaces.css.faces?ln=primefaces&v=4.0 HTTP/1.1" 304 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:22:15 +0000] "GET /h2project/javax.faces.resource/js/main.js.faces HTTP/1.1" 304 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:22:15 +0000] "GET /h2project/javax.faces.resource/layout/layout.css.faces?ln=primefaces&v=4.0 HTTP/1.1" 304 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:22:15 +0000] "GET /h2project/javax.faces.resource/primefaces.js.faces?ln=primefaces&v=4.0 HTTP/1.1" 304 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:22:15 +0000] "GET /h2project/javax.faces.resource/js/primefaces-locale.js.faces HTTP/1.1" 304 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:22:15 +0000] "GET /h2project/javax.faces.resource/layout/layout.js.faces?ln=primefaces&v=4.0 HTTP/1.1" 304 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:22:15 +0000] "GET /h2project/javax.faces.resource/jquery/jquery-plugins.js.faces?ln=primefaces&v=4.0 HTTP/1.1" 304 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:22:15 +0000] "GET /h2project/javax.faces.resource/jquery/jquery.js.faces?ln=primefaces&v=4.0 HTTP/1.1" 304 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:22:15 +0000] "GET /h2project/javax.faces.resource/jsf.js.faces?ln=javax.faces&stage=Development HTTP/1.1" 304 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:22:24 +0000] "POST /h2project/home.faces HTTP/1.1" 302 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:22:24 +0000] "GET /h2project/domain/addressEdit.faces?_cid=1c1 HTTP/1.1" 200 3449 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:22:26 +0000] "GET /h2project/javax.faces.resource/css/main.css.faces HTTP/1.1" 304 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:22:26 +0000] "GET /h2project/javax.faces.resource/jquery/jquery-plugins.js.faces?ln=primefaces&v=4.0 HTTP/1.1" 304 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:22:26 +0000] "GET /h2project/javax.faces.resource/theme.css.faces?ln=primefaces-bootstrap HTTP/1.1" 304 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:22:26 +0000] "GET /h2project/javax.faces.resource/primefaces.js.faces?ln=primefaces&v=4.0 HTTP/1.1" 304 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:22:26 +0000] "GET /h2project/javax.faces.resource/primefaces.css.faces?ln=primefaces&v=4.0 HTTP/1.1" 304 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:22:26 +0000] "GET /h2project/javax.faces.resource/jquery/jquery.js.faces?ln=primefaces&v=4.0 HTTP/1.1" 304 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:22:26 +0000] "GET /h2project/javax.faces.resource/js/main.js.faces HTTP/1.1" 304 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:22:26 +0000] "GET /h2project/javax.faces.resource/js/primefaces-locale.js.faces HTTP/1.1" 304 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:22:26 +0000] "GET /h2project/javax.faces.resource/layout/layout.css.faces?ln=primefaces&v=4.0 HTTP/1.1" 304 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:22:26 +0000] "GET /h2project/javax.faces.resource/layout/layout.js.faces?ln=primefaces&v=4.0 HTTP/1.1" 304 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:22:28 +0000] "POST /h2project/domain/addressEdit.faces HTTP/1.1" 200 191 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:22:32 +0000] "POST /h2project/domain/addressEdit.faces HTTP/1.1" 200 633 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:22:32 +0000] "GET /h2project/javax.faces.resource/messages/messages.png.faces?ln=primefaces&v=4.0 HTTP/1.1" 200 27209 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:22:42 +0000] "POST /h2project/domain/addressEdit.faces HTTP/1.1" 200 191 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:22:48 +0000] "POST /h2project/domain/addressEdit.faces HTTP/1.1" 302 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:22:48 +0000] "GET /h2project/home.faces HTTP/1.1" 200 3435 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:22:48 +0000] "GET /h2project/javax.faces.resource/css/main.css.faces HTTP/1.1" 304 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:22:48 +0000] "GET /h2project/javax.faces.resource/primefaces.js.faces?ln=primefaces&v=4.0 HTTP/1.1" 304 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:22:48 +0000] "GET /h2project/javax.faces.resource/layout/layout.css.faces?ln=primefaces&v=4.0 HTTP/1.1" 304 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:22:48 +0000] "GET /h2project/javax.faces.resource/primefaces.css.faces?ln=primefaces&v=4.0 HTTP/1.1" 304 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:22:48 +0000] "GET /h2project/javax.faces.resource/jquery/jquery-plugins.js.faces?ln=primefaces&v=4.0 HTTP/1.1" 304 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:22:48 +0000] "GET /h2project/javax.faces.resource/js/main.js.faces HTTP/1.1" 304 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:22:48 +0000] "GET /h2project/javax.faces.resource/theme.css.faces?ln=primefaces-bootstrap HTTP/1.1" 304 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:22:48 +0000] "GET /h2project/javax.faces.resource/js/primefaces-locale.js.faces HTTP/1.1" 304 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:22:48 +0000] "GET /h2project/javax.faces.resource/layout/layout.js.faces?ln=primefaces&v=4.0 HTTP/1.1" 304 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:22:48 +0000] "GET /h2project/javax.faces.resource/jquery/jquery.js.faces?ln=primefaces&v=4.0 HTTP/1.1" 304 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:22:48 +0000] "GET /h2project/javax.faces.resource/jsf.js.faces?ln=javax.faces&stage=Development HTTP/1.1" 304 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:22:52 +0000] "POST /h2project/home.faces HTTP/1.1" 302 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:22:52 +0000] "GET /h2project/domain/addressSelect.faces?_cid=2c1 HTTP/1.1" 200 5155 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:22:53 +0000] "GET /h2project/javax.faces.resource/css/main.css.faces HTTP/1.1" 304 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:22:53 +0000] "GET /h2project/javax.faces.resource/layout/layout.css.faces?ln=primefaces&v=4.0 HTTP/1.1" 304 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:22:53 +0000] "GET /h2project/javax.faces.resource/theme.css.faces?ln=primefaces-bootstrap HTTP/1.1" 304 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:22:53 +0000] "GET /h2project/javax.faces.resource/jquery/jquery.js.faces?ln=primefaces&v=4.0 HTTP/1.1" 304 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:22:53 +0000] "GET /h2project/javax.faces.resource/jquery/jquery-plugins.js.faces?ln=primefaces&v=4.0 HTTP/1.1" 304 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:22:53 +0000] "GET /h2project/javax.faces.resource/primefaces.css.faces?ln=primefaces&v=4.0 HTTP/1.1" 304 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:22:53 +0000] "GET /h2project/javax.faces.resource/js/main.js.faces HTTP/1.1" 304 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:22:53 +0000] "GET /h2project/javax.faces.resource/js/primefaces-locale.js.faces HTTP/1.1" 304 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:22:53 +0000] "GET /h2project/javax.faces.resource/primefaces.js.faces?ln=primefaces&v=4.0 HTTP/1.1" 304 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:22:53 +0000] "GET /h2project/javax.faces.resource/layout/layout.js.faces?ln=primefaces&v=4.0 HTTP/1.1" 304 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:22:53 +0000] "GET /h2project/javax.faces.resource/icons/ajaxloading.gif.faces HTTP/1.1" 200 634 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:22:53 +0000] "GET /h2project/javax.faces.resource/icons/cross.png.faces HTTP/1.1" 200 655 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:22:53 +0000] "GET /h2project/javax.faces.resource/icons/pencil.png.faces HTTP/1.1" 200 450 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:22:53 +0000] "GET /h2project/javax.faces.resource/icons/excel.png.faces HTTP/1.1" 200 601 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:22:53 +0000] "GET /h2project/javax.faces.resource/icons/eye.png.faces HTTP/1.1" 200 750 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:22:53 +0000] "GET /h2project/javax.faces.resource/icons/find.png.faces HTTP/1.1" 200 659 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:22:58 +0000] "POST /h2project/domain/addressSelect.faces HTTP/1.1" 200 320 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:22:59 +0000] "POST /h2project/domain/addressSelect.faces HTTP/1.1" 200 321 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:23:03 +0000] "POST /h2project/domain/addressSelect.faces HTTP/1.1" 200 1187 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:23:08 +0000] "POST /h2project/domain/addressSelect.faces HTTP/1.1" 200 1481 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:23:13 +0000] "POST /h2project/domain/addressSelect.faces HTTP/1.1" 200 321 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:23:19 +0000] "POST /h2project/domain/addressSelect.faces HTTP/1.1" 200 320 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:23:21 +0000] "POST /h2project/domain/addressSelect.faces HTTP/1.1" 200 321 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:23:25 +0000] "POST /h2project/domain/addressSelect.faces HTTP/1.1" 200 1297 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:24:51 +0000] "POST /h2project/domain/addressSelect.faces HTTP/1.1" 302 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:24:51 +0000] "GET /h2project/home.faces HTTP/1.1" 200 3435 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:24:52 +0000] "GET /h2project/javax.faces.resource/theme.css.faces?ln=primefaces-bootstrap HTTP/1.1" 304 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:24:52 +0000] "GET /h2project/javax.faces.resource/primefaces.css.faces?ln=primefaces&v=4.0 HTTP/1.1" 304 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:24:52 +0000] "GET /h2project/javax.faces.resource/jquery/jquery.js.faces?ln=primefaces&v=4.0 HTTP/1.1" 304 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:24:52 +0000] "GET /h2project/javax.faces.resource/layout/layout.js.faces?ln=primefaces&v=4.0 HTTP/1.1" 304 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:24:52 +0000] "GET /h2project/javax.faces.resource/layout/layout.css.faces?ln=primefaces&v=4.0 HTTP/1.1" 304 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:24:52 +0000] "GET /h2project/javax.faces.resource/js/main.js.faces HTTP/1.1" 304 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:24:52 +0000] "GET /h2project/javax.faces.resource/css/main.css.faces HTTP/1.1" 304 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:24:52 +0000] "GET /h2project/javax.faces.resource/jquery/jquery-plugins.js.faces?ln=primefaces&v=4.0 HTTP/1.1" 304 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:24:52 +0000] "GET /h2project/javax.faces.resource/js/primefaces-locale.js.faces HTTP/1.1" 304 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:24:52 +0000] "GET /h2project/javax.faces.resource/primefaces.js.faces?ln=primefaces&v=4.0 HTTP/1.1" 304 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:24:52 +0000] "GET /h2project/javax.faces.resource/jsf.js.faces?ln=javax.faces&stage=Development HTTP/1.1" 304 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:24:59 +0000] "POST /h2project/home.faces HTTP/1.1" 200 147 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:24:59 +0000] "GET /h2project/domain/bookSelect.faces?_cid=3c1 HTTP/1.1" 200 6105 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:25:00 +0000] "GET /h2project/javax.faces.resource/css/main.css.faces HTTP/1.1" 304 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:25:00 +0000] "GET /h2project/javax.faces.resource/jquery/jquery-plugins.js.faces?ln=primefaces&v=4.0 HTTP/1.1" 304 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:25:00 +0000] "GET /h2project/javax.faces.resource/theme.css.faces?ln=primefaces-bootstrap HTTP/1.1" 304 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:25:00 +0000] "GET /h2project/javax.faces.resource/primefaces.js.faces?ln=primefaces&v=4.0 HTTP/1.1" 304 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:25:00 +0000] "GET /h2project/javax.faces.resource/js/main.js.faces HTTP/1.1" 304 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:25:00 +0000] "GET /h2project/javax.faces.resource/primefaces.css.faces?ln=primefaces&v=4.0 HTTP/1.1" 304 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:25:00 +0000] "GET /h2project/javax.faces.resource/jquery/jquery.js.faces?ln=primefaces&v=4.0 HTTP/1.1" 304 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:25:00 +0000] "GET /h2project/javax.faces.resource/layout/layout.css.faces?ln=primefaces&v=4.0 HTTP/1.1" 304 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:25:00 +0000] "GET /h2project/javax.faces.resource/js/primefaces-locale.js.faces HTTP/1.1" 304 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:25:00 +0000] "GET /h2project/javax.faces.resource/layout/layout.js.faces?ln=primefaces&v=4.0 HTTP/1.1" 304 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:25:00 +0000] "GET /h2project/javax.faces.resource/icons/ajaxloading.gif.faces HTTP/1.1" 304 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:25:03 +0000] "POST /h2project/domain/bookSelect.faces HTTP/1.1" 200 145 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:25:03 +0000] "GET /h2project/domain/bookEdit.faces?_cid=3c2 HTTP/1.1" 200 4035 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:25:05 +0000] "GET /h2project/javax.faces.resource/css/main.css.faces HTTP/1.1" 304 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:25:05 +0000] "GET /h2project/javax.faces.resource/jquery/jquery.js.faces?ln=primefaces&v=4.0 HTTP/1.1" 304 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:25:05 +0000] "GET /h2project/javax.faces.resource/primefaces.js.faces?ln=primefaces&v=4.0 HTTP/1.1" 304 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:25:05 +0000] "GET /h2project/javax.faces.resource/primefaces.css.faces?ln=primefaces&v=4.0 HTTP/1.1" 304 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:25:05 +0000] "GET /h2project/javax.faces.resource/js/main.js.faces HTTP/1.1" 304 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:25:05 +0000] "GET /h2project/javax.faces.resource/jquery/jquery-plugins.js.faces?ln=primefaces&v=4.0 HTTP/1.1" 304 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:25:05 +0000] "GET /h2project/javax.faces.resource/theme.css.faces?ln=primefaces-bootstrap HTTP/1.1" 304 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:25:05 +0000] "GET /h2project/javax.faces.resource/layout/layout.js.faces?ln=primefaces&v=4.0 HTTP/1.1" 304 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:25:05 +0000] "GET /h2project/javax.faces.resource/layout/layout.css.faces?ln=primefaces&v=4.0 HTTP/1.1" 304 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:25:05 +0000] "GET /h2project/javax.faces.resource/js/primefaces-locale.js.faces HTTP/1.1" 304 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:25:05 +0000] "GET /h2project/javax.faces.resource/icons/add.png.faces HTTP/1.1" 200 733 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:25:08 +0000] "POST /h2project/domain/bookEdit.faces HTTP/1.1" 200 463 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:25:08 +0000] "POST /h2project/domain/bookEdit.faces HTTP/1.1" 200 190 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:25:10 +0000] "POST /h2project/domain/bookEdit.faces HTTP/1.1" 302 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:25:11 +0000] "GET /h2project/domain/bookSelect.faces?_cid=3c1 HTTP/1.1" 200 6141 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:25:11 +0000] "GET /h2project/javax.faces.resource/theme.css.faces?ln=primefaces-bootstrap HTTP/1.1" 304 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:25:11 +0000] "GET /h2project/javax.faces.resource/css/main.css.faces HTTP/1.1" 304 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:25:11 +0000] "GET /h2project/javax.faces.resource/primefaces.css.faces?ln=primefaces&v=4.0 HTTP/1.1" 304 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:25:11 +0000] "GET /h2project/javax.faces.resource/primefaces.js.faces?ln=primefaces&v=4.0 HTTP/1.1" 304 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:25:11 +0000] "GET /h2project/javax.faces.resource/jquery/jquery-plugins.js.faces?ln=primefaces&v=4.0 HTTP/1.1" 304 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:25:11 +0000] "GET /h2project/javax.faces.resource/jquery/jquery.js.faces?ln=primefaces&v=4.0 HTTP/1.1" 304 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:25:11 +0000] "GET /h2project/javax.faces.resource/js/main.js.faces HTTP/1.1" 304 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:25:11 +0000] "GET /h2project/javax.faces.resource/js/primefaces-locale.js.faces HTTP/1.1" 304 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:25:11 +0000] "GET /h2project/javax.faces.resource/icons/ajaxloading.gif.faces HTTP/1.1" 304 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:25:11 +0000] "GET /h2project/javax.faces.resource/layout/layout.js.faces?ln=primefaces&v=4.0 HTTP/1.1" 304 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:25:11 +0000] "GET /h2project/javax.faces.resource/layout/layout.css.faces?ln=primefaces&v=4.0 HTTP/1.1" 304 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:25:16 +0000] "POST /h2project/domain/bookSelect.faces HTTP/1.1" 200 145 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:25:16 +0000] "GET /h2project/domain/bookEdit.faces?_cid=3c3 HTTP/1.1" 200 4037 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:25:16 +0000] "GET /h2project/javax.faces.resource/css/main.css.faces HTTP/1.1" 304 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:25:16 +0000] "GET /h2project/javax.faces.resource/layout/layout.css.faces?ln=primefaces&v=4.0 HTTP/1.1" 304 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:25:16 +0000] "GET /h2project/javax.faces.resource/theme.css.faces?ln=primefaces-bootstrap HTTP/1.1" 304 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:25:16 +0000] "GET /h2project/javax.faces.resource/primefaces.js.faces?ln=primefaces&v=4.0 HTTP/1.1" 304 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:25:16 +0000] "GET /h2project/javax.faces.resource/jquery/jquery.js.faces?ln=primefaces&v=4.0 HTTP/1.1" 304 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:25:16 +0000] "GET /h2project/javax.faces.resource/js/main.js.faces HTTP/1.1" 304 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:25:16 +0000] "GET /h2project/javax.faces.resource/jquery/jquery-plugins.js.faces?ln=primefaces&v=4.0 HTTP/1.1" 304 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:25:16 +0000] "GET /h2project/javax.faces.resource/primefaces.css.faces?ln=primefaces&v=4.0 HTTP/1.1" 304 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:25:16 +0000] "GET /h2project/javax.faces.resource/js/primefaces-locale.js.faces HTTP/1.1" 304 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:25:16 +0000] "GET /h2project/javax.faces.resource/layout/layout.js.faces?ln=primefaces&v=4.0 HTTP/1.1" 304 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:25:21 +0000] "POST /h2project/domain/bookEdit.faces HTTP/1.1" 200 461 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:25:21 +0000] "POST /h2project/domain/bookEdit.faces HTTP/1.1" 200 191 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:25:23 +0000] "POST /h2project/domain/bookEdit.faces HTTP/1.1" 302 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:25:23 +0000] "GET /h2project/domain/bookSelect.faces?_cid=3c1 HTTP/1.1" 200 6139 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:25:24 +0000] "GET /h2project/javax.faces.resource/theme.css.faces?ln=primefaces-bootstrap HTTP/1.1" 304 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:25:24 +0000] "GET /h2project/javax.faces.resource/css/main.css.faces HTTP/1.1" 304 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:25:24 +0000] "GET /h2project/javax.faces.resource/layout/layout.js.faces?ln=primefaces&v=4.0 HTTP/1.1" 304 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:25:24 +0000] "GET /h2project/javax.faces.resource/primefaces.js.faces?ln=primefaces&v=4.0 HTTP/1.1" 304 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:25:24 +0000] "GET /h2project/javax.faces.resource/js/primefaces-locale.js.faces HTTP/1.1" 304 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:25:24 +0000] "GET /h2project/javax.faces.resource/jquery/jquery-plugins.js.faces?ln=primefaces&v=4.0 HTTP/1.1" 304 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:25:24 +0000] "GET /h2project/javax.faces.resource/primefaces.css.faces?ln=primefaces&v=4.0 HTTP/1.1" 304 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:25:24 +0000] "GET /h2project/javax.faces.resource/js/main.js.faces HTTP/1.1" 304 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:25:24 +0000] "GET /h2project/javax.faces.resource/layout/layout.css.faces?ln=primefaces&v=4.0 HTTP/1.1" 304 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:25:24 +0000] "GET /h2project/javax.faces.resource/jquery/jquery.js.faces?ln=primefaces&v=4.0 HTTP/1.1" 304 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:25:24 +0000] "GET /h2project/javax.faces.resource/icons/ajaxloading.gif.faces HTTP/1.1" 304 0 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:26:00 +0000] "GET /h2project/monitoring HTTP/1.1" 200 16507 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:26:02 +0000] "GET /h2project/monitoring?width=200&height=50&graph=usedConnections HTTP/1.1" 200 3591 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:26:02 +0000] "GET /h2project/monitoring?width=200&height=50&graph=usedMemory HTTP/1.1" 200 3598 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:26:02 +0000] "GET /h2project/monitoring?width=200&height=50&graph=activeConnections HTTP/1.1" 200 3673 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:26:02 +0000] "GET /h2project/monitoring?width=200&height=50&graph=activeThreads HTTP/1.1" 200 3684 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:26:02 +0000] "GET /h2project/monitoring?width=200&height=50&graph=cpu HTTP/1.1" 200 3456 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:26:02 +0000] "GET /h2project/monitoring?width=200&height=50&graph=httpSessions HTTP/1.1" 200 3735 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:26:02 +0000] "GET /h2project/monitoring?width=200&height=50&graph=httpHitsRate HTTP/1.1" 200 3606 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:26:02 +0000] "GET /h2project/monitoring?width=200&height=50&graph=jsfSystemErrors HTTP/1.1" 200 3619 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:26:02 +0000] "GET /h2project/monitoring?width=200&height=50&graph=jsfMeanTimes HTTP/1.1" 200 3795 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:26:02 +0000] "GET /h2project/monitoring?width=200&height=50&graph=sqlHitsRate HTTP/1.1" 200 3405 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:26:02 +0000] "GET /h2project/monitoring?width=200&height=50&graph=httpSystemErrors HTTP/1.1" 200 3374 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:26:02 +0000] "GET /h2project/monitoring?width=200&height=50&graph=httpMeanTimes HTTP/1.1" 200 3863 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:26:03 +0000] "GET /h2project/monitoring?width=200&height=50&graph=sqlSystemErrors HTTP/1.1" 200 3451 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:26:03 +0000] "GET /h2project/monitoring?width=200&height=50&graph=gc HTTP/1.1" 200 3772 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:26:03 +0000] "GET /h2project/monitoring?width=200&height=50&graph=threadCount HTTP/1.1" 200 3714 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:26:02 +0000] "GET /h2project/monitoring?width=200&height=50&graph=jsfHitsRate HTTP/1.1" 200 3725 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:26:03 +0000] "GET /h2project/monitoring?width=200&height=50&graph=sqlMeanTimes HTTP/1.1" 200 3793 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:26:03 +0000] "GET /h2project/monitoring?width=200&height=50&graph=usedNonHeapMemory HTTP/1.1" 200 3784 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:26:03 +0000] "GET /h2project/monitoring?width=200&height=50&graph=httpSessionsMeanAge HTTP/1.1" 200 3928 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:26:03 +0000] "GET /h2project/monitoring?width=200&height=50&graph=transactionsRate HTTP/1.1" 200 3607 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:26:03 +0000] "GET /h2project/monitoring?width=200&height=50&graph=loadedClassesCount HTTP/1.1" 200 3857 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:26:03 +0000] "GET /h2project/monitoring?width=200&height=50&graph=jspHitsRate HTTP/1.1" 200 3480 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:26:03 +0000] "GET /h2project/monitoring?width=200&height=50&graph=usedPhysicalMemorySize HTTP/1.1" 200 3918 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:26:03 +0000] "GET /h2project/monitoring?width=200&height=50&graph=usedSwapSpaceSize HTTP/1.1" 200 3493 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:26:03 +0000] "GET /h2project/monitoring?width=200&height=50&graph=jspMeanTimes HTTP/1.1" 200 3618 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:26:03 +0000] "GET /h2project/monitoring?resource=bar/rb_1.gif HTTP/1.1" 200 118 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:26:03 +0000] "GET /h2project/monitoring?width=200&height=50&graph=jspSystemErrors HTTP/1.1" 200 3552 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:28:06 +0000] "GET /h2project/monitoring?part=jndi HTTP/1.1" 200 2280 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:28:06 +0000] "GET /h2project/monitoring?resource=action_back.png HTTP/1.1" 200 398 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:28:06 +0000] "GET /h2project/monitoring?resource=folder.png HTTP/1.1" 200 397 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:28:06 +0000] "GET /h2project/monitoring?resource=action_home.png HTTP/1.1" 200 606 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:28:09 +0000] "GET /h2project/monitoring?part=jndi&path=comp HTTP/1.1" 200 2342 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:28:11 +0000] "GET /h2project/monitoring?part=jndi&path=comp/env HTTP/1.1" 200 2084 
+0:0:0:0:0:0:0:1 -  -  [10/May/2015:16:28:21 +0000] "GET /h2project/monitoring?part=mbeans HTTP/1.1" 200 7224 
diff --git a/target/test-classes/com/h2/demo/domain/AccountTest.class b/target/test-classes/com/h2/demo/domain/AccountTest.class
new file mode 100644
index 0000000..49bea10
Binary files /dev/null and b/target/test-classes/com/h2/demo/domain/AccountTest.class differ
diff --git a/target/test-classes/com/h2/demo/domain/AddressTest.class b/target/test-classes/com/h2/demo/domain/AddressTest.class
new file mode 100644
index 0000000..7d6733c
Binary files /dev/null and b/target/test-classes/com/h2/demo/domain/AddressTest.class differ
diff --git a/target/test-classes/com/h2/demo/domain/AuditLogTest.class b/target/test-classes/com/h2/demo/domain/AuditLogTest.class
new file mode 100644
index 0000000..6f12258
Binary files /dev/null and b/target/test-classes/com/h2/demo/domain/AuditLogTest.class differ
diff --git a/target/test-classes/com/h2/demo/domain/BookTest.class b/target/test-classes/com/h2/demo/domain/BookTest.class
new file mode 100644
index 0000000..5104f01
Binary files /dev/null and b/target/test-classes/com/h2/demo/domain/BookTest.class differ
diff --git a/target/test-classes/com/h2/demo/domain/DocumentTest.class b/target/test-classes/com/h2/demo/domain/DocumentTest.class
new file mode 100644
index 0000000..ce6e789
Binary files /dev/null and b/target/test-classes/com/h2/demo/domain/DocumentTest.class differ
diff --git a/target/test-classes/com/h2/demo/domain/LegacyPkTest.class b/target/test-classes/com/h2/demo/domain/LegacyPkTest.class
new file mode 100644
index 0000000..551ba92
Binary files /dev/null and b/target/test-classes/com/h2/demo/domain/LegacyPkTest.class differ
diff --git a/target/test-classes/com/h2/demo/domain/LegacyTest.class b/target/test-classes/com/h2/demo/domain/LegacyTest.class
new file mode 100644
index 0000000..111341d
Binary files /dev/null and b/target/test-classes/com/h2/demo/domain/LegacyTest.class differ
diff --git a/target/test-classes/com/h2/demo/domain/MoreTypesDemoTest.class b/target/test-classes/com/h2/demo/domain/MoreTypesDemoTest.class
new file mode 100644
index 0000000..48b5a16
Binary files /dev/null and b/target/test-classes/com/h2/demo/domain/MoreTypesDemoTest.class differ
diff --git a/target/test-classes/com/h2/demo/domain/RoleTest.class b/target/test-classes/com/h2/demo/domain/RoleTest.class
new file mode 100644
index 0000000..ecda514
Binary files /dev/null and b/target/test-classes/com/h2/demo/domain/RoleTest.class differ
diff --git a/target/test-classes/com/h2/demo/domain/SavedSearchTest.class b/target/test-classes/com/h2/demo/domain/SavedSearchTest.class
new file mode 100644
index 0000000..28e6adc
Binary files /dev/null and b/target/test-classes/com/h2/demo/domain/SavedSearchTest.class differ
diff --git a/target/test-classes/com/h2/demo/repository/AccountGenerator.class b/target/test-classes/com/h2/demo/repository/AccountGenerator.class
new file mode 100644
index 0000000..1a1ebb1
Binary files /dev/null and b/target/test-classes/com/h2/demo/repository/AccountGenerator.class differ
diff --git a/target/test-classes/com/h2/demo/repository/AccountRepositoryIT.class b/target/test-classes/com/h2/demo/repository/AccountRepositoryIT.class
new file mode 100644
index 0000000..832070a
Binary files /dev/null and b/target/test-classes/com/h2/demo/repository/AccountRepositoryIT.class differ
diff --git a/target/test-classes/com/h2/demo/repository/AddressGenerator.class b/target/test-classes/com/h2/demo/repository/AddressGenerator.class
new file mode 100644
index 0000000..f92c3b2
Binary files /dev/null and b/target/test-classes/com/h2/demo/repository/AddressGenerator.class differ
diff --git a/target/test-classes/com/h2/demo/repository/AddressRepositoryIT.class b/target/test-classes/com/h2/demo/repository/AddressRepositoryIT.class
new file mode 100644
index 0000000..d1972d1
Binary files /dev/null and b/target/test-classes/com/h2/demo/repository/AddressRepositoryIT.class differ
diff --git a/target/test-classes/com/h2/demo/repository/AuditLogGenerator.class b/target/test-classes/com/h2/demo/repository/AuditLogGenerator.class
new file mode 100644
index 0000000..1639e64
Binary files /dev/null and b/target/test-classes/com/h2/demo/repository/AuditLogGenerator.class differ
diff --git a/target/test-classes/com/h2/demo/repository/AuditLogRepositoryIT.class b/target/test-classes/com/h2/demo/repository/AuditLogRepositoryIT.class
new file mode 100644
index 0000000..5051af0
Binary files /dev/null and b/target/test-classes/com/h2/demo/repository/AuditLogRepositoryIT.class differ
diff --git a/target/test-classes/com/h2/demo/repository/BookGenerator.class b/target/test-classes/com/h2/demo/repository/BookGenerator.class
new file mode 100644
index 0000000..50793b1
Binary files /dev/null and b/target/test-classes/com/h2/demo/repository/BookGenerator.class differ
diff --git a/target/test-classes/com/h2/demo/repository/BookRepositoryIT.class b/target/test-classes/com/h2/demo/repository/BookRepositoryIT.class
new file mode 100644
index 0000000..5ad501f
Binary files /dev/null and b/target/test-classes/com/h2/demo/repository/BookRepositoryIT.class differ
diff --git a/target/test-classes/com/h2/demo/repository/DocumentGenerator.class b/target/test-classes/com/h2/demo/repository/DocumentGenerator.class
new file mode 100644
index 0000000..deb792f
Binary files /dev/null and b/target/test-classes/com/h2/demo/repository/DocumentGenerator.class differ
diff --git a/target/test-classes/com/h2/demo/repository/DocumentRepositoryIT.class b/target/test-classes/com/h2/demo/repository/DocumentRepositoryIT.class
new file mode 100644
index 0000000..1ef8258
Binary files /dev/null and b/target/test-classes/com/h2/demo/repository/DocumentRepositoryIT.class differ
diff --git a/target/test-classes/com/h2/demo/repository/LegacyGenerator.class b/target/test-classes/com/h2/demo/repository/LegacyGenerator.class
new file mode 100644
index 0000000..16ffcfa
Binary files /dev/null and b/target/test-classes/com/h2/demo/repository/LegacyGenerator.class differ
diff --git a/target/test-classes/com/h2/demo/repository/LegacyRepositoryIT.class b/target/test-classes/com/h2/demo/repository/LegacyRepositoryIT.class
new file mode 100644
index 0000000..b35de9b
Binary files /dev/null and b/target/test-classes/com/h2/demo/repository/LegacyRepositoryIT.class differ
diff --git a/target/test-classes/com/h2/demo/repository/MoreTypesDemoGenerator.class b/target/test-classes/com/h2/demo/repository/MoreTypesDemoGenerator.class
new file mode 100644
index 0000000..87f0fc8
Binary files /dev/null and b/target/test-classes/com/h2/demo/repository/MoreTypesDemoGenerator.class differ
diff --git a/target/test-classes/com/h2/demo/repository/MoreTypesDemoRepositoryIT.class b/target/test-classes/com/h2/demo/repository/MoreTypesDemoRepositoryIT.class
new file mode 100644
index 0000000..57203d0
Binary files /dev/null and b/target/test-classes/com/h2/demo/repository/MoreTypesDemoRepositoryIT.class differ
diff --git a/target/test-classes/com/h2/demo/repository/RoleGenerator.class b/target/test-classes/com/h2/demo/repository/RoleGenerator.class
new file mode 100644
index 0000000..c464a06
Binary files /dev/null and b/target/test-classes/com/h2/demo/repository/RoleGenerator.class differ
diff --git a/target/test-classes/com/h2/demo/repository/RoleRepositoryIT.class b/target/test-classes/com/h2/demo/repository/RoleRepositoryIT.class
new file mode 100644
index 0000000..0c2f36f
Binary files /dev/null and b/target/test-classes/com/h2/demo/repository/RoleRepositoryIT.class differ
diff --git a/target/test-classes/com/h2/demo/repository/SavedSearchGenerator.class b/target/test-classes/com/h2/demo/repository/SavedSearchGenerator.class
new file mode 100644
index 0000000..0dc0c81
Binary files /dev/null and b/target/test-classes/com/h2/demo/repository/SavedSearchGenerator.class differ
diff --git a/target/test-classes/com/h2/demo/repository/SavedSearchRepositoryIT.class b/target/test-classes/com/h2/demo/repository/SavedSearchRepositoryIT.class
new file mode 100644
index 0000000..2c799c5
Binary files /dev/null and b/target/test-classes/com/h2/demo/repository/SavedSearchRepositoryIT.class differ
diff --git a/target/test-classes/com/h2/demo/repository/support/ByNamedQueryUtilIT.class b/target/test-classes/com/h2/demo/repository/support/ByNamedQueryUtilIT.class
new file mode 100644
index 0000000..c6c35b4
Binary files /dev/null and b/target/test-classes/com/h2/demo/repository/support/ByNamedQueryUtilIT.class differ
diff --git a/target/test-classes/com/h2/demo/util/IntegrationSampleIT.class b/target/test-classes/com/h2/demo/util/IntegrationSampleIT.class
new file mode 100644
index 0000000..f80dbd1
Binary files /dev/null and b/target/test-classes/com/h2/demo/util/IntegrationSampleIT.class differ
diff --git a/target/test-classes/com/h2/demo/util/ValueGenerator.class b/target/test-classes/com/h2/demo/util/ValueGenerator.class
new file mode 100644
index 0000000..117a428
Binary files /dev/null and b/target/test-classes/com/h2/demo/util/ValueGenerator.class differ
diff --git a/target/test-classes/com/h2/demo/web/selenium/ErrorsIT$AjaxErrors.class b/target/test-classes/com/h2/demo/web/selenium/ErrorsIT$AjaxErrors.class
new file mode 100644
index 0000000..75925fe
Binary files /dev/null and b/target/test-classes/com/h2/demo/web/selenium/ErrorsIT$AjaxErrors.class differ
diff --git a/target/test-classes/com/h2/demo/web/selenium/ErrorsIT.class b/target/test-classes/com/h2/demo/web/selenium/ErrorsIT.class
new file mode 100644
index 0000000..657ba0a
Binary files /dev/null and b/target/test-classes/com/h2/demo/web/selenium/ErrorsIT.class differ
diff --git a/target/test-classes/com/h2/demo/web/selenium/page/AnonymousHomePage.class b/target/test-classes/com/h2/demo/web/selenium/page/AnonymousHomePage.class
new file mode 100644
index 0000000..9de11c8
Binary files /dev/null and b/target/test-classes/com/h2/demo/web/selenium/page/AnonymousHomePage.class differ
diff --git a/target/test-classes/com/h2/demo/web/selenium/page/HomePage.class b/target/test-classes/com/h2/demo/web/selenium/page/HomePage.class
new file mode 100644
index 0000000..1df535d
Binary files /dev/null and b/target/test-classes/com/h2/demo/web/selenium/page/HomePage.class differ
diff --git a/target/test-classes/com/h2/demo/web/selenium/page/LoggedHomePage.class b/target/test-classes/com/h2/demo/web/selenium/page/LoggedHomePage.class
new file mode 100644
index 0000000..22d4d80
Binary files /dev/null and b/target/test-classes/com/h2/demo/web/selenium/page/LoggedHomePage.class differ
diff --git a/target/test-classes/com/h2/demo/web/selenium/page/LoginPage.class b/target/test-classes/com/h2/demo/web/selenium/page/LoginPage.class
new file mode 100644
index 0000000..2efd997
Binary files /dev/null and b/target/test-classes/com/h2/demo/web/selenium/page/LoginPage.class differ
diff --git a/target/test-classes/com/h2/demo/web/selenium/page/account/AccountEdit$AccountEditForm.class b/target/test-classes/com/h2/demo/web/selenium/page/account/AccountEdit$AccountEditForm.class
new file mode 100644
index 0000000..58a20b8
Binary files /dev/null and b/target/test-classes/com/h2/demo/web/selenium/page/account/AccountEdit$AccountEditForm.class differ
diff --git a/target/test-classes/com/h2/demo/web/selenium/page/account/AccountEdit$AccountEditTabs.class b/target/test-classes/com/h2/demo/web/selenium/page/account/AccountEdit$AccountEditTabs.class
new file mode 100644
index 0000000..e3584f4
Binary files /dev/null and b/target/test-classes/com/h2/demo/web/selenium/page/account/AccountEdit$AccountEditTabs.class differ
diff --git a/target/test-classes/com/h2/demo/web/selenium/page/account/AccountEdit.class b/target/test-classes/com/h2/demo/web/selenium/page/account/AccountEdit.class
new file mode 100644
index 0000000..03c3ce4
Binary files /dev/null and b/target/test-classes/com/h2/demo/web/selenium/page/account/AccountEdit.class differ
diff --git a/target/test-classes/com/h2/demo/web/selenium/page/account/AccountSearch$AccountSearchForm.class b/target/test-classes/com/h2/demo/web/selenium/page/account/AccountSearch$AccountSearchForm.class
new file mode 100644
index 0000000..1197911
Binary files /dev/null and b/target/test-classes/com/h2/demo/web/selenium/page/account/AccountSearch$AccountSearchForm.class differ
diff --git a/target/test-classes/com/h2/demo/web/selenium/page/account/AccountSearch$AccountSearchOrders.class b/target/test-classes/com/h2/demo/web/selenium/page/account/AccountSearch$AccountSearchOrders.class
new file mode 100644
index 0000000..6dadb86
Binary files /dev/null and b/target/test-classes/com/h2/demo/web/selenium/page/account/AccountSearch$AccountSearchOrders.class differ
diff --git a/target/test-classes/com/h2/demo/web/selenium/page/account/AccountSearch.class b/target/test-classes/com/h2/demo/web/selenium/page/account/AccountSearch.class
new file mode 100644
index 0000000..3b8cd9a
Binary files /dev/null and b/target/test-classes/com/h2/demo/web/selenium/page/account/AccountSearch.class differ
diff --git a/target/test-classes/com/h2/demo/web/selenium/page/address/AddressEdit$AddressEditForm.class b/target/test-classes/com/h2/demo/web/selenium/page/address/AddressEdit$AddressEditForm.class
new file mode 100644
index 0000000..e183b31
Binary files /dev/null and b/target/test-classes/com/h2/demo/web/selenium/page/address/AddressEdit$AddressEditForm.class differ
diff --git a/target/test-classes/com/h2/demo/web/selenium/page/address/AddressEdit$AddressEditTabs.class b/target/test-classes/com/h2/demo/web/selenium/page/address/AddressEdit$AddressEditTabs.class
new file mode 100644
index 0000000..8c186a6
Binary files /dev/null and b/target/test-classes/com/h2/demo/web/selenium/page/address/AddressEdit$AddressEditTabs.class differ
diff --git a/target/test-classes/com/h2/demo/web/selenium/page/address/AddressEdit.class b/target/test-classes/com/h2/demo/web/selenium/page/address/AddressEdit.class
new file mode 100644
index 0000000..a2e3168
Binary files /dev/null and b/target/test-classes/com/h2/demo/web/selenium/page/address/AddressEdit.class differ
diff --git a/target/test-classes/com/h2/demo/web/selenium/page/address/AddressSearch$AddressSearchForm.class b/target/test-classes/com/h2/demo/web/selenium/page/address/AddressSearch$AddressSearchForm.class
new file mode 100644
index 0000000..d907643
Binary files /dev/null and b/target/test-classes/com/h2/demo/web/selenium/page/address/AddressSearch$AddressSearchForm.class differ
diff --git a/target/test-classes/com/h2/demo/web/selenium/page/address/AddressSearch$AddressSearchOrders.class b/target/test-classes/com/h2/demo/web/selenium/page/address/AddressSearch$AddressSearchOrders.class
new file mode 100644
index 0000000..97ca841
Binary files /dev/null and b/target/test-classes/com/h2/demo/web/selenium/page/address/AddressSearch$AddressSearchOrders.class differ
diff --git a/target/test-classes/com/h2/demo/web/selenium/page/address/AddressSearch.class b/target/test-classes/com/h2/demo/web/selenium/page/address/AddressSearch.class
new file mode 100644
index 0000000..308cafb
Binary files /dev/null and b/target/test-classes/com/h2/demo/web/selenium/page/address/AddressSearch.class differ
diff --git a/target/test-classes/com/h2/demo/web/selenium/page/auditlog/AuditLogEdit$AuditLogEditForm.class b/target/test-classes/com/h2/demo/web/selenium/page/auditlog/AuditLogEdit$AuditLogEditForm.class
new file mode 100644
index 0000000..9407d7e
Binary files /dev/null and b/target/test-classes/com/h2/demo/web/selenium/page/auditlog/AuditLogEdit$AuditLogEditForm.class differ
diff --git a/target/test-classes/com/h2/demo/web/selenium/page/auditlog/AuditLogEdit$AuditLogEditTabs.class b/target/test-classes/com/h2/demo/web/selenium/page/auditlog/AuditLogEdit$AuditLogEditTabs.class
new file mode 100644
index 0000000..fc1e323
Binary files /dev/null and b/target/test-classes/com/h2/demo/web/selenium/page/auditlog/AuditLogEdit$AuditLogEditTabs.class differ
diff --git a/target/test-classes/com/h2/demo/web/selenium/page/auditlog/AuditLogEdit.class b/target/test-classes/com/h2/demo/web/selenium/page/auditlog/AuditLogEdit.class
new file mode 100644
index 0000000..206a658
Binary files /dev/null and b/target/test-classes/com/h2/demo/web/selenium/page/auditlog/AuditLogEdit.class differ
diff --git a/target/test-classes/com/h2/demo/web/selenium/page/auditlog/AuditLogSearch$AuditLogSearchForm.class b/target/test-classes/com/h2/demo/web/selenium/page/auditlog/AuditLogSearch$AuditLogSearchForm.class
new file mode 100644
index 0000000..6b2f9bf
Binary files /dev/null and b/target/test-classes/com/h2/demo/web/selenium/page/auditlog/AuditLogSearch$AuditLogSearchForm.class differ
diff --git a/target/test-classes/com/h2/demo/web/selenium/page/auditlog/AuditLogSearch$AuditLogSearchOrders.class b/target/test-classes/com/h2/demo/web/selenium/page/auditlog/AuditLogSearch$AuditLogSearchOrders.class
new file mode 100644
index 0000000..f033cb0
Binary files /dev/null and b/target/test-classes/com/h2/demo/web/selenium/page/auditlog/AuditLogSearch$AuditLogSearchOrders.class differ
diff --git a/target/test-classes/com/h2/demo/web/selenium/page/auditlog/AuditLogSearch.class b/target/test-classes/com/h2/demo/web/selenium/page/auditlog/AuditLogSearch.class
new file mode 100644
index 0000000..4a90ffb
Binary files /dev/null and b/target/test-classes/com/h2/demo/web/selenium/page/auditlog/AuditLogSearch.class differ
diff --git a/target/test-classes/com/h2/demo/web/selenium/page/book/BookEdit$BookEditForm.class b/target/test-classes/com/h2/demo/web/selenium/page/book/BookEdit$BookEditForm.class
new file mode 100644
index 0000000..1b6db91
Binary files /dev/null and b/target/test-classes/com/h2/demo/web/selenium/page/book/BookEdit$BookEditForm.class differ
diff --git a/target/test-classes/com/h2/demo/web/selenium/page/book/BookEdit$BookEditTabs.class b/target/test-classes/com/h2/demo/web/selenium/page/book/BookEdit$BookEditTabs.class
new file mode 100644
index 0000000..07c9383
Binary files /dev/null and b/target/test-classes/com/h2/demo/web/selenium/page/book/BookEdit$BookEditTabs.class differ
diff --git a/target/test-classes/com/h2/demo/web/selenium/page/book/BookEdit.class b/target/test-classes/com/h2/demo/web/selenium/page/book/BookEdit.class
new file mode 100644
index 0000000..38ae39e
Binary files /dev/null and b/target/test-classes/com/h2/demo/web/selenium/page/book/BookEdit.class differ
diff --git a/target/test-classes/com/h2/demo/web/selenium/page/book/BookSearch$BookSearchForm.class b/target/test-classes/com/h2/demo/web/selenium/page/book/BookSearch$BookSearchForm.class
new file mode 100644
index 0000000..e3eab2c
Binary files /dev/null and b/target/test-classes/com/h2/demo/web/selenium/page/book/BookSearch$BookSearchForm.class differ
diff --git a/target/test-classes/com/h2/demo/web/selenium/page/book/BookSearch$BookSearchOrders.class b/target/test-classes/com/h2/demo/web/selenium/page/book/BookSearch$BookSearchOrders.class
new file mode 100644
index 0000000..9d395a5
Binary files /dev/null and b/target/test-classes/com/h2/demo/web/selenium/page/book/BookSearch$BookSearchOrders.class differ
diff --git a/target/test-classes/com/h2/demo/web/selenium/page/book/BookSearch.class b/target/test-classes/com/h2/demo/web/selenium/page/book/BookSearch.class
new file mode 100644
index 0000000..fbd6b74
Binary files /dev/null and b/target/test-classes/com/h2/demo/web/selenium/page/book/BookSearch.class differ
diff --git a/target/test-classes/com/h2/demo/web/selenium/page/document/DocumentEdit$DocumentEditForm.class b/target/test-classes/com/h2/demo/web/selenium/page/document/DocumentEdit$DocumentEditForm.class
new file mode 100644
index 0000000..c69cdab
Binary files /dev/null and b/target/test-classes/com/h2/demo/web/selenium/page/document/DocumentEdit$DocumentEditForm.class differ
diff --git a/target/test-classes/com/h2/demo/web/selenium/page/document/DocumentEdit$DocumentEditTabs.class b/target/test-classes/com/h2/demo/web/selenium/page/document/DocumentEdit$DocumentEditTabs.class
new file mode 100644
index 0000000..81002fb
Binary files /dev/null and b/target/test-classes/com/h2/demo/web/selenium/page/document/DocumentEdit$DocumentEditTabs.class differ
diff --git a/target/test-classes/com/h2/demo/web/selenium/page/document/DocumentEdit.class b/target/test-classes/com/h2/demo/web/selenium/page/document/DocumentEdit.class
new file mode 100644
index 0000000..cd8cc46
Binary files /dev/null and b/target/test-classes/com/h2/demo/web/selenium/page/document/DocumentEdit.class differ
diff --git a/target/test-classes/com/h2/demo/web/selenium/page/document/DocumentSearch$DocumentSearchForm.class b/target/test-classes/com/h2/demo/web/selenium/page/document/DocumentSearch$DocumentSearchForm.class
new file mode 100644
index 0000000..5ea0a5e
Binary files /dev/null and b/target/test-classes/com/h2/demo/web/selenium/page/document/DocumentSearch$DocumentSearchForm.class differ
diff --git a/target/test-classes/com/h2/demo/web/selenium/page/document/DocumentSearch$DocumentSearchOrders.class b/target/test-classes/com/h2/demo/web/selenium/page/document/DocumentSearch$DocumentSearchOrders.class
new file mode 100644
index 0000000..3dd3c53
Binary files /dev/null and b/target/test-classes/com/h2/demo/web/selenium/page/document/DocumentSearch$DocumentSearchOrders.class differ
diff --git a/target/test-classes/com/h2/demo/web/selenium/page/document/DocumentSearch.class b/target/test-classes/com/h2/demo/web/selenium/page/document/DocumentSearch.class
new file mode 100644
index 0000000..688c352
Binary files /dev/null and b/target/test-classes/com/h2/demo/web/selenium/page/document/DocumentSearch.class differ
diff --git a/target/test-classes/com/h2/demo/web/selenium/page/legacy/LegacyEdit$LegacyEditForm.class b/target/test-classes/com/h2/demo/web/selenium/page/legacy/LegacyEdit$LegacyEditForm.class
new file mode 100644
index 0000000..0fb281d
Binary files /dev/null and b/target/test-classes/com/h2/demo/web/selenium/page/legacy/LegacyEdit$LegacyEditForm.class differ
diff --git a/target/test-classes/com/h2/demo/web/selenium/page/legacy/LegacyEdit$LegacyEditTabs.class b/target/test-classes/com/h2/demo/web/selenium/page/legacy/LegacyEdit$LegacyEditTabs.class
new file mode 100644
index 0000000..c1fd221
Binary files /dev/null and b/target/test-classes/com/h2/demo/web/selenium/page/legacy/LegacyEdit$LegacyEditTabs.class differ
diff --git a/target/test-classes/com/h2/demo/web/selenium/page/legacy/LegacyEdit.class b/target/test-classes/com/h2/demo/web/selenium/page/legacy/LegacyEdit.class
new file mode 100644
index 0000000..696cc52
Binary files /dev/null and b/target/test-classes/com/h2/demo/web/selenium/page/legacy/LegacyEdit.class differ
diff --git a/target/test-classes/com/h2/demo/web/selenium/page/legacy/LegacySearch$LegacySearchForm.class b/target/test-classes/com/h2/demo/web/selenium/page/legacy/LegacySearch$LegacySearchForm.class
new file mode 100644
index 0000000..c94c401
Binary files /dev/null and b/target/test-classes/com/h2/demo/web/selenium/page/legacy/LegacySearch$LegacySearchForm.class differ
diff --git a/target/test-classes/com/h2/demo/web/selenium/page/legacy/LegacySearch$LegacySearchOrders.class b/target/test-classes/com/h2/demo/web/selenium/page/legacy/LegacySearch$LegacySearchOrders.class
new file mode 100644
index 0000000..3dbb8ad
Binary files /dev/null and b/target/test-classes/com/h2/demo/web/selenium/page/legacy/LegacySearch$LegacySearchOrders.class differ
diff --git a/target/test-classes/com/h2/demo/web/selenium/page/legacy/LegacySearch.class b/target/test-classes/com/h2/demo/web/selenium/page/legacy/LegacySearch.class
new file mode 100644
index 0000000..1fc2d5d
Binary files /dev/null and b/target/test-classes/com/h2/demo/web/selenium/page/legacy/LegacySearch.class differ
diff --git a/target/test-classes/com/h2/demo/web/selenium/page/moretypesdemo/MoreTypesDemoEdit$MoreTypesDemoEditForm.class b/target/test-classes/com/h2/demo/web/selenium/page/moretypesdemo/MoreTypesDemoEdit$MoreTypesDemoEditForm.class
new file mode 100644
index 0000000..77789e1
Binary files /dev/null and b/target/test-classes/com/h2/demo/web/selenium/page/moretypesdemo/MoreTypesDemoEdit$MoreTypesDemoEditForm.class differ
diff --git a/target/test-classes/com/h2/demo/web/selenium/page/moretypesdemo/MoreTypesDemoEdit$MoreTypesDemoEditTabs.class b/target/test-classes/com/h2/demo/web/selenium/page/moretypesdemo/MoreTypesDemoEdit$MoreTypesDemoEditTabs.class
new file mode 100644
index 0000000..0eeb456
Binary files /dev/null and b/target/test-classes/com/h2/demo/web/selenium/page/moretypesdemo/MoreTypesDemoEdit$MoreTypesDemoEditTabs.class differ
diff --git a/target/test-classes/com/h2/demo/web/selenium/page/moretypesdemo/MoreTypesDemoEdit.class b/target/test-classes/com/h2/demo/web/selenium/page/moretypesdemo/MoreTypesDemoEdit.class
new file mode 100644
index 0000000..db1e9b3
Binary files /dev/null and b/target/test-classes/com/h2/demo/web/selenium/page/moretypesdemo/MoreTypesDemoEdit.class differ
diff --git a/target/test-classes/com/h2/demo/web/selenium/page/moretypesdemo/MoreTypesDemoSearch$MoreTypesDemoSearchForm.class b/target/test-classes/com/h2/demo/web/selenium/page/moretypesdemo/MoreTypesDemoSearch$MoreTypesDemoSearchForm.class
new file mode 100644
index 0000000..903f47a
Binary files /dev/null and b/target/test-classes/com/h2/demo/web/selenium/page/moretypesdemo/MoreTypesDemoSearch$MoreTypesDemoSearchForm.class differ
diff --git a/target/test-classes/com/h2/demo/web/selenium/page/moretypesdemo/MoreTypesDemoSearch$MoreTypesDemoSearchOrders.class b/target/test-classes/com/h2/demo/web/selenium/page/moretypesdemo/MoreTypesDemoSearch$MoreTypesDemoSearchOrders.class
new file mode 100644
index 0000000..af5707d
Binary files /dev/null and b/target/test-classes/com/h2/demo/web/selenium/page/moretypesdemo/MoreTypesDemoSearch$MoreTypesDemoSearchOrders.class differ
diff --git a/target/test-classes/com/h2/demo/web/selenium/page/moretypesdemo/MoreTypesDemoSearch.class b/target/test-classes/com/h2/demo/web/selenium/page/moretypesdemo/MoreTypesDemoSearch.class
new file mode 100644
index 0000000..215f977
Binary files /dev/null and b/target/test-classes/com/h2/demo/web/selenium/page/moretypesdemo/MoreTypesDemoSearch.class differ
diff --git a/target/test-classes/com/h2/demo/web/selenium/page/role/RoleEdit$RoleEditForm.class b/target/test-classes/com/h2/demo/web/selenium/page/role/RoleEdit$RoleEditForm.class
new file mode 100644
index 0000000..950d97b
Binary files /dev/null and b/target/test-classes/com/h2/demo/web/selenium/page/role/RoleEdit$RoleEditForm.class differ
diff --git a/target/test-classes/com/h2/demo/web/selenium/page/role/RoleEdit$RoleEditTabs.class b/target/test-classes/com/h2/demo/web/selenium/page/role/RoleEdit$RoleEditTabs.class
new file mode 100644
index 0000000..39b9ae1
Binary files /dev/null and b/target/test-classes/com/h2/demo/web/selenium/page/role/RoleEdit$RoleEditTabs.class differ
diff --git a/target/test-classes/com/h2/demo/web/selenium/page/role/RoleEdit.class b/target/test-classes/com/h2/demo/web/selenium/page/role/RoleEdit.class
new file mode 100644
index 0000000..128dd02
Binary files /dev/null and b/target/test-classes/com/h2/demo/web/selenium/page/role/RoleEdit.class differ
diff --git a/target/test-classes/com/h2/demo/web/selenium/page/role/RoleSearch$RoleSearchForm.class b/target/test-classes/com/h2/demo/web/selenium/page/role/RoleSearch$RoleSearchForm.class
new file mode 100644
index 0000000..f87ba12
Binary files /dev/null and b/target/test-classes/com/h2/demo/web/selenium/page/role/RoleSearch$RoleSearchForm.class differ
diff --git a/target/test-classes/com/h2/demo/web/selenium/page/role/RoleSearch$RoleSearchOrders.class b/target/test-classes/com/h2/demo/web/selenium/page/role/RoleSearch$RoleSearchOrders.class
new file mode 100644
index 0000000..f246b15
Binary files /dev/null and b/target/test-classes/com/h2/demo/web/selenium/page/role/RoleSearch$RoleSearchOrders.class differ
diff --git a/target/test-classes/com/h2/demo/web/selenium/page/role/RoleSearch.class b/target/test-classes/com/h2/demo/web/selenium/page/role/RoleSearch.class
new file mode 100644
index 0000000..8c167ad
Binary files /dev/null and b/target/test-classes/com/h2/demo/web/selenium/page/role/RoleSearch.class differ
diff --git a/target/test-classes/com/h2/demo/web/selenium/page/savedsearch/SavedSearchEdit$SavedSearchEditForm.class b/target/test-classes/com/h2/demo/web/selenium/page/savedsearch/SavedSearchEdit$SavedSearchEditForm.class
new file mode 100644
index 0000000..6dc61d1
Binary files /dev/null and b/target/test-classes/com/h2/demo/web/selenium/page/savedsearch/SavedSearchEdit$SavedSearchEditForm.class differ
diff --git a/target/test-classes/com/h2/demo/web/selenium/page/savedsearch/SavedSearchEdit$SavedSearchEditTabs.class b/target/test-classes/com/h2/demo/web/selenium/page/savedsearch/SavedSearchEdit$SavedSearchEditTabs.class
new file mode 100644
index 0000000..4384b05
Binary files /dev/null and b/target/test-classes/com/h2/demo/web/selenium/page/savedsearch/SavedSearchEdit$SavedSearchEditTabs.class differ
diff --git a/target/test-classes/com/h2/demo/web/selenium/page/savedsearch/SavedSearchEdit.class b/target/test-classes/com/h2/demo/web/selenium/page/savedsearch/SavedSearchEdit.class
new file mode 100644
index 0000000..687cfa2
Binary files /dev/null and b/target/test-classes/com/h2/demo/web/selenium/page/savedsearch/SavedSearchEdit.class differ
diff --git a/target/test-classes/com/h2/demo/web/selenium/page/savedsearch/SavedSearchSearch$SavedSearchSearchForm.class b/target/test-classes/com/h2/demo/web/selenium/page/savedsearch/SavedSearchSearch$SavedSearchSearchForm.class
new file mode 100644
index 0000000..461a533
Binary files /dev/null and b/target/test-classes/com/h2/demo/web/selenium/page/savedsearch/SavedSearchSearch$SavedSearchSearchForm.class differ
diff --git a/target/test-classes/com/h2/demo/web/selenium/page/savedsearch/SavedSearchSearch$SavedSearchSearchOrders.class b/target/test-classes/com/h2/demo/web/selenium/page/savedsearch/SavedSearchSearch$SavedSearchSearchOrders.class
new file mode 100644
index 0000000..fe420ec
Binary files /dev/null and b/target/test-classes/com/h2/demo/web/selenium/page/savedsearch/SavedSearchSearch$SavedSearchSearchOrders.class differ
diff --git a/target/test-classes/com/h2/demo/web/selenium/page/savedsearch/SavedSearchSearch.class b/target/test-classes/com/h2/demo/web/selenium/page/savedsearch/SavedSearchSearch.class
new file mode 100644
index 0000000..d9f2495
Binary files /dev/null and b/target/test-classes/com/h2/demo/web/selenium/page/savedsearch/SavedSearchSearch.class differ
diff --git a/target/test-classes/com/h2/demo/web/selenium/support/BrowserDriver$1.class b/target/test-classes/com/h2/demo/web/selenium/support/BrowserDriver$1.class
new file mode 100644
index 0000000..159cb52
Binary files /dev/null and b/target/test-classes/com/h2/demo/web/selenium/support/BrowserDriver$1.class differ
diff --git a/target/test-classes/com/h2/demo/web/selenium/support/BrowserDriver$2.class b/target/test-classes/com/h2/demo/web/selenium/support/BrowserDriver$2.class
new file mode 100644
index 0000000..950a3b3
Binary files /dev/null and b/target/test-classes/com/h2/demo/web/selenium/support/BrowserDriver$2.class differ
diff --git a/target/test-classes/com/h2/demo/web/selenium/support/BrowserDriver$3.class b/target/test-classes/com/h2/demo/web/selenium/support/BrowserDriver$3.class
new file mode 100644
index 0000000..cfc0e6a
Binary files /dev/null and b/target/test-classes/com/h2/demo/web/selenium/support/BrowserDriver$3.class differ
diff --git a/target/test-classes/com/h2/demo/web/selenium/support/BrowserDriver$4.class b/target/test-classes/com/h2/demo/web/selenium/support/BrowserDriver$4.class
new file mode 100644
index 0000000..79fa361
Binary files /dev/null and b/target/test-classes/com/h2/demo/web/selenium/support/BrowserDriver$4.class differ
diff --git a/target/test-classes/com/h2/demo/web/selenium/support/BrowserDriver.class b/target/test-classes/com/h2/demo/web/selenium/support/BrowserDriver.class
new file mode 100644
index 0000000..77f9ec5
Binary files /dev/null and b/target/test-classes/com/h2/demo/web/selenium/support/BrowserDriver.class differ
diff --git a/target/test-classes/com/h2/demo/web/selenium/support/FollowVisually$FollowLevel.class b/target/test-classes/com/h2/demo/web/selenium/support/FollowVisually$FollowLevel.class
new file mode 100644
index 0000000..567d7e4
Binary files /dev/null and b/target/test-classes/com/h2/demo/web/selenium/support/FollowVisually$FollowLevel.class differ
diff --git a/target/test-classes/com/h2/demo/web/selenium/support/FollowVisually.class b/target/test-classes/com/h2/demo/web/selenium/support/FollowVisually.class
new file mode 100644
index 0000000..11e28d6
Binary files /dev/null and b/target/test-classes/com/h2/demo/web/selenium/support/FollowVisually.class differ
diff --git a/target/test-classes/com/h2/demo/web/selenium/support/Highlighter.class b/target/test-classes/com/h2/demo/web/selenium/support/Highlighter.class
new file mode 100644
index 0000000..7ae99ad
Binary files /dev/null and b/target/test-classes/com/h2/demo/web/selenium/support/Highlighter.class differ
diff --git a/target/test-classes/com/h2/demo/web/selenium/support/Page.class b/target/test-classes/com/h2/demo/web/selenium/support/Page.class
new file mode 100644
index 0000000..f77d29c
Binary files /dev/null and b/target/test-classes/com/h2/demo/web/selenium/support/Page.class differ
diff --git a/target/test-classes/com/h2/demo/web/selenium/support/SeleniumTest.class b/target/test-classes/com/h2/demo/web/selenium/support/SeleniumTest.class
new file mode 100644
index 0000000..ba5bb4e
Binary files /dev/null and b/target/test-classes/com/h2/demo/web/selenium/support/SeleniumTest.class differ
diff --git a/target/test-classes/com/h2/demo/web/selenium/support/WebClient$1.class b/target/test-classes/com/h2/demo/web/selenium/support/WebClient$1.class
new file mode 100644
index 0000000..4da5769
Binary files /dev/null and b/target/test-classes/com/h2/demo/web/selenium/support/WebClient$1.class differ
diff --git a/target/test-classes/com/h2/demo/web/selenium/support/WebClient$10.class b/target/test-classes/com/h2/demo/web/selenium/support/WebClient$10.class
new file mode 100644
index 0000000..7aa86c6
Binary files /dev/null and b/target/test-classes/com/h2/demo/web/selenium/support/WebClient$10.class differ
diff --git a/target/test-classes/com/h2/demo/web/selenium/support/WebClient$2.class b/target/test-classes/com/h2/demo/web/selenium/support/WebClient$2.class
new file mode 100644
index 0000000..29c7bc4
Binary files /dev/null and b/target/test-classes/com/h2/demo/web/selenium/support/WebClient$2.class differ
diff --git a/target/test-classes/com/h2/demo/web/selenium/support/WebClient$3.class b/target/test-classes/com/h2/demo/web/selenium/support/WebClient$3.class
new file mode 100644
index 0000000..7c3d740
Binary files /dev/null and b/target/test-classes/com/h2/demo/web/selenium/support/WebClient$3.class differ
diff --git a/target/test-classes/com/h2/demo/web/selenium/support/WebClient$4.class b/target/test-classes/com/h2/demo/web/selenium/support/WebClient$4.class
new file mode 100644
index 0000000..2e13cdf
Binary files /dev/null and b/target/test-classes/com/h2/demo/web/selenium/support/WebClient$4.class differ
diff --git a/target/test-classes/com/h2/demo/web/selenium/support/WebClient$5.class b/target/test-classes/com/h2/demo/web/selenium/support/WebClient$5.class
new file mode 100644
index 0000000..fce6135
Binary files /dev/null and b/target/test-classes/com/h2/demo/web/selenium/support/WebClient$5.class differ
diff --git a/target/test-classes/com/h2/demo/web/selenium/support/WebClient$6.class b/target/test-classes/com/h2/demo/web/selenium/support/WebClient$6.class
new file mode 100644
index 0000000..bbbd1f2
Binary files /dev/null and b/target/test-classes/com/h2/demo/web/selenium/support/WebClient$6.class differ
diff --git a/target/test-classes/com/h2/demo/web/selenium/support/WebClient$7.class b/target/test-classes/com/h2/demo/web/selenium/support/WebClient$7.class
new file mode 100644
index 0000000..fdc2708
Binary files /dev/null and b/target/test-classes/com/h2/demo/web/selenium/support/WebClient$7.class differ
diff --git a/target/test-classes/com/h2/demo/web/selenium/support/WebClient$8.class b/target/test-classes/com/h2/demo/web/selenium/support/WebClient$8.class
new file mode 100644
index 0000000..599693f
Binary files /dev/null and b/target/test-classes/com/h2/demo/web/selenium/support/WebClient$8.class differ
diff --git a/target/test-classes/com/h2/demo/web/selenium/support/WebClient$9.class b/target/test-classes/com/h2/demo/web/selenium/support/WebClient$9.class
new file mode 100644
index 0000000..383d7e3
Binary files /dev/null and b/target/test-classes/com/h2/demo/web/selenium/support/WebClient$9.class differ
diff --git a/target/test-classes/com/h2/demo/web/selenium/support/WebClient.class b/target/test-classes/com/h2/demo/web/selenium/support/WebClient.class
new file mode 100644
index 0000000..9a2f47e
Binary files /dev/null and b/target/test-classes/com/h2/demo/web/selenium/support/WebClient.class differ
diff --git a/target/test-classes/com/h2/demo/web/selenium/support/elements/Autocomplete.class b/target/test-classes/com/h2/demo/web/selenium/support/elements/Autocomplete.class
new file mode 100644
index 0000000..4f09642
Binary files /dev/null and b/target/test-classes/com/h2/demo/web/selenium/support/elements/Autocomplete.class differ
diff --git a/target/test-classes/com/h2/demo/web/selenium/support/elements/Button.class b/target/test-classes/com/h2/demo/web/selenium/support/elements/Button.class
new file mode 100644
index 0000000..e19004f
Binary files /dev/null and b/target/test-classes/com/h2/demo/web/selenium/support/elements/Button.class differ
diff --git a/target/test-classes/com/h2/demo/web/selenium/support/elements/ByCustomWebElement.class b/target/test-classes/com/h2/demo/web/selenium/support/elements/ByCustomWebElement.class
new file mode 100644
index 0000000..7421221
Binary files /dev/null and b/target/test-classes/com/h2/demo/web/selenium/support/elements/ByCustomWebElement.class differ
diff --git a/target/test-classes/com/h2/demo/web/selenium/support/elements/Checkbox.class b/target/test-classes/com/h2/demo/web/selenium/support/elements/Checkbox.class
new file mode 100644
index 0000000..680d003
Binary files /dev/null and b/target/test-classes/com/h2/demo/web/selenium/support/elements/Checkbox.class differ
diff --git a/target/test-classes/com/h2/demo/web/selenium/support/elements/ChooseEnum.class b/target/test-classes/com/h2/demo/web/selenium/support/elements/ChooseEnum.class
new file mode 100644
index 0000000..4a9a4fb
Binary files /dev/null and b/target/test-classes/com/h2/demo/web/selenium/support/elements/ChooseEnum.class differ
diff --git a/target/test-classes/com/h2/demo/web/selenium/support/elements/CustomWebElement.class b/target/test-classes/com/h2/demo/web/selenium/support/elements/CustomWebElement.class
new file mode 100644
index 0000000..54a1b0a
Binary files /dev/null and b/target/test-classes/com/h2/demo/web/selenium/support/elements/CustomWebElement.class differ
diff --git a/target/test-classes/com/h2/demo/web/selenium/support/elements/DateInput.class b/target/test-classes/com/h2/demo/web/selenium/support/elements/DateInput.class
new file mode 100644
index 0000000..977eb98
Binary files /dev/null and b/target/test-classes/com/h2/demo/web/selenium/support/elements/DateInput.class differ
diff --git a/target/test-classes/com/h2/demo/web/selenium/support/elements/DateRange.class b/target/test-classes/com/h2/demo/web/selenium/support/elements/DateRange.class
new file mode 100644
index 0000000..211a7cd
Binary files /dev/null and b/target/test-classes/com/h2/demo/web/selenium/support/elements/DateRange.class differ
diff --git a/target/test-classes/com/h2/demo/web/selenium/support/elements/DateTimeInput.class b/target/test-classes/com/h2/demo/web/selenium/support/elements/DateTimeInput.class
new file mode 100644
index 0000000..d15048a
Binary files /dev/null and b/target/test-classes/com/h2/demo/web/selenium/support/elements/DateTimeInput.class differ
diff --git a/target/test-classes/com/h2/demo/web/selenium/support/elements/DateTimeRange.class b/target/test-classes/com/h2/demo/web/selenium/support/elements/DateTimeRange.class
new file mode 100644
index 0000000..73b4318
Binary files /dev/null and b/target/test-classes/com/h2/demo/web/selenium/support/elements/DateTimeRange.class differ
diff --git a/target/test-classes/com/h2/demo/web/selenium/support/elements/EditAction.class b/target/test-classes/com/h2/demo/web/selenium/support/elements/EditAction.class
new file mode 100644
index 0000000..90d569e
Binary files /dev/null and b/target/test-classes/com/h2/demo/web/selenium/support/elements/EditAction.class differ
diff --git a/target/test-classes/com/h2/demo/web/selenium/support/elements/EntityAction.class b/target/test-classes/com/h2/demo/web/selenium/support/elements/EntityAction.class
new file mode 100644
index 0000000..0fd5e1b
Binary files /dev/null and b/target/test-classes/com/h2/demo/web/selenium/support/elements/EntityAction.class differ
diff --git a/target/test-classes/com/h2/demo/web/selenium/support/elements/Input.class b/target/test-classes/com/h2/demo/web/selenium/support/elements/Input.class
new file mode 100644
index 0000000..f55d614
Binary files /dev/null and b/target/test-classes/com/h2/demo/web/selenium/support/elements/Input.class differ
diff --git a/target/test-classes/com/h2/demo/web/selenium/support/elements/IntegerInput.class b/target/test-classes/com/h2/demo/web/selenium/support/elements/IntegerInput.class
new file mode 100644
index 0000000..9d7681c
Binary files /dev/null and b/target/test-classes/com/h2/demo/web/selenium/support/elements/IntegerInput.class differ
diff --git a/target/test-classes/com/h2/demo/web/selenium/support/elements/Link.class b/target/test-classes/com/h2/demo/web/selenium/support/elements/Link.class
new file mode 100644
index 0000000..a3f36b7
Binary files /dev/null and b/target/test-classes/com/h2/demo/web/selenium/support/elements/Link.class differ
diff --git a/target/test-classes/com/h2/demo/web/selenium/support/elements/ListBox.class b/target/test-classes/com/h2/demo/web/selenium/support/elements/ListBox.class
new file mode 100644
index 0000000..9553b04
Binary files /dev/null and b/target/test-classes/com/h2/demo/web/selenium/support/elements/ListBox.class differ
diff --git a/target/test-classes/com/h2/demo/web/selenium/support/elements/ManyBooleans.class b/target/test-classes/com/h2/demo/web/selenium/support/elements/ManyBooleans.class
new file mode 100644
index 0000000..538ead2
Binary files /dev/null and b/target/test-classes/com/h2/demo/web/selenium/support/elements/ManyBooleans.class differ
diff --git a/target/test-classes/com/h2/demo/web/selenium/support/elements/ManyEnums.class b/target/test-classes/com/h2/demo/web/selenium/support/elements/ManyEnums.class
new file mode 100644
index 0000000..bc87db8
Binary files /dev/null and b/target/test-classes/com/h2/demo/web/selenium/support/elements/ManyEnums.class differ
diff --git a/target/test-classes/com/h2/demo/web/selenium/support/elements/ManyToOne.class b/target/test-classes/com/h2/demo/web/selenium/support/elements/ManyToOne.class
new file mode 100644
index 0000000..b717a47
Binary files /dev/null and b/target/test-classes/com/h2/demo/web/selenium/support/elements/ManyToOne.class differ
diff --git a/target/test-classes/com/h2/demo/web/selenium/support/elements/Messages.class b/target/test-classes/com/h2/demo/web/selenium/support/elements/Messages.class
new file mode 100644
index 0000000..42eb763
Binary files /dev/null and b/target/test-classes/com/h2/demo/web/selenium/support/elements/Messages.class differ
diff --git a/target/test-classes/com/h2/demo/web/selenium/support/elements/NoInverseManyToOne.class b/target/test-classes/com/h2/demo/web/selenium/support/elements/NoInverseManyToOne.class
new file mode 100644
index 0000000..89e6325
Binary files /dev/null and b/target/test-classes/com/h2/demo/web/selenium/support/elements/NoInverseManyToOne.class differ
diff --git a/target/test-classes/com/h2/demo/web/selenium/support/elements/NoInverseOneToOne.class b/target/test-classes/com/h2/demo/web/selenium/support/elements/NoInverseOneToOne.class
new file mode 100644
index 0000000..c6bd3fb
Binary files /dev/null and b/target/test-classes/com/h2/demo/web/selenium/support/elements/NoInverseOneToOne.class differ
diff --git a/target/test-classes/com/h2/demo/web/selenium/support/elements/OneToOne.class b/target/test-classes/com/h2/demo/web/selenium/support/elements/OneToOne.class
new file mode 100644
index 0000000..94a4dca
Binary files /dev/null and b/target/test-classes/com/h2/demo/web/selenium/support/elements/OneToOne.class differ
diff --git a/target/test-classes/com/h2/demo/web/selenium/support/elements/OrderBy$1.class b/target/test-classes/com/h2/demo/web/selenium/support/elements/OrderBy$1.class
new file mode 100644
index 0000000..36e5a30
Binary files /dev/null and b/target/test-classes/com/h2/demo/web/selenium/support/elements/OrderBy$1.class differ
diff --git a/target/test-classes/com/h2/demo/web/selenium/support/elements/OrderBy$2.class b/target/test-classes/com/h2/demo/web/selenium/support/elements/OrderBy$2.class
new file mode 100644
index 0000000..2628015
Binary files /dev/null and b/target/test-classes/com/h2/demo/web/selenium/support/elements/OrderBy$2.class differ
diff --git a/target/test-classes/com/h2/demo/web/selenium/support/elements/OrderBy.class b/target/test-classes/com/h2/demo/web/selenium/support/elements/OrderBy.class
new file mode 100644
index 0000000..68ba00d
Binary files /dev/null and b/target/test-classes/com/h2/demo/web/selenium/support/elements/OrderBy.class differ
diff --git a/target/test-classes/com/h2/demo/web/selenium/support/elements/Paginator.class b/target/test-classes/com/h2/demo/web/selenium/support/elements/Paginator.class
new file mode 100644
index 0000000..e29ecd9
Binary files /dev/null and b/target/test-classes/com/h2/demo/web/selenium/support/elements/Paginator.class differ
diff --git a/target/test-classes/com/h2/demo/web/selenium/support/elements/Range.class b/target/test-classes/com/h2/demo/web/selenium/support/elements/Range.class
new file mode 100644
index 0000000..9f1e561
Binary files /dev/null and b/target/test-classes/com/h2/demo/web/selenium/support/elements/Range.class differ
diff --git a/target/test-classes/com/h2/demo/web/selenium/support/elements/SaveSearch.class b/target/test-classes/com/h2/demo/web/selenium/support/elements/SaveSearch.class
new file mode 100644
index 0000000..9e25052
Binary files /dev/null and b/target/test-classes/com/h2/demo/web/selenium/support/elements/SaveSearch.class differ
diff --git a/target/test-classes/com/h2/demo/web/selenium/support/elements/SearchForm.class b/target/test-classes/com/h2/demo/web/selenium/support/elements/SearchForm.class
new file mode 100644
index 0000000..c225f74
Binary files /dev/null and b/target/test-classes/com/h2/demo/web/selenium/support/elements/SearchForm.class differ
diff --git a/target/test-classes/com/h2/demo/web/selenium/support/elements/StringInput.class b/target/test-classes/com/h2/demo/web/selenium/support/elements/StringInput.class
new file mode 100644
index 0000000..b007c0d
Binary files /dev/null and b/target/test-classes/com/h2/demo/web/selenium/support/elements/StringInput.class differ
diff --git a/target/test-classes/com/h2/demo/web/selenium/support/elements/StringRange.class b/target/test-classes/com/h2/demo/web/selenium/support/elements/StringRange.class
new file mode 100644
index 0000000..ecef64c
Binary files /dev/null and b/target/test-classes/com/h2/demo/web/selenium/support/elements/StringRange.class differ
diff --git a/target/test-classes/com/h2/demo/web/selenium/support/elements/Tab.class b/target/test-classes/com/h2/demo/web/selenium/support/elements/Tab.class
new file mode 100644
index 0000000..aebeeb6
Binary files /dev/null and b/target/test-classes/com/h2/demo/web/selenium/support/elements/Tab.class differ
diff --git a/target/test-classes/com/h2/demo/web/selenium/support/elements/Table.class b/target/test-classes/com/h2/demo/web/selenium/support/elements/Table.class
new file mode 100644
index 0000000..23e19bd
Binary files /dev/null and b/target/test-classes/com/h2/demo/web/selenium/support/elements/Table.class differ
diff --git a/target/test-classes/com/h2/demo/web/selenium/support/elements/Upload.class b/target/test-classes/com/h2/demo/web/selenium/support/elements/Upload.class
new file mode 100644
index 0000000..9f7a6b1
Binary files /dev/null and b/target/test-classes/com/h2/demo/web/selenium/support/elements/Upload.class differ
diff --git a/target/test-classes/com/h2/demo/web/selenium/support/elements/WebElementConfiguration$AnotherFieldDecorator.class b/target/test-classes/com/h2/demo/web/selenium/support/elements/WebElementConfiguration$AnotherFieldDecorator.class
new file mode 100644
index 0000000..99a5e90
Binary files /dev/null and b/target/test-classes/com/h2/demo/web/selenium/support/elements/WebElementConfiguration$AnotherFieldDecorator.class differ
diff --git a/target/test-classes/com/h2/demo/web/selenium/support/elements/WebElementConfiguration.class b/target/test-classes/com/h2/demo/web/selenium/support/elements/WebElementConfiguration.class
new file mode 100644
index 0000000..bd61d46
Binary files /dev/null and b/target/test-classes/com/h2/demo/web/selenium/support/elements/WebElementConfiguration.class differ
diff --git a/target/test-classes/for_upload.txt b/target/test-classes/for_upload.txt
new file mode 100644
index 0000000..dcc2b2a
--- /dev/null
+++ b/target/test-classes/for_upload.txt
@@ -0,0 +1 @@
+to be uploaded
\ No newline at end of file
diff --git a/target/test-classes/no_extension b/target/test-classes/no_extension
new file mode 100644
index 0000000..e466dcb
--- /dev/null
+++ b/target/test-classes/no_extension
@@ -0,0 +1 @@
+invalid
\ No newline at end of file
diff --git a/target/test-classes/spring/applicationContext-test.xml b/target/test-classes/spring/applicationContext-test.xml
new file mode 100644
index 0000000..9cdf0a0
--- /dev/null
+++ b/target/test-classes/spring/applicationContext-test.xml
@@ -0,0 +1,26 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!--
+ ! (c) Copyright 2005-2015 JAXIO, http://www.jaxio.com
+ ! Source code generated by Celerio, a Jaxio product
+ ! Want to purchase Celerio ? email us at info@jaxio.com
+ ! Follow us on twitter: @springfuse
+ ! Documentation: http://www.jaxio.com/documentation/celerio/
+ ! Template pack-backend-jpa:src/test/resources/spring/applicationContext-test.p.vm.xml
+-->
+<beans default-lazy-init="true" xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context" xmlns:jdbc="http://www.springframework.org/schema/jdbc"
+	xsi:schemaLocation="
+			http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
+			http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.2.xsd
+			http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd">
+
+	<!-- The core application context -->
+	<import resource="classpath*:spring/applicationContext.xml" />
+
+	<!-- Simulate part of the web application context (does not apply for backend only project) -->
+	<context:component-scan base-package="com.h2.demo.web" />
+    
+    <!-- Fresh H2 is used for tests. If you want to use the dev database, comment it out -->
+	<jdbc:embedded-database id="dataSource" type="H2">
+		<jdbc:script location="file:./src/main/sql/h2/*.sql" />
+	</jdbc:embedded-database>
+</beans>
\ No newline at end of file
